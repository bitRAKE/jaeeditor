; Listing generated by Microsoft (R) Optimizing Compiler Version 17.00.50727.1 

	TITLE	D:\Desktop\Fasm\Fasm\WndClass.cpp
	.686P
	.XMM
	include listing.inc
	.model	flat

INCLUDELIB MSVCRTD
INCLUDELIB OLDNAMES

PUBLIC	?is_signed@?$numeric_limits@_K@std@@2_NB	; std::numeric_limits<unsigned __int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits
PUBLIC	?digits10@?$numeric_limits@_K@std@@2HB		; std::numeric_limits<unsigned __int64>::digits10
PUBLIC	?digits@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits
PUBLIC	?digits10@?$numeric_limits@M@std@@2HB		; std::numeric_limits<float>::digits10
PUBLIC	?max_digits10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@M@std@@2HB	; std::numeric_limits<float>::min_exponent10
PUBLIC	?digits@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits
PUBLIC	?digits10@?$numeric_limits@N@std@@2HB		; std::numeric_limits<double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::max_exponent10
PUBLIC	?value@?$integral_constant@_N$0A@@std@@2_NB	; std::integral_constant<bool,0>::value
PUBLIC	?min_exponent@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@N@std@@2HB	; std::numeric_limits<double>::min_exponent10
PUBLIC	?value@?$integral_constant@_N$00@std@@2_NB	; std::integral_constant<bool,1>::value
PUBLIC	?digits@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits
PUBLIC	?digits10@?$numeric_limits@O@std@@2HB		; std::numeric_limits<long double>::digits10
PUBLIC	?max_digits10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_digits10
PUBLIC	?max_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent
PUBLIC	?max_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::max_exponent10
PUBLIC	?min_exponent@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent
PUBLIC	?min_exponent10@?$numeric_limits@O@std@@2HB	; std::numeric_limits<long double>::min_exponent10
PUBLIC	?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B ; std::_Num_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_base@std@@2_NB		; std::_Num_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_base@std@@2_NB		; std::_Num_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_base@std@@2_NB		; std::_Num_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_base@std@@2_NB			; std::_Num_base::is_bounded
PUBLIC	?is_exact@_Num_base@std@@2_NB			; std::_Num_base::is_exact
PUBLIC	?is_iec559@_Num_base@std@@2_NB			; std::_Num_base::is_iec559
PUBLIC	?is_integer@_Num_base@std@@2_NB			; std::_Num_base::is_integer
PUBLIC	?is_modulo@_Num_base@std@@2_NB			; std::_Num_base::is_modulo
PUBLIC	?is_signed@_Num_base@std@@2_NB			; std::_Num_base::is_signed
PUBLIC	?is_specialized@_Num_base@std@@2_NB		; std::_Num_base::is_specialized
PUBLIC	?tinyness_before@_Num_base@std@@2_NB		; std::_Num_base::tinyness_before
PUBLIC	?traps@_Num_base@std@@2_NB			; std::_Num_base::traps
PUBLIC	?round_style@_Num_base@std@@2W4float_round_style@2@B ; std::_Num_base::round_style
PUBLIC	?digits@_Num_base@std@@2HB			; std::_Num_base::digits
PUBLIC	?digits10@_Num_base@std@@2HB			; std::_Num_base::digits10
PUBLIC	?max_digits10@_Num_base@std@@2HB		; std::_Num_base::max_digits10
PUBLIC	?max_exponent@_Num_base@std@@2HB		; std::_Num_base::max_exponent
PUBLIC	?max_exponent10@_Num_base@std@@2HB		; std::_Num_base::max_exponent10
PUBLIC	?min_exponent@_Num_base@std@@2HB		; std::_Num_base::min_exponent
PUBLIC	?min_exponent10@_Num_base@std@@2HB		; std::_Num_base::min_exponent10
PUBLIC	?radix@_Num_base@std@@2HB			; std::_Num_base::radix
PUBLIC	?is_bounded@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_bounded
PUBLIC	?is_exact@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_exact
PUBLIC	?is_integer@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_integer
PUBLIC	?is_modulo@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_modulo
PUBLIC	?is_specialized@_Num_int_base@std@@2_NB		; std::_Num_int_base::is_specialized
PUBLIC	?radix@_Num_int_base@std@@2HB			; std::_Num_int_base::radix
PUBLIC	?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B ; std::_Num_float_base::has_denorm
PUBLIC	?has_denorm_loss@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_denorm_loss
PUBLIC	?has_infinity@_Num_float_base@std@@2_NB		; std::_Num_float_base::has_infinity
PUBLIC	?has_quiet_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_quiet_NaN
PUBLIC	?has_signaling_NaN@_Num_float_base@std@@2_NB	; std::_Num_float_base::has_signaling_NaN
PUBLIC	?is_bounded@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_bounded
PUBLIC	?is_exact@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_exact
PUBLIC	?is_iec559@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_iec559
PUBLIC	?is_integer@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_integer
PUBLIC	?is_modulo@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_modulo
PUBLIC	?is_signed@_Num_float_base@std@@2_NB		; std::_Num_float_base::is_signed
PUBLIC	?is_specialized@_Num_float_base@std@@2_NB	; std::_Num_float_base::is_specialized
PUBLIC	?tinyness_before@_Num_float_base@std@@2_NB	; std::_Num_float_base::tinyness_before
PUBLIC	?traps@_Num_float_base@std@@2_NB		; std::_Num_float_base::traps
PUBLIC	?round_style@_Num_float_base@std@@2W4float_round_style@2@B ; std::_Num_float_base::round_style
PUBLIC	?radix@_Num_float_base@std@@2HB			; std::_Num_float_base::radix
PUBLIC	?is_signed@?$numeric_limits@D@std@@2_NB		; std::numeric_limits<char>::is_signed
PUBLIC	?digits@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits
PUBLIC	?digits10@?$numeric_limits@D@std@@2HB		; std::numeric_limits<char>::digits10
PUBLIC	?is_signed@?$numeric_limits@_W@std@@2_NB	; std::numeric_limits<wchar_t>::is_signed
PUBLIC	?digits@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits
PUBLIC	?digits10@?$numeric_limits@_W@std@@2HB		; std::numeric_limits<wchar_t>::digits10
PUBLIC	?is_modulo@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_modulo
PUBLIC	?is_signed@?$numeric_limits@_N@std@@2_NB	; std::numeric_limits<bool>::is_signed
PUBLIC	?digits@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits
PUBLIC	?digits10@?$numeric_limits@_N@std@@2HB		; std::numeric_limits<bool>::digits10
PUBLIC	?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
PUBLIC	?is_signed@?$numeric_limits@C@std@@2_NB		; std::numeric_limits<signed char>::is_signed
PUBLIC	?digits@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits
PUBLIC	?digits10@?$numeric_limits@C@std@@2HB		; std::numeric_limits<signed char>::digits10
PUBLIC	?is_signed@?$numeric_limits@E@std@@2_NB		; std::numeric_limits<unsigned char>::is_signed
PUBLIC	?digits@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits
PUBLIC	?digits10@?$numeric_limits@E@std@@2HB		; std::numeric_limits<unsigned char>::digits10
PUBLIC	?is_signed@?$numeric_limits@F@std@@2_NB		; std::numeric_limits<short>::is_signed
PUBLIC	?digits@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits
PUBLIC	?digits10@?$numeric_limits@F@std@@2HB		; std::numeric_limits<short>::digits10
PUBLIC	?is_signed@?$numeric_limits@G@std@@2_NB		; std::numeric_limits<unsigned short>::is_signed
PUBLIC	?digits@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits
PUBLIC	?digits10@?$numeric_limits@G@std@@2HB		; std::numeric_limits<unsigned short>::digits10
PUBLIC	?is_signed@?$numeric_limits@H@std@@2_NB		; std::numeric_limits<int>::is_signed
PUBLIC	?digits@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits
PUBLIC	?digits10@?$numeric_limits@H@std@@2HB		; std::numeric_limits<int>::digits10
PUBLIC	?is_signed@?$numeric_limits@I@std@@2_NB		; std::numeric_limits<unsigned int>::is_signed
PUBLIC	?digits@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits
PUBLIC	?digits10@?$numeric_limits@I@std@@2HB		; std::numeric_limits<unsigned int>::digits10
PUBLIC	?is_signed@?$numeric_limits@J@std@@2_NB		; std::numeric_limits<long>::is_signed
PUBLIC	?digits@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits
PUBLIC	?digits10@?$numeric_limits@J@std@@2HB		; std::numeric_limits<long>::digits10
PUBLIC	?is_signed@?$numeric_limits@K@std@@2_NB		; std::numeric_limits<unsigned long>::is_signed
PUBLIC	?digits@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits
PUBLIC	?value@?$integral_constant@I$0A@@std@@2IB	; std::integral_constant<unsigned int,0>::value
PUBLIC	?digits10@?$numeric_limits@K@std@@2HB		; std::numeric_limits<unsigned long>::digits10
PUBLIC	?is_signed@?$numeric_limits@_J@std@@2_NB	; std::numeric_limits<__int64>::is_signed
PUBLIC	?digits@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits
PUBLIC	?digits10@?$numeric_limits@_J@std@@2HB		; std::numeric_limits<__int64>::digits10
;	COMDAT ?digits10@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_J@std@@2HB DD 012H		; std::numeric_limits<__int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_J@std@@2HB DD 03fH		; std::numeric_limits<__int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_J@std@@2_NB DB 01H		; std::numeric_limits<__int64>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@K@std@@2HB DD 09H		; std::numeric_limits<unsigned long>::digits10
CONST	ENDS
;	COMDAT ?value@?$integral_constant@I$0A@@std@@2IB
CONST	SEGMENT
?value@?$integral_constant@I$0A@@std@@2IB DD 00H	; std::integral_constant<unsigned int,0>::value
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@K@std@@2HB DD 020H		; std::numeric_limits<unsigned long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@K@std@@2_NB DB 00H		; std::numeric_limits<unsigned long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@J@std@@2HB DD 09H		; std::numeric_limits<long>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@J@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@J@std@@2HB DD 01fH		; std::numeric_limits<long>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@J@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@J@std@@2_NB DB 01H		; std::numeric_limits<long>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@I@std@@2HB DD 09H		; std::numeric_limits<unsigned int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@I@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@I@std@@2HB DD 020H		; std::numeric_limits<unsigned int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@I@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@I@std@@2_NB DB 00H		; std::numeric_limits<unsigned int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@H@std@@2HB DD 09H		; std::numeric_limits<int>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@H@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@H@std@@2HB DD 01fH		; std::numeric_limits<int>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@H@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@H@std@@2_NB DB 01H		; std::numeric_limits<int>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@G@std@@2HB DD 04H		; std::numeric_limits<unsigned short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@G@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@G@std@@2HB DD 010H		; std::numeric_limits<unsigned short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@G@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@G@std@@2_NB DB 00H		; std::numeric_limits<unsigned short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@F@std@@2HB DD 04H		; std::numeric_limits<short>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@F@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@F@std@@2HB DD 0fH		; std::numeric_limits<short>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@F@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@F@std@@2_NB DB 01H		; std::numeric_limits<short>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@E@std@@2HB DD 02H		; std::numeric_limits<unsigned char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@E@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@E@std@@2HB DD 08H		; std::numeric_limits<unsigned char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@E@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@E@std@@2_NB DB 00H		; std::numeric_limits<unsigned char>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@C@std@@2HB DD 02H		; std::numeric_limits<signed char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@C@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@C@std@@2HB DD 07H		; std::numeric_limits<signed char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@C@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@C@std@@2_NB DB 01H		; std::numeric_limits<signed char>::is_signed
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@HU_Nil@std@@U12@U12@U12@U12@U12@U12@@std@@2IB DD 01H ; std::_Sizeof<int,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_N@std@@2HB DD 00H		; std::numeric_limits<bool>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_N@std@@2HB DD 01H		; std::numeric_limits<bool>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@?$numeric_limits@_N@std@@2_NB
CONST	SEGMENT
?is_modulo@?$numeric_limits@_N@std@@2_NB DB 00H		; std::numeric_limits<bool>::is_modulo
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_W@std@@2HB DD 04H		; std::numeric_limits<wchar_t>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_W@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_W@std@@2HB DD 010H		; std::numeric_limits<wchar_t>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_W@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_W@std@@2_NB DB 00H		; std::numeric_limits<wchar_t>::is_signed
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@D@std@@2HB DD 02H		; std::numeric_limits<char>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@D@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@D@std@@2HB DD 07H		; std::numeric_limits<char>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@D@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@D@std@@2_NB DB 01H		; std::numeric_limits<char>::is_signed
CONST	ENDS
;	COMDAT ?radix@_Num_float_base@std@@2HB
CONST	SEGMENT
?radix@_Num_float_base@std@@2HB DD 02H			; std::_Num_float_base::radix
CONST	ENDS
;	COMDAT ?round_style@_Num_float_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_float_base@std@@2W4float_round_style@2@B DD 01H ; std::_Num_float_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_float_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_float_base@std@@2_NB DB 00H			; std::_Num_float_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_float_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_float_base@std@@2_NB DB 00H		; std::_Num_float_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_float_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_float_base@std@@2_NB DB 01H		; std::_Num_float_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_float_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_float_base@std@@2_NB DB 01H	; std::_Num_float_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_float_base@std@@2W4float_denorm_style@2@B DD 01H ; std::_Num_float_base::has_denorm
CONST	ENDS
;	COMDAT ?radix@_Num_int_base@std@@2HB
CONST	SEGMENT
?radix@_Num_int_base@std@@2HB DD 02H			; std::_Num_int_base::radix
CONST	ENDS
;	COMDAT ?is_specialized@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_specialized
CONST	ENDS
;	COMDAT ?is_modulo@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_integer
CONST	ENDS
;	COMDAT ?is_exact@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_int_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_int_base@std@@2_NB DB 01H		; std::_Num_int_base::is_bounded
CONST	ENDS
;	COMDAT ?radix@_Num_base@std@@2HB
CONST	SEGMENT
?radix@_Num_base@std@@2HB DD 00H			; std::_Num_base::radix
CONST	ENDS
;	COMDAT ?min_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?min_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent10@_Num_base@std@@2HB DD 00H		; std::_Num_base::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@_Num_base@std@@2HB
CONST	SEGMENT
?max_exponent@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@_Num_base@std@@2HB
CONST	SEGMENT
?max_digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::max_digits10
CONST	ENDS
;	COMDAT ?digits10@_Num_base@std@@2HB
CONST	SEGMENT
?digits10@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits10
CONST	ENDS
;	COMDAT ?digits@_Num_base@std@@2HB
CONST	SEGMENT
?digits@_Num_base@std@@2HB DD 00H			; std::_Num_base::digits
CONST	ENDS
;	COMDAT ?round_style@_Num_base@std@@2W4float_round_style@2@B
CONST	SEGMENT
?round_style@_Num_base@std@@2W4float_round_style@2@B DD 00H ; std::_Num_base::round_style
CONST	ENDS
;	COMDAT ?traps@_Num_base@std@@2_NB
CONST	SEGMENT
?traps@_Num_base@std@@2_NB DB 00H			; std::_Num_base::traps
CONST	ENDS
;	COMDAT ?tinyness_before@_Num_base@std@@2_NB
CONST	SEGMENT
?tinyness_before@_Num_base@std@@2_NB DB 00H		; std::_Num_base::tinyness_before
CONST	ENDS
;	COMDAT ?is_specialized@_Num_base@std@@2_NB
CONST	SEGMENT
?is_specialized@_Num_base@std@@2_NB DB 00H		; std::_Num_base::is_specialized
CONST	ENDS
;	COMDAT ?is_signed@_Num_base@std@@2_NB
CONST	SEGMENT
?is_signed@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_signed
CONST	ENDS
;	COMDAT ?is_modulo@_Num_base@std@@2_NB
CONST	SEGMENT
?is_modulo@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_modulo
CONST	ENDS
;	COMDAT ?is_integer@_Num_base@std@@2_NB
CONST	SEGMENT
?is_integer@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_integer
CONST	ENDS
;	COMDAT ?is_iec559@_Num_base@std@@2_NB
CONST	SEGMENT
?is_iec559@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_iec559
CONST	ENDS
;	COMDAT ?is_exact@_Num_base@std@@2_NB
CONST	SEGMENT
?is_exact@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_exact
CONST	ENDS
;	COMDAT ?is_bounded@_Num_base@std@@2_NB
CONST	SEGMENT
?is_bounded@_Num_base@std@@2_NB DB 00H			; std::_Num_base::is_bounded
CONST	ENDS
;	COMDAT ?has_signaling_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_signaling_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_signaling_NaN
CONST	ENDS
;	COMDAT ?has_quiet_NaN@_Num_base@std@@2_NB
CONST	SEGMENT
?has_quiet_NaN@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_quiet_NaN
CONST	ENDS
;	COMDAT ?has_infinity@_Num_base@std@@2_NB
CONST	SEGMENT
?has_infinity@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_infinity
CONST	ENDS
;	COMDAT ?has_denorm_loss@_Num_base@std@@2_NB
CONST	SEGMENT
?has_denorm_loss@_Num_base@std@@2_NB DB 00H		; std::_Num_base::has_denorm_loss
CONST	ENDS
;	COMDAT ?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B
CONST	SEGMENT
?has_denorm@_Num_base@std@@2W4float_denorm_style@2@B DD 00H ; std::_Num_base::has_denorm
CONST	ENDS
;	COMDAT ?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB
CONST	SEGMENT
?value@?$_Sizeof@U_Nil@std@@U12@U12@U12@U12@U12@U12@U12@@std@@2IB DD 00H ; std::_Sizeof<std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil,std::_Nil>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@O@std@@2HB DD 0fffffecdH ; std::numeric_limits<long double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@O@std@@2HB DD 0fffffc03H	; std::numeric_limits<long double>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@O@std@@2HB DD 0134H	; std::numeric_limits<long double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@O@std@@2HB DD 0400H	; std::numeric_limits<long double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@O@std@@2HB DD 011H	; std::numeric_limits<long double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@O@std@@2HB DD 0fH		; std::numeric_limits<long double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@O@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@O@std@@2HB DD 035H		; std::numeric_limits<long double>::digits
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$00@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$00@std@@2_NB DB 01H	; std::integral_constant<bool,1>::value
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@N@std@@2HB DD 0fffffecdH ; std::numeric_limits<double>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@N@std@@2HB DD 0fffffc03H	; std::numeric_limits<double>::min_exponent
CONST	ENDS
;	COMDAT ?value@?$integral_constant@_N$0A@@std@@2_NB
CONST	SEGMENT
?value@?$integral_constant@_N$0A@@std@@2_NB DB 00H	; std::integral_constant<bool,0>::value
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@N@std@@2HB DD 0134H	; std::numeric_limits<double>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@N@std@@2HB DD 0400H	; std::numeric_limits<double>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@N@std@@2HB DD 011H	; std::numeric_limits<double>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@N@std@@2HB DD 0fH		; std::numeric_limits<double>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@N@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@N@std@@2HB DD 035H		; std::numeric_limits<double>::digits
CONST	ENDS
;	COMDAT ?min_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent10@?$numeric_limits@M@std@@2HB DD 0ffffffdbH ; std::numeric_limits<float>::min_exponent10
CONST	ENDS
;	COMDAT ?min_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?min_exponent@?$numeric_limits@M@std@@2HB DD 0ffffff83H	; std::numeric_limits<float>::min_exponent
CONST	ENDS
;	COMDAT ?max_exponent10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent10@?$numeric_limits@M@std@@2HB DD 026H	; std::numeric_limits<float>::max_exponent10
CONST	ENDS
;	COMDAT ?max_exponent@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_exponent@?$numeric_limits@M@std@@2HB DD 080H	; std::numeric_limits<float>::max_exponent
CONST	ENDS
;	COMDAT ?max_digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?max_digits10@?$numeric_limits@M@std@@2HB DD 09H	; std::numeric_limits<float>::max_digits10
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@M@std@@2HB DD 06H		; std::numeric_limits<float>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@M@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@M@std@@2HB DD 018H		; std::numeric_limits<float>::digits
CONST	ENDS
;	COMDAT ?digits10@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits10@?$numeric_limits@_K@std@@2HB DD 013H		; std::numeric_limits<unsigned __int64>::digits10
CONST	ENDS
;	COMDAT ?digits@?$numeric_limits@_K@std@@2HB
CONST	SEGMENT
?digits@?$numeric_limits@_K@std@@2HB DD 040H		; std::numeric_limits<unsigned __int64>::digits
CONST	ENDS
;	COMDAT ?is_signed@?$numeric_limits@_K@std@@2_NB
CONST	SEGMENT
?is_signed@?$numeric_limits@_K@std@@2_NB DB 00H		; std::numeric_limits<unsigned __int64>::is_signed
CONST	ENDS
PUBLIC	??0Wnd@@QAE@KPBD0KHHHHPAUHWND__@@PAUHMENU__@@P6GJ1IIJ@Z@Z ; Wnd::Wnd
PUBLIC	?Menu@Wnd@@AAEXXZ				; Wnd::Menu
PUBLIC	?FileOpen@Wnd@@AAEXXZ				; Wnd::FileOpen
PUBLIC	??_C@_04PBAHLACE@File?$AA@			; `string'
PUBLIC	??_C@_0M@GALBPMP@?$CGNew?7Ctrl?$CLN?$AA@	; `string'
PUBLIC	??_C@_0N@LHKOPIOC@?$CGOpen?7Ctrl?$CLO?$AA@	; `string'
PUBLIC	??_C@_0N@HJHPLKPP@?$CGSave?7Ctrl?$CLS?$AA@	; `string'
PUBLIC	??_C@_07NCJKBBP@Save?5as?$AA@			; `string'
PUBLIC	??_C@_0BH@BFMONMOP@?$CGSave?5all?7Ctrl?$CLShift?$CLS?$AA@ ; `string'
PUBLIC	??_C@_05LGELBCGM@Close?$AA@			; `string'
PUBLIC	??_C@_0L@CCDGBMAE@Close?5more?$AA@		; `string'
PUBLIC	??_C@_0BD@BMFLKMBH@Close?5all?5but?5this?$AA@	; `string'
PUBLIC	??_C@_0BG@FMIKDOGJ@Close?5all?5to?5the?5left?$AA@ ; `string'
PUBLIC	??_C@_0BH@COMNFMKL@Close?5all?5to?5the?5right?$AA@ ; `string'
PUBLIC	??_C@_0O@BFLPKHLC@?$CGPrint?7Ctrl?$CLP?$AA@	; `string'
PUBLIC	??_C@_0N@LJNFCFBC@?$CGExit?7Alt?$CLF4?$AA@	; `string'
PUBLIC	??_C@_04BBNPPDNC@Edit?$AA@			; `string'
PUBLIC	??_C@_0N@GCANILNL@?$CGUndo?7Ctrl?$CLZ?$AA@	; `string'
PUBLIC	??_C@_0N@BOJJLGND@?$CGRedo?7Ctrl?$CLY?$AA@	; `string'
PUBLIC	??_C@_0M@MPCEFKDC@?$CGCut?7Ctrl?$CLX?$AA@	; `string'
PUBLIC	??_C@_0N@CKDJKPHG@?$CGCopy?7Ctrl?$CLC?$AA@	; `string'
PUBLIC	??_C@_0O@PPANOEGE@?$CGPaste?7Ctrl?$CLV?$AA@	; `string'
PUBLIC	??_C@_0M@NOAJNEBE@?$CGDelete?7Del?$AA@		; `string'
PUBLIC	??_C@_0BD@CPAHALMP@?$CGSelect?5all?7Ctrl?$CLA?$AA@ ; `string'
PUBLIC	??_C@_0BL@LEDBFEN@?$CGDecrease?5Indent?7Shift?$CLTab?$AA@ ; `string'
PUBLIC	??_C@_0CA@EEKEKFPO@?$CGIncrease?5Indent?7Ctrl?$CLShift?$CLTab?$AA@ ; `string'
PUBLIC	??_C@_0CN@LAHKONJC@?$CGComment?5out?5the?5selected?5lines?7@ ; `string'
PUBLIC	??_C@_0CL@KNIBIEAG@?$CGUncomment?5the?5selected?5lines?7Ct@ ; `string'
PUBLIC	??_C@_0CD@JJJFCJMH@Open?5containing?5folder?5in?5explor@ ; `string'
PUBLIC	??_C@_06KKEGOPHO@Search?$AA@			; `string'
PUBLIC	??_C@_0N@EDLAPCBN@?$CGFind?7Ctrl?$CLF?$AA@	; `string'
PUBLIC	??_C@_0BP@GFALHAFP@?$CGFind?5and?5replace?7Ctrl?$CLShift?$CLF?$AA@ ; `string'
PUBLIC	??_C@_03BGPLALFI@Run?$AA@			; `string'
PUBLIC	??_C@_07GLPINFMF@?$CGRun?7F9?$AA@		; `string'
PUBLIC	??_C@_0BB@PDLBLEHO@?$CGCompile?7Ctrl?$CLF9?$AA@	; `string'
PUBLIC	??_C@_09BEAEIAPD@Bookmarks?$AA@			; `string'
PUBLIC	??_C@_0CG@PFMHEMFC@Toggle?5a?5bookmark?5on?5the?5current@ ; `string'
PUBLIC	??_C@_0CI@BJCMODKO@Move?5the?5caret?5to?5the?5previous?5b@ ; `string'
PUBLIC	??_C@_0CE@LFBIKFFA@Move?5the?5caret?5to?5the?5next?5bookm@ ; `string'
PUBLIC	??_C@_0CB@PCAKLOLD@Clear?5all?5bookmarks?5in?5all?5files@ ; `string'
PUBLIC	??_C@_0CI@DHNKEGCA@Clear?5all?5bookmarks?5in?5the?5curre@ ; `string'
PUBLIC	??_C@_08KJMBPHGD@Examples?$AA@			; `string'
PUBLIC	??_C@_0BA@KAGPLLIB@HELLO?5WORLD?5?$CI1?$CJ?$AA@	; `string'
PUBLIC	??_C@_0BA@KCCJAFNI@HELLO?5WORLD?5?$CI2?$CJ?$AA@	; `string'
PUBLIC	??_C@_04EJPINLDJ@BEER?$AA@			; `string'
PUBLIC	??_C@_05JCCBADOC@DDRAW?$AA@			; `string'
PUBLIC	??_C@_06IKCPKPAM@DIALOG?$AA@			; `string'
PUBLIC	??_C@_03OPIBJLCE@DLL?$AA@			; `string'
PUBLIC	??_C@_07LHCHPEHA@MINIPAD?$AA@			; `string'
PUBLIC	??_C@_06MDEFDNGC@MSCOFF?$AA@			; `string'
PUBLIC	??_C@_06BOJPEOJN@OPENGL?$AA@			; `string'
PUBLIC	??_C@_06BAMJEJDG@PEDEMO?$AA@			; `string'
PUBLIC	??_C@_08CGHHJMNA@TEMPLATE?$AA@			; `string'
PUBLIC	??_C@_06LOMHEHJH@USECOM?$AA@			; `string'
PUBLIC	??_C@_05OKFCBJPA@WIN64?$AA@			; `string'
PUBLIC	??_C@_06FKGDILJB@MANDEL?$AA@			; `string'
PUBLIC	??_C@_08FAJLKIKC@PE64DEMO?$AA@			; `string'
PUBLIC	??_C@_04DDFEFHOJ@Help?$AA@			; `string'
PUBLIC	??_C@_05BDOHFCKE@About?$AA@			; `string'
PUBLIC	??_C@_0BI@NICDCOKM@Add?5to?5the?5current?5page?$AA@ ; `string'
PUBLIC	??_C@_0BN@NPLKPGPE@Delete?5from?5the?5current?5page?$AA@ ; `string'
PUBLIC	??_C@_05FGKNJMMO@Go?5to?$AA@			; `string'
PUBLIC	??_C@_06LMAGPFNF@Update?$AA@			; `string'
PUBLIC	??_C@_03ILBCOJBH@New?$AA@			; `string'
PUBLIC	??_C@_04DNCDCIAE@Open?$AA@			; `string'
PUBLIC	??_C@_04INACKGJP@Save?$AA@			; `string'
PUBLIC	??_C@_0BE@OBHAEHNI@All?$AA?$CK?4?$CK?$AAText?$AA?$CK?4TXT?$AA?$AA@ ; `string'
PUBLIC	??_C@_0N@IEHPLNDL@FRM_TEXTEDIT?$AA@		; `string'
EXTRN	_memset:PROC
EXTRN	__imp__GetModuleHandleA@4:PROC
EXTRN	__imp__lstrcmpiA@8:PROC
EXTRN	__imp__CreateSolidBrush@4:PROC
EXTRN	__imp__RegisterClassExA@4:PROC
EXTRN	__imp__CreateWindowExA@48:PROC
EXTRN	__imp__ShowWindow@8:PROC
EXTRN	__imp__SetMenu@8:PROC
EXTRN	__imp__CreateMenu@0:PROC
EXTRN	__imp__CreatePopupMenu@0:PROC
EXTRN	__imp__AppendMenuA@16:PROC
EXTRN	__imp__SetMenuItemBitmaps@20:PROC
EXTRN	__imp__UpdateWindow@4:PROC
EXTRN	__imp__LoadBitmapA@8:PROC
EXTRN	__imp__LoadCursorA@8:PROC
EXTRN	__imp__LoadIconA@8:PROC
EXTRN	@_RTC_CheckStackVars@8:PROC
EXTRN	__RTC_CheckEsp:PROC
EXTRN	__RTC_InitBase:PROC
EXTRN	__RTC_Shutdown:PROC
_BSS	SEGMENT
_piecewise_construct DB 01H DUP (?)
_allocator_arg DB 01H DUP (?)
_BSS	ENDS
CRT$XCU	SEGMENT
_piecewise_construct$initializer$ DD FLAT:??__Epiecewise_construct@std@@YAXXZ
CRT$XCU	ENDS
;	COMDAT rtc$TMZ
rtc$TMZ	SEGMENT
__RTC_Shutdown.rtc$TMZ DD FLAT:__RTC_Shutdown
rtc$TMZ	ENDS
;	COMDAT rtc$IMZ
rtc$IMZ	SEGMENT
__RTC_InitBase.rtc$IMZ DD FLAT:__RTC_InitBase
rtc$IMZ	ENDS
;	COMDAT ??_C@_0N@IEHPLNDL@FRM_TEXTEDIT?$AA@
CONST	SEGMENT
??_C@_0N@IEHPLNDL@FRM_TEXTEDIT?$AA@ DB 'FRM_TEXTEDIT', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BE@OBHAEHNI@All?$AA?$CK?4?$CK?$AAText?$AA?$CK?4TXT?$AA?$AA@
CONST	SEGMENT
??_C@_0BE@OBHAEHNI@All?$AA?$CK?4?$CK?$AAText?$AA?$CK?4TXT?$AA?$AA@ DB 'Al'
	DB	'l', 00H, '*.*', 00H, 'Text', 00H, '*.TXT', 00H, 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04INACKGJP@Save?$AA@
CONST	SEGMENT
??_C@_04INACKGJP@Save?$AA@ DB 'Save', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DNCDCIAE@Open?$AA@
CONST	SEGMENT
??_C@_04DNCDCIAE@Open?$AA@ DB 'Open', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03ILBCOJBH@New?$AA@
CONST	SEGMENT
??_C@_03ILBCOJBH@New?$AA@ DB 'New', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06LMAGPFNF@Update?$AA@
CONST	SEGMENT
??_C@_06LMAGPFNF@Update?$AA@ DB 'Update', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05FGKNJMMO@Go?5to?$AA@
CONST	SEGMENT
??_C@_05FGKNJMMO@Go?5to?$AA@ DB 'Go to', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BN@NPLKPGPE@Delete?5from?5the?5current?5page?$AA@
CONST	SEGMENT
??_C@_0BN@NPLKPGPE@Delete?5from?5the?5current?5page?$AA@ DB 'Delete from '
	DB	'the current page', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BI@NICDCOKM@Add?5to?5the?5current?5page?$AA@
CONST	SEGMENT
??_C@_0BI@NICDCOKM@Add?5to?5the?5current?5page?$AA@ DB 'Add to the curren'
	DB	't page', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_05BDOHFCKE@About?$AA@
CONST	SEGMENT
??_C@_05BDOHFCKE@About?$AA@ DB 'About', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04DDFEFHOJ@Help?$AA@
CONST	SEGMENT
??_C@_04DDFEFHOJ@Help?$AA@ DB 'Help', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08FAJLKIKC@PE64DEMO?$AA@
CONST	SEGMENT
??_C@_08FAJLKIKC@PE64DEMO?$AA@ DB 'PE64DEMO', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06FKGDILJB@MANDEL?$AA@
CONST	SEGMENT
??_C@_06FKGDILJB@MANDEL?$AA@ DB 'MANDEL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05OKFCBJPA@WIN64?$AA@
CONST	SEGMENT
??_C@_05OKFCBJPA@WIN64?$AA@ DB 'WIN64', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06LOMHEHJH@USECOM?$AA@
CONST	SEGMENT
??_C@_06LOMHEHJH@USECOM?$AA@ DB 'USECOM', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_08CGHHJMNA@TEMPLATE?$AA@
CONST	SEGMENT
??_C@_08CGHHJMNA@TEMPLATE?$AA@ DB 'TEMPLATE', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_06BAMJEJDG@PEDEMO?$AA@
CONST	SEGMENT
??_C@_06BAMJEJDG@PEDEMO?$AA@ DB 'PEDEMO', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06BOJPEOJN@OPENGL?$AA@
CONST	SEGMENT
??_C@_06BOJPEOJN@OPENGL?$AA@ DB 'OPENGL', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_06MDEFDNGC@MSCOFF?$AA@
CONST	SEGMENT
??_C@_06MDEFDNGC@MSCOFF?$AA@ DB 'MSCOFF', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_07LHCHPEHA@MINIPAD?$AA@
CONST	SEGMENT
??_C@_07LHCHPEHA@MINIPAD?$AA@ DB 'MINIPAD', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_03OPIBJLCE@DLL?$AA@
CONST	SEGMENT
??_C@_03OPIBJLCE@DLL?$AA@ DB 'DLL', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_06IKCPKPAM@DIALOG?$AA@
CONST	SEGMENT
??_C@_06IKCPKPAM@DIALOG?$AA@ DB 'DIALOG', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_05JCCBADOC@DDRAW?$AA@
CONST	SEGMENT
??_C@_05JCCBADOC@DDRAW?$AA@ DB 'DDRAW', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_04EJPINLDJ@BEER?$AA@
CONST	SEGMENT
??_C@_04EJPINLDJ@BEER?$AA@ DB 'BEER', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KCCJAFNI@HELLO?5WORLD?5?$CI2?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@KCCJAFNI@HELLO?5WORLD?5?$CI2?$CJ?$AA@ DB 'HELLO WORLD (2)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BA@KAGPLLIB@HELLO?5WORLD?5?$CI1?$CJ?$AA@
CONST	SEGMENT
??_C@_0BA@KAGPLLIB@HELLO?5WORLD?5?$CI1?$CJ?$AA@ DB 'HELLO WORLD (1)', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_08KJMBPHGD@Examples?$AA@
CONST	SEGMENT
??_C@_08KJMBPHGD@Examples?$AA@ DB 'Examples', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@DHNKEGCA@Clear?5all?5bookmarks?5in?5the?5curre@
CONST	SEGMENT
??_C@_0CI@DHNKEGCA@Clear?5all?5bookmarks?5in?5the?5curre@ DB 'Clear all b'
	DB	'ookmarks in the current file', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CB@PCAKLOLD@Clear?5all?5bookmarks?5in?5all?5files@
CONST	SEGMENT
??_C@_0CB@PCAKLOLD@Clear?5all?5bookmarks?5in?5all?5files@ DB 'Clear all b'
	DB	'ookmarks in all files', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0CE@LFBIKFFA@Move?5the?5caret?5to?5the?5next?5bookm@
CONST	SEGMENT
??_C@_0CE@LFBIKFFA@Move?5the?5caret?5to?5the?5next?5bookm@ DB 'Move the c'
	DB	'aret to the next bookmark', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CI@BJCMODKO@Move?5the?5caret?5to?5the?5previous?5b@
CONST	SEGMENT
??_C@_0CI@BJCMODKO@Move?5the?5caret?5to?5the?5previous?5b@ DB 'Move the c'
	DB	'aret to the previous bookmark', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CG@PFMHEMFC@Toggle?5a?5bookmark?5on?5the?5current@
CONST	SEGMENT
??_C@_0CG@PFMHEMFC@Toggle?5a?5bookmark?5on?5the?5current@ DB 'Toggle a bo'
	DB	'okmark on the current line', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_09BEAEIAPD@Bookmarks?$AA@
CONST	SEGMENT
??_C@_09BEAEIAPD@Bookmarks?$AA@ DB 'Bookmarks', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BB@PDLBLEHO@?$CGCompile?7Ctrl?$CLF9?$AA@
CONST	SEGMENT
??_C@_0BB@PDLBLEHO@?$CGCompile?7Ctrl?$CLF9?$AA@ DB '&Compile', 09H, 'Ctrl'
	DB	'+F9', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_07GLPINFMF@?$CGRun?7F9?$AA@
CONST	SEGMENT
??_C@_07GLPINFMF@?$CGRun?7F9?$AA@ DB '&Run', 09H, 'F9', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_03BGPLALFI@Run?$AA@
CONST	SEGMENT
??_C@_03BGPLALFI@Run?$AA@ DB 'Run', 00H			; `string'
CONST	ENDS
;	COMDAT ??_C@_0BP@GFALHAFP@?$CGFind?5and?5replace?7Ctrl?$CLShift?$CLF?$AA@
CONST	SEGMENT
??_C@_0BP@GFALHAFP@?$CGFind?5and?5replace?7Ctrl?$CLShift?$CLF?$AA@ DB '&F'
	DB	'ind and replace', 09H, 'Ctrl+Shift+F', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@EDLAPCBN@?$CGFind?7Ctrl?$CLF?$AA@
CONST	SEGMENT
??_C@_0N@EDLAPCBN@?$CGFind?7Ctrl?$CLF?$AA@ DB '&Find', 09H, 'Ctrl+F', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_06KKEGOPHO@Search?$AA@
CONST	SEGMENT
??_C@_06KKEGOPHO@Search?$AA@ DB 'Search', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CD@JJJFCJMH@Open?5containing?5folder?5in?5explor@
CONST	SEGMENT
??_C@_0CD@JJJFCJMH@Open?5containing?5folder?5in?5explor@ DB 'Open contain'
	DB	'ing folder in explorer', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0CL@KNIBIEAG@?$CGUncomment?5the?5selected?5lines?7Ct@
CONST	SEGMENT
??_C@_0CL@KNIBIEAG@?$CGUncomment?5the?5selected?5lines?7Ct@ DB '&Uncommen'
	DB	't the selected lines', 09H, 'Ctrl+Shift+X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CN@LAHKONJC@?$CGComment?5out?5the?5selected?5lines?7@
CONST	SEGMENT
??_C@_0CN@LAHKONJC@?$CGComment?5out?5the?5selected?5lines?7@ DB '&Comment'
	DB	' out the selected lines', 09H, 'Ctrl+Shift+C', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0CA@EEKEKFPO@?$CGIncrease?5Indent?7Ctrl?$CLShift?$CLTab?$AA@
CONST	SEGMENT
??_C@_0CA@EEKEKFPO@?$CGIncrease?5Indent?7Ctrl?$CLShift?$CLTab?$AA@ DB '&I'
	DB	'ncrease Indent', 09H, 'Ctrl+Shift+Tab', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_0BL@LEDBFEN@?$CGDecrease?5Indent?7Shift?$CLTab?$AA@
CONST	SEGMENT
??_C@_0BL@LEDBFEN@?$CGDecrease?5Indent?7Shift?$CLTab?$AA@ DB '&Decrease I'
	DB	'ndent', 09H, 'Shift+Tab', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@CPAHALMP@?$CGSelect?5all?7Ctrl?$CLA?$AA@
CONST	SEGMENT
??_C@_0BD@CPAHALMP@?$CGSelect?5all?7Ctrl?$CLA?$AA@ DB '&Select all', 09H, 'C'
	DB	'trl+A', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@NOAJNEBE@?$CGDelete?7Del?$AA@
CONST	SEGMENT
??_C@_0M@NOAJNEBE@?$CGDelete?7Del?$AA@ DB '&Delete', 09H, 'Del', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@PPANOEGE@?$CGPaste?7Ctrl?$CLV?$AA@
CONST	SEGMENT
??_C@_0O@PPANOEGE@?$CGPaste?7Ctrl?$CLV?$AA@ DB '&Paste', 09H, 'Ctrl+V', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@CKDJKPHG@?$CGCopy?7Ctrl?$CLC?$AA@
CONST	SEGMENT
??_C@_0N@CKDJKPHG@?$CGCopy?7Ctrl?$CLC?$AA@ DB '&Copy', 09H, 'Ctrl+C', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@MPCEFKDC@?$CGCut?7Ctrl?$CLX?$AA@
CONST	SEGMENT
??_C@_0M@MPCEFKDC@?$CGCut?7Ctrl?$CLX?$AA@ DB '&Cut', 09H, 'Ctrl+X', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@BOJJLGND@?$CGRedo?7Ctrl?$CLY?$AA@
CONST	SEGMENT
??_C@_0N@BOJJLGND@?$CGRedo?7Ctrl?$CLY?$AA@ DB '&Redo', 09H, 'Ctrl+Y', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@GCANILNL@?$CGUndo?7Ctrl?$CLZ?$AA@
CONST	SEGMENT
??_C@_0N@GCANILNL@?$CGUndo?7Ctrl?$CLZ?$AA@ DB '&Undo', 09H, 'Ctrl+Z', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04BBNPPDNC@Edit?$AA@
CONST	SEGMENT
??_C@_04BBNPPDNC@Edit?$AA@ DB 'Edit', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LJNFCFBC@?$CGExit?7Alt?$CLF4?$AA@
CONST	SEGMENT
??_C@_0N@LJNFCFBC@?$CGExit?7Alt?$CLF4?$AA@ DB '&Exit', 09H, 'Alt+F4', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0O@BFLPKHLC@?$CGPrint?7Ctrl?$CLP?$AA@
CONST	SEGMENT
??_C@_0O@BFLPKHLC@?$CGPrint?7Ctrl?$CLP?$AA@ DB '&Print', 09H, 'Ctrl+P', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@COMNFMKL@Close?5all?5to?5the?5right?$AA@
CONST	SEGMENT
??_C@_0BH@COMNFMKL@Close?5all?5to?5the?5right?$AA@ DB 'Close all to the r'
	DB	'ight', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BG@FMIKDOGJ@Close?5all?5to?5the?5left?$AA@
CONST	SEGMENT
??_C@_0BG@FMIKDOGJ@Close?5all?5to?5the?5left?$AA@ DB 'Close all to the le'
	DB	'ft', 00H					; `string'
CONST	ENDS
;	COMDAT ??_C@_0BD@BMFLKMBH@Close?5all?5but?5this?$AA@
CONST	SEGMENT
??_C@_0BD@BMFLKMBH@Close?5all?5but?5this?$AA@ DB 'Close all but this', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0L@CCDGBMAE@Close?5more?$AA@
CONST	SEGMENT
??_C@_0L@CCDGBMAE@Close?5more?$AA@ DB 'Close more', 00H	; `string'
CONST	ENDS
;	COMDAT ??_C@_05LGELBCGM@Close?$AA@
CONST	SEGMENT
??_C@_05LGELBCGM@Close?$AA@ DB 'Close', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0BH@BFMONMOP@?$CGSave?5all?7Ctrl?$CLShift?$CLS?$AA@
CONST	SEGMENT
??_C@_0BH@BFMONMOP@?$CGSave?5all?7Ctrl?$CLShift?$CLS?$AA@ DB '&Save all', 09H
	DB	'Ctrl+Shift+S', 00H				; `string'
CONST	ENDS
;	COMDAT ??_C@_07NCJKBBP@Save?5as?$AA@
CONST	SEGMENT
??_C@_07NCJKBBP@Save?5as?$AA@ DB 'Save as', 00H		; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@HJHPLKPP@?$CGSave?7Ctrl?$CLS?$AA@
CONST	SEGMENT
??_C@_0N@HJHPLKPP@?$CGSave?7Ctrl?$CLS?$AA@ DB '&Save', 09H, 'Ctrl+S', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0N@LHKOPIOC@?$CGOpen?7Ctrl?$CLO?$AA@
CONST	SEGMENT
??_C@_0N@LHKOPIOC@?$CGOpen?7Ctrl?$CLO?$AA@ DB '&Open', 09H, 'Ctrl+O', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_0M@GALBPMP@?$CGNew?7Ctrl?$CLN?$AA@
CONST	SEGMENT
??_C@_0M@GALBPMP@?$CGNew?7Ctrl?$CLN?$AA@ DB '&New', 09H, 'Ctrl+N', 00H ; `string'
CONST	ENDS
;	COMDAT ??_C@_04PBAHLACE@File?$AA@
CONST	SEGMENT
??_C@_04PBAHLACE@File?$AA@ DB 'File', 00H		; `string'
CONST	ENDS
CRT$XCU	SEGMENT
_allocator_arg$initializer$ DD FLAT:??__Eallocator_arg@std@@YAXXZ
CRT$XCU	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\desktop\fasm\fasm\wndclass.h
;	COMDAT ?FileOpen@Wnd@@AAEXXZ
_TEXT	SEGMENT
_this$ = -8						; size = 4
?FileOpen@Wnd@@AAEXXZ PROC				; Wnd::FileOpen, COMDAT
; _this$ = ecx

; 297  : 	{

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00013	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 298  : 		ZeroMemory(&ofn, sizeof(ofn)); 

  00023	6a 58		 push	 88			; 00000058H
  00025	6a 00		 push	 0
  00027	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0002a	50		 push	 eax
  0002b	e8 00 00 00 00	 call	 _memset
  00030	83 c4 0c	 add	 esp, 12			; 0000000cH

; 299  : 		ofn.lStructSize		= sizeof(ofn);

  00033	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00036	c7 00 58 00 00
	00		 mov	 DWORD PTR [eax], 88	; 00000058H

; 300  : 		ofn.hwndOwner		= hWnd;

  0003c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0003f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00042	8b 91 64 01 00
	00		 mov	 edx, DWORD PTR [ecx+356]
  00048	89 50 04	 mov	 DWORD PTR [eax+4], edx

; 301  : 		ofn.lpstrFile		= szFile;

  0004b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0004e	83 c0 60	 add	 eax, 96			; 00000060H
  00051	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00054	89 41 1c	 mov	 DWORD PTR [ecx+28], eax

; 302  : 		ofn.lpstrFile[0]	= '\0';

  00057	b8 01 00 00 00	 mov	 eax, 1
  0005c	6b c0 00	 imul	 eax, 0
  0005f	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00062	8b 51 1c	 mov	 edx, DWORD PTR [ecx+28]
  00065	c6 04 10 00	 mov	 BYTE PTR [eax+edx], 0

; 303  : 		ofn.nMaxFile		= sizeof(szFile);

  00069	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0006c	c7 40 20 04 01
	00 00		 mov	 DWORD PTR [eax+32], 260	; 00000104H

; 304  : 		ofn.lpstrFilter		= "All\0*.*\0Text\0*.TXT\0";

  00073	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00076	c7 40 0c 00 00
	00 00		 mov	 DWORD PTR [eax+12], OFFSET ??_C@_0BE@OBHAEHNI@All?$AA?$CK?4?$CK?$AAText?$AA?$CK?4TXT?$AA?$AA@

; 305  : 		ofn.nFilterIndex	= 1;

  0007d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00080	c7 40 18 01 00
	00 00		 mov	 DWORD PTR [eax+24], 1

; 306  : 		ofn.lpstrFileTitle	= NULL;

  00087	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0008a	c7 40 24 00 00
	00 00		 mov	 DWORD PTR [eax+36], 0

; 307  : 		ofn.nMaxFileTitle	= 0;

  00091	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00094	c7 40 28 00 00
	00 00		 mov	 DWORD PTR [eax+40], 0

; 308  : 		ofn.lpstrInitialDir = NULL;

  0009b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0009e	c7 40 2c 00 00
	00 00		 mov	 DWORD PTR [eax+44], 0

; 309  : 		ofn.Flags			= OFN_PATHMUSTEXIST | OFN_FILEMUSTEXIST;

  000a5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a8	c7 40 34 00 18
	00 00		 mov	 DWORD PTR [eax+52], 6144 ; 00001800H

; 310  : 	}

  000af	5f		 pop	 edi
  000b0	5e		 pop	 esi
  000b1	5b		 pop	 ebx
  000b2	81 c4 cc 00 00
	00		 add	 esp, 204		; 000000ccH
  000b8	3b ec		 cmp	 ebp, esp
  000ba	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000bf	8b e5		 mov	 esp, ebp
  000c1	5d		 pop	 ebp
  000c2	c3		 ret	 0
?FileOpen@Wnd@@AAEXXZ ENDP				; Wnd::FileOpen
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\desktop\fasm\fasm\wndclass.h
;	COMDAT ?Menu@Wnd@@AAEXXZ
_TEXT	SEGMENT
_hTreeViewBMP_4$ = -356					; size = 4
_hTreeViewBMP_3$ = -344					; size = 4
_hTreeViewBMP_2$ = -332					; size = 4
_hTreeViewBMP$ = -320					; size = 4
_hFile3$ = -308						; size = 4
_hClear$ = -296						; size = 4
_hClearAll$ = -284					; size = 4
_hNext$ = -272						; size = 4
_hPrev$ = -260						; size = 4
_hToggle$ = -248					; size = 4
_hbmpCompile$ = -236					; size = 4
_hbmpRun$ = -224					; size = 4
_hbmpUnCom$ = -212					; size = 4
_hbmpCom$ = -200					; size = 4
_hbmpInc$ = -188					; size = 4
_hbmpDec$ = -176					; size = 4
_hbmpPaste$ = -164					; size = 4
_hbmpCopy$ = -152					; size = 4
_hbmpCut$ = -140					; size = 4
_hbmpRedo$ = -128					; size = 4
_hbmpUndo$ = -116					; size = 4
_hbmpExit$ = -104					; size = 4
_hbmpPrint$ = -92					; size = 4
_hFileCloseMore$ = -80					; size = 4
_hbmpSaveAs$ = -68					; size = 4
_hbmpSave$ = -56					; size = 4
_hbmpOpen$ = -44					; size = 4
_hbmpNew$ = -32						; size = 4
_hMod$ = -20						; size = 4
_this$ = -8						; size = 4
?Menu@Wnd@@AAEXXZ PROC					; Wnd::Menu, COMDAT
; _this$ = ecx

; 116  : 	{ 

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 28 02 00
	00		 sub	 esp, 552		; 00000228H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd d8 fd ff
	ff		 lea	 edi, DWORD PTR [ebp-552]
  00013	b9 8a 00 00 00	 mov	 ecx, 138		; 0000008aH
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 117  : 		HMODULE hMod = GetModuleHandle(NULL);

  00023	8b f4		 mov	 esi, esp
  00025	6a 00		 push	 0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	89 45 ec	 mov	 DWORD PTR _hMod$[ebp], eax

; 118  : 		hMenu = CreateMenu();

  00037	8b f4		 mov	 esi, esp
  00039	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateMenu@0
  0003f	3b f4		 cmp	 esi, esp
  00041	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00046	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00049	89 81 70 01 00
	00		 mov	 DWORD PTR [ecx+368], eax

; 119  : 		/* File */
; 120  : 		hFileMenu = CreatePopupMenu(); 

  0004f	8b f4		 mov	 esi, esp
  00051	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00057	3b f4		 cmp	 esi, esp
  00059	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0005e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00061	89 81 78 01 00
	00		 mov	 DWORD PTR [ecx+376], eax

; 121  : 		AppendMenu(hMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hFileMenu, "File");

  00067	8b f4		 mov	 esi, esp
  00069	68 00 00 00 00	 push	 OFFSET ??_C@_04PBAHLACE@File?$AA@
  0006e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00071	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00077	51		 push	 ecx
  00078	6a 10		 push	 16			; 00000010H
  0007a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0007d	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  00083	50		 push	 eax
  00084	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0008a	3b f4		 cmp	 esi, esp
  0008c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 122  : 		AppendMenu(hFileMenu, MF_STRING, ID_NEW, "&New\tCtrl+N");

  00091	8b f4		 mov	 esi, esp
  00093	68 00 00 00 00	 push	 OFFSET ??_C@_0M@GALBPMP@?$CGNew?7Ctrl?$CLN?$AA@
  00098	68 09 10 00 00	 push	 4105			; 00001009H
  0009d	6a 00		 push	 0
  0009f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  000a2	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  000a8	51		 push	 ecx
  000a9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  000af	3b f4		 cmp	 esi, esp
  000b1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 123  : 			HBITMAP hbmpNew = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP7);

  000b6	8b f4		 mov	 esi, esp
  000b8	68 80 00 00 00	 push	 128			; 00000080H
  000bd	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  000c0	50		 push	 eax
  000c1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  000c7	3b f4		 cmp	 esi, esp
  000c9	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000ce	89 45 e0	 mov	 DWORD PTR _hbmpNew$[ebp], eax

; 124  : 			SetMenuItemBitmaps(hFileMenu, ID_NEW, MF_BYCOMMAND, hbmpNew, hbmpNew);

  000d1	8b f4		 mov	 esi, esp
  000d3	8b 45 e0	 mov	 eax, DWORD PTR _hbmpNew$[ebp]
  000d6	50		 push	 eax
  000d7	8b 4d e0	 mov	 ecx, DWORD PTR _hbmpNew$[ebp]
  000da	51		 push	 ecx
  000db	6a 00		 push	 0
  000dd	68 09 10 00 00	 push	 4105			; 00001009H
  000e2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  000e5	8b 82 78 01 00
	00		 mov	 eax, DWORD PTR [edx+376]
  000eb	50		 push	 eax
  000ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  000f2	3b f4		 cmp	 esi, esp
  000f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 125  : 		AppendMenu(hFileMenu, MF_STRING, ID_FILE_OPEN, "&Open\tCtrl+O");

  000f9	8b f4		 mov	 esi, esp
  000fb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LHKOPIOC@?$CGOpen?7Ctrl?$CLO?$AA@
  00100	68 05 10 00 00	 push	 4101			; 00001005H
  00105	6a 00		 push	 0
  00107	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0010a	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00110	51		 push	 ecx
  00111	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00117	3b f4		 cmp	 esi, esp
  00119	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 126  : 			HBITMAP hbmpOpen = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP44);

  0011e	8b f4		 mov	 esi, esp
  00120	68 c0 00 00 00	 push	 192			; 000000c0H
  00125	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00128	50		 push	 eax
  00129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  0012f	3b f4		 cmp	 esi, esp
  00131	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00136	89 45 d4	 mov	 DWORD PTR _hbmpOpen$[ebp], eax

; 127  : 			SetMenuItemBitmaps(hFileMenu, ID_FILE_OPEN, MF_BYCOMMAND, hbmpOpen, hbmpOpen);

  00139	8b f4		 mov	 esi, esp
  0013b	8b 45 d4	 mov	 eax, DWORD PTR _hbmpOpen$[ebp]
  0013e	50		 push	 eax
  0013f	8b 4d d4	 mov	 ecx, DWORD PTR _hbmpOpen$[ebp]
  00142	51		 push	 ecx
  00143	6a 00		 push	 0
  00145	68 05 10 00 00	 push	 4101			; 00001005H
  0014a	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0014d	8b 82 78 01 00
	00		 mov	 eax, DWORD PTR [edx+376]
  00153	50		 push	 eax
  00154	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  0015a	3b f4		 cmp	 esi, esp
  0015c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 128  : 		AppendMenu(hFileMenu, MF_SEPARATOR, 0, 0);

  00161	8b f4		 mov	 esi, esp
  00163	6a 00		 push	 0
  00165	6a 00		 push	 0
  00167	68 00 08 00 00	 push	 2048			; 00000800H
  0016c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0016f	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00175	51		 push	 ecx
  00176	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0017c	3b f4		 cmp	 esi, esp
  0017e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 129  : 		AppendMenu(hFileMenu, MF_STRING, ID_SAVE, "&Save\tCtrl+S");

  00183	8b f4		 mov	 esi, esp
  00185	68 00 00 00 00	 push	 OFFSET ??_C@_0N@HJHPLKPP@?$CGSave?7Ctrl?$CLS?$AA@
  0018a	68 0f 10 00 00	 push	 4111			; 0000100fH
  0018f	6a 00		 push	 0
  00191	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00194	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  0019a	51		 push	 ecx
  0019b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  001a1	3b f4		 cmp	 esi, esp
  001a3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 130  : 			HBITMAP hbmpSave = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP1);

  001a8	8b f4		 mov	 esi, esp
  001aa	6a 7a		 push	 122			; 0000007aH
  001ac	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  001af	50		 push	 eax
  001b0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  001b6	3b f4		 cmp	 esi, esp
  001b8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001bd	89 45 c8	 mov	 DWORD PTR _hbmpSave$[ebp], eax

; 131  : 			SetMenuItemBitmaps(hFileMenu, ID_SAVE, MF_BYCOMMAND, hbmpSave, hbmpSave);

  001c0	8b f4		 mov	 esi, esp
  001c2	8b 45 c8	 mov	 eax, DWORD PTR _hbmpSave$[ebp]
  001c5	50		 push	 eax
  001c6	8b 4d c8	 mov	 ecx, DWORD PTR _hbmpSave$[ebp]
  001c9	51		 push	 ecx
  001ca	6a 00		 push	 0
  001cc	68 0f 10 00 00	 push	 4111			; 0000100fH
  001d1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  001d4	8b 82 78 01 00
	00		 mov	 eax, DWORD PTR [edx+376]
  001da	50		 push	 eax
  001db	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  001e1	3b f4		 cmp	 esi, esp
  001e3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 132  : 		AppendMenu(hFileMenu, MF_STRING, ID_FILE_SAVE_AS, "Save as");

  001e8	8b f4		 mov	 esi, esp
  001ea	68 00 00 00 00	 push	 OFFSET ??_C@_07NCJKBBP@Save?5as?$AA@
  001ef	68 06 10 00 00	 push	 4102			; 00001006H
  001f4	6a 00		 push	 0
  001f6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  001f9	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  001ff	51		 push	 ecx
  00200	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00206	3b f4		 cmp	 esi, esp
  00208	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 133  : 		AppendMenu(hFileMenu, MF_STRING, ID_FILE_SAVE_ALL, "&Save all\tCtrl+Shift+S");

  0020d	8b f4		 mov	 esi, esp
  0020f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@BFMONMOP@?$CGSave?5all?7Ctrl?$CLShift?$CLS?$AA@
  00214	68 13 10 00 00	 push	 4115			; 00001013H
  00219	6a 00		 push	 0
  0021b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0021e	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00224	51		 push	 ecx
  00225	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0022b	3b f4		 cmp	 esi, esp
  0022d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 134  : 			HBITMAP hbmpSaveAs = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP3);

  00232	8b f4		 mov	 esi, esp
  00234	6a 7c		 push	 124			; 0000007cH
  00236	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00239	50		 push	 eax
  0023a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00240	3b f4		 cmp	 esi, esp
  00242	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00247	89 45 bc	 mov	 DWORD PTR _hbmpSaveAs$[ebp], eax

; 135  : 			SetMenuItemBitmaps(hFileMenu, ID_FILE_SAVE_ALL, MF_BYCOMMAND, hbmpSaveAs, hbmpSaveAs);

  0024a	8b f4		 mov	 esi, esp
  0024c	8b 45 bc	 mov	 eax, DWORD PTR _hbmpSaveAs$[ebp]
  0024f	50		 push	 eax
  00250	8b 4d bc	 mov	 ecx, DWORD PTR _hbmpSaveAs$[ebp]
  00253	51		 push	 ecx
  00254	6a 00		 push	 0
  00256	68 13 10 00 00	 push	 4115			; 00001013H
  0025b	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0025e	8b 82 78 01 00
	00		 mov	 eax, DWORD PTR [edx+376]
  00264	50		 push	 eax
  00265	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  0026b	3b f4		 cmp	 esi, esp
  0026d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 136  : 		AppendMenu(hFileMenu, MF_SEPARATOR, 0, 0);

  00272	8b f4		 mov	 esi, esp
  00274	6a 00		 push	 0
  00276	6a 00		 push	 0
  00278	68 00 08 00 00	 push	 2048			; 00000800H
  0027d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00280	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00286	51		 push	 ecx
  00287	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0028d	3b f4		 cmp	 esi, esp
  0028f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 137  : 		AppendMenu(hFileMenu, MF_STRING, ID_CLOSE, "Close");

  00294	8b f4		 mov	 esi, esp
  00296	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close?$AA@
  0029b	68 0b 10 00 00	 push	 4107			; 0000100bH
  002a0	6a 00		 push	 0
  002a2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  002a5	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  002ab	51		 push	 ecx
  002ac	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  002b2	3b f4		 cmp	 esi, esp
  002b4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 138  : 		HMENU hFileCloseMore = CreatePopupMenu();

  002b9	8b f4		 mov	 esi, esp
  002bb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  002c1	3b f4		 cmp	 esi, esp
  002c3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  002c8	89 45 b0	 mov	 DWORD PTR _hFileCloseMore$[ebp], eax

; 139  : 			AppendMenu(hFileMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hFileCloseMore, "Close more");

  002cb	8b f4		 mov	 esi, esp
  002cd	68 00 00 00 00	 push	 OFFSET ??_C@_0L@CCDGBMAE@Close?5more?$AA@
  002d2	8b 45 b0	 mov	 eax, DWORD PTR _hFileCloseMore$[ebp]
  002d5	50		 push	 eax
  002d6	6a 10		 push	 16			; 00000010H
  002d8	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  002db	8b 91 78 01 00
	00		 mov	 edx, DWORD PTR [ecx+376]
  002e1	52		 push	 edx
  002e2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  002e8	3b f4		 cmp	 esi, esp
  002ea	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 140  : 			AppendMenu(hFileCloseMore, MF_STRING, ID_CLOSEALLBUTTHIS, "Close all but this");

  002ef	8b f4		 mov	 esi, esp
  002f1	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BMFLKMBH@Close?5all?5but?5this?$AA@
  002f6	68 23 10 00 00	 push	 4131			; 00001023H
  002fb	6a 00		 push	 0
  002fd	8b 45 b0	 mov	 eax, DWORD PTR _hFileCloseMore$[ebp]
  00300	50		 push	 eax
  00301	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00307	3b f4		 cmp	 esi, esp
  00309	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 141  : 			AppendMenu(hFileCloseMore, MF_STRING, ID_CLOSELEFT, "Close all to the left");

  0030e	8b f4		 mov	 esi, esp
  00310	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMIKDOGJ@Close?5all?5to?5the?5left?$AA@
  00315	68 24 10 00 00	 push	 4132			; 00001024H
  0031a	6a 00		 push	 0
  0031c	8b 45 b0	 mov	 eax, DWORD PTR _hFileCloseMore$[ebp]
  0031f	50		 push	 eax
  00320	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00326	3b f4		 cmp	 esi, esp
  00328	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 142  : 			AppendMenu(hFileCloseMore, MF_STRING, ID_CLOSERIGHT, "Close all to the right");

  0032d	8b f4		 mov	 esi, esp
  0032f	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@COMNFMKL@Close?5all?5to?5the?5right?$AA@
  00334	68 25 10 00 00	 push	 4133			; 00001025H
  00339	6a 00		 push	 0
  0033b	8b 45 b0	 mov	 eax, DWORD PTR _hFileCloseMore$[ebp]
  0033e	50		 push	 eax
  0033f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00345	3b f4		 cmp	 esi, esp
  00347	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 143  : 		AppendMenu(hFileMenu, MF_SEPARATOR, 0, 0);

  0034c	8b f4		 mov	 esi, esp
  0034e	6a 00		 push	 0
  00350	6a 00		 push	 0
  00352	68 00 08 00 00	 push	 2048			; 00000800H
  00357	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0035a	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00360	51		 push	 ecx
  00361	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00367	3b f4		 cmp	 esi, esp
  00369	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 144  : 		AppendMenu(hFileMenu, MF_STRING, ID_PRINT, "&Print\tCtrl+P");

  0036e	8b f4		 mov	 esi, esp
  00370	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BFLPKHLC@?$CGPrint?7Ctrl?$CLP?$AA@
  00375	68 08 10 00 00	 push	 4104			; 00001008H
  0037a	6a 00		 push	 0
  0037c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0037f	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  00385	51		 push	 ecx
  00386	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0038c	3b f4		 cmp	 esi, esp
  0038e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 145  : 			HBITMAP hbmpPrint = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP2);

  00393	8b f4		 mov	 esi, esp
  00395	6a 7b		 push	 123			; 0000007bH
  00397	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  0039a	50		 push	 eax
  0039b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  003a1	3b f4		 cmp	 esi, esp
  003a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  003a8	89 45 a4	 mov	 DWORD PTR _hbmpPrint$[ebp], eax

; 146  : 			SetMenuItemBitmaps(hFileMenu, ID_PRINT, MF_BYCOMMAND, hbmpPrint, hbmpPrint);

  003ab	8b f4		 mov	 esi, esp
  003ad	8b 45 a4	 mov	 eax, DWORD PTR _hbmpPrint$[ebp]
  003b0	50		 push	 eax
  003b1	8b 4d a4	 mov	 ecx, DWORD PTR _hbmpPrint$[ebp]
  003b4	51		 push	 ecx
  003b5	6a 00		 push	 0
  003b7	68 08 10 00 00	 push	 4104			; 00001008H
  003bc	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  003bf	8b 82 78 01 00
	00		 mov	 eax, DWORD PTR [edx+376]
  003c5	50		 push	 eax
  003c6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  003cc	3b f4		 cmp	 esi, esp
  003ce	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 147  : 		AppendMenu(hFileMenu, MF_SEPARATOR, 0, 0);

  003d3	8b f4		 mov	 esi, esp
  003d5	6a 00		 push	 0
  003d7	6a 00		 push	 0
  003d9	68 00 08 00 00	 push	 2048			; 00000800H
  003de	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  003e1	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  003e7	51		 push	 ecx
  003e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  003ee	3b f4		 cmp	 esi, esp
  003f0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 148  : 		AppendMenu(hFileMenu, MF_STRING, ID_EXIT, "&Exit\tAlt+F4");

  003f5	8b f4		 mov	 esi, esp
  003f7	68 00 00 00 00	 push	 OFFSET ??_C@_0N@LJNFCFBC@?$CGExit?7Alt?$CLF4?$AA@
  003fc	68 07 10 00 00	 push	 4103			; 00001007H
  00401	6a 00		 push	 0
  00403	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00406	8b 88 78 01 00
	00		 mov	 ecx, DWORD PTR [eax+376]
  0040c	51		 push	 ecx
  0040d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00413	3b f4		 cmp	 esi, esp
  00415	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 149  : 			HBITMAP hbmpExit = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP6);

  0041a	8b f4		 mov	 esi, esp
  0041c	6a 7f		 push	 127			; 0000007fH
  0041e	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00421	50		 push	 eax
  00422	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00428	3b f4		 cmp	 esi, esp
  0042a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0042f	89 45 98	 mov	 DWORD PTR _hbmpExit$[ebp], eax

; 150  : 			SetMenuItemBitmaps(hFileMenu, ID_EXIT, MF_BYCOMMAND, hbmpExit, hbmpExit);

  00432	8b f4		 mov	 esi, esp
  00434	8b 45 98	 mov	 eax, DWORD PTR _hbmpExit$[ebp]
  00437	50		 push	 eax
  00438	8b 4d 98	 mov	 ecx, DWORD PTR _hbmpExit$[ebp]
  0043b	51		 push	 ecx
  0043c	6a 00		 push	 0
  0043e	68 07 10 00 00	 push	 4103			; 00001007H
  00443	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00446	8b 82 78 01 00
	00		 mov	 eax, DWORD PTR [edx+376]
  0044c	50		 push	 eax
  0044d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00453	3b f4		 cmp	 esi, esp
  00455	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 151  : 
; 152  : 		/* Edit */
; 153  : 		hEditMenu = CreatePopupMenu(); 

  0045a	8b f4		 mov	 esi, esp
  0045c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00462	3b f4		 cmp	 esi, esp
  00464	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00469	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0046c	89 81 7c 01 00
	00		 mov	 DWORD PTR [ecx+380], eax

; 154  : 		AppendMenu(hMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hEditMenu, "Edit");

  00472	8b f4		 mov	 esi, esp
  00474	68 00 00 00 00	 push	 OFFSET ??_C@_04BBNPPDNC@Edit?$AA@
  00479	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0047c	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00482	51		 push	 ecx
  00483	6a 10		 push	 16			; 00000010H
  00485	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00488	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  0048e	50		 push	 eax
  0048f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00495	3b f4		 cmp	 esi, esp
  00497	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 155  : 		AppendMenu(hEditMenu, MF_STRING, ID_UNDO, "&Undo\tCtrl+Z");

  0049c	8b f4		 mov	 esi, esp
  0049e	68 00 00 00 00	 push	 OFFSET ??_C@_0N@GCANILNL@?$CGUndo?7Ctrl?$CLZ?$AA@
  004a3	68 15 10 00 00	 push	 4117			; 00001015H
  004a8	6a 00		 push	 0
  004aa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004ad	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  004b3	51		 push	 ecx
  004b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  004ba	3b f4		 cmp	 esi, esp
  004bc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 156  : 		AppendMenu(hEditMenu, MF_STRING, ID_REDO, "&Redo\tCtrl+Y");

  004c1	8b f4		 mov	 esi, esp
  004c3	68 00 00 00 00	 push	 OFFSET ??_C@_0N@BOJJLGND@?$CGRedo?7Ctrl?$CLY?$AA@
  004c8	68 16 10 00 00	 push	 4118			; 00001016H
  004cd	6a 00		 push	 0
  004cf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  004d2	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  004d8	51		 push	 ecx
  004d9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  004df	3b f4		 cmp	 esi, esp
  004e1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 157  : 			HBITMAP hbmpUndo = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP4);

  004e6	8b f4		 mov	 esi, esp
  004e8	6a 7d		 push	 125			; 0000007dH
  004ea	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  004ed	50		 push	 eax
  004ee	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  004f4	3b f4		 cmp	 esi, esp
  004f6	e8 00 00 00 00	 call	 __RTC_CheckEsp
  004fb	89 45 8c	 mov	 DWORD PTR _hbmpUndo$[ebp], eax

; 158  : 			SetMenuItemBitmaps(hEditMenu, ID_UNDO, MF_BYCOMMAND, hbmpUndo, hbmpUndo);

  004fe	8b f4		 mov	 esi, esp
  00500	8b 45 8c	 mov	 eax, DWORD PTR _hbmpUndo$[ebp]
  00503	50		 push	 eax
  00504	8b 4d 8c	 mov	 ecx, DWORD PTR _hbmpUndo$[ebp]
  00507	51		 push	 ecx
  00508	6a 00		 push	 0
  0050a	68 15 10 00 00	 push	 4117			; 00001015H
  0050f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00512	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  00518	50		 push	 eax
  00519	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  0051f	3b f4		 cmp	 esi, esp
  00521	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 159  : 			HBITMAP hbmpRedo = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP41);

  00526	8b f4		 mov	 esi, esp
  00528	68 b7 00 00 00	 push	 183			; 000000b7H
  0052d	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00530	50		 push	 eax
  00531	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00537	3b f4		 cmp	 esi, esp
  00539	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0053e	89 45 80	 mov	 DWORD PTR _hbmpRedo$[ebp], eax

; 160  : 			SetMenuItemBitmaps(hEditMenu, ID_REDO, MF_BYCOMMAND, hbmpRedo, hbmpRedo);

  00541	8b f4		 mov	 esi, esp
  00543	8b 45 80	 mov	 eax, DWORD PTR _hbmpRedo$[ebp]
  00546	50		 push	 eax
  00547	8b 4d 80	 mov	 ecx, DWORD PTR _hbmpRedo$[ebp]
  0054a	51		 push	 ecx
  0054b	6a 00		 push	 0
  0054d	68 16 10 00 00	 push	 4118			; 00001016H
  00552	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00555	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  0055b	50		 push	 eax
  0055c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00562	3b f4		 cmp	 esi, esp
  00564	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 161  : 		AppendMenu(hEditMenu, MF_SEPARATOR, 0, 0);

  00569	8b f4		 mov	 esi, esp
  0056b	6a 00		 push	 0
  0056d	6a 00		 push	 0
  0056f	68 00 08 00 00	 push	 2048			; 00000800H
  00574	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00577	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  0057d	51		 push	 ecx
  0057e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00584	3b f4		 cmp	 esi, esp
  00586	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 162  : 		AppendMenu(hEditMenu, MF_STRING, WM_CUT, "&Cut\tCtrl+X");

  0058b	8b f4		 mov	 esi, esp
  0058d	68 00 00 00 00	 push	 OFFSET ??_C@_0M@MPCEFKDC@?$CGCut?7Ctrl?$CLX?$AA@
  00592	68 00 03 00 00	 push	 768			; 00000300H
  00597	6a 00		 push	 0
  00599	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0059c	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  005a2	51		 push	 ecx
  005a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  005a9	3b f4		 cmp	 esi, esp
  005ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 163  : 			HBITMAP hbmpCut = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP5);

  005b0	8b f4		 mov	 esi, esp
  005b2	6a 7e		 push	 126			; 0000007eH
  005b4	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  005b7	50		 push	 eax
  005b8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  005be	3b f4		 cmp	 esi, esp
  005c0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  005c5	89 85 74 ff ff
	ff		 mov	 DWORD PTR _hbmpCut$[ebp], eax

; 164  : 			SetMenuItemBitmaps(hEditMenu, WM_CUT, MF_BYCOMMAND, hbmpCut, hbmpCut);

  005cb	8b f4		 mov	 esi, esp
  005cd	8b 85 74 ff ff
	ff		 mov	 eax, DWORD PTR _hbmpCut$[ebp]
  005d3	50		 push	 eax
  005d4	8b 8d 74 ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpCut$[ebp]
  005da	51		 push	 ecx
  005db	6a 00		 push	 0
  005dd	68 00 03 00 00	 push	 768			; 00000300H
  005e2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  005e5	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  005eb	50		 push	 eax
  005ec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  005f2	3b f4		 cmp	 esi, esp
  005f4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 165  : 		AppendMenu(hEditMenu, MF_STRING, WM_COPY, "&Copy\tCtrl+C");

  005f9	8b f4		 mov	 esi, esp
  005fb	68 00 00 00 00	 push	 OFFSET ??_C@_0N@CKDJKPHG@?$CGCopy?7Ctrl?$CLC?$AA@
  00600	68 01 03 00 00	 push	 769			; 00000301H
  00605	6a 00		 push	 0
  00607	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0060a	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00610	51		 push	 ecx
  00611	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00617	3b f4		 cmp	 esi, esp
  00619	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 166  : 			HBITMAP hbmpCopy = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP8);

  0061e	8b f4		 mov	 esi, esp
  00620	68 81 00 00 00	 push	 129			; 00000081H
  00625	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00628	50		 push	 eax
  00629	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  0062f	3b f4		 cmp	 esi, esp
  00631	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00636	89 85 68 ff ff
	ff		 mov	 DWORD PTR _hbmpCopy$[ebp], eax

; 167  : 			SetMenuItemBitmaps(hEditMenu, WM_COPY, MF_BYCOMMAND, hbmpCopy, hbmpCopy);

  0063c	8b f4		 mov	 esi, esp
  0063e	8b 85 68 ff ff
	ff		 mov	 eax, DWORD PTR _hbmpCopy$[ebp]
  00644	50		 push	 eax
  00645	8b 8d 68 ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpCopy$[ebp]
  0064b	51		 push	 ecx
  0064c	6a 00		 push	 0
  0064e	68 01 03 00 00	 push	 769			; 00000301H
  00653	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00656	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  0065c	50		 push	 eax
  0065d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00663	3b f4		 cmp	 esi, esp
  00665	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 168  : 		AppendMenu(hEditMenu, MF_STRING, WM_PASTE, "&Paste\tCtrl+V");

  0066a	8b f4		 mov	 esi, esp
  0066c	68 00 00 00 00	 push	 OFFSET ??_C@_0O@PPANOEGE@?$CGPaste?7Ctrl?$CLV?$AA@
  00671	68 02 03 00 00	 push	 770			; 00000302H
  00676	6a 00		 push	 0
  00678	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0067b	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00681	51		 push	 ecx
  00682	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00688	3b f4		 cmp	 esi, esp
  0068a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 169  : 			HBITMAP hbmpPaste = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP9);

  0068f	8b f4		 mov	 esi, esp
  00691	68 82 00 00 00	 push	 130			; 00000082H
  00696	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00699	50		 push	 eax
  0069a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  006a0	3b f4		 cmp	 esi, esp
  006a2	e8 00 00 00 00	 call	 __RTC_CheckEsp
  006a7	89 85 5c ff ff
	ff		 mov	 DWORD PTR _hbmpPaste$[ebp], eax

; 170  : 			SetMenuItemBitmaps(hEditMenu, WM_PASTE, MF_BYCOMMAND, hbmpPaste, hbmpPaste);

  006ad	8b f4		 mov	 esi, esp
  006af	8b 85 5c ff ff
	ff		 mov	 eax, DWORD PTR _hbmpPaste$[ebp]
  006b5	50		 push	 eax
  006b6	8b 8d 5c ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpPaste$[ebp]
  006bc	51		 push	 ecx
  006bd	6a 00		 push	 0
  006bf	68 02 03 00 00	 push	 770			; 00000302H
  006c4	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  006c7	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  006cd	50		 push	 eax
  006ce	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  006d4	3b f4		 cmp	 esi, esp
  006d6	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 171  : 		AppendMenu(hEditMenu, MF_STRING, WM_CLEAR, "&Delete\tDel");

  006db	8b f4		 mov	 esi, esp
  006dd	68 00 00 00 00	 push	 OFFSET ??_C@_0M@NOAJNEBE@?$CGDelete?7Del?$AA@
  006e2	68 03 03 00 00	 push	 771			; 00000303H
  006e7	6a 00		 push	 0
  006e9	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  006ec	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  006f2	51		 push	 ecx
  006f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  006f9	3b f4		 cmp	 esi, esp
  006fb	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 172  : 		AppendMenu(hEditMenu, MF_SEPARATOR, 0, 0);

  00700	8b f4		 mov	 esi, esp
  00702	6a 00		 push	 0
  00704	6a 00		 push	 0
  00706	68 00 08 00 00	 push	 2048			; 00000800H
  0070b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0070e	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00714	51		 push	 ecx
  00715	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0071b	3b f4		 cmp	 esi, esp
  0071d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 173  : 		AppendMenu(hEditMenu, MF_STRING, EM_SETSEL, "&Select all\tCtrl+A");

  00722	8b f4		 mov	 esi, esp
  00724	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@CPAHALMP@?$CGSelect?5all?7Ctrl?$CLA?$AA@
  00729	68 b1 00 00 00	 push	 177			; 000000b1H
  0072e	6a 00		 push	 0
  00730	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00733	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00739	51		 push	 ecx
  0073a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00740	3b f4		 cmp	 esi, esp
  00742	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 174  : 		AppendMenu(hEditMenu, MF_SEPARATOR, 0, 0);

  00747	8b f4		 mov	 esi, esp
  00749	6a 00		 push	 0
  0074b	6a 00		 push	 0
  0074d	68 00 08 00 00	 push	 2048			; 00000800H
  00752	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00755	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  0075b	51		 push	 ecx
  0075c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00762	3b f4		 cmp	 esi, esp
  00764	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 175  : 		AppendMenu(hEditMenu, MF_STRING, ID_DEC, "&Decrease Indent\tShift+Tab");

  00769	8b f4		 mov	 esi, esp
  0076b	68 00 00 00 00	 push	 OFFSET ??_C@_0BL@LEDBFEN@?$CGDecrease?5Indent?7Shift?$CLTab?$AA@
  00770	68 17 10 00 00	 push	 4119			; 00001017H
  00775	6a 00		 push	 0
  00777	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0077a	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00780	51		 push	 ecx
  00781	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00787	3b f4		 cmp	 esi, esp
  00789	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 176  : 			HBITMAP hbmpDec = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP56);

  0078e	8b f4		 mov	 esi, esp
  00790	68 cc 00 00 00	 push	 204			; 000000ccH
  00795	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00798	50		 push	 eax
  00799	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  0079f	3b f4		 cmp	 esi, esp
  007a1	e8 00 00 00 00	 call	 __RTC_CheckEsp
  007a6	89 85 50 ff ff
	ff		 mov	 DWORD PTR _hbmpDec$[ebp], eax

; 177  : 			SetMenuItemBitmaps(hEditMenu, ID_DEC, MF_BYCOMMAND, hbmpDec, hbmpDec);

  007ac	8b f4		 mov	 esi, esp
  007ae	8b 85 50 ff ff
	ff		 mov	 eax, DWORD PTR _hbmpDec$[ebp]
  007b4	50		 push	 eax
  007b5	8b 8d 50 ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpDec$[ebp]
  007bb	51		 push	 ecx
  007bc	6a 00		 push	 0
  007be	68 17 10 00 00	 push	 4119			; 00001017H
  007c3	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  007c6	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  007cc	50		 push	 eax
  007cd	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  007d3	3b f4		 cmp	 esi, esp
  007d5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 178  : 		AppendMenu(hEditMenu, MF_STRING, ID_INC, "&Increase Indent\tCtrl+Shift+Tab");

  007da	8b f4		 mov	 esi, esp
  007dc	68 00 00 00 00	 push	 OFFSET ??_C@_0CA@EEKEKFPO@?$CGIncrease?5Indent?7Ctrl?$CLShift?$CLTab?$AA@
  007e1	68 18 10 00 00	 push	 4120			; 00001018H
  007e6	6a 00		 push	 0
  007e8	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  007eb	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  007f1	51		 push	 ecx
  007f2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  007f8	3b f4		 cmp	 esi, esp
  007fa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 179  : 			HBITMAP hbmpInc = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP57);

  007ff	8b f4		 mov	 esi, esp
  00801	68 cd 00 00 00	 push	 205			; 000000cdH
  00806	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00809	50		 push	 eax
  0080a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00810	3b f4		 cmp	 esi, esp
  00812	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00817	89 85 44 ff ff
	ff		 mov	 DWORD PTR _hbmpInc$[ebp], eax

; 180  : 			SetMenuItemBitmaps(hEditMenu, ID_INC, MF_BYCOMMAND, hbmpInc, hbmpInc);

  0081d	8b f4		 mov	 esi, esp
  0081f	8b 85 44 ff ff
	ff		 mov	 eax, DWORD PTR _hbmpInc$[ebp]
  00825	50		 push	 eax
  00826	8b 8d 44 ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpInc$[ebp]
  0082c	51		 push	 ecx
  0082d	6a 00		 push	 0
  0082f	68 18 10 00 00	 push	 4120			; 00001018H
  00834	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00837	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  0083d	50		 push	 eax
  0083e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00844	3b f4		 cmp	 esi, esp
  00846	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 181  : 		AppendMenu(hEditMenu, MF_SEPARATOR, 0, 0);

  0084b	8b f4		 mov	 esi, esp
  0084d	6a 00		 push	 0
  0084f	6a 00		 push	 0
  00851	68 00 08 00 00	 push	 2048			; 00000800H
  00856	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00859	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  0085f	51		 push	 ecx
  00860	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00866	3b f4		 cmp	 esi, esp
  00868	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 182  : 		AppendMenu(hEditMenu, MF_STRING, ID_COMMENT, "&Comment out the selected lines\tCtrl+Shift+C");

  0086d	8b f4		 mov	 esi, esp
  0086f	68 00 00 00 00	 push	 OFFSET ??_C@_0CN@LAHKONJC@?$CGComment?5out?5the?5selected?5lines?7@
  00874	68 19 10 00 00	 push	 4121			; 00001019H
  00879	6a 00		 push	 0
  0087b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0087e	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00884	51		 push	 ecx
  00885	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0088b	3b f4		 cmp	 esi, esp
  0088d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 183  : 			HBITMAP hbmpCom = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP52);

  00892	8b f4		 mov	 esi, esp
  00894	68 c8 00 00 00	 push	 200			; 000000c8H
  00899	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  0089c	50		 push	 eax
  0089d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  008a3	3b f4		 cmp	 esi, esp
  008a5	e8 00 00 00 00	 call	 __RTC_CheckEsp
  008aa	89 85 38 ff ff
	ff		 mov	 DWORD PTR _hbmpCom$[ebp], eax

; 184  : 			SetMenuItemBitmaps(hEditMenu, ID_COMMENT, MF_BYCOMMAND, hbmpCom, hbmpCom);

  008b0	8b f4		 mov	 esi, esp
  008b2	8b 85 38 ff ff
	ff		 mov	 eax, DWORD PTR _hbmpCom$[ebp]
  008b8	50		 push	 eax
  008b9	8b 8d 38 ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpCom$[ebp]
  008bf	51		 push	 ecx
  008c0	6a 00		 push	 0
  008c2	68 19 10 00 00	 push	 4121			; 00001019H
  008c7	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  008ca	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  008d0	50		 push	 eax
  008d1	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  008d7	3b f4		 cmp	 esi, esp
  008d9	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 185  : 		AppendMenu(hEditMenu, MF_STRING, ID_UNCOMMENT, "&Uncomment the selected lines\tCtrl+Shift+X");

  008de	8b f4		 mov	 esi, esp
  008e0	68 00 00 00 00	 push	 OFFSET ??_C@_0CL@KNIBIEAG@?$CGUncomment?5the?5selected?5lines?7Ct@
  008e5	68 1a 10 00 00	 push	 4122			; 0000101aH
  008ea	6a 00		 push	 0
  008ec	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  008ef	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  008f5	51		 push	 ecx
  008f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  008fc	3b f4		 cmp	 esi, esp
  008fe	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 186  : 			HBITMAP hbmpUnCom = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP53);

  00903	8b f4		 mov	 esi, esp
  00905	68 c9 00 00 00	 push	 201			; 000000c9H
  0090a	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  0090d	50		 push	 eax
  0090e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00914	3b f4		 cmp	 esi, esp
  00916	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0091b	89 85 2c ff ff
	ff		 mov	 DWORD PTR _hbmpUnCom$[ebp], eax

; 187  : 			SetMenuItemBitmaps(hEditMenu, ID_UNCOMMENT, MF_BYCOMMAND, hbmpUnCom, hbmpUnCom);

  00921	8b f4		 mov	 esi, esp
  00923	8b 85 2c ff ff
	ff		 mov	 eax, DWORD PTR _hbmpUnCom$[ebp]
  00929	50		 push	 eax
  0092a	8b 8d 2c ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpUnCom$[ebp]
  00930	51		 push	 ecx
  00931	6a 00		 push	 0
  00933	68 1a 10 00 00	 push	 4122			; 0000101aH
  00938	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0093b	8b 82 7c 01 00
	00		 mov	 eax, DWORD PTR [edx+380]
  00941	50		 push	 eax
  00942	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00948	3b f4		 cmp	 esi, esp
  0094a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 188  : 		AppendMenu(hEditMenu, MF_SEPARATOR, 0, 0);

  0094f	8b f4		 mov	 esi, esp
  00951	6a 00		 push	 0
  00953	6a 00		 push	 0
  00955	68 00 08 00 00	 push	 2048			; 00000800H
  0095a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0095d	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00963	51		 push	 ecx
  00964	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0096a	3b f4		 cmp	 esi, esp
  0096c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 189  : 		AppendMenu(hEditMenu, MF_STRING, ID_OPENFOLDER, "Open containing folder in explorer");

  00971	8b f4		 mov	 esi, esp
  00973	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JJJFCJMH@Open?5containing?5folder?5in?5explor@
  00978	68 26 10 00 00	 push	 4134			; 00001026H
  0097d	6a 00		 push	 0
  0097f	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00982	8b 88 7c 01 00
	00		 mov	 ecx, DWORD PTR [eax+380]
  00988	51		 push	 ecx
  00989	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0098f	3b f4		 cmp	 esi, esp
  00991	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 190  : 
; 191  : 		/* Search */
; 192  : 		hSearchMenu = CreatePopupMenu(); 

  00996	8b f4		 mov	 esi, esp
  00998	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  0099e	3b f4		 cmp	 esi, esp
  009a0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  009a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  009a8	89 81 80 01 00
	00		 mov	 DWORD PTR [ecx+384], eax

; 193  : 		AppendMenu(hMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hSearchMenu, "Search");

  009ae	8b f4		 mov	 esi, esp
  009b0	68 00 00 00 00	 push	 OFFSET ??_C@_06KKEGOPHO@Search?$AA@
  009b5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  009b8	8b 88 80 01 00
	00		 mov	 ecx, DWORD PTR [eax+384]
  009be	51		 push	 ecx
  009bf	6a 10		 push	 16			; 00000010H
  009c1	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  009c4	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  009ca	50		 push	 eax
  009cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  009d1	3b f4		 cmp	 esi, esp
  009d3	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 194  : 		AppendMenu(hSearchMenu, MF_STRING, ID_FILEFIND, "&Find\tCtrl+F");

  009d8	8b f4		 mov	 esi, esp
  009da	68 00 00 00 00	 push	 OFFSET ??_C@_0N@EDLAPCBN@?$CGFind?7Ctrl?$CLF?$AA@
  009df	68 0a 10 00 00	 push	 4106			; 0000100aH
  009e4	6a 00		 push	 0
  009e6	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  009e9	8b 88 80 01 00
	00		 mov	 ecx, DWORD PTR [eax+384]
  009ef	51		 push	 ecx
  009f0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  009f6	3b f4		 cmp	 esi, esp
  009f8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 195  : 		AppendMenu(hSearchMenu, MF_STRING, ID_FILEFINDANDREPLASE, "&Find and replace\tCtrl+Shift+F");

  009fd	8b f4		 mov	 esi, esp
  009ff	68 00 00 00 00	 push	 OFFSET ??_C@_0BP@GFALHAFP@?$CGFind?5and?5replace?7Ctrl?$CLShift?$CLF?$AA@
  00a04	68 14 10 00 00	 push	 4116			; 00001014H
  00a09	6a 00		 push	 0
  00a0b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a0e	8b 88 80 01 00
	00		 mov	 ecx, DWORD PTR [eax+384]
  00a14	51		 push	 ecx
  00a15	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00a1b	3b f4		 cmp	 esi, esp
  00a1d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 196  : 
; 197  : 		/* Run */
; 198  : 		hRunMenu = CreatePopupMenu(); 

  00a22	8b f4		 mov	 esi, esp
  00a24	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00a2a	3b f4		 cmp	 esi, esp
  00a2c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00a31	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00a34	89 81 84 01 00
	00		 mov	 DWORD PTR [ecx+388], eax

; 199  : 		AppendMenu(hMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hRunMenu, "Run");

  00a3a	8b f4		 mov	 esi, esp
  00a3c	68 00 00 00 00	 push	 OFFSET ??_C@_03BGPLALFI@Run?$AA@
  00a41	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a44	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00a4a	51		 push	 ecx
  00a4b	6a 10		 push	 16			; 00000010H
  00a4d	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00a50	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  00a56	50		 push	 eax
  00a57	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00a5d	3b f4		 cmp	 esi, esp
  00a5f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 200  : 		AppendMenu(hRunMenu, MF_STRING, ID_RUN, "&Run\tF9");

  00a64	8b f4		 mov	 esi, esp
  00a66	68 00 00 00 00	 push	 OFFSET ??_C@_07GLPINFMF@?$CGRun?7F9?$AA@
  00a6b	68 0d 10 00 00	 push	 4109			; 0000100dH
  00a70	6a 00		 push	 0
  00a72	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00a75	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00a7b	51		 push	 ecx
  00a7c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00a82	3b f4		 cmp	 esi, esp
  00a84	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 201  : 			HBITMAP hbmpRun = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP55);

  00a89	8b f4		 mov	 esi, esp
  00a8b	68 cb 00 00 00	 push	 203			; 000000cbH
  00a90	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00a93	50		 push	 eax
  00a94	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00a9a	3b f4		 cmp	 esi, esp
  00a9c	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00aa1	89 85 20 ff ff
	ff		 mov	 DWORD PTR _hbmpRun$[ebp], eax

; 202  : 			SetMenuItemBitmaps(hRunMenu, ID_RUN, MF_BYCOMMAND, hbmpRun, hbmpRun);

  00aa7	8b f4		 mov	 esi, esp
  00aa9	8b 85 20 ff ff
	ff		 mov	 eax, DWORD PTR _hbmpRun$[ebp]
  00aaf	50		 push	 eax
  00ab0	8b 8d 20 ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpRun$[ebp]
  00ab6	51		 push	 ecx
  00ab7	6a 00		 push	 0
  00ab9	68 0d 10 00 00	 push	 4109			; 0000100dH
  00abe	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ac1	8b 82 84 01 00
	00		 mov	 eax, DWORD PTR [edx+388]
  00ac7	50		 push	 eax
  00ac8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00ace	3b f4		 cmp	 esi, esp
  00ad0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 203  : 		AppendMenu(hRunMenu, MF_STRING, ID_COMPILE, "&Compile\tCtrl+F9");

  00ad5	8b f4		 mov	 esi, esp
  00ad7	68 00 00 00 00	 push	 OFFSET ??_C@_0BB@PDLBLEHO@?$CGCompile?7Ctrl?$CLF9?$AA@
  00adc	68 0e 10 00 00	 push	 4110			; 0000100eH
  00ae1	6a 00		 push	 0
  00ae3	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ae6	8b 88 84 01 00
	00		 mov	 ecx, DWORD PTR [eax+388]
  00aec	51		 push	 ecx
  00aed	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00af3	3b f4		 cmp	 esi, esp
  00af5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 204  : 			HBITMAP hbmpCompile = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP54);

  00afa	8b f4		 mov	 esi, esp
  00afc	68 ca 00 00 00	 push	 202			; 000000caH
  00b01	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00b04	50		 push	 eax
  00b05	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00b0b	3b f4		 cmp	 esi, esp
  00b0d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b12	89 85 14 ff ff
	ff		 mov	 DWORD PTR _hbmpCompile$[ebp], eax

; 205  : 			SetMenuItemBitmaps(hRunMenu, ID_COMPILE, MF_BYCOMMAND, hbmpCompile, hbmpCompile);

  00b18	8b f4		 mov	 esi, esp
  00b1a	8b 85 14 ff ff
	ff		 mov	 eax, DWORD PTR _hbmpCompile$[ebp]
  00b20	50		 push	 eax
  00b21	8b 8d 14 ff ff
	ff		 mov	 ecx, DWORD PTR _hbmpCompile$[ebp]
  00b27	51		 push	 ecx
  00b28	6a 00		 push	 0
  00b2a	68 0e 10 00 00	 push	 4110			; 0000100eH
  00b2f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b32	8b 82 84 01 00
	00		 mov	 eax, DWORD PTR [edx+388]
  00b38	50		 push	 eax
  00b39	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00b3f	3b f4		 cmp	 esi, esp
  00b41	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 206  : 
; 207  : 		/* Bookmarks */
; 208  : 		hBookmarksMenu = CreatePopupMenu(); 

  00b46	8b f4		 mov	 esi, esp
  00b48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00b4e	3b f4		 cmp	 esi, esp
  00b50	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00b55	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00b58	89 81 88 01 00
	00		 mov	 DWORD PTR [ecx+392], eax

; 209  : 		AppendMenu(hMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hBookmarksMenu, "Bookmarks");

  00b5e	8b f4		 mov	 esi, esp
  00b60	68 00 00 00 00	 push	 OFFSET ??_C@_09BEAEIAPD@Bookmarks?$AA@
  00b65	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b68	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00b6e	51		 push	 ecx
  00b6f	6a 10		 push	 16			; 00000010H
  00b71	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00b74	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  00b7a	50		 push	 eax
  00b7b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00b81	3b f4		 cmp	 esi, esp
  00b83	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 210  : 		AppendMenu(hBookmarksMenu, MF_STRING, ID_TOGGLE, "Toggle a bookmark on the current line");

  00b88	8b f4		 mov	 esi, esp
  00b8a	68 00 00 00 00	 push	 OFFSET ??_C@_0CG@PFMHEMFC@Toggle?5a?5bookmark?5on?5the?5current@
  00b8f	68 1b 10 00 00	 push	 4123			; 0000101bH
  00b94	6a 00		 push	 0
  00b96	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00b99	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00b9f	51		 push	 ecx
  00ba0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00ba6	3b f4		 cmp	 esi, esp
  00ba8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 211  : 				HBITMAP hToggle = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP58);

  00bad	8b f4		 mov	 esi, esp
  00baf	68 d0 00 00 00	 push	 208			; 000000d0H
  00bb4	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00bb7	50		 push	 eax
  00bb8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00bbe	3b f4		 cmp	 esi, esp
  00bc0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00bc5	89 85 08 ff ff
	ff		 mov	 DWORD PTR _hToggle$[ebp], eax

; 212  : 				SetMenuItemBitmaps(hBookmarksMenu, ID_TOGGLE, MF_BYCOMMAND, hToggle, hToggle);

  00bcb	8b f4		 mov	 esi, esp
  00bcd	8b 85 08 ff ff
	ff		 mov	 eax, DWORD PTR _hToggle$[ebp]
  00bd3	50		 push	 eax
  00bd4	8b 8d 08 ff ff
	ff		 mov	 ecx, DWORD PTR _hToggle$[ebp]
  00bda	51		 push	 ecx
  00bdb	6a 00		 push	 0
  00bdd	68 1b 10 00 00	 push	 4123			; 0000101bH
  00be2	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00be5	8b 82 88 01 00
	00		 mov	 eax, DWORD PTR [edx+392]
  00beb	50		 push	 eax
  00bec	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00bf2	3b f4		 cmp	 esi, esp
  00bf4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 213  : 		AppendMenu(hBookmarksMenu, MF_SEPARATOR, 0, 0);

  00bf9	8b f4		 mov	 esi, esp
  00bfb	6a 00		 push	 0
  00bfd	6a 00		 push	 0
  00bff	68 00 08 00 00	 push	 2048			; 00000800H
  00c04	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c07	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00c0d	51		 push	 ecx
  00c0e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00c14	3b f4		 cmp	 esi, esp
  00c16	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 214  : 		AppendMenu(hBookmarksMenu, MF_STRING, ID_PREVIOUS, "Move the caret to the previous bookmark");

  00c1b	8b f4		 mov	 esi, esp
  00c1d	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@BJCMODKO@Move?5the?5caret?5to?5the?5previous?5b@
  00c22	68 1c 10 00 00	 push	 4124			; 0000101cH
  00c27	6a 00		 push	 0
  00c29	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c2c	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00c32	51		 push	 ecx
  00c33	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00c39	3b f4		 cmp	 esi, esp
  00c3b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 215  : 				HBITMAP hPrev = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP59);

  00c40	8b f4		 mov	 esi, esp
  00c42	68 d1 00 00 00	 push	 209			; 000000d1H
  00c47	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00c4a	50		 push	 eax
  00c4b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00c51	3b f4		 cmp	 esi, esp
  00c53	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00c58	89 85 fc fe ff
	ff		 mov	 DWORD PTR _hPrev$[ebp], eax

; 216  : 				SetMenuItemBitmaps(hBookmarksMenu, ID_PREVIOUS, MF_BYCOMMAND, hPrev, hPrev);

  00c5e	8b f4		 mov	 esi, esp
  00c60	8b 85 fc fe ff
	ff		 mov	 eax, DWORD PTR _hPrev$[ebp]
  00c66	50		 push	 eax
  00c67	8b 8d fc fe ff
	ff		 mov	 ecx, DWORD PTR _hPrev$[ebp]
  00c6d	51		 push	 ecx
  00c6e	6a 00		 push	 0
  00c70	68 1c 10 00 00	 push	 4124			; 0000101cH
  00c75	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00c78	8b 82 88 01 00
	00		 mov	 eax, DWORD PTR [edx+392]
  00c7e	50		 push	 eax
  00c7f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00c85	3b f4		 cmp	 esi, esp
  00c87	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 217  : 		AppendMenu(hBookmarksMenu, MF_STRING, ID_NEXT, "Move the caret to the next bookmark");

  00c8c	8b f4		 mov	 esi, esp
  00c8e	68 00 00 00 00	 push	 OFFSET ??_C@_0CE@LFBIKFFA@Move?5the?5caret?5to?5the?5next?5bookm@
  00c93	68 1d 10 00 00	 push	 4125			; 0000101dH
  00c98	6a 00		 push	 0
  00c9a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00c9d	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00ca3	51		 push	 ecx
  00ca4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00caa	3b f4		 cmp	 esi, esp
  00cac	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 218  : 				HBITMAP hNext = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP60);

  00cb1	8b f4		 mov	 esi, esp
  00cb3	68 d2 00 00 00	 push	 210			; 000000d2H
  00cb8	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00cbb	50		 push	 eax
  00cbc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00cc2	3b f4		 cmp	 esi, esp
  00cc4	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00cc9	89 85 f0 fe ff
	ff		 mov	 DWORD PTR _hNext$[ebp], eax

; 219  : 				SetMenuItemBitmaps(hBookmarksMenu, ID_NEXT, MF_BYCOMMAND, hNext, hNext);

  00ccf	8b f4		 mov	 esi, esp
  00cd1	8b 85 f0 fe ff
	ff		 mov	 eax, DWORD PTR _hNext$[ebp]
  00cd7	50		 push	 eax
  00cd8	8b 8d f0 fe ff
	ff		 mov	 ecx, DWORD PTR _hNext$[ebp]
  00cde	51		 push	 ecx
  00cdf	6a 00		 push	 0
  00ce1	68 1d 10 00 00	 push	 4125			; 0000101dH
  00ce6	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ce9	8b 82 88 01 00
	00		 mov	 eax, DWORD PTR [edx+392]
  00cef	50		 push	 eax
  00cf0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00cf6	3b f4		 cmp	 esi, esp
  00cf8	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 220  : 		AppendMenu(hBookmarksMenu, MF_SEPARATOR, 0, 0);

  00cfd	8b f4		 mov	 esi, esp
  00cff	6a 00		 push	 0
  00d01	6a 00		 push	 0
  00d03	68 00 08 00 00	 push	 2048			; 00000800H
  00d08	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d0b	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00d11	51		 push	 ecx
  00d12	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00d18	3b f4		 cmp	 esi, esp
  00d1a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 221  : 		AppendMenu(hBookmarksMenu, MF_STRING, ID_CLEARALL, "Clear all bookmarks in all files");

  00d1f	8b f4		 mov	 esi, esp
  00d21	68 00 00 00 00	 push	 OFFSET ??_C@_0CB@PCAKLOLD@Clear?5all?5bookmarks?5in?5all?5files@
  00d26	68 1e 10 00 00	 push	 4126			; 0000101eH
  00d2b	6a 00		 push	 0
  00d2d	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00d30	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00d36	51		 push	 ecx
  00d37	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00d3d	3b f4		 cmp	 esi, esp
  00d3f	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 222  : 				HBITMAP hClearAll = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP62);

  00d44	8b f4		 mov	 esi, esp
  00d46	68 d4 00 00 00	 push	 212			; 000000d4H
  00d4b	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00d4e	50		 push	 eax
  00d4f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00d55	3b f4		 cmp	 esi, esp
  00d57	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00d5c	89 85 e4 fe ff
	ff		 mov	 DWORD PTR _hClearAll$[ebp], eax

; 223  : 				SetMenuItemBitmaps(hBookmarksMenu, ID_CLEARALL, MF_BYCOMMAND, hClearAll, hClearAll);

  00d62	8b f4		 mov	 esi, esp
  00d64	8b 85 e4 fe ff
	ff		 mov	 eax, DWORD PTR _hClearAll$[ebp]
  00d6a	50		 push	 eax
  00d6b	8b 8d e4 fe ff
	ff		 mov	 ecx, DWORD PTR _hClearAll$[ebp]
  00d71	51		 push	 ecx
  00d72	6a 00		 push	 0
  00d74	68 1e 10 00 00	 push	 4126			; 0000101eH
  00d79	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00d7c	8b 82 88 01 00
	00		 mov	 eax, DWORD PTR [edx+392]
  00d82	50		 push	 eax
  00d83	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00d89	3b f4		 cmp	 esi, esp
  00d8b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 224  : 		AppendMenu(hBookmarksMenu, MF_STRING, ID_CLEARALL_CF, "Clear all bookmarks in the current file");

  00d90	8b f4		 mov	 esi, esp
  00d92	68 00 00 00 00	 push	 OFFSET ??_C@_0CI@DHNKEGCA@Clear?5all?5bookmarks?5in?5the?5curre@
  00d97	68 1f 10 00 00	 push	 4127			; 0000101fH
  00d9c	6a 00		 push	 0
  00d9e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00da1	8b 88 88 01 00
	00		 mov	 ecx, DWORD PTR [eax+392]
  00da7	51		 push	 ecx
  00da8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00dae	3b f4		 cmp	 esi, esp
  00db0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 225  : 				HBITMAP hClear = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP61);

  00db5	8b f4		 mov	 esi, esp
  00db7	68 d3 00 00 00	 push	 211			; 000000d3H
  00dbc	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  00dbf	50		 push	 eax
  00dc0	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  00dc6	3b f4		 cmp	 esi, esp
  00dc8	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00dcd	89 85 d8 fe ff
	ff		 mov	 DWORD PTR _hClear$[ebp], eax

; 226  : 				SetMenuItemBitmaps(hBookmarksMenu, ID_CLEARALL_CF, MF_BYCOMMAND, hClear, hClear);

  00dd3	8b f4		 mov	 esi, esp
  00dd5	8b 85 d8 fe ff
	ff		 mov	 eax, DWORD PTR _hClear$[ebp]
  00ddb	50		 push	 eax
  00ddc	8b 8d d8 fe ff
	ff		 mov	 ecx, DWORD PTR _hClear$[ebp]
  00de2	51		 push	 ecx
  00de3	6a 00		 push	 0
  00de5	68 1f 10 00 00	 push	 4127			; 0000101fH
  00dea	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00ded	8b 82 88 01 00
	00		 mov	 eax, DWORD PTR [edx+392]
  00df3	50		 push	 eax
  00df4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  00dfa	3b f4		 cmp	 esi, esp
  00dfc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 227  : 
; 228  : 		/* Examples */
; 229  : 		hExamplesMenu = CreatePopupMenu(); 

  00e01	8b f4		 mov	 esi, esp
  00e03	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00e09	3b f4		 cmp	 esi, esp
  00e0b	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00e10	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  00e13	89 81 8c 01 00
	00		 mov	 DWORD PTR [ecx+396], eax

; 230  : 		AppendMenu(hMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hExamplesMenu, "Examples");

  00e19	8b f4		 mov	 esi, esp
  00e1b	68 00 00 00 00	 push	 OFFSET ??_C@_08KJMBPHGD@Examples?$AA@
  00e20	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e23	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00e29	51		 push	 ecx
  00e2a	6a 10		 push	 16			; 00000010H
  00e2c	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  00e2f	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  00e35	50		 push	 eax
  00e36	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00e3c	3b f4		 cmp	 esi, esp
  00e3e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 231  : 			CreatePopupMenu();

  00e43	8b f4		 mov	 esi, esp
  00e45	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  00e4b	3b f4		 cmp	 esi, esp
  00e4d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 232  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_Hello_World, "HELLO WORLD (1)");

  00e52	8b f4		 mov	 esi, esp
  00e54	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KAGPLLIB@HELLO?5WORLD?5?$CI1?$CJ?$AA@
  00e59	68 f4 01 00 00	 push	 500			; 000001f4H
  00e5e	6a 00		 push	 0
  00e60	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e63	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00e69	51		 push	 ecx
  00e6a	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00e70	3b f4		 cmp	 esi, esp
  00e72	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 233  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_Hello_World2, "HELLO WORLD (2)");

  00e77	8b f4		 mov	 esi, esp
  00e79	68 00 00 00 00	 push	 OFFSET ??_C@_0BA@KCCJAFNI@HELLO?5WORLD?5?$CI2?$CJ?$AA@
  00e7e	68 f5 01 00 00	 push	 501			; 000001f5H
  00e83	6a 00		 push	 0
  00e85	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00e88	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00e8e	51		 push	 ecx
  00e8f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00e95	3b f4		 cmp	 esi, esp
  00e97	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 234  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_Hello_World3, "BEER");

  00e9c	8b f4		 mov	 esi, esp
  00e9e	68 00 00 00 00	 push	 OFFSET ??_C@_04EJPINLDJ@BEER?$AA@
  00ea3	68 f6 01 00 00	 push	 502			; 000001f6H
  00ea8	6a 00		 push	 0
  00eaa	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ead	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00eb3	51		 push	 ecx
  00eb4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00eba	3b f4		 cmp	 esi, esp
  00ebc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 235  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_DDRAW, "DDRAW");

  00ec1	8b f4		 mov	 esi, esp
  00ec3	68 00 00 00 00	 push	 OFFSET ??_C@_05JCCBADOC@DDRAW?$AA@
  00ec8	68 f7 01 00 00	 push	 503			; 000001f7H
  00ecd	6a 00		 push	 0
  00ecf	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ed2	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00ed8	51		 push	 ecx
  00ed9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00edf	3b f4		 cmp	 esi, esp
  00ee1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 236  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_DIALOG, "DIALOG");

  00ee6	8b f4		 mov	 esi, esp
  00ee8	68 00 00 00 00	 push	 OFFSET ??_C@_06IKCPKPAM@DIALOG?$AA@
  00eed	68 f8 01 00 00	 push	 504			; 000001f8H
  00ef2	6a 00		 push	 0
  00ef4	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ef7	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00efd	51		 push	 ecx
  00efe	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00f04	3b f4		 cmp	 esi, esp
  00f06	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 237  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_DLL, "DLL");

  00f0b	8b f4		 mov	 esi, esp
  00f0d	68 00 00 00 00	 push	 OFFSET ??_C@_03OPIBJLCE@DLL?$AA@
  00f12	68 f9 01 00 00	 push	 505			; 000001f9H
  00f17	6a 00		 push	 0
  00f19	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f1c	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00f22	51		 push	 ecx
  00f23	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00f29	3b f4		 cmp	 esi, esp
  00f2b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 238  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_MINIPAD, "MINIPAD");

  00f30	8b f4		 mov	 esi, esp
  00f32	68 00 00 00 00	 push	 OFFSET ??_C@_07LHCHPEHA@MINIPAD?$AA@
  00f37	68 fa 01 00 00	 push	 506			; 000001faH
  00f3c	6a 00		 push	 0
  00f3e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f41	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00f47	51		 push	 ecx
  00f48	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00f4e	3b f4		 cmp	 esi, esp
  00f50	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 239  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_MSCOFF, "MSCOFF");

  00f55	8b f4		 mov	 esi, esp
  00f57	68 00 00 00 00	 push	 OFFSET ??_C@_06MDEFDNGC@MSCOFF?$AA@
  00f5c	68 fb 01 00 00	 push	 507			; 000001fbH
  00f61	6a 00		 push	 0
  00f63	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f66	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00f6c	51		 push	 ecx
  00f6d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00f73	3b f4		 cmp	 esi, esp
  00f75	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 240  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_OPENGL, "OPENGL");

  00f7a	8b f4		 mov	 esi, esp
  00f7c	68 00 00 00 00	 push	 OFFSET ??_C@_06BOJPEOJN@OPENGL?$AA@
  00f81	68 fc 01 00 00	 push	 508			; 000001fcH
  00f86	6a 00		 push	 0
  00f88	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00f8b	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00f91	51		 push	 ecx
  00f92	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00f98	3b f4		 cmp	 esi, esp
  00f9a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 241  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_PEDEMO, "PEDEMO");

  00f9f	8b f4		 mov	 esi, esp
  00fa1	68 00 00 00 00	 push	 OFFSET ??_C@_06BAMJEJDG@PEDEMO?$AA@
  00fa6	68 fd 01 00 00	 push	 509			; 000001fdH
  00fab	6a 00		 push	 0
  00fad	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00fb0	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00fb6	51		 push	 ecx
  00fb7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00fbd	3b f4		 cmp	 esi, esp
  00fbf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 242  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_TEMPLATE, "TEMPLATE");

  00fc4	8b f4		 mov	 esi, esp
  00fc6	68 00 00 00 00	 push	 OFFSET ??_C@_08CGHHJMNA@TEMPLATE?$AA@
  00fcb	68 fe 01 00 00	 push	 510			; 000001feH
  00fd0	6a 00		 push	 0
  00fd2	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00fd5	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  00fdb	51		 push	 ecx
  00fdc	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  00fe2	3b f4		 cmp	 esi, esp
  00fe4	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 243  : 				AppendMenu(hExamplesMenu, MF_STRING, ID_USECOM, "USECOM");

  00fe9	8b f4		 mov	 esi, esp
  00feb	68 00 00 00 00	 push	 OFFSET ??_C@_06LOMHEHJH@USECOM?$AA@
  00ff0	68 ff 01 00 00	 push	 511			; 000001ffH
  00ff5	6a 00		 push	 0
  00ff7	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00ffa	8b 88 8c 01 00
	00		 mov	 ecx, DWORD PTR [eax+396]
  01000	51		 push	 ecx
  01001	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01007	3b f4		 cmp	 esi, esp
  01009	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 244  : 			HMENU hFile3 = CreatePopupMenu();

  0100e	8b f4		 mov	 esi, esp
  01010	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  01016	3b f4		 cmp	 esi, esp
  01018	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0101d	89 85 cc fe ff
	ff		 mov	 DWORD PTR _hFile3$[ebp], eax

; 245  : 			AppendMenu(hExamplesMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hFile3, "WIN64");

  01023	8b f4		 mov	 esi, esp
  01025	68 00 00 00 00	 push	 OFFSET ??_C@_05OKFCBJPA@WIN64?$AA@
  0102a	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _hFile3$[ebp]
  01030	50		 push	 eax
  01031	6a 10		 push	 16			; 00000010H
  01033	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01036	8b 91 8c 01 00
	00		 mov	 edx, DWORD PTR [ecx+396]
  0103c	52		 push	 edx
  0103d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01043	3b f4		 cmp	 esi, esp
  01045	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 246  : 				AppendMenu(hFile3, MF_STRING, ID_MANDEL, "MANDEL");

  0104a	8b f4		 mov	 esi, esp
  0104c	68 00 00 00 00	 push	 OFFSET ??_C@_06FKGDILJB@MANDEL?$AA@
  01051	68 00 02 00 00	 push	 512			; 00000200H
  01056	6a 00		 push	 0
  01058	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _hFile3$[ebp]
  0105e	50		 push	 eax
  0105f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01065	3b f4		 cmp	 esi, esp
  01067	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 247  : 				AppendMenu(hFile3, MF_STRING, ID_OPENGL2, "OPENGL");

  0106c	8b f4		 mov	 esi, esp
  0106e	68 00 00 00 00	 push	 OFFSET ??_C@_06BOJPEOJN@OPENGL?$AA@
  01073	68 01 02 00 00	 push	 513			; 00000201H
  01078	6a 00		 push	 0
  0107a	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _hFile3$[ebp]
  01080	50		 push	 eax
  01081	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01087	3b f4		 cmp	 esi, esp
  01089	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 248  : 				AppendMenu(hFile3, MF_STRING, ID_PE64DEMO, "PE64DEMO");

  0108e	8b f4		 mov	 esi, esp
  01090	68 00 00 00 00	 push	 OFFSET ??_C@_08FAJLKIKC@PE64DEMO?$AA@
  01095	68 02 02 00 00	 push	 514			; 00000202H
  0109a	6a 00		 push	 0
  0109c	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _hFile3$[ebp]
  010a2	50		 push	 eax
  010a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  010a9	3b f4		 cmp	 esi, esp
  010ab	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 249  : 				AppendMenu(hFile3, MF_STRING, ID_TEMPLATE2, "TEMPLATE");

  010b0	8b f4		 mov	 esi, esp
  010b2	68 00 00 00 00	 push	 OFFSET ??_C@_08CGHHJMNA@TEMPLATE?$AA@
  010b7	68 03 02 00 00	 push	 515			; 00000203H
  010bc	6a 00		 push	 0
  010be	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _hFile3$[ebp]
  010c4	50		 push	 eax
  010c5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  010cb	3b f4		 cmp	 esi, esp
  010cd	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 250  : 				AppendMenu(hFile3, MF_STRING, ID_USECOM2, "USECOM");

  010d2	8b f4		 mov	 esi, esp
  010d4	68 00 00 00 00	 push	 OFFSET ??_C@_06LOMHEHJH@USECOM?$AA@
  010d9	68 04 02 00 00	 push	 516			; 00000204H
  010de	6a 00		 push	 0
  010e0	8b 85 cc fe ff
	ff		 mov	 eax, DWORD PTR _hFile3$[ebp]
  010e6	50		 push	 eax
  010e7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  010ed	3b f4		 cmp	 esi, esp
  010ef	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 251  : 		
; 252  : 		/* Help */
; 253  : 		hHelpMenu = CreatePopupMenu();

  010f4	8b f4		 mov	 esi, esp
  010f6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  010fc	3b f4		 cmp	 esi, esp
  010fe	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01103	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01106	89 81 74 01 00
	00		 mov	 DWORD PTR [ecx+372], eax

; 254  : 		AppendMenu(hMenu, MF_STRING|MF_POPUP, (UINT)(LONG_PTR)hHelpMenu, "Help");

  0110c	8b f4		 mov	 esi, esp
  0110e	68 00 00 00 00	 push	 OFFSET ??_C@_04DDFEFHOJ@Help?$AA@
  01113	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01116	8b 88 74 01 00
	00		 mov	 ecx, DWORD PTR [eax+372]
  0111c	51		 push	 ecx
  0111d	6a 10		 push	 16			; 00000010H
  0111f	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01122	8b 82 70 01 00
	00		 mov	 eax, DWORD PTR [edx+368]
  01128	50		 push	 eax
  01129	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0112f	3b f4		 cmp	 esi, esp
  01131	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 255  : 		AppendMenu(hHelpMenu, MF_STRING, ID_ABOUT, "About");

  01136	8b f4		 mov	 esi, esp
  01138	68 00 00 00 00	 push	 OFFSET ??_C@_05BDOHFCKE@About?$AA@
  0113d	68 22 10 00 00	 push	 4130			; 00001022H
  01142	6a 00		 push	 0
  01144	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01147	8b 88 74 01 00
	00		 mov	 ecx, DWORD PTR [eax+372]
  0114d	51		 push	 ecx
  0114e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01154	3b f4		 cmp	 esi, esp
  01156	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 256  : 
; 257  : 		/* TreeViewMenu */
; 258  : 		hTreeViewMenu = CreatePopupMenu(); 

  0115b	8b f4		 mov	 esi, esp
  0115d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  01163	3b f4		 cmp	 esi, esp
  01165	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0116a	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0116d	89 81 98 01 00
	00		 mov	 DWORD PTR [ecx+408], eax

; 259  : 		AppendMenu(hTreeViewMenu, MF_STRING, ID_ADD, "Add to the current page");

  01173	8b f4		 mov	 esi, esp
  01175	68 00 00 00 00	 push	 OFFSET ??_C@_0BI@NICDCOKM@Add?5to?5the?5current?5page?$AA@
  0117a	68 11 10 00 00	 push	 4113			; 00001011H
  0117f	6a 00		 push	 0
  01181	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01184	8b 88 98 01 00
	00		 mov	 ecx, DWORD PTR [eax+408]
  0118a	51		 push	 ecx
  0118b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01191	3b f4		 cmp	 esi, esp
  01193	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 260  : 			HBITMAP hTreeViewBMP = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP39);

  01198	8b f4		 mov	 esi, esp
  0119a	68 a8 00 00 00	 push	 168			; 000000a8H
  0119f	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  011a2	50		 push	 eax
  011a3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  011a9	3b f4		 cmp	 esi, esp
  011ab	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011b0	89 85 c0 fe ff
	ff		 mov	 DWORD PTR _hTreeViewBMP$[ebp], eax

; 261  : 			SetMenuItemBitmaps(hTreeViewMenu, ID_ADD, MF_BYCOMMAND, hTreeViewBMP, hTreeViewBMP);

  011b6	8b f4		 mov	 esi, esp
  011b8	8b 85 c0 fe ff
	ff		 mov	 eax, DWORD PTR _hTreeViewBMP$[ebp]
  011be	50		 push	 eax
  011bf	8b 8d c0 fe ff
	ff		 mov	 ecx, DWORD PTR _hTreeViewBMP$[ebp]
  011c5	51		 push	 ecx
  011c6	6a 00		 push	 0
  011c8	68 11 10 00 00	 push	 4113			; 00001011H
  011cd	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  011d0	8b 82 98 01 00
	00		 mov	 eax, DWORD PTR [edx+408]
  011d6	50		 push	 eax
  011d7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  011dd	3b f4		 cmp	 esi, esp
  011df	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 262  : 		hCurrentPageIncludesMenu = CreatePopupMenu();

  011e4	8b f4		 mov	 esi, esp
  011e6	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  011ec	3b f4		 cmp	 esi, esp
  011ee	e8 00 00 00 00	 call	 __RTC_CheckEsp
  011f3	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  011f6	89 81 a0 01 00
	00		 mov	 DWORD PTR [ecx+416], eax

; 263  : 		AppendMenu(hCurrentPageIncludesMenu, MF_STRING, ID_DEL, "Delete from the current page");

  011fc	8b f4		 mov	 esi, esp
  011fe	68 00 00 00 00	 push	 OFFSET ??_C@_0BN@NPLKPGPE@Delete?5from?5the?5current?5page?$AA@
  01203	68 12 10 00 00	 push	 4114			; 00001012H
  01208	6a 00		 push	 0
  0120a	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0120d	8b 88 a0 01 00
	00		 mov	 ecx, DWORD PTR [eax+416]
  01213	51		 push	 ecx
  01214	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0121a	3b f4		 cmp	 esi, esp
  0121c	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 264  : 			HBITMAP hTreeViewBMP_2 = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP40);

  01221	8b f4		 mov	 esi, esp
  01223	68 a9 00 00 00	 push	 169			; 000000a9H
  01228	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  0122b	50		 push	 eax
  0122c	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  01232	3b f4		 cmp	 esi, esp
  01234	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01239	89 85 b4 fe ff
	ff		 mov	 DWORD PTR _hTreeViewBMP_2$[ebp], eax

; 265  : 			SetMenuItemBitmaps(hCurrentPageIncludesMenu, ID_DEL, MF_BYCOMMAND, hTreeViewBMP_2, hTreeViewBMP_2);

  0123f	8b f4		 mov	 esi, esp
  01241	8b 85 b4 fe ff
	ff		 mov	 eax, DWORD PTR _hTreeViewBMP_2$[ebp]
  01247	50		 push	 eax
  01248	8b 8d b4 fe ff
	ff		 mov	 ecx, DWORD PTR _hTreeViewBMP_2$[ebp]
  0124e	51		 push	 ecx
  0124f	6a 00		 push	 0
  01251	68 12 10 00 00	 push	 4114			; 00001012H
  01256	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01259	8b 82 a0 01 00
	00		 mov	 eax, DWORD PTR [edx+416]
  0125f	50		 push	 eax
  01260	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  01266	3b f4		 cmp	 esi, esp
  01268	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 266  : 		hAllPossibleIncludesMenu = CreatePopupMenu();

  0126d	8b f4		 mov	 esi, esp
  0126f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  01275	3b f4		 cmp	 esi, esp
  01277	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0127c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0127f	89 81 a4 01 00
	00		 mov	 DWORD PTR [ecx+420], eax

; 267  : 			AppendMenu(hAllPossibleIncludesMenu, MF_STRING, ID_GOTO, "Go to");

  01285	8b f4		 mov	 esi, esp
  01287	68 00 00 00 00	 push	 OFFSET ??_C@_05FGKNJMMO@Go?5to?$AA@
  0128c	68 20 10 00 00	 push	 4128			; 00001020H
  01291	6a 00		 push	 0
  01293	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01296	8b 88 a4 01 00
	00		 mov	 ecx, DWORD PTR [eax+420]
  0129c	51		 push	 ecx
  0129d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  012a3	3b f4		 cmp	 esi, esp
  012a5	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 268  : 			HBITMAP hTreeViewBMP_3 = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP68);

  012aa	8b f4		 mov	 esi, esp
  012ac	68 f1 00 00 00	 push	 241			; 000000f1H
  012b1	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  012b4	50		 push	 eax
  012b5	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  012bb	3b f4		 cmp	 esi, esp
  012bd	e8 00 00 00 00	 call	 __RTC_CheckEsp
  012c2	89 85 a8 fe ff
	ff		 mov	 DWORD PTR _hTreeViewBMP_3$[ebp], eax

; 269  : 			SetMenuItemBitmaps(hAllPossibleIncludesMenu, ID_GOTO, MF_BYCOMMAND, hTreeViewBMP_3, hTreeViewBMP_3);

  012c8	8b f4		 mov	 esi, esp
  012ca	8b 85 a8 fe ff
	ff		 mov	 eax, DWORD PTR _hTreeViewBMP_3$[ebp]
  012d0	50		 push	 eax
  012d1	8b 8d a8 fe ff
	ff		 mov	 ecx, DWORD PTR _hTreeViewBMP_3$[ebp]
  012d7	51		 push	 ecx
  012d8	6a 00		 push	 0
  012da	68 20 10 00 00	 push	 4128			; 00001020H
  012df	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  012e2	8b 82 a4 01 00
	00		 mov	 eax, DWORD PTR [edx+420]
  012e8	50		 push	 eax
  012e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  012ef	3b f4		 cmp	 esi, esp
  012f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 270  : 		hCodeVeiwIncludesMenu = CreatePopupMenu();

  012f6	8b f4		 mov	 esi, esp
  012f8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  012fe	3b f4		 cmp	 esi, esp
  01300	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01305	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01308	89 81 9c 01 00
	00		 mov	 DWORD PTR [ecx+412], eax

; 271  : 			AppendMenu(hCodeVeiwIncludesMenu, MF_STRING, ID_UPDATE, "Update");

  0130e	8b f4		 mov	 esi, esp
  01310	68 00 00 00 00	 push	 OFFSET ??_C@_06LMAGPFNF@Update?$AA@
  01315	68 21 10 00 00	 push	 4129			; 00001021H
  0131a	6a 00		 push	 0
  0131c	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0131f	8b 88 9c 01 00
	00		 mov	 ecx, DWORD PTR [eax+412]
  01325	51		 push	 ecx
  01326	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0132c	3b f4		 cmp	 esi, esp
  0132e	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 272  : 			HBITMAP hTreeViewBMP_4 = LoadBitmap(hMod, (LPCSTR)IDB_BITMAP69);

  01333	8b f4		 mov	 esi, esp
  01335	68 f2 00 00 00	 push	 242			; 000000f2H
  0133a	8b 45 ec	 mov	 eax, DWORD PTR _hMod$[ebp]
  0133d	50		 push	 eax
  0133e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadBitmapA@8
  01344	3b f4		 cmp	 esi, esp
  01346	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0134b	89 85 9c fe ff
	ff		 mov	 DWORD PTR _hTreeViewBMP_4$[ebp], eax

; 273  : 			SetMenuItemBitmaps(hCodeVeiwIncludesMenu, ID_UPDATE, MF_BYCOMMAND, hTreeViewBMP_4, hTreeViewBMP_4);

  01351	8b f4		 mov	 esi, esp
  01353	8b 85 9c fe ff
	ff		 mov	 eax, DWORD PTR _hTreeViewBMP_4$[ebp]
  01359	50		 push	 eax
  0135a	8b 8d 9c fe ff
	ff		 mov	 ecx, DWORD PTR _hTreeViewBMP_4$[ebp]
  01360	51		 push	 ecx
  01361	6a 00		 push	 0
  01363	68 21 10 00 00	 push	 4129			; 00001021H
  01368	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  0136b	8b 82 9c 01 00
	00		 mov	 eax, DWORD PTR [edx+412]
  01371	50		 push	 eax
  01372	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenuItemBitmaps@20
  01378	3b f4		 cmp	 esi, esp
  0137a	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 274  : 
; 275  : 		/* Empty Tab menu */
; 276  : 		hTabMenu=CreatePopupMenu();

  0137f	8b f4		 mov	 esi, esp
  01381	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  01387	3b f4		 cmp	 esi, esp
  01389	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0138e	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  01391	89 81 90 01 00
	00		 mov	 DWORD PTR [ecx+400], eax

; 277  : 		AppendMenu(hTabMenu, MF_STRING, ID_NEW, "New");

  01397	8b f4		 mov	 esi, esp
  01399	68 00 00 00 00	 push	 OFFSET ??_C@_03ILBCOJBH@New?$AA@
  0139e	68 09 10 00 00	 push	 4105			; 00001009H
  013a3	6a 00		 push	 0
  013a5	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  013a8	8b 88 90 01 00
	00		 mov	 ecx, DWORD PTR [eax+400]
  013ae	51		 push	 ecx
  013af	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  013b5	3b f4		 cmp	 esi, esp
  013b7	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 278  : 		AppendMenu(hTabMenu, MF_STRING, ID_FILE_OPEN, "Open");

  013bc	8b f4		 mov	 esi, esp
  013be	68 00 00 00 00	 push	 OFFSET ??_C@_04DNCDCIAE@Open?$AA@
  013c3	68 05 10 00 00	 push	 4101			; 00001005H
  013c8	6a 00		 push	 0
  013ca	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  013cd	8b 88 90 01 00
	00		 mov	 ecx, DWORD PTR [eax+400]
  013d3	51		 push	 ecx
  013d4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  013da	3b f4		 cmp	 esi, esp
  013dc	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 279  : 
; 280  : 		/* Tab menu */
; 281  : 		hEmptyTabMenu=CreatePopupMenu();

  013e1	8b f4		 mov	 esi, esp
  013e3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreatePopupMenu@0
  013e9	3b f4		 cmp	 esi, esp
  013eb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  013f0	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  013f3	89 81 94 01 00
	00		 mov	 DWORD PTR [ecx+404], eax

; 282  : 		AppendMenu(hEmptyTabMenu, MF_STRING, ID_SAVE, "Save");

  013f9	8b f4		 mov	 esi, esp
  013fb	68 00 00 00 00	 push	 OFFSET ??_C@_04INACKGJP@Save?$AA@
  01400	68 0f 10 00 00	 push	 4111			; 0000100fH
  01405	6a 00		 push	 0
  01407	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0140a	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  01410	51		 push	 ecx
  01411	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01417	3b f4		 cmp	 esi, esp
  01419	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 283  : 		AppendMenu(hEmptyTabMenu, MF_SEPARATOR, 0, 0);

  0141e	8b f4		 mov	 esi, esp
  01420	6a 00		 push	 0
  01422	6a 00		 push	 0
  01424	68 00 08 00 00	 push	 2048			; 00000800H
  01429	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0142c	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  01432	51		 push	 ecx
  01433	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01439	3b f4		 cmp	 esi, esp
  0143b	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 284  : 		AppendMenu(hEmptyTabMenu, MF_STRING, ID_CLOSE, "Close");

  01440	8b f4		 mov	 esi, esp
  01442	68 00 00 00 00	 push	 OFFSET ??_C@_05LGELBCGM@Close?$AA@
  01447	68 0b 10 00 00	 push	 4107			; 0000100bH
  0144c	6a 00		 push	 0
  0144e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01451	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  01457	51		 push	 ecx
  01458	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0145e	3b f4		 cmp	 esi, esp
  01460	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 285  : 		AppendMenu(hEmptyTabMenu, MF_STRING, ID_CLOSEALLBUTTHIS, "Close all but this");

  01465	8b f4		 mov	 esi, esp
  01467	68 00 00 00 00	 push	 OFFSET ??_C@_0BD@BMFLKMBH@Close?5all?5but?5this?$AA@
  0146c	68 23 10 00 00	 push	 4131			; 00001023H
  01471	6a 00		 push	 0
  01473	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01476	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  0147c	51		 push	 ecx
  0147d	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01483	3b f4		 cmp	 esi, esp
  01485	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 286  : 		AppendMenu(hEmptyTabMenu, MF_STRING, ID_CLOSELEFT, "Close all to the left");

  0148a	8b f4		 mov	 esi, esp
  0148c	68 00 00 00 00	 push	 OFFSET ??_C@_0BG@FMIKDOGJ@Close?5all?5to?5the?5left?$AA@
  01491	68 24 10 00 00	 push	 4132			; 00001024H
  01496	6a 00		 push	 0
  01498	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0149b	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  014a1	51		 push	 ecx
  014a2	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  014a8	3b f4		 cmp	 esi, esp
  014aa	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 287  : 		AppendMenu(hEmptyTabMenu, MF_STRING, ID_CLOSERIGHT, "Close all to the right");

  014af	8b f4		 mov	 esi, esp
  014b1	68 00 00 00 00	 push	 OFFSET ??_C@_0BH@COMNFMKL@Close?5all?5to?5the?5right?$AA@
  014b6	68 25 10 00 00	 push	 4133			; 00001025H
  014bb	6a 00		 push	 0
  014bd	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  014c0	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  014c6	51		 push	 ecx
  014c7	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  014cd	3b f4		 cmp	 esi, esp
  014cf	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 288  : 		AppendMenu(hEmptyTabMenu, MF_SEPARATOR, 0, 0);

  014d4	8b f4		 mov	 esi, esp
  014d6	6a 00		 push	 0
  014d8	6a 00		 push	 0
  014da	68 00 08 00 00	 push	 2048			; 00000800H
  014df	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  014e2	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  014e8	51		 push	 ecx
  014e9	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  014ef	3b f4		 cmp	 esi, esp
  014f1	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 289  : 		AppendMenu(hEmptyTabMenu, MF_STRING, ID_OPENFOLDER, "Open containing folder in explorer");

  014f6	8b f4		 mov	 esi, esp
  014f8	68 00 00 00 00	 push	 OFFSET ??_C@_0CD@JJJFCJMH@Open?5containing?5folder?5in?5explor@
  014fd	68 26 10 00 00	 push	 4134			; 00001026H
  01502	6a 00		 push	 0
  01504	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01507	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  0150d	51		 push	 ecx
  0150e	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01514	3b f4		 cmp	 esi, esp
  01516	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 290  : 		AppendMenu(hEmptyTabMenu, MF_SEPARATOR, 0, 0);

  0151b	8b f4		 mov	 esi, esp
  0151d	6a 00		 push	 0
  0151f	6a 00		 push	 0
  01521	68 00 08 00 00	 push	 2048			; 00000800H
  01526	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01529	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  0152f	51		 push	 ecx
  01530	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  01536	3b f4		 cmp	 esi, esp
  01538	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 291  : 		AppendMenu(hEmptyTabMenu, MF_STRING, ID_PRINT, "&Print\tCtrl+P");

  0153d	8b f4		 mov	 esi, esp
  0153f	68 00 00 00 00	 push	 OFFSET ??_C@_0O@BFLPKHLC@?$CGPrint?7Ctrl?$CLP?$AA@
  01544	68 08 10 00 00	 push	 4104			; 00001008H
  01549	6a 00		 push	 0
  0154b	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0154e	8b 88 94 01 00
	00		 mov	 ecx, DWORD PTR [eax+404]
  01554	51		 push	 ecx
  01555	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__AppendMenuA@16
  0155b	3b f4		 cmp	 esi, esp
  0155d	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 292  : 		
; 293  : 		SetMenu(hWnd, hMenu);

  01562	8b f4		 mov	 esi, esp
  01564	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  01567	8b 88 70 01 00
	00		 mov	 ecx, DWORD PTR [eax+368]
  0156d	51		 push	 ecx
  0156e	8b 55 f8	 mov	 edx, DWORD PTR _this$[ebp]
  01571	8b 82 64 01 00
	00		 mov	 eax, DWORD PTR [edx+356]
  01577	50		 push	 eax
  01578	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__SetMenu@8
  0157e	3b f4		 cmp	 esi, esp
  01580	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 294  : 	}

  01585	5f		 pop	 edi
  01586	5e		 pop	 esi
  01587	5b		 pop	 ebx
  01588	81 c4 28 02 00
	00		 add	 esp, 552		; 00000228H
  0158e	3b ec		 cmp	 ebp, esp
  01590	e8 00 00 00 00	 call	 __RTC_CheckEsp
  01595	8b e5		 mov	 esp, ebp
  01597	5d		 pop	 ebp
  01598	c3		 ret	 0
?Menu@Wnd@@AAEXXZ ENDP					; Wnd::Menu
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File d:\desktop\fasm\fasm\wndclass.cpp
;	COMDAT ??0Wnd@@QAE@KPBD0KHHHHPAUHWND__@@PAUHMENU__@@P6GJ1IIJ@Z@Z
_TEXT	SEGMENT
_hMod$ = -76						; size = 4
_wcex$ = -64						; size = 48
_this$ = -8						; size = 4
_dwEXstyle$ = 8						; size = 4
_classname$ = 12					; size = 4
_windowname$ = 16					; size = 4
_dwstyle$ = 20						; size = 4
_rx$ = 24						; size = 4
_ry$ = 28						; size = 4
_nx$ = 32						; size = 4
_ny$ = 36						; size = 4
_ParenthWnd$ = 40					; size = 4
_hmenu$ = 44						; size = 4
_WndProc$ = 48						; size = 4
??0Wnd@@QAE@KPBD0KHHHHPAUHWND__@@PAUHMENU__@@P6GJ1IIJ@Z@Z PROC ; Wnd::Wnd, COMDAT
; _this$ = ecx

; 17   : {

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec 10 01 00
	00		 sub	 esp, 272		; 00000110H
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	51		 push	 ecx
  0000d	8d bd f0 fe ff
	ff		 lea	 edi, DWORD PTR [ebp-272]
  00013	b9 44 00 00 00	 mov	 ecx, 68			; 00000044H
  00018	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001d	f3 ab		 rep stosd
  0001f	59		 pop	 ecx
  00020	89 4d f8	 mov	 DWORD PTR _this$[ebp], ecx

; 18   : 	WNDCLASSEX wcex;
; 19   : 	HMODULE hMod = GetModuleHandle(NULL);

  00023	8b f4		 mov	 esi, esp
  00025	6a 00		 push	 0
  00027	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__GetModuleHandleA@4
  0002d	3b f4		 cmp	 esi, esp
  0002f	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00034	89 45 b4	 mov	 DWORD PTR _hMod$[ebp], eax

; 20   : 	if(lstrcmpi(classname,"FRM_TEXTEDIT")==0)

  00037	8b f4		 mov	 esi, esp
  00039	68 00 00 00 00	 push	 OFFSET ??_C@_0N@IEHPLNDL@FRM_TEXTEDIT?$AA@
  0003e	8b 45 0c	 mov	 eax, DWORD PTR _classname$[ebp]
  00041	50		 push	 eax
  00042	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__lstrcmpiA@8
  00048	3b f4		 cmp	 esi, esp
  0004a	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0004f	85 c0		 test	 eax, eax
  00051	0f 85 63 01 00
	00		 jne	 $LN5@Wnd

; 21   : 	{   
; 22   : 		ZeroMemory(&wcex, sizeof(wcex)); 

  00057	6a 30		 push	 48			; 00000030H
  00059	6a 00		 push	 0
  0005b	8d 45 c0	 lea	 eax, DWORD PTR _wcex$[ebp]
  0005e	50		 push	 eax
  0005f	e8 00 00 00 00	 call	 _memset
  00064	83 c4 0c	 add	 esp, 12			; 0000000cH

; 23   : 		wcex.cbSize			= sizeof(WNDCLASSEX); 

  00067	c7 45 c0 30 00
	00 00		 mov	 DWORD PTR _wcex$[ebp], 48 ; 00000030H

; 24   : 		wcex.style          = 0;

  0006e	c7 45 c4 00 00
	00 00		 mov	 DWORD PTR _wcex$[ebp+4], 0

; 25   : 		wcex.lpfnWndProc    = WndProc;

  00075	8b 45 30	 mov	 eax, DWORD PTR _WndProc$[ebp]
  00078	89 45 c8	 mov	 DWORD PTR _wcex$[ebp+8], eax

; 26   : 		wcex.cbClsExtra     = NULL;

  0007b	c7 45 cc 00 00
	00 00		 mov	 DWORD PTR _wcex$[ebp+12], 0

; 27   : 		wcex.cbWndExtra     = NULL;

  00082	c7 45 d0 00 00
	00 00		 mov	 DWORD PTR _wcex$[ebp+16], 0

; 28   : 		wcex.hInstance		= NULL;

  00089	c7 45 d4 00 00
	00 00		 mov	 DWORD PTR _wcex$[ebp+20], 0

; 29   : 		wcex.hIcon          = LoadIcon(hMod,(LPCSTR)IDI_ICON1);

  00090	8b f4		 mov	 esi, esp
  00092	68 f4 00 00 00	 push	 244			; 000000f4H
  00097	8b 45 b4	 mov	 eax, DWORD PTR _hMod$[ebp]
  0009a	50		 push	 eax
  0009b	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8
  000a1	3b f4		 cmp	 esi, esp
  000a3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000a8	89 45 d8	 mov	 DWORD PTR _wcex$[ebp+24], eax

; 30   : 		wcex.hCursor        = LoadCursorA(NULL, IDC_ARROW);

  000ab	8b f4		 mov	 esi, esp
  000ad	68 00 7f 00 00	 push	 32512			; 00007f00H
  000b2	6a 00		 push	 0
  000b4	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadCursorA@8
  000ba	3b f4		 cmp	 esi, esp
  000bc	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000c1	89 45 dc	 mov	 DWORD PTR _wcex$[ebp+28], eax

; 31   : 		wcex.hbrBackground  = (HBRUSH)CreateSolidBrush(RGB(238,238,238));

  000c4	8b f4		 mov	 esi, esp
  000c6	68 ee ee ee 00	 push	 15658734		; 00eeeeeeH
  000cb	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateSolidBrush@4
  000d1	3b f4		 cmp	 esi, esp
  000d3	e8 00 00 00 00	 call	 __RTC_CheckEsp
  000d8	89 45 e0	 mov	 DWORD PTR _wcex$[ebp+32], eax

; 32   : 		wcex.lpszMenuName   = NULL;

  000db	c7 45 e4 00 00
	00 00		 mov	 DWORD PTR _wcex$[ebp+36], 0

; 33   : 		wcex.lpszClassName  = classname;

  000e2	8b 45 0c	 mov	 eax, DWORD PTR _classname$[ebp]
  000e5	89 45 e8	 mov	 DWORD PTR _wcex$[ebp+40], eax

; 34   : 		wcex.hIconSm        = LoadIcon(hMod,(LPCSTR)IDI_ICON1);	

  000e8	8b f4		 mov	 esi, esp
  000ea	68 f4 00 00 00	 push	 244			; 000000f4H
  000ef	8b 45 b4	 mov	 eax, DWORD PTR _hMod$[ebp]
  000f2	50		 push	 eax
  000f3	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__LoadIconA@8
  000f9	3b f4		 cmp	 esi, esp
  000fb	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00100	89 45 ec	 mov	 DWORD PTR _wcex$[ebp+44], eax

; 35   : 
; 36   : 		if (RegisterClassExA(&wcex))

  00103	8b f4		 mov	 esi, esp
  00105	8d 45 c0	 lea	 eax, DWORD PTR _wcex$[ebp]
  00108	50		 push	 eax
  00109	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__RegisterClassExA@4
  0010f	3b f4		 cmp	 esi, esp
  00111	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00116	0f b7 c8	 movzx	 ecx, ax
  00119	85 c9		 test	 ecx, ecx
  0011b	0f 84 94 00 00
	00		 je	 $LN4@Wnd

; 37   : 		{
; 38   : 			hWnd = CreateWindowExA(dwEXstyle, 
; 39   : 								   classname, 
; 40   : 								   windowname, 
; 41   : 								   dwstyle, 
; 42   : 								   rx,ry,nx,ny,
; 43   : 								   NULL,NULL,
; 44   : 								   hMod,WndProc);

  00121	8b f4		 mov	 esi, esp
  00123	8b 45 30	 mov	 eax, DWORD PTR _WndProc$[ebp]
  00126	50		 push	 eax
  00127	8b 4d b4	 mov	 ecx, DWORD PTR _hMod$[ebp]
  0012a	51		 push	 ecx
  0012b	6a 00		 push	 0
  0012d	6a 00		 push	 0
  0012f	8b 55 24	 mov	 edx, DWORD PTR _ny$[ebp]
  00132	52		 push	 edx
  00133	8b 45 20	 mov	 eax, DWORD PTR _nx$[ebp]
  00136	50		 push	 eax
  00137	8b 4d 1c	 mov	 ecx, DWORD PTR _ry$[ebp]
  0013a	51		 push	 ecx
  0013b	8b 55 18	 mov	 edx, DWORD PTR _rx$[ebp]
  0013e	52		 push	 edx
  0013f	8b 45 14	 mov	 eax, DWORD PTR _dwstyle$[ebp]
  00142	50		 push	 eax
  00143	8b 4d 10	 mov	 ecx, DWORD PTR _windowname$[ebp]
  00146	51		 push	 ecx
  00147	8b 55 0c	 mov	 edx, DWORD PTR _classname$[ebp]
  0014a	52		 push	 edx
  0014b	8b 45 08	 mov	 eax, DWORD PTR _dwEXstyle$[ebp]
  0014e	50		 push	 eax
  0014f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  00155	3b f4		 cmp	 esi, esp
  00157	e8 00 00 00 00	 call	 __RTC_CheckEsp
  0015c	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  0015f	89 81 64 01 00
	00		 mov	 DWORD PTR [ecx+356], eax

; 45   : 			if (hWnd!=0)

  00165	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00168	83 b8 64 01 00
	00 00		 cmp	 DWORD PTR [eax+356], 0
  0016f	74 44		 je	 SHORT $LN4@Wnd

; 46   : 			{
; 47   : 				ShowWindow(hWnd, SW_SHOWNORMAL);

  00171	8b f4		 mov	 esi, esp
  00173	6a 01		 push	 1
  00175	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00178	8b 88 64 01 00
	00		 mov	 ecx, DWORD PTR [eax+356]
  0017e	51		 push	 ecx
  0017f	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  00185	3b f4		 cmp	 esi, esp
  00187	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 48   : 				UpdateWindow(hWnd);

  0018c	8b f4		 mov	 esi, esp
  0018e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00191	8b 88 64 01 00
	00		 mov	 ecx, DWORD PTR [eax+356]
  00197	51		 push	 ecx
  00198	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4
  0019e	3b f4		 cmp	 esi, esp
  001a0	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 49   : 				this->Menu();

  001a5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001a8	e8 00 00 00 00	 call	 ?Menu@Wnd@@AAEXXZ	; Wnd::Menu

; 50   : 				this->FileOpen();

  001ad	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001b0	e8 00 00 00 00	 call	 ?FileOpen@Wnd@@AAEXXZ	; Wnd::FileOpen
$LN4@Wnd:

; 51   : 			}
; 52   : 		}			
; 53   : 
; 54   : 	}
; 55   : 	else

  001b5	e9 84 00 00 00	 jmp	 $LN6@Wnd
$LN5@Wnd:

; 56   : 	{
; 57   : 		hWnd = CreateWindowExA(dwEXstyle, 
; 58   : 							   classname, 
; 59   : 							   windowname, 
; 60   : 							   dwstyle, 
; 61   : 							   rx,ry,nx,ny, 
; 62   : 							   ParenthWnd, 
; 63   : 							   NULL, 
; 64   : 							   hMod, 
; 65   : 							   NULL);

  001ba	8b f4		 mov	 esi, esp
  001bc	6a 00		 push	 0
  001be	8b 45 b4	 mov	 eax, DWORD PTR _hMod$[ebp]
  001c1	50		 push	 eax
  001c2	6a 00		 push	 0
  001c4	8b 4d 28	 mov	 ecx, DWORD PTR _ParenthWnd$[ebp]
  001c7	51		 push	 ecx
  001c8	8b 55 24	 mov	 edx, DWORD PTR _ny$[ebp]
  001cb	52		 push	 edx
  001cc	8b 45 20	 mov	 eax, DWORD PTR _nx$[ebp]
  001cf	50		 push	 eax
  001d0	8b 4d 1c	 mov	 ecx, DWORD PTR _ry$[ebp]
  001d3	51		 push	 ecx
  001d4	8b 55 18	 mov	 edx, DWORD PTR _rx$[ebp]
  001d7	52		 push	 edx
  001d8	8b 45 14	 mov	 eax, DWORD PTR _dwstyle$[ebp]
  001db	50		 push	 eax
  001dc	8b 4d 10	 mov	 ecx, DWORD PTR _windowname$[ebp]
  001df	51		 push	 ecx
  001e0	8b 55 0c	 mov	 edx, DWORD PTR _classname$[ebp]
  001e3	52		 push	 edx
  001e4	8b 45 08	 mov	 eax, DWORD PTR _dwEXstyle$[ebp]
  001e7	50		 push	 eax
  001e8	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__CreateWindowExA@48
  001ee	3b f4		 cmp	 esi, esp
  001f0	e8 00 00 00 00	 call	 __RTC_CheckEsp
  001f5	8b 4d f8	 mov	 ecx, DWORD PTR _this$[ebp]
  001f8	89 81 64 01 00
	00		 mov	 DWORD PTR [ecx+356], eax

; 66   : 		if (hWnd)

  001fe	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00201	83 b8 64 01 00
	00 00		 cmp	 DWORD PTR [eax+356], 0
  00208	74 34		 je	 SHORT $LN6@Wnd

; 67   : 		{
; 68   : 			ShowWindow(hWnd, SW_SHOWNORMAL);

  0020a	8b f4		 mov	 esi, esp
  0020c	6a 01		 push	 1
  0020e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00211	8b 88 64 01 00
	00		 mov	 ecx, DWORD PTR [eax+356]
  00217	51		 push	 ecx
  00218	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__ShowWindow@8
  0021e	3b f4		 cmp	 esi, esp
  00220	e8 00 00 00 00	 call	 __RTC_CheckEsp

; 69   : 			UpdateWindow(hWnd);

  00225	8b f4		 mov	 esi, esp
  00227	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  0022a	8b 88 64 01 00
	00		 mov	 ecx, DWORD PTR [eax+356]
  00230	51		 push	 ecx
  00231	ff 15 00 00 00
	00		 call	 DWORD PTR __imp__UpdateWindow@4
  00237	3b f4		 cmp	 esi, esp
  00239	e8 00 00 00 00	 call	 __RTC_CheckEsp
$LN6@Wnd:

; 70   : 		}
; 71   : 	}
; 72   : 
; 73   : }

  0023e	8b 45 f8	 mov	 eax, DWORD PTR _this$[ebp]
  00241	52		 push	 edx
  00242	8b cd		 mov	 ecx, ebp
  00244	50		 push	 eax
  00245	8d 15 00 00 00
	00		 lea	 edx, DWORD PTR $LN10@Wnd
  0024b	e8 00 00 00 00	 call	 @_RTC_CheckStackVars@8
  00250	58		 pop	 eax
  00251	5a		 pop	 edx
  00252	5f		 pop	 edi
  00253	5e		 pop	 esi
  00254	5b		 pop	 ebx
  00255	81 c4 10 01 00
	00		 add	 esp, 272		; 00000110H
  0025b	3b ec		 cmp	 ebp, esp
  0025d	e8 00 00 00 00	 call	 __RTC_CheckEsp
  00262	8b e5		 mov	 esp, ebp
  00264	5d		 pop	 ebp
  00265	c2 2c 00	 ret	 44			; 0000002cH
$LN10@Wnd:
  00268	01 00 00 00	 DD	 1
  0026c	00 00 00 00	 DD	 $LN9@Wnd
$LN9@Wnd:
  00270	c0 ff ff ff	 DD	 -64			; ffffffc0H
  00274	30 00 00 00	 DD	 48			; 00000030H
  00278	00 00 00 00	 DD	 $LN8@Wnd
$LN8@Wnd:
  0027c	77		 DB	 119			; 00000077H
  0027d	63		 DB	 99			; 00000063H
  0027e	65		 DB	 101			; 00000065H
  0027f	78		 DB	 120			; 00000078H
  00280	00		 DB	 0
??0Wnd@@QAE@KPBD0KHHHHPAUHWND__@@PAUHMENU__@@P6GJ1IIJ@Z@Z ENDP ; Wnd::Wnd
_TEXT	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\xutility
;	COMDAT ??__Eallocator_arg@std@@YAXXZ
text$yc	SEGMENT
$T1 = -197						; size = 1
??__Eallocator_arg@std@@YAXXZ PROC			; std::`dynamic initializer for 'allocator_arg'', COMDAT

; 3644 : const allocator_arg_t allocator_arg = allocator_arg_t();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	33 c0		 xor	 eax, eax
  00020	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??__Eallocator_arg@std@@YAXXZ ENDP			; std::`dynamic initializer for 'allocator_arg''
text$yc	ENDS
; Function compile flags: /Odtp /RTCsu /ZI
; File c:\program files (x86)\microsoft visual studio 11.0\vc\include\utility
;	COMDAT ??__Epiecewise_construct@std@@YAXXZ
text$yc	SEGMENT
$T1 = -197						; size = 1
??__Epiecewise_construct@std@@YAXXZ PROC		; std::`dynamic initializer for 'piecewise_construct'', COMDAT

; 65   : 	piecewise_construct_t();

  00000	55		 push	 ebp
  00001	8b ec		 mov	 ebp, esp
  00003	81 ec cc 00 00
	00		 sub	 esp, 204		; 000000ccH
  00009	53		 push	 ebx
  0000a	56		 push	 esi
  0000b	57		 push	 edi
  0000c	8d bd 34 ff ff
	ff		 lea	 edi, DWORD PTR [ebp-204]
  00012	b9 33 00 00 00	 mov	 ecx, 51			; 00000033H
  00017	b8 cc cc cc cc	 mov	 eax, -858993460		; ccccccccH
  0001c	f3 ab		 rep stosd
  0001e	33 c0		 xor	 eax, eax
  00020	88 85 3b ff ff
	ff		 mov	 BYTE PTR $T1[ebp], al
  00026	5f		 pop	 edi
  00027	5e		 pop	 esi
  00028	5b		 pop	 ebx
  00029	8b e5		 mov	 esp, ebp
  0002b	5d		 pop	 ebp
  0002c	c3		 ret	 0
??__Epiecewise_construct@std@@YAXXZ ENDP		; std::`dynamic initializer for 'piecewise_construct''
text$yc	ENDS
END
