AbortDoc(__in HDC hdc);																		
AbortPath(__in HDC hdc);																		
AbortPrinter(__in HANDLE hPrinter);																		
AbortSystemShutdownA(__in_opt LPSTR lpMachineName);																		
AbortSystemShutdownW(__in_opt LPWSTR lpMachineName);																		
AccessCheck(__in PSECURITY_DESCRIPTOR pSecurityDescriptor,__in HANDLE ClientToken,__in DWORD DesiredAccess, __in PGENERIC_MAPPING GenericMapping,__out_bcount_part_opt(*PrivilegeSetLength, *PrivilegeSetLength) PPRIVILEGE_SET PrivilegeSet,__inout LPDWORD PrivilegeSetLength,__out LPDWORD GrantedAccess,__out LPBOOL AccessStatus);																		
AccessCheckAndAuditAlarmA(__in LPCSTR SubsystemName, __in_opt LPVOID HandleId, __in LPSTR ObjectTypeName, __in_opt LPSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in DWORD DesiredAccess, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPBOOL AccessStatus, __out LPBOOL pfGenerateOnClose );																		
AccessCheckAndAuditAlarmW(__in LPCWSTR SubsystemName, __in_opt LPVOID HandleId, __in LPWSTR ObjectTypeName, __in_opt LPWSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in DWORD DesiredAccess, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPBOOL AccessStatus, __out LPBOOL pfGenerateOnClose );																		
AccessCheckByType(__in PSECURITY_DESCRIPTOR pSecurityDescriptor,__in_opt PSID PrincipalSelfSid,__in HANDLE ClientToken, __in DWORD DesiredAccess, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList,__in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __out_bcount_part_opt(*PrivilegeSetLength, *PrivilegeSetLength) PPRIVILEGE_SET PrivilegeSet,__inout  LPDWORD PrivilegeSetLength,__out LPDWORD GrantedAccess,__out LPBOOL AccessStatus);																		
AccessCheckByTypeAndAuditAlarmA( __in LPCSTR SubsystemName, __in LPVOID HandleId, __in LPCSTR ObjectTypeName, __in_opt LPCSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in_opt PSID PrincipalSelfSid, __in DWORD DesiredAccess, __in AUDIT_EVENT_TYPE AuditType, __in DWORD Flags, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, __in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPBOOL AccessStatus, __out LPBOOL pfGenerateOnClose );																		
AccessCheckByTypeAndAuditAlarmW( __in LPCWSTR SubsystemName, __in LPVOID HandleId, __in LPCWSTR ObjectTypeName, __in_opt LPCWSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in_opt PSID PrincipalSelfSid, __in DWORD DesiredAccess, __in AUDIT_EVENT_TYPE AuditType, __in DWORD Flags, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, __in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPBOOL AccessStatus, __out LPBOOL pfGenerateOnClose );																		
AccessCheckByTypeResultList( __in PSECURITY_DESCRIPTOR pSecurityDescriptor, __in_opt PSID PrincipalSelfSid, __in HANDLE ClientToken, __in DWORD DesiredAccess, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, __in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __out_bcount_part_opt(*PrivilegeSetLength, *PrivilegeSetLength) PPRIVILEGE_SET PrivilegeSet, __inout  LPDWORD PrivilegeSetLength, __out LPDWORD GrantedAccessList, __out LPDWORD AccessStatusList );																		
AccessCheckByTypeResultListAndAuditAlarmA( __in LPCSTR SubsystemName, __in LPVOID HandleId, __in LPCSTR ObjectTypeName, __in_opt LPCSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in_opt PSID PrincipalSelfSid, __in DWORD DesiredAccess, __in AUDIT_EVENT_TYPE AuditType, __in DWORD Flags, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, __in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPDWORD AccessStatusList, __out LPBOOL pfGenerateOnClose );																		
AccessCheckByTypeResultListAndAuditAlarmByHandleA( __in LPCSTR SubsystemName, __in LPVOID HandleId, __in HANDLE ClientToken, __in LPCSTR ObjectTypeName, __in_opt LPCSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in_opt PSID PrincipalSelfSid, __in DWORD DesiredAccess, __in AUDIT_EVENT_TYPE AuditType, __in DWORD Flags, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, __in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPDWORD AccessStatusList, __out LPBOOL pfGenerateOnClose );																		
AccessCheckByTypeResultListAndAuditAlarmByHandleW( __in LPCWSTR SubsystemName, __in LPVOID HandleId, __in HANDLE ClientToken, __in LPCWSTR ObjectTypeName, __in_opt LPCWSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in_opt PSID PrincipalSelfSid, __in DWORD DesiredAccess, __in AUDIT_EVENT_TYPE AuditType, __in DWORD Flags, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, __in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPDWORD AccessStatusList, __out LPBOOL pfGenerateOnClose );																		
AccessCheckByTypeResultListAndAuditAlarmW( __in LPCWSTR SubsystemName, __in LPVOID HandleId, __in LPCWSTR ObjectTypeName, __in_opt LPCWSTR ObjectName, __in PSECURITY_DESCRIPTOR SecurityDescriptor, __in_opt PSID PrincipalSelfSid, __in DWORD DesiredAccess, __in AUDIT_EVENT_TYPE AuditType, __in DWORD Flags, __inout_ecount_opt(ObjectTypeListLength) POBJECT_TYPE_LIST ObjectTypeList, __in DWORD ObjectTypeListLength, __in PGENERIC_MAPPING GenericMapping, __in BOOL ObjectCreation, __out LPDWORD GrantedAccess, __out LPDWORD AccessStatusList, __out LPBOOL pfGenerateOnClose );																		
AcquireSRWLockExclusive( __inout PSRWLOCK SRWLock );																		
AcquireSRWLockShared( __inout PSRWLOCK SRWLock );																		
ActivateActCtx( __inout_opt HANDLE hActCtx, __out   ULONG_PTR *lpCookie );																		
ActivateKeyboardLayout( __in HKL hkl, __in UINT Flags);																		
ActivateKeyboardLayout( __in HKL hkl, __in UINT Flags);																		
AddAccessAllowedAce( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD AccessMask, __in PSID pSid );																		
AddAccessAllowedAceEx( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in DWORD AccessMask, __in PSID pSid );																		
AddAccessAllowedObjectAce( __inout  PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in DWORD AccessMask, __in_opt GUID *ObjectTypeGuid, __in_opt GUID *InheritedObjectTypeGuid, __in PSID pSid );																		
AddAccessDeniedAce( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD AccessMask, __in PSID pSid );																		
AddAccessDeniedAceEx( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in DWORD AccessMask, __in PSID pSid );																		
AddAccessDeniedObjectAce( __inout  PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in DWORD AccessMask, __in_opt GUID *ObjectTypeGuid, __in_opt GUID *InheritedObjectTypeGuid, __in PSID pSid );																		
AddAce( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD dwStartingAceIndex, __in_bcount(nAceListLength) LPVOID pAceList, __in DWORD nAceListLength );																		
AddAtomA( __in_opt LPCSTR lpString );																		
AddAtomW( __in_opt LPCWSTR lpString );																		
AddAuditAccessAce( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD dwAccessMask, __in PSID pSid, __in BOOL bAuditSuccess, __in BOOL bAuditFailure );																		
AddAuditAccessAceEx( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in DWORD dwAccessMask, __in PSID pSid, __in BOOL bAuditSuccess, __in BOOL bAuditFailure );																		
AddAuditAccessObjectAce ( __inout  PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in DWORD AccessMask, __in_opt GUID *ObjectTypeGuid, __in_opt GUID *InheritedObjectTypeGuid, __in PSID pSid, __in BOOL bAuditSuccess, __in BOOL bAuditFailure );																		
AddClipboardFormatListener(__in HWND hwnd);																		
AddClusterNode( __in HCLUSTER hCluster, __in PCWSTR lpszNodeName, __in_opt PCLUSTER_SETUP_PROGRESS_CALLBACK pfnProgressCallback, __in_opt PVOID pvCallbackArg );																		
AddClusterResourceDependency( __in HRESOURCE hResource, __in HRESOURCE hDependsOn );																		
AddClusterResourceNode( __in HRESOURCE hResource, __in HNODE hNode );																		
AddConditionalAce ( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in UCHAR AceType, __in DWORD AccessMask, __in PSID pSid, __in PWCHAR ConditionStr, __out DWORD *ReturnLength );																		
AddConsoleAliasA( __in LPSTR Source, __in LPSTR Target, __in LPSTR ExeName);																		
AddConsoleAliasW( __in LPWSTR Source, __in LPWSTR Target, __in LPWSTR ExeName);																		
AddFormA(__in HANDLE  hPrinter, DWORD Level,__in LPBYTE  pForm);																		
AddFormW(__in HANDLE  hPrinter, DWORD Level,__in LPBYTE  pForm);																		
AddIntegrityLabelToBoundaryDescriptor(    __inout HANDLE * BoundaryDescriptor,    __in PSID IntegrityLabel    );																		
AddIPAddress( __in IPAddr  Address, __in IPMask IpMask, __in DWORD IfIndex, __out PULONG NTEContext, __out PULONG NTEInstance );																		
AddJobA(__in HANDLE  hPrinter, DWORD Level,__out_bcount_opt(cbBuf) LPBYTE pData, DWORD cbBuf,__out LPDWORD pcbNeeded);																		
AddJobW(__in HANDLE  hPrinter, DWORD Level,__out_bcount_opt(cbBuf) LPBYTE pData, DWORD cbBuf,__out LPDWORD pcbNeeded);																		
AddMandatoryAce ( __inout PACL pAcl, __in DWORD dwAceRevision, __in DWORD AceFlags, __in DWORD MandatoryPolicy, __in PSID pLabelSid );																		
AddMonitorA(__in_opt LPSTR pName, DWORD Level,__in LPBYTE pMonitors);																		
AddMonitorW(__in_opt LPWSTR pName, DWORD Level,__in LPBYTE pMonitors);																		
AddPortA(__in_opt LPSTR pName,__in HWND hWnd,__in LPSTR pMonitorName);																		
AddPortW(__in_opt LPWSTR pName,__in HWND hWnd,__in LPWSTR pMonitorName);																		
AddPrinterA(__in_opt LPSTR pName, DWORD Level,__in LPBYTE pPrinter);																		
AddPrinterConnectionA(__in LPSTR pName);																		
AddPrinterConnectionW(__in LPWSTR pName);																		
AddPrinterDriverA(__in_opt LPSTR pName, DWORD Level,__in LPBYTE pDriverInfo);																		
AddPrinterDriverExA(__in_opt LPSTR pName, DWORD Level,__in LPBYTE pDriverInfo, DWORD dwFileCopyFlags);																		
AddPrinterDriverExW(__in_opt LPWSTR pName, DWORD Level,__in LPBYTE pDriverInfo, DWORD dwFileCopyFlags);																		
AddPrinterDriverW(__in_opt LPWSTR pName, DWORD Level,__in LPBYTE pDriverInfo);																		
AddPrinterW(__in_opt LPWSTR pName, DWORD Level,__in LPBYTE pPrinter);																		
AddPrintProcessorA(__in_opt LPSTR pName,__in_opt LPSTR pEnvironment,__in LPSTR pPathName,__in LPSTR pPrintProcessorName);																		
AddPrintProcessorW(__in_opt LPWSTR pName,__in_opt LPWSTR pEnvironment,__in LPWSTR pPathName,__in LPWSTR pPrintProcessorName);																		
AddPrintProvidorA(__in_opt LPSTR pName, DWORD level,__in LPBYTE pProvidorInfo);																		
AddPrintProvidorW(__in_opt LPWSTR pName, DWORD level,__in LPBYTE pProvidorInfo);																		
AddRefActCtx( __inout HANDLE hActCtx );																		
AddResourceToClusterSharedVolumes( __in HRESOURCE hResource );																		
AddSecureMemoryCacheCallback( __in __callback PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack );																		
AddSIDToBoundaryDescriptor( __inout HANDLE * BoundaryDescriptor, __in PSID RequiredSid );																		
AddUsersToEncryptedFile( __in LPCWSTR lpFileName, __in PENCRYPTION_CERTIFICATE_LIST pEncryptionCertificates );																		
AddVectoredContinueHandler ( __in ULONG First, __in PVECTORED_EXCEPTION_HANDLER Handler );																		
AddVectoredExceptionHandler ( __in ULONG First, __in PVECTORED_EXCEPTION_HANDLER Handler );																		
AdjustTokenGroups ( __in HANDLE TokenHandle, __in BOOL ResetToDefault, __in_opt PTOKEN_GROUPS NewState, __in DWORD BufferLength, __out_bcount_part_opt(BufferLength, *ReturnLength) PTOKEN_GROUPS PreviousState, __out_opt PDWORD ReturnLength );																		
AdjustTokenPrivileges ( __in HANDLE TokenHandle, __in BOOL DisableAllPrivileges, __in_opt PTOKEN_PRIVILEGES NewState, __in DWORD BufferLength, __out_bcount_part_opt(BufferLength, *ReturnLength) PTOKEN_PRIVILEGES PreviousState, __out_opt PDWORD ReturnLength );																		
AdjustWindowRect( __inout LPRECT lpRect, __in DWORD dwStyle, __in BOOL bMenu);																		
AdjustWindowRectEx(__inout LPRECT lpRect,__in DWORD dwStyle,__in BOOL bMenu,__in DWORD dwExStyle);																		
ADsBuildEnumerator(IADsContainer *pADsContainer,IEnumVARIANT   **ppEnumVariant);																		
ADsBuildVarArrayInt(LPDWORD lpdwObjectTypes,DWORD dwObjectTypes,VARIANT * pVar);																		
ADsBuildVarArrayStr(__in_ecount(dwPathNames) LPWSTR * lppPathNames,DWORD  dwPathNames,VARIANT * pVar);																		
ADsDecodeBinaryData (LPCWSTR szSrcData,PBYTE  *ppbDestData,ULONG  *pdwDestLen);																		
ADsEncodeBinaryData (PBYTE pbSrcData,DWORD dwSrcLen,__deref_out LPWSTR  * ppszDestData);																		
ADsEnumerateNext(IEnumVARIANT *pEnumVariant,ULONG cElements,VARIANT FAR  *pvar,ULONG FAR *pcElementsFetched);																		
ADsFreeAllErrorRecords( VOID);																		
ADsFreeEnumerator(IEnumVARIANT *pEnumVariant);																		
ADsGetLastError(OUT LPDWORD lpError,__out_ecount(dwErrorBufLen) LPWSTR  lpErrorBuf,IN DWORD dwErrorBufLen,__out_ecount(dwNameBufLen) LPWSTR  lpNameBuf,IN  DWORD   dwNameBufLen);																		
ADsGetObject(LPCWSTR lpszPathName,REFIID riid,VOID * * ppObject);																		
ADsOpenObject(LPCWSTR lpszPathName,LPCWSTR lpszUserName,LPCWSTR lpszPassword,DWORD  dwReserved,REFIID riid,void FAR * FAR * ppObject);																		
ADsSetLastError( IN DWORD dwErr, IN LPCWSTR pszError, IN LPCWSTR pszProvider );																		
AdsTypeToPropVariant(PADSVALUE pAdsValues,DWORD dwNumValues,VARIANT * pVariant);																		
AdvancedDocumentPropertiesA(__in HWND hWnd,__in HANDLE hPrinter,__in LPSTR pDeviceName,__inout_opt PDEVMODEA pDevModeOutput,__in_opt PDEVMODEA pDevModeInput);																		
AdvancedDocumentPropertiesW(__in HWND hWnd,__in HANDLE hPrinter,__in LPWSTR pDeviceName,__inout_opt PDEVMODEW pDevModeOutput,__in_opt PDEVMODEW pDevModeInput);																		
AllocateAndInitializeSid( __in PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority, __in BYTE nSubAuthorityCount, __in DWORD nSubAuthority0, __in DWORD nSubAuthority1, __in DWORD nSubAuthority2, __in DWORD nSubAuthority3, __in DWORD nSubAuthority4, __in DWORD nSubAuthority5, __in DWORD nSubAuthority6, __in DWORD nSubAuthority7, __deref_out PSID *pSid );																		
AllocateLocallyUniqueId( __out PLUID Luid );																		
AllocateUserPhysicalPages( __in HANDLE hProcess, __inout PULONG_PTR NumberOfPages, __out_ecount_part(*NumberOfPages, *NumberOfPages) PULONG_PTR PageArray );																		
AllocateUserPhysicalPagesNuma( __in HANDLE hProcess, __inout PULONG_PTR NumberOfPages, __out_ecount_part(*NumberOfPages, *NumberOfPages) PULONG_PTR PageArray, __in DWORD nndPreferred );																		
AllocConnections(IN OUT Connections** connections,IN UINT16 connectionsCount);																		
AllocConsole(VOID);																		
AllocCountedString(IN OUT CountedString** countedString,IN CONST WCHAR* string);																		
AllocFixupInfo(IN OUT FixupInfo** fixupInfo,IN UINT16 countResultCodes);																		
AllowSetForegroundWindow(__in DWORD dwProcessId);																		
AlphaBlend(__in HDC hdcDest, __in int xoriginDest, __in int yoriginDest, __in int wDest, __in int hDest, __in HDC hdcSrc, __in int xoriginSrc, __in int yoriginSrc, __in int wSrc, __in int hSrc, __in BLENDFUNCTION ftn);																		
AngleArc( __in HDC hdc, __in int x, __in int y, __in DWORD r, __in FLOAT StartAngle, __in FLOAT SweepAngle);																		
AnimateWindow( __in HWND hWnd, __in DWORD dwTime, __in DWORD dwFlags);																		
AnyPopup(VOID);																		
AppendMenuA( __in HMENU hMenu, __in UINT uFlags, __in UINT_PTR uIDNewItem, __in_opt LPCSTR lpNewItem);																		
AppendMenuW( __in HMENU hMenu, __in UINT uFlags, __in UINT_PTR uIDNewItem, __in_opt LPCWSTR lpNewItem);																		
ApphelpCheckShellObject( __in  REFCLSID    ObjectCLSID, __in  BOOL bShimIfNecessary, __out ULONGLONG*  pullFlags );																		
ApplicationRecoveryFinished( __in BOOL bSuccess );																		
ApplicationRecoveryInProgress( __out PBOOL pbCancelled );																		
ApplyDeltaA( __in DELTA_FLAG_TYPE ApplyFlags, __in LPCSTR lpSourceName, __in LPCSTR lpDeltaName, __in LPCSTR lpTargetName );																		
ApplyDeltaB( __in DELTA_FLAG_TYPE ApplyFlags, __in DELTA_INPUT Source, __in DELTA_INPUT Delta, __out LPDELTA_OUTPUT lpTarget );																		
ApplyDeltaProvidedB( __in DELTA_FLAG_TYPE ApplyFlags, __in DELTA_INPUT Source, __in DELTA_INPUT Delta, __inout_bcount( uTargetSize ) LPVOID lpTarget, __in SIZE_T uTargetSize );																		
ApplyDeltaW( __in DELTA_FLAG_TYPE ApplyFlags, __in LPCWSTR lpSourceName, __in LPCWSTR lpDeltaName, __in LPCWSTR lpTargetName    );																		
ArcTo(__in HDC hdc, __in int left, __in int top, __in int right, __in int bottom, __in int xr1, __in int yr1, __in int xr2, __in int yr2);																		
AreAllAccessesGranted ( __in DWORD GrantedAccess, __in DWORD DesiredAccess );																		
AreAnyAccessesGranted ( __in DWORD GrantedAccess, __in DWORD DesiredAccess );																		
AreFileApisANSI(VOID);																		
ArrangeIconicWindows(__in HWND hWnd);																		
AssignProcessToJobObject(__in HANDLE hJob,__in HANDLE hProcess);																		
AttachConsole(__in DWORD dwProcessId);																		
AttachThreadInput( __in DWORD idAttach, __in DWORD idAttachTo, __in BOOL fAttach);																		
AttachVirtualDisk( __in HANDLE VirtualDiskHandle, __in_opt PSECURITY_DESCRIPTOR SecurityDescriptor, __in ATTACH_VIRTUAL_DISK_FLAG Flags, __in ULONG ProviderSpecificFlags, __in_opt PATTACH_VIRTUAL_DISK_PARAMETERS Parameters, __in_opt LPOVERLAPPED Overlapped );																		
AuthzAccessCheck( IN DWORD Flags, IN AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, IN PAUTHZ_ACCESS_REQUEST pRequest, IN AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent OPTIONAL, IN PSECURITY_DESCRIPTOR pSecurityDescriptor, IN PSECURITY_DESCRIPTOR *OptionalSecurityDescriptorArray OPTIONAL, IN DWORD OptionalSecurityDescriptorCount, IN OUT PAUTHZ_ACCESS_REPLY pReply, OUT PAUTHZ_ACCESS_CHECK_RESULTS_HANDLE phAccessCheckResults OPTIONAL );																		
AuthzAddSidsToContext( IN  AUTHZ_CLIENT_CONTEXT_HANDLE  hAuthzClientContext, IN  PSID_AND_ATTRIBUTES Sids OPTIONAL, IN  DWORD SidCount, IN  PSID_AND_ATTRIBUTES RestrictedSids OPTIONAL, IN  DWORD RestrictedSidCount, OUT PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext );																		
AuthzCachedAccessCheck( IN DWORD Flags, IN AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults, IN PAUTHZ_ACCESS_REQUEST pRequest, IN AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent OPTIONAL, IN OUT PAUTHZ_ACCESS_REPLY pReply );																		
AuthzEnumerateSecurityEventSources( IN DWORD dwFlags, OUT PAUTHZ_SOURCE_SCHEMA_REGISTRATION Buffer, OUT PDWORD pdwCount, IN OUT PDWORD pdwLength );																		
AuthzEvaluateSacl( IN  AUTHZ_CLIENT_CONTEXT_HANDLE AuthzClientContext, IN PAUTHZ_ACCESS_REQUEST pRequest, IN PACL Sacl, IN  ACCESS_MASK GrantedAccess, IN BOOL AccessGranted, OUT PBOOL pbGenerateAudit );																		
AuthzFreeAuditEvent( IN AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent );																		
AuthzFreeContext( IN AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext );																		
AuthzFreeHandle( IN OUT AUTHZ_ACCESS_CHECK_RESULTS_HANDLE hAccessCheckResults );																		
AuthzFreeResourceManager( IN AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager );																		
AuthzGetInformationFromContext( IN  AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, IN AUTHZ_CONTEXT_INFORMATION_CLASS InfoClass, IN DWORD BufferSize, OUT PDWORD pSizeRequired, OUT PVOID Buffer);																		
AuthzInitializeContextFromAuthzContext( IN DWORD Flags, IN  AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, IN  PLARGE_INTEGER pExpirationTime OPTIONAL, IN  LUID Identifier, IN PVOID DynamicGroupArgs, OUT PAUTHZ_CLIENT_CONTEXT_HANDLE phNewAuthzClientContext );																		
AuthzInitializeContextFromSid( IN DWORD Flags, IN PSID UserSid, IN  AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager, IN PLARGE_INTEGER pExpirationTime OPTIONAL, IN  LUID Identifier, IN PVOID DynamicGroupArgs OPTIONAL, OUT PAUTHZ_CLIENT_CONTEXT_HANDLE  phAuthzClientContext );																		
AuthzInitializeContextFromToken( IN DWORD Flags, IN  HANDLE TokenHandle, IN  AUTHZ_RESOURCE_MANAGER_HANDLE hAuthzResourceManager, IN  PLARGE_INTEGER pExpirationTime OPTIONAL, IN LUID Identifier, IN PVOID DynamicGroupArgs OPTIONAL, OUT PAUTHZ_CLIENT_CONTEXT_HANDLE  phAuthzClientContext    );																		
AuthzInitializeObjectAccessAuditEvent( IN DWORD Flags, IN AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType, __in  PWSTR szOperationType, __in  PWSTR szObjectType, __in  PWSTR szObjectName, __in  PWSTR szAdditionalInfo, OUT PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent, IN DWORD dwAdditionalParameterCount, ... );																		
AuthzInitializeObjectAccessAuditEvent2( IN DWORD Flags, IN AUTHZ_AUDIT_EVENT_TYPE_HANDLE hAuditEventType, __in  PWSTR szOperationType, __in  PWSTR szObjectType, __in  PWSTR szObjectName, __in  PWSTR szAdditionalInfo, __in PWSTR szAdditionalInfo2, OUT PAUTHZ_AUDIT_EVENT_HANDLE phAuditEvent, IN DWORD dwAdditionalParameterCount, ... );																		
AuthzInitializeResourceManager( IN DWORD Flags, IN PFN_AUTHZ_DYNAMIC_ACCESS_CHECK   pfnDynamicAccessCheck   OPTIONAL,    IN PFN_AUTHZ_COMPUTE_DYNAMIC_GROUPS pfnComputeDynamicGroups OPTIONAL, IN PFN_AUTHZ_FREE_DYNAMIC_GROUPS pfnFreeDynamicGroups OPTIONAL, IN PCWSTR szResourceManagerName, OUT PAUTHZ_RESOURCE_MANAGER_HANDLE  phAuthzResourceManager );																		
AuthzInstallSecurityEventSource( IN DWORD dwFlags, IN PAUTHZ_SOURCE_SCHEMA_REGISTRATION pRegistration    );																		
AuthzModifySecurityAttributes( __in AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, __in PAUTHZ_SECURITY_ATTRIBUTE_OPERATION pOperations, __in PAUTHZ_SECURITY_ATTRIBUTES_INFORMATION  pAttributes );																		
AuthzOpenObjectAudit( IN DWORD Flags, IN AUTHZ_CLIENT_CONTEXT_HANDLE hAuthzClientContext, IN PAUTHZ_ACCESS_REQUEST pRequest, IN AUTHZ_AUDIT_EVENT_HANDLE hAuditEvent, IN PSECURITY_DESCRIPTOR pSecurityDescriptor, IN PSECURITY_DESCRIPTOR *OptionalSecurityDescriptorArray OPTIONAL, IN DWORD OptionalSecurityDescriptorCount, IN PAUTHZ_ACCESS_REPLY pReply );																		
AuthzRegisterSecurityEventSource( IN DWORD dwFlags, IN  PCWSTR szEventSourceName, OUT PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider );																		
AuthzReportSecurityEvent( IN DWORD dwFlags, IN OUT AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider, IN DWORD dwAuditId, IN PSID pUserSid OPTIONAL, IN DWORD dwCount, ... );																		
AuthzReportSecurityEventFromParams( IN DWORD dwFlags, IN OUT AUTHZ_SECURITY_EVENT_PROVIDER_HANDLE hEventProvider, IN DWORD dwAuditId, IN PSID pUserSid OPTIONAL, IN PAUDIT_PARAMS pParams );																		
AuthzUninstallSecurityEventSource( IN DWORD dwFlags, IN PCWSTR szEventSourceName );																		
AuthzUnregisterSecurityEventSource( IN DWORD dwFlags, IN OUT PAUTHZ_SECURITY_EVENT_PROVIDER_HANDLE phEventProvider );																		
AuxUlibInitialize ( VOID );																		
AuxUlibIsDLLSynchronizationHeld ( OUT PBOOL SynchronizationHeld );																		
AuxUlibSetSystemFileCacheSize ( IN SIZE_T MinimumFileCacheSize, IN SIZE_T MaximumFileCacheSize, IN DWORD Flags );																		
AvQuerySystemResponsiveness ( __in HANDLE AvrtHandle, __out PULONG SystemResponsivenessValue );																		
AvRevertMmThreadCharacteristics ( __in HANDLE AvrtHandle );																		
AvRtCreateThreadOrderingGroup ( __out PHANDLE Context, __in PLARGE_INTEGER Period, __inout GUID *ThreadOrderingGuid, __in_opt PLARGE_INTEGER Timeout );																		
AvRtCreateThreadOrderingGroupExA ( __out PHANDLE Context, __in PLARGE_INTEGER Period, __inout GUID *ThreadOrderingGuid, __in_opt PLARGE_INTEGER Timeout, __in LPCSTR TaskName );																		
AvRtCreateThreadOrderingGroupExW ( __out PHANDLE Context, __in PLARGE_INTEGER Period, __inout GUID *ThreadOrderingGuid, __in_opt PLARGE_INTEGER Timeout, __in LPCWSTR TaskName );																		
AvRtDeleteThreadOrderingGroup ( __in HANDLE Context );																		
AvRtJoinThreadOrderingGroup ( __out PHANDLE Context, __in GUID *ThreadOrderingGuid, __in BOOL Before );																		
AvRtLeaveThreadOrderingGroup ( __in HANDLE Context );																		
AvRtWaitOnThreadOrderingGroup ( __in HANDLE Context );																		
AvSetMmMaxThreadCharacteristicsA ( __in LPCSTR FirstTask, __in LPCSTR SecondTask, __inout LPDWORD TaskIndex );																		
AvSetMmMaxThreadCharacteristicsW ( __in LPCWSTR FirstTask, __in LPCWSTR SecondTask, __inout LPDWORD TaskIndex );																		
AvSetMmThreadCharacteristicsA ( __in LPCSTR TaskName, __inout LPDWORD TaskIndex );																		
AvSetMmThreadCharacteristicsW ( __in LPCWSTR TaskName, __inout LPDWORD TaskIndex );																		
AvSetMmThreadPriority ( __in HANDLE AvrtHandle, __in AVRT_PRIORITY Priority );																		
BackupClusterDatabase( __in HCLUSTER hCluster, __in LPCWSTR  lpszPathName );																		
BackupEventLogA ( __in HANDLE hEventLog, __in LPCSTR lpBackupFileName );																		
BackupEventLogW ( __in HANDLE hEventLog, __in LPCWSTR lpBackupFileName );																		
BackupRead( __in HANDLE hFile, __out_bcount_part(nNumberOfBytesToRead, *lpNumberOfBytesRead) LPBYTE lpBuffer, __in DWORD nNumberOfBytesToRead, __out LPDWORD lpNumberOfBytesRead, __in BOOL bAbort, __in BOOL bProcessSecurity, __inout LPVOID *lpContext );																		
BackupSeek( __in HANDLE hFile, __in DWORD dwLowBytesToSeek, __in DWORD  dwHighBytesToSeek, __out LPDWORD lpdwLowByteSeeked, __out LPDWORD lpdwHighByteSeeked, __inout LPVOID *lpContext );																		
BackupWrite( __in HANDLE hFile, __in_bcount(nNumberOfBytesToWrite) LPBYTE lpBuffer, __in DWORD nNumberOfBytesToWrite, __out LPDWORD lpNumberOfBytesWritten, __in BOOL bAbort, __in BOOL bProcessSecurity, __inout LPVOID *lpContext );																		
BCryptAddContextFunction( __in ULONG dwTable, __in LPCWSTR pszContext, __in ULONG dwInterface, __in LPCWSTR pszFunction, __in ULONG dwPosition);																		
BCryptCloseAlgorithmProvider( __inout BCRYPT_ALG_HANDLE hAlgorithm, __in ULONG dwFlags);																		
BCryptConfigureContext( __in ULONG dwTable, __in LPCWSTR pszContext, __in PCRYPT_CONTEXT_CONFIG pConfig);																		
BCryptConfigureContextFunction( __in ULONG dwTable, __in LPCWSTR pszContext, __in ULONG dwInterface, __in LPCWSTR pszFunction, __in PCRYPT_CONTEXT_FUNCTION_CONFIG pConfig);																		
BCryptCreateContext(__in ULONG dwTable,__in LPCWSTR pszContext,__in_opt PCRYPT_CONTEXT_CONFIG pConfig);																
BCryptCreateHash( __inout BCRYPT_ALG_HANDLE hAlgorithm, __out BCRYPT_HASH_HANDLE  *phHash, __out_bcount_full_opt(cbHashObject) PUCHAR   pbHashObject, __in ULONG cbHashObject, __in_bcount_opt(cbSecret) PUCHAR pbSecret, ULONG   cbSecret, ULONG dwFlags);																		
BCryptDecrypt( __inout BCRYPT_KEY_HANDLE hKey, __in_bcount_opt(cbInput) PUCHAR pbInput, __in ULONG cbInput, __in_opt VOID *pPaddingInfo, __inout_bcount_opt(cbIV) PUCHAR pbIV, __in ULONG cbIV, __out_bcount_part_opt(cbOutput, *pcbResult) PUCHAR pbOutput, __in ULONG cbOutput, __out ULONG *pcbResult, __in ULONG dwFlags);																		
BCryptDeleteContext( __in ULONG dwTable, __in LPCWSTR pszContext);																		
BCryptDeriveKey( __in BCRYPT_SECRET_HANDLE hSharedSecret, __in LPCWSTR pwszKDF, __in_opt BCryptBufferDesc *pParameterList, __out_bcount_part_opt(cbDerivedKey, *pcbResult) PUCHAR pbDerivedKey, __in ULONG cbDerivedKey, __out ULONG *pcbResult, __in ULONG dwFlags);																		
BCryptDeriveKeyCapi( __in BCRYPT_HASH_HANDLE  hHash, __in_opt BCRYPT_ALG_HANDLE hTargetAlg, __out_bcount( cbDerivedKey ) PUCHAR pbDerivedKey, __in ULONG cbDerivedKey, __in ULONG dwFlags);																		
BCryptDeriveKeyPBKDF2( __in BCRYPT_ALG_HANDLE hPrf, __in_bcount_opt( cbPassword ) PUCHAR pbPassword, __in ULONG cbPassword, __in_bcount_opt( cbSalt ) PUCHAR pbSalt, __in ULONG cbSalt, __in ULONGLONG cIterations, __out_bcount( cbDerivedKey ) PUCHAR pbDerivedKey, __in ULONG cbDerivedKey, __in ULONG dwFlags);																		
BCryptDestroyHash( __inout BCRYPT_HASH_HANDLE  hHash);																		
BCryptDestroyKey( __inout BCRYPT_KEY_HANDLE   hKey);																		
BCryptDestroySecret( __inout BCRYPT_SECRET_HANDLE hSecret);																		
BCryptDuplicateHash( __in BCRYPT_HASH_HANDLE  hHash, __out BCRYPT_HASH_HANDLE  *phNewHash, __out_bcount_full_opt(cbHashObject) PUCHAR pbHashObject, __in ULONG   cbHashObject, __in ULONG dwFlags);																		
BCryptDuplicateKey( __in BCRYPT_KEY_HANDLE   hKey, __out BCRYPT_KEY_HANDLE   *phNewKey, __out_bcount_full_opt(cbKeyObject) PUCHAR pbKeyObject, __in ULONG cbKeyObject, __in ULONG dwFlags);																		
BCryptEncrypt( __inout BCRYPT_KEY_HANDLE hKey, __in_bcount_opt(cbInput) PUCHAR pbInput, __in ULONG cbInput, __in_opt VOID *pPaddingInfo, __inout_bcount_opt(cbIV) PUCHAR pbIV, __in ULONG cbIV, __out_bcount_part_opt(cbOutput, *pcbResult) PUCHAR pbOutput, __in ULONG cbOutput, __out ULONG *pcbResult, __in ULONG dwFlags);																		
BCryptEnumAlgorithms( __in ULONG dwAlgOperations, __out ULONG *pAlgCount, __out BCRYPT_ALGORITHM_IDENTIFIER **ppAlgList, __in ULONG dwFlags);																		
BCryptEnumContextFunctionProviders( __in ULONG dwTable, __in LPCWSTR pszContext, __in ULONG dwInterface, __in LPCWSTR pszFunction, __inout ULONG* pcbBuffer, __deref_opt_inout_bcount_part_opt(*pcbBuffer, *pcbBuffer) PCRYPT_CONTEXT_FUNCTION_PROVIDERS *ppBuffer);																		
BCryptEnumContextFunctions( __in ULONG dwTable, __in LPCWSTR pszContext, __in ULONG dwInterface, __inout ULONG* pcbBuffer, __deref_opt_inout_bcount_part_opt(*pcbBuffer, *pcbBuffer) PCRYPT_CONTEXT_FUNCTIONS *ppBuffer);																		
BCryptEnumContexts( __in ULONG dwTable, __inout ULONG* pcbBuffer, __deref_opt_inout_bcount_part_opt(*pcbBuffer, *pcbBuffer) PCRYPT_CONTEXTS *ppBuffer);																		
BCryptEnumProviders( __in LPCWSTR pszAlgId, __out ULONG *pImplCount, __out   BCRYPT_PROVIDER_NAME **ppImplList, __in ULONG dwFlags);																		
BCryptEnumRegisteredProviders( __inout ULONG* pcbBuffer, __deref_opt_inout_bcount_part_opt(*pcbBuffer, *pcbBuffer) PCRYPT_PROVIDERS *ppBuffer);																		
BCryptExportKey( __in BCRYPT_KEY_HANDLE hKey, __in_opt BCRYPT_KEY_HANDLE hExportKey, __in LPCWSTR pszBlobType, __out_bcount_part_opt(cbOutput, *pcbResult) PUCHAR pbOutput, __in ULONG cbOutput, __out ULONG *pcbResult, __in ULONG dwFlags);																		
BCryptFinalizeKeyPair( __inout BCRYPT_KEY_HANDLE hKey, __in ULONG dwFlags);																		
BCryptFinishHash( __inout BCRYPT_HASH_HANDLE hHash, __out_bcount_full(cbOutput) PUCHAR pbOutput, __in ULONG cbOutput, __in ULONG dwFlags);																		
BCryptFreeBuffer( __in PVOID pvBuffer);																		
BCryptGenerateKeyPair( __inout BCRYPT_ALG_HANDLE hAlgorithm, __out BCRYPT_KEY_HANDLE *phKey, __in ULONG dwLength, __in ULONG dwFlags);																		
BCryptGenerateSymmetricKey( __inout BCRYPT_ALG_HANDLE hAlgorithm, __out BCRYPT_KEY_HANDLE *phKey, __out_bcount_full_opt(cbKeyObject) PUCHAR pbKeyObject, __in ULONG cbKeyObject, __in_bcount(cbSecret) PUCHAR pbSecret, __in ULONG cbSecret, __in ULONG dwFlags);																		
BCryptGenRandom( __in_opt BCRYPT_ALG_HANDLE hAlgorithm, __inout_bcount_full(cbBuffer) PUCHAR pbBuffer, __in ULONG cbBuffer, __in ULONG dwFlags); 
BCryptGetFipsAlgorithmMode( __out BOOLEAN *pfEnabled );																		
BCryptGetProperty( __in BCRYPT_HANDLE   hObject, __in LPCWSTR pszProperty, __out_bcount_part_opt(cbOutput, *pcbResult) PUCHAR pbOutput, __in ULONG cbOutput, __out ULONG *pcbResult, __in ULONG dwFlags);																		
BCryptHashData( __inout BCRYPT_HASH_HANDLE  hHash, __in_bcount(cbInput) PUCHAR pbInput, __in ULONG cbInput, __in ULONG dwFlags);																		
BCryptImportKey( __in BCRYPT_ALG_HANDLE hAlgorithm, __in_opt BCRYPT_KEY_HANDLE hImportKey, __in LPCWSTR pszBlobType, __out BCRYPT_KEY_HANDLE *phKey, __out_bcount_full_opt(cbKeyObject) PUCHAR pbKeyObject, __in ULONG cbKeyObject, __in_bcount(cbInput) PUCHAR pbInput, __in ULONG cbInput, __in ULONG dwFlags);																		
BCryptImportKeyPair( __in BCRYPT_ALG_HANDLE hAlgorithm, __in_opt BCRYPT_KEY_HANDLE hImportKey, __in LPCWSTR pszBlobType, __out BCRYPT_KEY_HANDLE *phKey, __in_bcount(cbInput) PUCHAR pbInput, __in ULONG cbInput, __in ULONG dwFlags);																		
BCryptOpenAlgorithmProvider( __out BCRYPT_ALG_HANDLE *phAlgorithm, __in LPCWSTR pszAlgId, __in_opt LPCWSTR pszImplementation, __in ULONG   dwFlags);																		
BCryptQueryContextConfiguration( __in ULONG dwTable, __in LPCWSTR pszContext, __inout ULONG* pcbBuffer, __deref_opt_inout_bcount_part_opt(*pcbBuffer, *pcbBuffer) PCRYPT_CONTEXT_CONFIG *ppBuffer);																		
BCryptQueryContextFunctionConfiguration( __in ULONG dwTable, __in LPCWSTR pszContext, __in ULONG dwInterface, __in LPCWSTR pszFunction, __inout ULONG* pcbBuffer, __deref_opt_inout_bcount_part_opt(*pcbBuffer, *pcbBuffer) PCRYPT_CONTEXT_FUNCTION_CONFIG *ppBuffer);																		
BCryptQueryContextFunctionProperty( __in ULONG dwTable, __in LPCWSTR pszContext, __in ULONG dwInterface, __in LPCWSTR pszFunction, __in LPCWSTR pszProperty, __inout ULONG* pcbValue, __deref_opt_inout_bcount_part_opt(*pcbValue, *pcbValue) PUCHAR *ppbValue);																		
BCryptQueryProviderRegistration( __in LPCWSTR pszProvider, __in ULONG dwMode, __in ULONG dwInterface, __inout ULONG* pcbBuffer, __deref_opt_inout_bcount_part_opt(*pcbBuffer, *pcbBuffer) PCRYPT_PROVIDER_REG *ppBuffer);																		
BCryptRegisterConfigChangeNotify( __in PRKEVENT pEvent);																		
BCryptRegisterConfigChangeNotify( __out HANDLE *phEvent);																		
BCryptRemoveContextFunction( __in ULONG dwTable, __in LPCWSTR pszContext,    __in ULONG dwInterface, __in LPCWSTR pszFunction);																		
BCryptSecretAgreement( __in BCRYPT_KEY_HANDLE hPrivKey, __in BCRYPT_KEY_HANDLE hPubKey, __out BCRYPT_SECRET_HANDLE *phAgreedSecret, __in ULONG dwFlags);																		
BCryptSetContextFunctionProperty( __in ULONG dwTable, __in LPCWSTR pszContext, __in ULONG dwInterface, __in LPCWSTR pszFunction, __in LPCWSTR pszProperty, __in ULONG cbValue, __in_bcount_opt(cbValue) PUCHAR pbValue);																		
BCryptSetProperty( __inout BCRYPT_HANDLE hObject, __in LPCWSTR pszProperty, __in_bcount(cbInput) PUCHAR pbInput, __in ULONG cbInput, __in ULONG dwFlags);																		
BCryptSignHash( __in BCRYPT_KEY_HANDLE hKey, __in_opt VOID    *pPaddingInfo, __in_bcount(cbInput) PUCHAR   pbInput, __in ULONG cbInput, __out_bcount_part_opt(cbOutput, *pcbResult) PUCHAR pbOutput, __in ULONG cbOutput, __out ULONG *pcbResult, __in ULONG dwFlags);																		
BCryptUnregisterConfigChangeNotify( __in HANDLE hEvent);																		
BCryptUnregisterConfigChangeNotify( __in PRKEVENT pEvent);																		
BCryptVerifySignature( __in BCRYPT_KEY_HANDLE hKey, __in_opt VOID *pPaddingInfo, __in_bcount(cbHash) PUCHAR pbHash, __in ULONG cbHash, __in_bcount(cbSignature) PUCHAR pbSignature, __in ULONG cbSignature, __in ULONG dwFlags);																		
Beep( __in DWORD dwFreq, __in DWORD dwDuration );																		
BeginDeferWindowPos( __in int nNumWindows);																		
BeginPaint( __in HWND hWnd, __out LPPAINTSTRUCT lpPaint);																		
BeginPath(__in HDC hdc);																		
BeginUpdateResourceA( __in LPCSTR pFileName, __in BOOL bDeleteExistingResources );																		
BeginUpdateResourceW( __in LPCWSTR pFileName, __in BOOL bDeleteExistingResources );																		
BinarySDToSecurityDescriptor(PSECURITY_DESCRIPTOR  pSecurityDescriptor,VARIANT *pVarsec, LPCWSTR pszServerName,LPCWSTR userName,LPCWSTR passWord,DWORD dwFlags);																		
BindImage( __in PCSTR ImageName, __in PCSTR DllPath, __in PCSTR SymbolPath );																		
BindImageEx( __in DWORD Flags, __in PCSTR ImageName, __in PCSTR DllPath, __in PCSTR SymbolPath, __in_opt PIMAGEHLP_STATUS_ROUTINE StatusRoutine );																		
BindIoCompletionCallback ( __in HANDLE FileHandle, __in LPOVERLAPPED_COMPLETION_ROUTINE Function, __in ULONG Flags );																		
BlockInput( BOOL fBlockIt);																		
BluetoothAuthenticateDevice( __in_opt HWND hwndParent, __in_opt HANDLE hRadio, __inout BLUETOOTH_DEVICE_INFO * pbtbi, __in_ecount_opt(ulPasskeyLength) PWSTR pszPasskey, __in ULONG ulPasskeyLength );																		
BluetoothAuthenticateDeviceEx( __in_opt HWND hwndParentIn , __in_opt HANDLE hRadioIn , __inout BLUETOOTH_DEVICE_INFO * pbtdiInout , __in_opt PBLUETOOTH_OOB_DATA_INFO pbtOobData , __in AUTHENTICATION_REQUIREMENTS authenticationRequirement );																		
BluetoothAuthenticateMultipleDevices( __in_opt HWND hwndParent, __in_opt HANDLE hRadio, __in DWORD cDevices, __inout_ecount(cDevices) BLUETOOTH_DEVICE_INFO * rgbtdi );																		
BluetoothDisplayDeviceProperties( __in_opt HWND hwndParent, __inout BLUETOOTH_DEVICE_INFO * pbtdi );																		
BluetoothEnableDiscovery( __in_opt HANDLE hRadio, __in BOOL fEnabled );																		
BluetoothEnableIncomingConnections( __in_opt HANDLE hRadio, __in BOOL fEnabled );																		
BluetoothEnumerateInstalledServices( __in_opt HANDLE  hRadio, __in const BLUETOOTH_DEVICE_INFO * pbtdi, __inout DWORD * pcServices, __out_ecount_part_opt(*pcServiceInout, *pcServiceInout) GUID *  pGuidServices );																		
BluetoothFindDeviceClose( __in HBLUETOOTH_DEVICE_FIND hFind );																		
BluetoothFindFirstDevice( __in const BLUETOOTH_DEVICE_SEARCH_PARAMS * pbtsp, __inout BLUETOOTH_DEVICE_INFO * pbtdi );																		
BluetoothFindFirstRadio( __in const BLUETOOTH_FIND_RADIO_PARAMS * pbtfrp, __out HANDLE * phRadio );																		
BluetoothFindNextDevice( __in HBLUETOOTH_DEVICE_FIND  hFind, __inout BLUETOOTH_DEVICE_INFO * pbtdi );																		
BluetoothFindNextRadio( __in HBLUETOOTH_RADIO_FIND hFind, __out HANDLE * phRadio );																		
BluetoothFindRadioClose( __in HBLUETOOTH_RADIO_FIND hFind );																		
BluetoothGetDeviceInfo( __in_opt HANDLE  hRadio, __inout BLUETOOTH_DEVICE_INFO * pbtdi );																		
BluetoothGetRadioInfo( __in HANDLE hRadio, __inout PBLUETOOTH_RADIO_INFO pRadioInfo );																		
BluetoothIsConnectable( __in_opt HANDLE hRadio );																		
BluetoothIsDiscoverable( __in_opt HANDLE hRadio );																		
BluetoothIsVersionAvailable( __in UCHAR MajorVersion, __in UCHAR MinorVersion );																		
BluetoothRegisterForAuthentication( __in_opt const BLUETOOTH_DEVICE_INFO * pbtdi, __out HBLUETOOTH_AUTHENTICATION_REGISTRATION * phRegHandle, __in_opt PFN_AUTHENTICATION_CALLBACK pfnCallback, __in_opt PVOID pvParam );																		
BluetoothRegisterForAuthenticationEx( __in_opt const BLUETOOTH_DEVICE_INFO * pbtdiIn , __out HBLUETOOTH_AUTHENTICATION_REGISTRATION * phRegHandleOut , __in_opt PFN_AUTHENTICATION_CALLBACK_EX pfnCallbackIn , __in_opt PVOID pvParam );																		
BluetoothRemoveDevice( __in const BLUETOOTH_ADDRESS * pAddress ); BluetoothSdpEnumAttributes( __in_bcount(cbStreamSize) LPBYTE pSDPStream, __in ULONG cbStreamSize, __in PFN_BLUETOOTH_ENUM_ATTRIBUTES_CALLBACK pfnCallback, __in LPVOID pvParam );																		
BluetoothSdpGetAttributeValue( __in_bcount(cbRecordLength) LPBYTE pRecordStream, __in ULONG cbRecordLength, __in USHORT usAttributeId, __out PSDP_ELEMENT_DATA pAttributeData );																		
BluetoothSdpGetContainerElementData( __in_bcount(cbContainerLength) LPBYTE pContainerStream, __in ULONG cbContainerLength, __inout HBLUETOOTH_CONTAINER_ELEMENT* pElement, __out PSDP_ELEMENT_DATA pData );																		
BluetoothSdpGetElementData( __in_bcount(cbSdpStreamLength) LPBYTE pSdpStream, __in ULONG cbSdpStreamLength, __out PSDP_ELEMENT_DATA pData    );																		
BluetoothSdpGetString( __in_bcount(cbRecordLength) LPBYTE pRecordStream, __in ULONG cbRecordLength, __in_opt const PSDP_STRING_TYPE_DATA pStringData, __in USHORT usStringOffset, __out_ecount_part(*pcchStringLength, *pcchStringLength) PWSTR pszString __inout PULONG pcchStringLength );																		
BluetoothSelectDevices( __inout BLUETOOTH_SELECT_DEVICE_PARAMS * pbtsdp );																		
BluetoothSelectDevicesFree( __inout BLUETOOTH_SELECT_DEVICE_PARAMS * pbtsdp );																		
BluetoothSendAuthenticationResponse( __in_opt HANDLE hRadio, __in const BLUETOOTH_DEVICE_INFO * pbtdi, __in LPCWSTR pszPasskey );																		
BluetoothSendAuthenticationResponseEx( __in_opt HANDLE hRadioIn , __in PBLUETOOTH_AUTHENTICATE_RESPONSE pauthResponse );																		
BluetoothSetLocalServiceInfo( __in_opt HANDLE  hRadioIn , __in const GUID * pClassGuid , __in ULONG ulInstance , __in const BLUETOOTH_LOCAL_SERVICE_INFO * pServiceInfoIn );																		
BluetoothSetServiceState( __in_opt HANDLE  hRadio, __in const BLUETOOTH_DEVICE_INFO * pbtdi, __in const GUID * pGuidService, __in DWORD dwServiceFlags );																		
BluetoothUnregisterAuthentication( __in HBLUETOOTH_AUTHENTICATION_REGISTRATION hRegHandle );																		
BluetoothUpdateDeviceRecord( __in const BLUETOOTH_DEVICE_INFO * pbtdi );																		
BringWindowToTop(__in HWND hWnd);																		
BroadcastSystemMessage( __in DWORD flags, __inout_opt LPDWORD lpInfo, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
BroadcastSystemMessageA( __in DWORD flags, __inout_opt LPDWORD lpInfo, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
BroadcastSystemMessageExA( __in DWORD flags, __inout_opt LPDWORD lpInfo, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam, __out_opt PBSMINFO pbsmInfo);																		
BroadcastSystemMessageExW( __in DWORD flags, __inout_opt LPDWORD lpInfo, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam, __out_opt PBSMINFO pbsmInfo);																		
BroadcastSystemMessageW( __in DWORD flags, __inout_opt LPDWORD lpInfo, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
BrowseForGPO( LPGPOBROWSEINFO lpBrowseInfo);																		
BuildCommDCBA( __in LPCSTR lpDef, __out LPDCB lpDCB );																		
BuildCommDCBAndTimeoutsA( __in LPCSTR lpDef, __out LPDCB lpDCB, __out LPCOMMTIMEOUTS lpCommTimeouts );																		
BuildCommDCBAndTimeoutsW( __in LPCWSTR lpDef, __out LPDCB lpDCB, __out LPCOMMTIMEOUTS lpCommTimeouts );																		
BuildCommDCBW( __in LPCWSTR lpDef, __out LPDCB lpDCB );																		
BuildExplicitAccessWithNameA( __inout PEXPLICIT_ACCESS_A pExplicitAccess, __in_opt LPSTR pTrusteeName, __in DWORD AccessPermissions, __in ACCESS_MODE AccessMode, __in DWORD Inheritance );																		
BuildExplicitAccessWithNameW( __inout PEXPLICIT_ACCESS_W pExplicitAccess, __in_opt LPWSTR pTrusteeName, __in DWORD AccessPermissions, __in ACCESS_MODE AccessMode, __in DWORD Inheritance );																		
BuildImpersonateExplicitAccessWithNameA( __inout PEXPLICIT_ACCESS_A  pExplicitAccess, __in_opt LPSTR pTrusteeName, __in_opt PTRUSTEE_A pTrustee, __in DWORD AccessPermissions, __in ACCESS_MODE AccessMode, __in DWORD Inheritance );																		
BuildImpersonateExplicitAccessWithNameW( __inout PEXPLICIT_ACCESS_W  pExplicitAccess, __in_opt LPWSTR pTrusteeName, __in_opt PTRUSTEE_W pTrustee, __in DWORD AccessPermissions, __in ACCESS_MODE AccessMode, __in DWORD Inheritance );																		
BuildImpersonateTrusteeA( __inout PTRUSTEE_A  pTrustee, __in_opt PTRUSTEE_A  pImpersonateTrustee );																		
BuildImpersonateTrusteeW( __inout PTRUSTEE_W  pTrustee, __in_opt PTRUSTEE_W  pImpersonateTrustee );																		
BuildSecurityDescriptorA( __in_opt PTRUSTEE_A pOwner, __in_opt PTRUSTEE_A pGroup, __in ULONG cCountOfAccessEntries, __in_ecount_opt(cCountOfAccessEntries) PEXPLICIT_ACCESS_A pListOfAccessEntries, __in ULONG cCountOfAuditEntries, __in_ecount_opt(cCountOfAuditEntries) PEXPLICIT_ACCESS_A pListOfAuditEntries, __in_opt PSECURITY_DESCRIPTOR pOldSD, __out PULONG pSizeNewSD, __deref_out_bcount(*pSizeNewSD) PSECURITY_DESCRIPTOR  * pNewSD );																		
BuildSecurityDescriptorW( __in_opt PTRUSTEE_W pOwner, __in_opt PTRUSTEE_W pGroup, __in ULONG cCountOfAccessEntries, __in_ecount_opt(cCountOfAccessEntries) PEXPLICIT_ACCESS_W pListOfAccessEntries, __in ULONG cCountOfAuditEntries, __in_ecount_opt(cCountOfAuditEntries) PEXPLICIT_ACCESS_W pListOfAuditEntries, __in_opt PSECURITY_DESCRIPTOR pOldSD, __out PULONG pSizeNewSD, __deref_out_bcount(*pSizeNewSD) PSECURITY_DESCRIPTOR  * pNewSD );																		
BuildTrusteeWithNameA( __inout	PTRUSTEE_A  pTrustee, __in_opt LPSTR pName );																	
BuildTrusteeWithNameW( __inout	PTRUSTEE_W  pTrustee, __in_opt LPWSTR pName );																	
BuildTrusteeWithObjectsAndNameA( __inout PTRUSTEE_A pTrustee, __in_opt POBJECTS_AND_NAME_A pObjName, __in_opt SE_OBJECT_TYPE ObjectType, __in_opt LPSTR ObjectTypeName, __in_opt LPSTR InheritedObjectTypeName, __in_opt LPSTR Name );																		
BuildTrusteeWithObjectsAndNameW( __inout PTRUSTEE_W pTrustee, __in_opt POBJECTS_AND_NAME_W pObjName, __in_opt SE_OBJECT_TYPE ObjectType, __in_opt LPWSTR ObjectTypeName, __in_opt LPWSTR InheritedObjectTypeName, __in_opt LPWSTR Name );																		
BuildTrusteeWithObjectsAndSidA( __inout PTRUSTEE_A pTrustee, __in_opt POBJECTS_AND_SID pObjSid, __in_opt GUID * pObjectGuid, __in_opt GUID * pInheritedObjectGuid, __in_opt PSID pSid );																		
BuildTrusteeWithObjectsAndSidW( __inout PTRUSTEE_W pTrustee, __in_opt POBJECTS_AND_SID pObjSid, __in_opt GUID * pObjectGuid, __in_opt GUID * pInheritedObjectGuid, __in_opt PSID pSid );																		
BuildTrusteeWithSidA( __inout PTRUSTEE_A  pTrustee, __in_opt PSID pSid );																		
BuildTrusteeWithSidW( __inout PTRUSTEE_W  pTrustee, __in_opt PSID pSid );																		
CalculatePopupWindowPosition( __in const POINT *anchorPoint, __in const SIZE *windowSize, __in UINT flags, __in_opt RECT *excludeRect, __out RECT *popupWindowPosition);																		
CallbackMayRunLong( __inout PTP_CALLBACK_INSTANCE pci );																		
CallMsgFilterA( __in LPMSG lpMsg, __in int nCode);																		
CallMsgFilterW( __in LPMSG lpMsg, __in int nCode);																		
CallNamedPipeA( __in  LPCSTR lpNamedPipeName, __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer, __in  DWORD nInBufferSize, __out_bcount_part_opt(nOutBufferSize, *lpBytesRead) LPVOID lpOutBuffer, __in  DWORD nOutBufferSize, __out LPDWORD lpBytesRead, __in  DWORD nTimeOut );																		
CallNamedPipeW( __in  LPCWSTR lpNamedPipeName, __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer, __in  DWORD nInBufferSize, __out_bcount_part_opt(nOutBufferSize, *lpBytesRead) LPVOID lpOutBuffer, __in  DWORD nOutBufferSize, __out LPDWORD lpBytesRead, __in  DWORD nTimeOut );																		
CallNextHookEx(__in_opt HHOOK hhk,__in int nCode,__in WPARAM wParam,__in LPARAM lParam);																		
CallNtPowerInformation ( __in POWER_INFORMATION_LEVEL InformationLevel, __in_bcount_opt(InputBufferLength) PVOID InputBuffer, __in ULONG InputBufferLength, __out_bcount_opt(OutputBufferLength) PVOID OutputBuffer, __in ULONG OutputBufferLength );																		
CallWindowProcA( __in FARPROC lpPrevWndFunc, __in HWND hWnd, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
CallWindowProcA( __in WNDPROC lpPrevWndFunc, __in HWND hWnd, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
CallWindowProcW( __in FARPROC lpPrevWndFunc, __in HWND hWnd, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
CallWindowProcW( __in WNDPROC lpPrevWndFunc, __in HWND hWnd, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
CancelDeviceWakeupRequest( __in HANDLE hDevice );																		
CancelIo( __in HANDLE hFile );																		
CancelIoEx( __in HANDLE hFile, __in_opt LPOVERLAPPED lpOverlapped );																		
CancelIPChangeNotify( __in  LPOVERLAPPED notifyOverlapped );																		
CancelShutdown(VOID);																		
CancelSynchronousIo(__in HANDLE hThread);																		
CancelThreadpoolIo(__inout PTP_IO pio);																		
CancelTimerQueueTimer(__in_opt HANDLE TimerQueue,__in HANDLE Timer);																		
CancelWaitableTimer(__in HANDLE hTimer);																		
CanResourceBeDependent(__in HRESOURCE hResource,__in HRESOURCE hResourceDependent);																		
CertAddCertificateContextToStore(__in_opt HCERTSTORE hCertStore, __in PCCERT_CONTEXT pCertContext, __in DWORD dwAddDisposition, __deref_opt_out PCCERT_CONTEXT *ppStoreContext);																		
CertAddCertificateLinkToStore(__in HCERTSTORE hCertStore, __in PCCERT_CONTEXT pCertContext, __in DWORD dwAddDisposition, __deref_opt_out PCCERT_CONTEXT *ppStoreContext);																		
CertAddCRLContextToStore(__in_opt HCERTSTORE hCertStore, __in PCCRL_CONTEXT pCrlContext, __in DWORD dwAddDisposition, __deref_opt_out PCCRL_CONTEXT *ppStoreContext);																		
CertAddCRLLinkToStore(__in HCERTSTORE hCertStore, __in PCCRL_CONTEXT pCrlContext, __in DWORD dwAddDisposition, __deref_opt_out PCCRL_CONTEXT *ppStoreContext);																		
CertAddCTLContextToStore(__in_opt HCERTSTORE hCertStore, __in PCCTL_CONTEXT pCtlContext, __in DWORD dwAddDisposition, __deref_opt_out PCCTL_CONTEXT *ppStoreContext);																		
CertAddCTLLinkToStore(__in HCERTSTORE hCertStore, __in PCCTL_CONTEXT pCtlContext, __in DWORD dwAddDisposition, __deref_opt_out PCCTL_CONTEXT *ppStoreContext);																		
CertAddEncodedCertificateToStore(__in_opt HCERTSTORE hCertStore, __in DWORD dwCertEncodingType, __in_bcount(cbCertEncoded) const BYTE *pbCertEncoded, __in DWORD cbCertEncoded,__in DWORD dwAddDisposition,__deref_opt_out PCCERT_CONTEXT *ppCertContext);																		
CertAddEncodedCertificateToSystemStoreA(__in LPCSTR szCertStoreName, __in_bcount(cbCertEncoded) const BYTE * pbCertEncoded, __in DWORD cbCertEncoded);																		
CertAddEncodedCertificateToSystemStoreW(__in LPCWSTR szCertStoreName, __in_bcount(cbCertEncoded) const BYTE * pbCertEncoded, __in DWORD cbCertEncoded);																		
CertAddEncodedCRLToStore(__in_opt HCERTSTORE hCertStore,__in DWORD dwCertEncodingType,__in_bcount(cbCrlEncoded) const BYTE *pbCrlEncoded,__in DWORD cbCrlEncoded,__in DWORD dwAddDisposition,__deref_opt_out PCCRL_CONTEXT *ppCrlContext);																		
CertAddEncodedCTLToStore(__in_opt HCERTSTORE hCertStore,__in DWORD dwMsgAndCertEncodingType,__in_bcount(cbCtlEncoded) const BYTE *pbCtlEncoded,__in DWORD cbCtlEncoded,__in DWORD dwAddDisposition,__deref_opt_out PCCTL_CONTEXT *ppCtlContext);																		
CertAddEnhancedKeyUsageIdentifier(__in PCCERT_CONTEXT pCertContext,__in LPCSTR pszUsageIdentifier);																		
CertAddRefServerOcspResponse(__in_opt HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse);																		
CertAddRefServerOcspResponseContext(__in_opt PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext);																		
CertAddSerializedElementToStore(__in_opt HCERTSTORE hCertStore,__in_bcount(cbElement) const BYTE *pbElement,__in DWORD cbElement,__in DWORD dwAddDisposition,__in DWORD dwFlags,__in DWORD dwContextTypeFlags,__out_opt DWORD *pdwContextType,__deref_opt_out const void **ppvContext);																		
CertAddStoreToCollection(__in HCERTSTORE hCollectionStore,__in_opt HCERTSTORE hSiblingStore,__in DWORD dwUpdateFlags,__in DWORD dwPriority);																		
CertAlgIdToOID(__in DWORD dwAlgId);																		
CertCloseServerOcspResponse(__in_opt HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse,__in DWORD dwFlags);																		
CertCloseStore(__in_opt HCERTSTORE hCertStore,__in DWORD dwFlags);																		
CertCompareCertificate(__in DWORD dwCertEncodingType,__in PCERT_INFO pCertId1,__in PCERT_INFO pCertId2);																		
CertCompareCertificateName(__in DWORD dwCertEncodingType,__in PCERT_NAME_BLOB pCertName1,__in PCERT_NAME_BLOB pCertName2);																		
CertCompareIntegerBlob(__in PCRYPT_INTEGER_BLOB pInt1,__in PCRYPT_INTEGER_BLOB pInt2);																		
CertComparePublicKeyInfo(__in DWORD dwCertEncodingType,__in PCERT_PUBLIC_KEY_INFO pPublicKey1,__in PCERT_PUBLIC_KEY_INFO pPublicKey2);																		
CertControlStore(__in HCERTSTORE hCertStore,__in DWORD dwFlags,__in DWORD dwCtrlType,__in_opt void const *pvCtrlPara);																		
CertCreateCertificateChainEngine (__in PCERT_CHAIN_ENGINE_CONFIG pConfig,__out HCERTCHAINENGINE* phChainEngine);																		
CertCreateCertificateContext(__in DWORD dwCertEncodingType,__in_bcount(cbCertEncoded) const BYTE *pbCertEncoded,__in DWORD cbCertEncoded);																		
CertCreateContext(__in DWORD dwContextType,__in DWORD dwEncodingType,__in_bcount(cbEncoded) const BYTE *pbEncoded,__in DWORD cbEncoded,__in DWORD dwFlags,__in_opt PCERT_CREATE_CONTEXT_PARA pCreatePara);																		
CertCreateCRLContext(__in DWORD dwCertEncodingType,__in_bcount(cbCrlEncoded) const BYTE *pbCrlEncoded,__in DWORD cbCrlEncoded);																		
CertCreateCTLContext(__in DWORD dwMsgAndCertEncodingType,__in_bcount(cbCtlEncoded) const BYTE *pbCtlEncoded,__in DWORD cbCtlEncoded);																		
CertCreateCTLEntryFromCertificateContextProperties(__in PCCERT_CONTEXT pCertContext,__in DWORD cOptAttr,__in_ecount_opt(cOptAttr) PCRYPT_ATTRIBUTE rgOptAttr, __in DWORD dwFlags, __reserved void *pvReserved, __out_bcount_part_opt(*pcbCtlEntry, *pcbCtlEntry) PCTL_ENTRY pCtlEntry, __inout DWORD *pcbCtlEntry );																		
CertCreateSelfSignCertificate(__in_opt  HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey, __in PCERT_NAME_BLOB pSubjectIssuerBlob, __in DWORD dwFlags, __in_opt PCRYPT_KEY_PROV_INFO pKeyProvInfo, __in_opt  PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm, __in_opt  PSYSTEMTIME pStartTime, __in_opt  PSYSTEMTIME pEndTime, __in_opt PCERT_EXTENSIONS pExtensions );																		
CertDeleteCertificateFromStore(__in PCCERT_CONTEXT pCertContext);																		
CertDeleteCRLFromStore( __in PCCRL_CONTEXT pCrlContext );																		
CertDeleteCTLFromStore( __in PCCTL_CONTEXT pCtlContext );																		
CertDuplicateCertificateChain ( __in PCCERT_CHAIN_CONTEXT pChainContext );																		
CertDuplicateCertificateContext( __in_opt PCCERT_CONTEXT pCertContext );																		
CertDuplicateCRLContext( __in_opt PCCRL_CONTEXT pCrlContext );																		
CertDuplicateCTLContext( __in_opt PCCTL_CONTEXT pCtlContext );																		
CertDuplicateStore( __in HCERTSTORE hCertStore );																		
CertEnumCertificateContextProperties( __in PCCERT_CONTEXT pCertContext, __in DWORD dwPropId );																		
CertEnumCertificatesInStore( __in HCERTSTORE hCertStore, __in_opt PCCERT_CONTEXT pPrevCertContext );																		
CertEnumCRLContextProperties( __in PCCRL_CONTEXT pCrlContext, __in DWORD dwPropId );																		
CertEnumCRLsInStore( __in HCERTSTORE hCertStore, __in_opt PCCRL_CONTEXT pPrevCrlContext );																		
CertEnumCTLContextProperties( __in PCCTL_CONTEXT pCtlContext, __in DWORD dwPropId );																		
CertEnumCTLsInStore( __in HCERTSTORE hCertStore, __in_opt PCCTL_CONTEXT pPrevCtlContext );																		
CertEnumPhysicalStore( __in const void *pvSystemStore, __in DWORD dwFlags, __inout_opt void *pvArg, __callback PFN_CERT_ENUM_PHYSICAL_STORE pfnEnum );																		
CertEnumSubjectInSortedCTL( __in PCCTL_CONTEXT pCtlContext, __deref_inout_opt void **ppvNextSubject, __out_opt PCRYPT_DER_BLOB pSubjectIdentifier, __out_opt PCRYPT_DER_BLOB pEncodedAttributes );																		
CertEnumSystemStore( __in DWORD dwFlags, __in_opt void *pvSystemStoreLocationPara, __inout_opt void *pvArg, __callback PFN_CERT_ENUM_SYSTEM_STORE pfnEnum );																		
CertEnumSystemStoreLocation( __in DWORD dwFlags, __inout_opt void *pvArg, __callback PFN_CERT_ENUM_SYSTEM_STORE_LOCATION pfnEnum );																		
CertFindAttribute( __in LPCSTR pszObjId, __in DWORD cAttr, __in_ecount(cAttr) CRYPT_ATTRIBUTE rgAttr[] );																		
CertFindCertificateInCRL( __in PCCERT_CONTEXT pCert, __in PCCRL_CONTEXT pCrlContext, __in DWORD dwFlags, __reserved void *pvReserved, __deref_out_opt PCRL_ENTRY *ppCrlEntry );																		
CertFindCertificateInStore( __in HCERTSTORE hCertStore, __in DWORD dwCertEncodingType, __in DWORD dwFindFlags, __in DWORD dwFindType, __in_opt const void *pvFindPara, __in_opt PCCERT_CONTEXT pPrevCertContext );																		
CertFindChainInStore( __in HCERTSTORE hCertStore, __in DWORD dwCertEncodingType, __in DWORD dwFindFlags, __in DWORD dwFindType, __in_opt const void *pvFindPara, __in_opt PCCERT_CHAIN_CONTEXT pPrevChainContext );																		
CertFindCRLInStore( __in HCERTSTORE hCertStore, __in DWORD dwCertEncodingType, __in DWORD dwFindFlags, __in DWORD dwFindType, __in_opt const void *pvFindPara, __in_opt PCCRL_CONTEXT pPrevCrlContext );																		
CertFindCTLInStore( __in HCERTSTORE hCertStore, __in DWORD dwMsgAndCertEncodingType, __in DWORD dwFindFlags, __in DWORD dwFindType, __in_opt const void *pvFindPara, __in_opt PCCTL_CONTEXT pPrevCtlContext );																		
CertFindExtension( __in LPCSTR pszObjId, __in DWORD cExtensions, __in_ecount(cExtensions) CERT_EXTENSION rgExtensions[] );																		
CertFindRDNAttr( __in LPCSTR pszObjId, __in PCERT_NAME_INFO pName );																		
CertFindSubjectInCTL( __in DWORD dwEncodingType, __in DWORD dwSubjectType, __in void *pvSubject, __in PCCTL_CONTEXT pCtlContext, __in DWORD dwFlags );																		
CertFindSubjectInSortedCTL( __in PCRYPT_DATA_BLOB pSubjectIdentifier, __in PCCTL_CONTEXT pCtlContext, __in DWORD dwFlags, __reserved void *pvReserved, __out_opt PCRYPT_DER_BLOB pEncodedAttributes );																		
CertFreeCertificateChain ( __in PCCERT_CHAIN_CONTEXT pChainContext );																		
CertFreeCertificateChainEngine ( __in_opt HCERTCHAINENGINE hChainEngine );																		
CertFreeCertificateChainList( __in PCCERT_CHAIN_CONTEXT* prgpSelection );																		
CertFreeCertificateContext( __in_opt PCCERT_CONTEXT pCertContext );																		
CertFreeCRLContext( __in_opt PCCRL_CONTEXT pCrlContext );																		
CertFreeCTLContext( __in_opt PCCTL_CONTEXT pCtlContext );																		
CertFreeServerOcspResponseContext( __in_opt PCCERT_SERVER_OCSP_RESPONSE_CONTEXT pServerOcspResponseContext );																		
CertGetCertificateChain ( __in_opt HCERTCHAINENGINE hChainEngine, __in PCCERT_CONTEXT pCertContext, __in_opt LPFILETIME pTime, __in_opt HCERTSTORE hAdditionalStore, __in PCERT_CHAIN_PARA pChainPara, __in DWORD dwFlags, __reserved LPVOID pvReserved, __out PCCERT_CHAIN_CONTEXT* ppChainContext );																		
CertGetCertificateContextProperty( __in PCCERT_CONTEXT pCertContext, __in DWORD dwPropId, __out_bcount_part_opt(*pcbData, *pcbData) void *pvData, __inout DWORD *pcbData    );																		
CertGetCRLContextProperty( __in PCCRL_CONTEXT pCrlContext, __in DWORD dwPropId, __out_bcount_part_opt(*pcbData, *pcbData) void *pvData, __inout DWORD *pcbData );																		
CertGetCRLFromStore( __in HCERTSTORE hCertStore, __in_opt PCCERT_CONTEXT pIssuerContext, __in_opt PCCRL_CONTEXT pPrevCrlContext, __inout DWORD *pdwFlags );																		
CertGetCTLContextProperty( __in PCCTL_CONTEXT pCtlContext, __in DWORD dwPropId, __out_bcount_part_opt(*pcbData, *pcbData) void *pvData, __inout DWORD *pcbData );																		
CertGetEnhancedKeyUsage( __in PCCERT_CONTEXT pCertContext, __in DWORD dwFlags, __out_bcount_part_opt(*pcbUsage, *pcbUsage) PCERT_ENHKEY_USAGE pUsage, __inout DWORD *pcbUsage );																		
CertGetIntendedKeyUsage( __in DWORD dwCertEncodingType, __in PCERT_INFO pCertInfo, __out_bcount_full(cbKeyUsage) BYTE *pbKeyUsage, __in DWORD cbKeyUsage );																		
CertGetIssuerCertificateFromStore( __in HCERTSTORE hCertStore, __in PCCERT_CONTEXT pSubjectContext, __in_opt PCCERT_CONTEXT pPrevIssuerContext, __inout DWORD *pdwFlags );																		
CertGetNameStringA( __in PCCERT_CONTEXT pCertContext, __in DWORD dwType, __in DWORD dwFlags, __in_opt void *pvTypePara, __out_ecount_part_opt(cchNameString, return) LPSTR pszNameString, __in DWORD cchNameString );																		
CertGetNameStringW( __in PCCERT_CONTEXT pCertContext, __in DWORD dwType, __in DWORD dwFlags, __in_opt void *pvTypePara, __out_ecount_part_opt(cchNameString, return) LPWSTR pszNameString, __in DWORD cchNameString );																		
CertGetPublicKeyLength( __in DWORD dwCertEncodingType, __in PCERT_PUBLIC_KEY_INFO pPublicKey );																		
CertGetServerOcspResponseContext( __in HCERT_SERVER_OCSP_RESPONSE hServerOcspResponse, __in DWORD dwFlags, __reserved LPVOID pvReserved );																		
CertGetStoreProperty(    __in HCERTSTORE hCertStore,    __in DWORD dwPropId,    __out_bcount_part_opt(*pcbData, *pcbData) void *pvData,    __inout DWORD *pcbData    );																		
CertGetSubjectCertificateFromStore(    __in HCERTSTORE hCertStore,    __in DWORD dwCertEncodingType,    __in PCERT_INFO pCertId    );																		
CertGetValidUsages(    __in DWORD cCerts,    __in_ecount(cCerts) PCCERT_CONTEXT *rghCerts,    __out int *cNumOIDs,    __out_bcount_part_opt(*pcbOIDs, *pcbOIDs) LPSTR *rghOIDs,    __inout DWORD *pcbOIDs);																		
CertIsRDNAttrsInCertificateName(    __in DWORD dwCertEncodingType,    __in DWORD dwFlags,    __in PCERT_NAME_BLOB pCertName,    __in PCERT_RDN pRDN    );																		
CertIsValidCRLForCertificate(    __in PCCERT_CONTEXT pCert,    __in PCCRL_CONTEXT pCrl,    __in DWORD dwFlags,    __reserved void *pvReserved    );																		
CertModifyCertificatesToTrust(        int cCerts,      PCTL_MODIFY_REQUEST rgCerts,     LPCSTR szPurpose,          HWND hwnd,         HCERTSTORE hcertstoreTrust,  PCCERT_CONTEXT pccertSigner);  																	
CertNameToStrA(    __in DWORD dwCertEncodingType,    __in PCERT_NAME_BLOB pName,    __in DWORD dwStrType,    __out_ecount_part_opt(csz, return) LPSTR psz,    __in DWORD csz    );																		
CertNameToStrW(    __in DWORD dwCertEncodingType,    __in PCERT_NAME_BLOB pName,    __in DWORD dwStrType,    __out_ecount_part_opt(csz, return) LPWSTR psz,    __in DWORD csz    );																		
CertOIDToAlgId(    __in LPCSTR pszObjId    );																		
CertOpenServerOcspResponse(    __in PCCERT_CHAIN_CONTEXT pChainContext,    __in DWORD dwFlags,    __reserved LPVOID pvReserved    );																		
CertOpenStore(    __in LPCSTR lpszStoreProvider,    __in DWORD dwEncodingType,    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in DWORD dwFlags,    __in_opt const void *pvPara    );																		
CertOpenSystemStoreA(    __in_opt HCRYPTPROV_LEGACY      hProv,    __in LPCSTR            szSubsystemProtocol    );																		
CertOpenSystemStoreW(    __in_opt HCRYPTPROV_LEGACY      hProv,    __in LPCWSTR            szSubsystemProtocol    );																		
CertRDNValueToStrA(    __in DWORD dwValueType,    __in PCERT_RDN_VALUE_BLOB pValue,    __out_ecount_part_opt(csz, return) LPSTR psz,    __in DWORD csz    );																		
CertRDNValueToStrW(    __in DWORD dwValueType,    __in PCERT_RDN_VALUE_BLOB pValue,    __out_ecount_part_opt(csz, return) LPWSTR psz,    __in DWORD csz    );																		
CertRegisterPhysicalStore(    __in const void *pvSystemStore,    __in DWORD dwFlags,    __in LPCWSTR pwszStoreName,    __in PCERT_PHYSICAL_STORE_INFO pStoreInfo,    __reserved void *pvReserved    );																		
CertRegisterSystemStore(    __in const void *pvSystemStore,    __in DWORD dwFlags,    __in_opt PCERT_SYSTEM_STORE_INFO pStoreInfo,    __reserved void *pvReserved    );																		
CertRemoveEnhancedKeyUsageIdentifier(    __in PCCERT_CONTEXT pCertContext,    __in LPCSTR pszUsageIdentifier    );																		
CertRemoveStoreFromCollection(    __in HCERTSTORE hCollectionStore,    __in HCERTSTORE hSiblingStore    );																		
CertResyncCertificateChainEngine (    __in_opt HCERTCHAINENGINE hChainEngine    );																		
CertRetrieveLogoOrBiometricInfo(    __in PCCERT_CONTEXT pCertContext,    __in LPCSTR lpszLogoOrBiometricType, __in DWORD dwRetrievalFlags, __in DWORD dwTimeout, __in DWORD dwFlags, __reserved void *pvReserved, __deref_out_bcount_opt(*pcbData) BYTE **ppbData, __out DWORD *pcbData, __deref_opt_out_opt LPWSTR *ppwszMimeType );																		
CertSaveStore(    __in HCERTSTORE hCertStore,    __in DWORD dwEncodingType,    __in DWORD dwSaveAs,    __in DWORD dwSaveTo,    __inout void *pvSaveToPara,    __in DWORD dwFlags    );																		
CertSelectCertificateA(        IN OUT PCERT_SELECT_STRUCT_A pCertSelectInfo        );																		
CertSelectCertificateChains(    __in_opt LPCGUID pSelectionContext,    __in DWORD dwFlags,    __in_opt PCCERT_SELECT_CHAIN_PARA pChainParameters,    __in DWORD cCriteria,    __in_ecount_opt(cCriteria) PCCERT_SELECT_CRITERIA rgpCriteria,    __in HCERTSTORE hStore,    __out PDWORD pcSelection,    __out_ecount(*pcSelection) PCCERT_CHAIN_CONTEXT** pprgpSelection    );																		
CertSelectCertificateW(        IN OUT PCERT_SELECT_STRUCT_W pCertSelectInfo        );																		
CertSelectionGetSerializedBlob(            IN PCERT_SELECTUI_INPUT pcsi,            OUT void ** ppOutBuffer,            OUT ULONG *pulOutBufferSize);																		
CertSerializeCertificateStoreElement(    __in PCCERT_CONTEXT pCertContext,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbElement, *pcbElement) BYTE *pbElement,    __inout DWORD *pcbElement    );																		
CertSerializeCRLStoreElement(    __in PCCRL_CONTEXT pCrlContext,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbElement, *pcbElement) BYTE *pbElement,    __inout DWORD *pcbElement    );																		
CertSerializeCTLStoreElement(    __in PCCTL_CONTEXT pCtlContext,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbElement, *pcbElement) BYTE *pbElement,    __inout DWORD *pcbElement    );																		
CertSetCertificateContextPropertiesFromCTLEntry(    __in PCCERT_CONTEXT pCertContext,    __in PCTL_ENTRY pCtlEntry,    __in DWORD dwFlags    );																		
CertSetCertificateContextProperty(    __in PCCERT_CONTEXT pCertContext,    __in DWORD dwPropId,    __in DWORD dwFlags,    __in_opt const void *pvData    );																		
CertSetCRLContextProperty(    __in PCCRL_CONTEXT pCrlContext,    __in DWORD dwPropId,    __in DWORD dwFlags,    __in_opt const void *pvData    );																		
CertSetCTLContextProperty(    __in PCCTL_CONTEXT pCtlContext,    __in DWORD dwPropId,    __in DWORD dwFlags,    __in_opt const void *pvData    );																		
CertSetEnhancedKeyUsage(    __in PCCERT_CONTEXT pCertContext,    __in_opt PCERT_ENHKEY_USAGE pUsage    );																		
CertSetStoreProperty(    __in HCERTSTORE hCertStore,    __in DWORD dwPropId,    __in DWORD dwFlags,    __in_opt const void *pvData    );																		
CertStrToNameA(    __in DWORD dwCertEncodingType,    __in LPCSTR pszX500,    __in DWORD dwStrType,    __reserved void *pvReserved,    __out_bcount_part_opt(*pcbEncoded, *pcbEncoded) BYTE *pbEncoded,    __inout DWORD *pcbEncoded,    __deref_opt_out_opt LPCSTR *ppszError    );																		
CertStrToNameW(    __in DWORD dwCertEncodingType,    __in LPCWSTR pszX500,    __in DWORD dwStrType,    __reserved void *pvReserved,    __out_bcount_part_opt(*pcbEncoded, *pcbEncoded) BYTE *pbEncoded,    __inout DWORD *pcbEncoded,    __deref_opt_out_opt LPCWSTR *ppszError    );																		
CertUnregisterPhysicalStore(    __in const void *pvSystemStore,    __in DWORD dwFlags,    __in LPCWSTR pwszStoreName    );																		
CertUnregisterSystemStore(    __in const void *pvSystemStore,    __in DWORD dwFlags    );																		
CertVerifyCertificateChainPolicy(    __in LPCSTR pszPolicyOID,    __in PCCERT_CHAIN_CONTEXT pChainContext,    __in PCERT_CHAIN_POLICY_PARA pPolicyPara,    __inout PCERT_CHAIN_POLICY_STATUS pPolicyStatus    );																		
CertVerifyCRLRevocation( __in DWORD dwCertEncodingType, __in PCERT_INFO pCertId, __in DWORD cCrlInfo, __in_ecount(cCrlInfo) PCRL_INFO rgpCrlInfo[] );																		
CertVerifyCRLTimeValidity(    __in_opt LPFILETIME pTimeToVerify,    __in PCRL_INFO pCrlInfo    );																		
CertVerifyCTLUsage(    __in DWORD dwEncodingType,    __in DWORD dwSubjectType,    __in void *pvSubject,    __in PCTL_USAGE pSubjectUsage,    __in DWORD dwFlags,    __in_opt PCTL_VERIFY_USAGE_PARA pVerifyUsagePara,    __inout PCTL_VERIFY_USAGE_STATUS pVerifyUsageStatus    );																		
CertVerifyRevocation(    __in DWORD dwEncodingType,    __in DWORD dwRevType,    __in DWORD cContext,    __in_ecount(cContext) PVOID rgpvContext[],    __in DWORD dwFlags,    __in_opt PCERT_REVOCATION_PARA pRevPara,    __inout PCERT_REVOCATION_STATUS pRevStatus    );																		
CertVerifySubjectCertificateContext(    __in PCCERT_CONTEXT pSubject,    __in_opt PCCERT_CONTEXT pIssuer,    __inout DWORD *pdwFlags    );																		
CertVerifyTimeValidity(    __in_opt LPFILETIME pTimeToVerify,    __in PCERT_INFO pCertInfo    );																		
CertVerifyValidityNesting(    __in PCERT_INFO pSubjectInfo,    __in PCERT_INFO pIssuerInfo    );																		
CertViewPropertiesA(        PCERT_VIEWPROPERTIES_STRUCT_A pCertViewInfo        );																		
CertViewPropertiesW(        PCERT_VIEWPROPERTIES_STRUCT_W pCertViewInfo        );																		
ChangeClipboardChain(    __in HWND hWndRemove,    __in HWND hWndNewNext);																		
ChangeClusterResourceGroup(    __in HRESOURCE hResource,    __in HGROUP hGroup    );																		
ChangeDisplaySettingsA(    __in_opt DEVMODEA* lpDevMode,    __in DWORD dwFlags);																		
ChangeDisplaySettingsExA(    __in_opt LPCSTR lpszDeviceName,    __in_opt DEVMODEA* lpDevMode,    __reserved HWND hwnd,    __in DWORD dwflags,    __in_opt LPVOID lParam);																		
ChangeDisplaySettingsExW(    __in_opt LPCWSTR lpszDeviceName,    __in_opt DEVMODEW* lpDevMode,    __reserved HWND hwnd,    __in DWORD dwflags,    __in_opt LPVOID lParam);																		
ChangeDisplaySettingsW(    __in_opt DEVMODEW* lpDevMode,    __in DWORD dwFlags);																		
ChangeMenuA(    __in HMENU hMenu,    __in UINT cmd,    __in_opt LPCSTR lpszNewItem,    __in UINT cmdInsert,    __in UINT flags);																		
ChangeMenuW(    __in HMENU hMenu,    __in UINT cmd,    __in_opt LPCWSTR lpszNewItem,    __in UINT cmdInsert,    __in UINT flags);																		
ChangeServiceConfig2A(    __in        SC_HANDLE    hService,    __in        DWORD        dwInfoLevel,    __in_opt    LPVOID       lpInfo    );																		
ChangeServiceConfig2W(    __in        SC_HANDLE    hService,    __in        DWORD        dwInfoLevel,    __in_opt    LPVOID       lpInfo    );																		
ChangeServiceConfigA(    __in        SC_HANDLE    hService,    __in        DWORD        dwServiceType,    __in        DWORD        dwStartType,    __in        DWORD        dwErrorControl,    __in_opt    LPCSTR     lpBinaryPathName,    __in_opt    LPCSTR     lpLoadOrderGroup,    __out_opt   LPDWORD      lpdwTagId,    __in_opt    LPCSTR     lpDependencies,    __in_opt    LPCSTR     lpServiceStartName,    __in_opt    LPCSTR     lpPassword,    __in_opt    LPCSTR     lpDisplayName    );																		
ChangeServiceConfigW(    __in        SC_HANDLE    hService,    __in        DWORD        dwServiceType,    __in        DWORD        dwStartType,    __in        DWORD        dwErrorControl,    __in_opt    LPCWSTR     lpBinaryPathName,    __in_opt    LPCWSTR     lpLoadOrderGroup,    __out_opt   LPDWORD      lpdwTagId,    __in_opt    LPCWSTR     lpDependencies,    __in_opt    LPCWSTR     lpServiceStartName,    __in_opt    LPCWSTR     lpPassword,    __in_opt    LPCWSTR     lpDisplayName    );																		
ChangeWindowMessageFilter(    __in UINT message,    __in DWORD dwFlag);																		
ChangeWindowMessageFilterEx( __in HWND hwnd, __in UINT message, __in DWORD action, __inout_opt PCHANGEFILTERSTRUCT pChangeFilterStruct);   																	
CharLowerA( __inout LPSTR lpsz);																		
CharLowerBuffA( __inout_ecount(cchLength) LPSTR lpsz, __in DWORD cchLength);																		
CharLowerBuffW( __inout_ecount(cchLength) LPWSTR lpsz, __in DWORD cchLength);																		
CharLowerW( __inout LPWSTR lpsz);																		
CharNextA( __in LPCSTR lpsz);																		
CharNextExA(     __in WORD CodePage,     __in LPCSTR lpCurrentChar,     __in DWORD dwFlags);																		
CharNextW(    __in LPCWSTR lpsz);																		
CharPrevA(    __in LPCSTR lpszStart,    __in LPCSTR lpszCurrent);																		
CharPrevExA(     __in WORD CodePage,     __in LPCSTR lpStart,     __in LPCSTR lpCurrentChar,     __in DWORD dwFlags);																		
CharPrevW(    __in LPCWSTR lpszStart,    __in LPCWSTR lpszCurrent);																		
CharToOemA(    __in_xcount(strlen(pSrc) + 1) LPCSTR pSrc,    __out_xcount(strlen(pSrc) + 1) LPSTR pDst);																		
CharToOemBuffA(    __in LPCSTR lpszSrc,    __out_ecount(cchDstLength) LPSTR lpszDst,    __in DWORD cchDstLength);																		
CharToOemBuffW(    __in LPCWSTR lpszSrc,    __out_ecount(cchDstLength) LPSTR lpszDst,    __in DWORD cchDstLength);																		
CharToOemW(    __in_xcount(strlen(pSrc) + 1) LPCWSTR pSrc,    __out_xcount(strlen(pSrc) + 1) LPSTR pDst);																		
CharUpperA(    __inout LPSTR lpsz);																		
CharUpperBuffA(    __inout_ecount(cchLength) LPSTR lpsz,    __in DWORD cchLength);																		
CharUpperBuffW(    __inout_ecount(cchLength) LPWSTR lpsz,    __in DWORD cchLength);																		
CharUpperW(    __inout LPWSTR lpsz);																		
CheckColorsInGamut(    __in HDC hdc,__in_ecount(nCount) LPRGBTRIPLE lpRGBTriple,__out_bcount(nCount) LPVOID dlpBuffer,__in DWORD nCount);																		
CheckDlgButton(    __in HWND hDlg,    __in int nIDButton,    __in UINT uCheck);																		
CheckMenuItem(    __in HMENU hMenu,    __in UINT uIDCheckItem,    __in UINT uCheck);																		
CheckMenuRadioItem(__in HMENU hmenu,__in UINT first,__in UINT last,__in UINT check,__in UINT flags);																		
CheckNameLegalDOS8Dot3A(    __in      LPCSTR lpName,    __out_ecount_opt(OemNameSize) LPSTR lpOemName,    __in      DWORD OemNameSize,    __out_opt PBOOL pbNameContainsSpaces OPTIONAL,    __out     PBOOL pbNameLegal    );																		
CheckNameLegalDOS8Dot3W(    __in      LPCWSTR lpName,    __out_ecount_opt(OemNameSize) LPSTR lpOemName,    __in      DWORD OemNameSize,    __out_opt PBOOL pbNameContainsSpaces OPTIONAL,    __out     PBOOL pbNameLegal    );																		
CheckRadioButton(    __in HWND hDlg,    __in int nIDFirstButton,    __in int nIDLastButton,    __in int nIDCheckButton);																		
CheckRemoteDebuggerPresent(    __in  HANDLE hProcess,    __out PBOOL pbDebuggerPresent    );																		
CheckSumMappedFile (    __in PVOID BaseAddress,    __in DWORD FileLength,    __out PDWORD HeaderSum,    __out PDWORD CheckSum    );																		
CheckTokenMembership(    __in_opt HANDLE TokenHandle,    __in     PSID SidToCheck,    __out    PBOOL IsMember    );																		
ChildWindowFromPoint(__in HWND hWndParent,__in POINT Point);																		
ChildWindowFromPointEx(__in HWND hwnd,__in POINT pt,__in UINT flags);																		
ClearCommBreak(    __in HANDLE hFile    );																		
ClearCommError(    __in      HANDLE hFile,    __out_opt LPDWORD lpErrors,    __out_opt LPCOMSTAT lpStat    );																		
ClearEventLogA (    __in     HANDLE hEventLog,    __in_opt LPCSTR lpBackupFileName    );																		
ClearEventLogW (    __in     HANDLE hEventLog,    __in_opt LPCWSTR lpBackupFileName    );																		
ClientToScreen(__in HWND hWnd,__inout LPPOINT lpPoint);																		
ClipCursor(__in_opt CONST RECT *lpRect);																		
CloseClipboard(    VOID);																		
CloseCluster(    __in HCLUSTER hCluster    );																		
CloseClusterGroup(    __in HGROUP hGroup    );																		
CloseClusterNetInterface(    __in HNETINTERFACE hNetInterface    );																		
CloseClusterNetwork(    __in HNETWORK hNetwork    );																		
CloseClusterNode(    __in HNODE hNode    );																		
CloseClusterNotifyPort(    __in HCHANGE hChange    );																		
CloseClusterResource(    __in HRESOURCE hResource    );																		
CloseDesktop(    __in HDESK hDesktop);																		
CloseEncryptedFileRaw(    __in PVOID           pvContext    );																		
CloseEnhMetaFile( __in HDC hdc);																		
CloseEventLog ( __in HANDLE hEventLog );																		
CloseFigure(__in HDC hdc);																		
CloseGestureInfoHandle( __in HGESTUREINFO hGestureInfo);																		
CloseHandle( __in HANDLE hObject );																		
ClosePrinter(__in HANDLE hPrinter);																		
ClosePrivateNamespace( __in HANDLE Handle, __in ULONG Flags );																		
CloseServiceHandle( __in SC_HANDLE   hSCObject );																		
CloseSpoolFileHandle(__in HANDLE  hPrinter,__in    HANDLE  hSpoolFile);																		
CloseThreadpool( __inout PTP_POOL ptpp );																		
CloseThreadpoolCleanupGroup(    __inout PTP_CLEANUP_GROUP ptpcg    );																		
CloseThreadpoolCleanupGroupMembers(    __inout     PTP_CLEANUP_GROUP ptpcg,    __in        BOOL              fCancelPendingCallbacks,    __inout_opt PVOID             pvCleanupContext    );																		
CloseThreadpoolIo( __inout PTP_IO pio );																		
CloseThreadpoolTimer( __inout PTP_TIMER pti );																		
CloseThreadpoolWait( __inout PTP_WAIT pwa );																		
CloseThreadpoolWork( __inout PTP_WORK pwk );																		
CloseThreadWaitChainSession ( __in HWCT WctHandle    );																		
CloseTouchInputHandle( __in HTOUCHINPUT hTouchInput);     																
CloseWindow( __in HWND hWnd);																		
CloseWindowStation( __in HWINSTA hWinSta);																		
ClusterClearBackupStateForSharedVolume( __in LPCWSTR lpszVolumePathName );																		
ClusterCloseEnum( __in HCLUSENUM hEnum );																		
ClusterCloseEnumEx( __in HCLUSENUMEX hClusterEnum );																		
ClusterControl( __in HCLUSTER hCluster, __in_opt HNODE hHostNode, __in DWORD dwControlCode, __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer, __in DWORD nInBufferSize, __out_bcount_part_opt(nOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer, __in DWORD nOutBufferSize, __out_opt LPDWORD lpBytesReturned );																		
ClusterEnum( __in HCLUSENUM hEnum, __in DWORD dwIndex, __out LPDWORD lpdwType, __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszName, __inout LPDWORD lpcchName );																		
ClusterEnumEx( __in HCLUSENUMEX hClusterEnum, __in DWORD dwIndex, __inout PCLUSTER_ENUM_ITEM pItem, __inout LPDWORD cbItem );																		
ClusterGetEnumCount( __in HCLUSENUM hEnum );																		
ClusterGetEnumCountEx( __in HCLUSENUMEX hClusterEnum );																		
ClusterGetVolumeNameForVolumeMountPoint(    __in   LPCWSTR lpszVolumeMountPoint,    __out  LPWSTR lpszVolumeName,    __in   DWORD cchBufferLength    );																		
ClusterGetVolumePathName(    __in   LPCWSTR lpszFileName,    __out  LPWSTR lpszVolumePathName,    __in   DWORD cchBufferLength    );																		
ClusterGroupCloseEnum(    __in HGROUPENUM hGroupEnum    );																		
ClusterGroupControl(    __in HGROUP hGroup,    __in_opt HNODE hHostNode,    __in DWORD dwControlCode,    __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer,    __in DWORD nInBufferSize,    __out_bcount_part_opt(nOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer,    __in DWORD nOutBufferSize,    __out_opt LPDWORD lpBytesReturned    );																		
ClusterGroupEnum(    __in HGROUPENUM hGroupEnum,    __in DWORD dwIndex,    __out LPDWORD lpdwType,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszResourceName,    __inout LPDWORD lpcchName    );																		
ClusterGroupGetEnumCount(    __in HGROUPENUM hGroupEnum    );																		
ClusterGroupOpenEnum(    __in HGROUP hGroup,    __in DWORD dwType    );																		
ClusterIsPathOnSharedVolume(    __in LPCWSTR lpszPathName);																		
ClusterNetInterfaceControl(    __in HNETINTERFACE hNetInterface,    __in_opt HNODE hHostNode,    __in DWORD dwControlCode,    __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer,    __in DWORD nInBufferSize,    __out_bcount_part_opt(nOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer,    __in DWORD nOutBufferSize,    __out_opt LPDWORD lpBytesReturned    );																		
ClusterNetworkCloseEnum(    __in HNETWORKENUM hNetworkEnum    );																		
ClusterNetworkControl(    __in HNETWORK hNetwork,    __in_opt HNODE hHostNode,    __in DWORD dwControlCode,    __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer,    __in DWORD nInBufferSize,    __out_bcount_part_opt(nOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer,    __in DWORD nOutBufferSize,    __out_opt LPDWORD lpBytesReturned    );																		
ClusterNetworkEnum(    __in HNETWORKENUM hNetworkEnum,    __in DWORD dwIndex,    __out LPDWORD lpdwType,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszName,    __inout LPDWORD lpcchName    );																		
ClusterNetworkGetEnumCount(    __in HNETWORKENUM hNetworkEnum    );																		
ClusterNetworkOpenEnum(    __in HNETWORK hNetwork,    __in DWORD dwType    );																		
ClusterNodeCloseEnum(    __in HNODEENUM hNodeEnum    );																		
ClusterNodeCloseEnumEx(    __in HNODEENUMEX hNodeEnum    );																		
ClusterNodeControl(    __in HNODE hNode,    __in_opt HNODE hHostNode,    __in DWORD dwControlCode,    __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer,    __in DWORD nInBufferSize,    __out_bcount_part_opt(nOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer,    __in DWORD nOutBufferSize,    __out_opt LPDWORD lpBytesReturned    );																		
ClusterNodeEnum(    __in HNODEENUM hNodeEnum,    __in DWORD dwIndex,    __out LPDWORD lpdwType,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszName,    __inout LPDWORD lpcchName    );																		
ClusterNodeEnumEx(    __in HNODEENUMEX hNodeEnum,    __in DWORD dwIndex,    __inout PCLUSTER_ENUM_ITEM pItem,    __inout LPDWORD cbItem    );																		
ClusterNodeGetEnumCount(    __in HNODEENUM hNodeEnum    );																		
ClusterNodeGetEnumCountEx(    __in HNODEENUMEX hNodeEnum    );																		
ClusterNodeOpenEnum(    __in HNODE hNode,    __in DWORD dwType    );																		
ClusterNodeOpenEnumEx(    __in HNODE hNode,    __in DWORD dwType,    __in PVOID pOptions    );																		
ClusterOpenEnum(    __in HCLUSTER hCluster,    __in DWORD dwType    );																		
ClusterOpenEnumEx(    __in HCLUSTER hCluster,    __in DWORD dwType,    __in PVOID pOptions    );																		
ClusterPrepareSharedVolumeForBackup(    __in LPCWSTR lpszFileName,    __out LPWSTR lpszVolumePathName,    __inout LPDWORD lpcchVolumePathName,    __out LPWSTR lpszVolumeName,    __inout LPDWORD lpcchVolumeName    );																		
ClusterRegCloseKey(    __in HKEY hKey    );																		
ClusterRegCreateKey(    __in HKEY hKey,    __in LPCWSTR lpszSubKey,    __in DWORD dwOptions,    __in REGSAM samDesired,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __out PHKEY phkResult,    __out_opt LPDWORD lpdwDisposition    );																		
ClusterRegDeleteKey(    __in HKEY hKey,    __in LPCWSTR lpszSubKey    );																		
ClusterRegDeleteValue(    __in HKEY hKey,    __in LPCWSTR lpszValueName    );																		
ClusterRegEnumKey(    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszName,    __inout LPDWORD lpcchName,    __out_opt PFILETIME lpftLastWriteTime    );																		
ClusterRegEnumValue(    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part(*lpcchValueName, *lpcchValueName + 1) LPWSTR lpszValueName,    __inout LPDWORD lpcchValueName,    __out_opt LPDWORD lpdwType,    __out_bcount_part_opt(*lpcbData, *lpcbData) LPBYTE lpData,    __inout_opt LPDWORD lpcbData    );																		
ClusterRegGetKeySecurity (    __in HKEY hKey,    __in SECURITY_INFORMATION RequestedInformation,    __out_bcount_part(*lpcbSecurityDescriptor, *lpcbSecurityDescriptor) PSECURITY_DESCRIPTOR pSecurityDescriptor,    __inout LPDWORD lpcbSecurityDescriptor    );																		
ClusterRegOpenKey(    __in HKEY hKey,    __in LPCWSTR lpszSubKey,    __in REGSAM samDesired,    __out PHKEY phkResult    );																		
ClusterRegQueryInfoKey(    __in HKEY hKey,    __in LPDWORD lpcSubKeys,    __in LPDWORD lpcchMaxSubKeyLen,    __in LPDWORD lpcValues,    __in LPDWORD lpcchMaxValueNameLen,    __in LPDWORD lpcbMaxValueLen,    __in LPDWORD lpcbSecurityDescriptor,    __in PFILETIME lpftLastWriteTime    );																		
ClusterRegQueryValue(    __in HKEY hKey,    __in LPCWSTR lpszValueName,    __out_opt LPDWORD lpdwValueType,    __out_bcount_part_opt(*lpcbData, *lpcbData) LPBYTE lpData,    __inout_opt LPDWORD lpcbData    );																		
ClusterRegSetKeySecurity(    __in HKEY hKey,    __in SECURITY_INFORMATION SecurityInformation,    __in PSECURITY_DESCRIPTOR pSecurityDescriptor    );																		
ClusterRegSetValue(    __in HKEY hKey,    __in LPCWSTR lpszValueName,    __in DWORD dwType,    __in CONST BYTE* lpData,    __in DWORD cbData    );																		
ClusterResourceCloseEnum(    __in HRESENUM hResEnum    );																		
ClusterResourceControl(    __in HRESOURCE hResource,    __in_opt HNODE hHostNode,    __in DWORD dwControlCode,    __in_bcount_opt(cbInBufferSize) LPVOID lpInBuffer,    __in DWORD cbInBufferSize,    __out_bcount_part_opt(cbOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer,    __in DWORD cbOutBufferSize,    __out_opt LPDWORD lpBytesReturned    );																		
ClusterResourceEnum(    __in HRESENUM hResEnum,    __in DWORD dwIndex,    __out LPDWORD lpdwType,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszName,    __inout LPDWORD lpcchName    );																		
ClusterResourceGetEnumCount(    __in HRESENUM hResEnum    );																		
ClusterResourceOpenEnum(    __in HRESOURCE hResource,    __in DWORD dwType    );																		
ClusterResourceTypeCloseEnum(    __in HRESTYPEENUM hResTypeEnum    );																		
ClusterResourceTypeControl(    __in HCLUSTER hCluster,    __in LPCWSTR lpszResourceTypeName,    __in_opt HNODE hHostNode,    __in DWORD dwControlCode,    __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer,    __in DWORD nInBufferSize,    __out_bcount_part_opt(nOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer,    __in DWORD nOutBufferSize,    __out_opt LPDWORD lpBytesReturned    );																		
ClusterResourceTypeEnum(    __in HRESTYPEENUM hResTypeEnum,    __in DWORD dwIndex,    __out LPDWORD lpdwType,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszName,    __inout LPDWORD lpcchName    );																		
ClusterResourceTypeGetEnumCount(    __in HRESTYPEENUM hResTypeEnum    );																		
ClusterResourceTypeOpenEnum(    __in HCLUSTER hCluster,    __in LPCWSTR lpszResourceTypeName,    __in DWORD dwType    );																		
ClusWorkerCheckTerminate(    IN PCLUS_WORKER lpWorker    );																		
ClusWorkerCreate(    OUT PCLUS_WORKER lpWorker,    IN PWORKER_START_ROUTINE lpStartAddress,    IN PVOID lpParameter    );																		
ClusWorkerTerminate(    __in PCLUS_WORKER lpWorker    );																		
CM_Add_Empty_Log_Conf(    __out PLOG_CONF     plcLogConf,    __in  DEVINST       dnDevInst,    __in  PRIORITY      Priority,    __in  ULONG         ulFlags    );																		
CM_Add_Empty_Log_Conf_Ex(    __out PLOG_CONF     plcLogConf,    __in  DEVINST       dnDevInst,    __in  PRIORITY      Priority,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Add_ID_ExA(    __in  DEVINST       dnDevInst,    __in  PSTR          pszID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Add_ID_ExW(    __in  DEVINST       dnDevInst,    __in  PWSTR         pszID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Add_IDA(    __in  DEVINST       dnDevInst,    __in  PSTR          pszID,    __in  ULONG         ulFlags    );																		
CM_Add_IDW(    __in  DEVINST       dnDevInst,    __in  PWSTR         pszID,    __in  ULONG         ulFlags    );																		
CM_Add_Range(    __in  DWORDLONG     ullStartValue,    __in  DWORDLONG     ullEndValue,    __in  RANGE_LIST    rlh,    __in  ULONG         ulFlags    );																		
CM_Add_Res_Des(    __out_opt PRES_DES  prdResDes,    __in  LOG_CONF      lcLogConf,    __in  RESOURCEID    ResourceID,    __in_bcount(ResourceLen) PCVOID ResourceData,    __in  ULONG         ResourceLen,    __in  ULONG         ulFlags    );																		
CM_Add_Res_Des_Ex(    __out_opt PRES_DES  prdResDes,    __in  LOG_CONF      lcLogConf,    __in  RESOURCEID    ResourceID,    __in_bcount(ResourceLen) PCVOID ResourceData,    __in  ULONG         ResourceLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Connect_MachineA(    __in_opt PCSTR      UNCServerName,    __out PHMACHINE     phMachine    );																		
CM_Connect_MachineW(    __in_opt PCWSTR     UNCServerName,    __out PHMACHINE     phMachine    );																		
CM_Create_DevNode_ExA(    __out PDEVINST      pdnDevInst,    __in  DEVINSTID_A   pDeviceID,    __in  DEVINST       dnParent,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Create_DevNode_ExW(    __out PDEVINST      pdnDevInst,    __in  DEVINSTID_W   pDeviceID,    __in  DEVINST       dnParent,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Create_DevNodeA(    __out PDEVINST      pdnDevInst,    __in  DEVINSTID_A   pDeviceID,    __in  DEVINST       dnParent,    __in  ULONG         ulFlags    );																		
CM_Create_DevNodeW(    __out PDEVINST      pdnDevInst,    __in  DEVINSTID_W   pDeviceID,    __in  DEVINST       dnParent,    __in  ULONG         ulFlags    );																		
CM_Create_Range_List(    __out PRANGE_LIST   prlh,    __in  ULONG         ulFlags    );																		
CM_Delete_Class_Key(    __in  LPGUID        ClassGuid,    __in  ULONG         ulFlags    );																		
CM_Delete_Class_Key_Ex(    __in  LPGUID        ClassGuid,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Delete_Device_Interface_Key_ExA(    __in  LPCSTR        pszDeviceInterface,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Delete_Device_Interface_Key_ExW(    __in  LPCWSTR       pszDeviceInterface,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Delete_Device_Interface_KeyA(    __in  LPCSTR        pszDeviceInterface,    __in  ULONG         ulFlags    );																		
CM_Delete_Device_Interface_KeyW(    __in  LPCWSTR       pszDeviceInterface,    __in  ULONG         ulFlags    );																		
CM_Delete_DevNode_Key(    __in  DEVNODE       dnDevNode,    __in  ULONG         ulHardwareProfile,    __in  ULONG         ulFlags    );																		
CM_Delete_DevNode_Key_Ex(    __in  DEVNODE       dnDevNode,    __in  ULONG         ulHardwareProfile,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Delete_Range(    __in  DWORDLONG     ullStartValue,    __in  DWORDLONG     ullEndValue,    __in  RANGE_LIST    rlh,    __in  ULONG         ulFlags    );																		
CM_Detect_Resource_Conflict(    __in  DEVINST       dnDevInst,    __in  RESOURCEID    ResourceID,    __in_bcount(ResourceLen) PCVOID ResourceData,    __in  ULONG         ResourceLen,    __out PBOOL         pbConflictDetected,    __in  ULONG         ulFlags    );																		
CM_Detect_Resource_Conflict_Ex(    __in  DEVINST       dnDevInst,    __in  RESOURCEID    ResourceID,    __in_bcount(ResourceLen) PCVOID ResourceData,    __in  ULONG         ResourceLen,    __out PBOOL         pbConflictDetected,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Disable_DevNode(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Disable_DevNode_Ex(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Disconnect_Machine(    __in_opt HMACHINE   hMachine    );																		
CM_Dup_Range_List(    __in  RANGE_LIST    rlhOld,    __in  RANGE_LIST    rlhNew,    __in  ULONG         ulFlags    );																		
CM_Enable_DevNode(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Enable_DevNode_Ex(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Enumerate_Classes(    __in  ULONG         ulClassIndex,    __out LPGUID        ClassGuid,    __in  ULONG         ulFlags    );																		
CM_Enumerate_Classes_Ex(    __in  ULONG         ulClassIndex,    __out LPGUID        ClassGuid,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Enumerate_Enumerators_ExA(    __in  ULONG         ulEnumIndex,    __out_ecount(*pulLength) PSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Enumerate_Enumerators_ExW(    __in  ULONG         ulEnumIndex,    __out_ecount(*pulLength) PWSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Enumerate_EnumeratorsA(    __in  ULONG         ulEnumIndex,    __out_ecount(*pulLength) PSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Enumerate_EnumeratorsW(    __in  ULONG         ulEnumIndex,    __out_ecount(*pulLength) PWSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Find_Range(    __out PDWORDLONG    pullStart,    __in  DWORDLONG     ullStart,    __in  ULONG         ulLength,    __in  DWORDLONG     ullAlignment,    __in  DWORDLONG     ullEnd,    __in  RANGE_LIST    rlh,    __in  ULONG         ulFlags    );																		
CM_First_Range(    __in  RANGE_LIST    rlh,    __out PDWORDLONG    pullStart,    __out PDWORDLONG    pullEnd,    __out PRANGE_ELEMENT preElement,    __in  ULONG         ulFlags    );																		
CM_Free_Log_Conf(    __in  LOG_CONF      lcLogConfToBeFreed,    __in  ULONG         ulFlags    );																		
CM_Free_Log_Conf_Ex(    __in  LOG_CONF      lcLogConfToBeFreed,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Free_Log_Conf_Handle(    __in  LOG_CONF      lcLogConf    );																		
CM_Free_Range_List(    __in  RANGE_LIST    rlh,    __in  ULONG         ulFlags    );																		
CM_Free_Res_Des(    __out PRES_DES      prdResDes,    __in  RES_DES       rdResDes,    __in  ULONG         ulFlags    );																		
CM_Free_Res_Des_Ex(    __out PRES_DES      prdResDes,    __in  RES_DES       rdResDes,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Free_Res_Des_Handle(    __in  RES_DES       rdResDes    );																		
CM_Free_Resource_Conflict_Handle(    __in  CONFLICT_LIST clConflictList    );																		
CM_Get_Child(    __out PDEVINST      pdnDevInst,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Get_Child_Ex(    __out PDEVINST      pdnDevInst,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Class_Key_Name_ExA(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) LPSTR pszKeyName,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Class_Key_Name_ExW(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) LPWSTR pszKeyName,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Class_Key_NameA(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) LPSTR pszKeyName,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_Class_Key_NameW(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) LPWSTR pszKeyName,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_Class_Name_ExA(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) PSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Class_Name_ExW(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) PWSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Class_NameA(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) PSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_Class_NameW(    __in  LPGUID        ClassGuid,    __out_ecount_opt(*pulLength) PWSTR Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_Class_Registry_PropertyA(    __in  LPGUID        ClassGuid,    __in  ULONG         ulProperty,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Class_Registry_PropertyW(    __in  LPGUID        ClassGuid,    __in  ULONG         ulProperty,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Depth(    __out PULONG        pulDepth,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Get_Depth_Ex(    __out PULONG        pulDepth,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_ID_ExA(    __in  DEVINST       dnDevInst,    __out_ecount(BufferLen) PSTR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_ID_ExW(    __in  DEVINST       dnDevInst,    __out_ecount(BufferLen) PWSTR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_ID_List_ExA(    __in_opt PCSTR      pszFilter,    __out_ecount(BufferLen) PCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_ID_List_ExW(    __in_opt PCWSTR     pszFilter,    __out_ecount(BufferLen) PWCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_ID_List_Size_ExA(    __out PULONG        pulLen,    __in_opt PCSTR      pszFilter,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_ID_List_Size_ExW(    __out PULONG        pulLen,    __in_opt PCWSTR     pszFilter,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_ID_List_SizeA(    __out PULONG        pulLen,    __in_opt PCSTR      pszFilter,    __in  ULONG         ulFlags    );																		
CM_Get_Device_ID_List_SizeW(    __out PULONG        pulLen,    __in_opt PCWSTR     pszFilter,    __in  ULONG         ulFlags    );																		
CM_Get_Device_ID_ListA(    __in_opt PCSTR      pszFilter,    __out_ecount(BufferLen) PCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags    );																		
CM_Get_Device_ID_ListW(    __in_opt PCWSTR     pszFilter,    __out_ecount(BufferLen) PWCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags    );																		
CM_Get_Device_ID_Size(    __out PULONG        pulLen,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Get_Device_ID_Size_Ex(    __out PULONG        pulLen,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_IDA(    __in  DEVINST       dnDevInst,    __out_ecount(BufferLen) PSTR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags    );																		
CM_Get_Device_IDW(    __in  DEVINST       dnDevInst,    __out_ecount(BufferLen) PWSTR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags    );																		
CM_Get_Device_Interface_Alias_ExA(    __in  LPCSTR        pszDeviceInterface,    __in  LPGUID        AliasInterfaceGuid,    __out_ecount(*pulLength) LPSTR pszAliasDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_Interface_Alias_ExW(    __in  LPCWSTR       pszDeviceInterface,    __in  LPGUID        AliasInterfaceGuid,    __out_ecount(*pulLength) LPWSTR pszAliasDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_Interface_AliasA(    __in  LPCSTR        pszDeviceInterface,    __in  LPGUID        AliasInterfaceGuid,    __out_ecount(*pulLength) LPSTR pszAliasDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_Device_Interface_AliasW(    __in  LPCWSTR       pszDeviceInterface,    __in  LPGUID        AliasInterfaceGuid,    __out_ecount(*pulLength) LPWSTR pszAliasDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_Device_Interface_List_ExA(    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_A pDeviceID,    __out_ecount(BufferLen) PCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_Interface_List_ExW(    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_W pDeviceID,    __out_ecount(BufferLen) PWCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_Interface_List_Size_ExA(    __out PULONG        pulLen,    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_A pDeviceID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_Interface_List_Size_ExW(    __out PULONG        pulLen,    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_W pDeviceID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Device_Interface_List_SizeA(    __out PULONG        pulLen,    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_A pDeviceID,    __in  ULONG         ulFlags    );																		
CM_Get_Device_Interface_List_SizeW(    __out PULONG        pulLen,    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_W pDeviceID,    __in  ULONG         ulFlags    );																		
CM_Get_Device_Interface_ListA(    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_A pDeviceID,    __out_ecount(BufferLen) PCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags    );																		
CM_Get_Device_Interface_ListW(    __in  LPGUID        InterfaceClassGuid,    __in_opt DEVINSTID_W pDeviceID,    __out_ecount(BufferLen) PWCHAR Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags    );																		
CM_Get_DevNode_Custom_Property_ExA(    __in  DEVINST       dnDevInst,    __in  PCSTR         pszCustomPropertyName,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_DevNode_Custom_Property_ExW(    __in  DEVINST       dnDevInst,    __in  PCWSTR        pszCustomPropertyName,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_DevNode_Custom_PropertyA(    __in  DEVINST       dnDevInst,    __in  PCSTR         pszCustomPropertyName,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_DevNode_Custom_PropertyW(    __in  DEVINST       dnDevInst,    __in  PCWSTR        pszCustomPropertyName,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_DevNode_Registry_Property_ExA(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_DevNode_Registry_Property_ExW(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_DevNode_Registry_PropertyA(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_DevNode_Registry_PropertyW(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __out_opt PULONG    pulRegDataType,    __out_bcount_opt(*pulLength) PVOID Buffer,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Get_DevNode_Status(    __out PULONG        pulStatus,    __out PULONG        pulProblemNumber,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Get_DevNode_Status_Ex(    __out PULONG        pulStatus,    __out PULONG        pulProblemNumber,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_First_Log_Conf(    __out_opt PLOG_CONF plcLogConf,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Get_First_Log_Conf_Ex(    __out_opt PLOG_CONF plcLogConf,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Global_State(    __out PULONG        pulState,    __in  ULONG         ulFlags    );																		
CM_Get_Global_State_Ex(    __out PULONG        pulState,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Hardware_Profile_Info_ExA(    __in  ULONG         ulIndex,    __out PHWPROFILEINFO_A pHWProfileInfo,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Hardware_Profile_Info_ExW(    __in  ULONG         ulIndex,    __out PHWPROFILEINFO_W pHWProfileInfo,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Hardware_Profile_InfoA(    __in  ULONG         ulIndex,    __out PHWPROFILEINFO_A pHWProfileInfo,    __in  ULONG         ulFlags    );																		
CM_Get_Hardware_Profile_InfoW(    __in  ULONG         ulIndex,    __out PHWPROFILEINFO_W pHWProfileInfo,    __in  ULONG         ulFlags    );																		
CM_Get_HW_Prof_Flags_ExA(    __in  DEVINSTID_A   pDeviceID,    __in  ULONG         ulHardwareProfile,    __out PULONG        pulValue,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_HW_Prof_Flags_ExW(    __in  DEVINSTID_W   pDeviceID,    __in  ULONG         ulHardwareProfile,    __out PULONG        pulValue,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_HW_Prof_FlagsA(    __in  DEVINSTID_A   pDeviceID,    __in  ULONG         ulHardwareProfile,    __out PULONG        pulValue,    __in  ULONG         ulFlags    );																		
CM_Get_HW_Prof_FlagsW(    __in  DEVINSTID_W   pDeviceID,    __in  ULONG         ulHardwareProfile,    __out PULONG        pulValue,    __in  ULONG         ulFlags    );																		
CM_Get_Log_Conf_Priority(    __in  LOG_CONF      lcLogConf,    __out PPRIORITY     pPriority,    __in  ULONG         ulFlags    );																		
CM_Get_Log_Conf_Priority_Ex(    __in  LOG_CONF      lcLogConf,    __out PPRIORITY     pPriority,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Next_Log_Conf(    __out_opt PLOG_CONF plcLogConf,    __in  LOG_CONF      lcLogConf,    __in  ULONG         ulFlags    );																		
CM_Get_Next_Log_Conf_Ex(    __out_opt PLOG_CONF plcLogConf,    __in  LOG_CONF      lcLogConf,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Next_Res_Des(    __out PRES_DES      prdResDes,    __in  RES_DES       rdResDes,    __in  RESOURCEID    ForResource,    __out_opt PRESOURCEID pResourceID,    __in  ULONG         ulFlags    );																		
CM_Get_Next_Res_Des_Ex(    __out PRES_DES      prdResDes,    __in  RES_DES       rdResDes,    __in  RESOURCEID    ForResource,    __out_opt PRESOURCEID pResourceID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Parent(    __out PDEVINST      pdnDevInst,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Get_Parent_Ex(    __out PDEVINST      pdnDevInst,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Res_Des_Data(    __in  RES_DES       rdResDes,    __out_bcount(BufferLen) PVOID Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags    );																		
CM_Get_Res_Des_Data_Ex(    __in  RES_DES       rdResDes,    __out_bcount(BufferLen) PVOID Buffer,    __in  ULONG         BufferLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Res_Des_Data_Size(    __out PULONG        pulSize,    __in  RES_DES       rdResDes,    __in  ULONG         ulFlags    );																		
CM_Get_Res_Des_Data_Size_Ex(    __out PULONG        pulSize,    __in  RES_DES       rdResDes,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Resource_Conflict_Count(    __in  CONFLICT_LIST clConflictList,    __out PULONG        pulCount    );																		
CM_Get_Resource_Conflict_DetailsA(    __in  CONFLICT_LIST clConflictList,    __in  ULONG         ulIndex,    __inout PCONFLICT_DETAILS_A pConflictDetails    );																		
CM_Get_Resource_Conflict_DetailsW(    __in  CONFLICT_LIST clConflictList,    __in  ULONG         ulIndex,    __inout PCONFLICT_DETAILS_W pConflictDetails    );																		
CM_Get_Sibling(    __out PDEVINST      pdnDevInst,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Get_Sibling_Ex(    __out PDEVINST      pdnDevInst,    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Get_Version(    VOID    );																		
CM_Get_Version_Ex(    __in_opt HMACHINE   hMachine    );																		
CM_Intersect_Range_List(    __in  RANGE_LIST    rlhOld1,    __in  RANGE_LIST    rlhOld2,    __in  RANGE_LIST    rlhNew,    __in  ULONG         ulFlags    );																		
CM_Invert_Range_List(    __in  RANGE_LIST    rlhOld,    __in  RANGE_LIST    rlhNew,    __in  DWORDLONG     ullMaxValue,    __in  ULONG         ulFlags    );																		
CM_Is_Dock_Station_Present(    __out PBOOL         pbPresent    );																		
CM_Is_Dock_Station_Present_Ex(    __out PBOOL         pbPresent,    __in_opt HMACHINE   hMachine    );																		
CM_Is_Version_Available(    __in  WORD          wVersion    );																		
CM_Is_Version_Available_Ex(    __in  WORD          wVersion,    __in_opt HMACHINE   hMachine    );																		
CM_Locate_DevNode_ExA(    __out PDEVINST      pdnDevInst,    __in_opt DEVINSTID_A pDeviceID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Locate_DevNode_ExW(    __out PDEVINST      pdnDevInst,    __in_opt DEVINSTID_W pDeviceID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Locate_DevNodeA(    __out PDEVINST      pdnDevInst,    __in_opt DEVINSTID_A pDeviceID,    __in  ULONG         ulFlags    );																		
CM_Locate_DevNodeW(    __out PDEVINST      pdnDevInst,    __in_opt DEVINSTID_W pDeviceID,    __in  ULONG         ulFlags    );																		
CM_Merge_Range_List(    __in  RANGE_LIST    rlhOld1,    __in  RANGE_LIST    rlhOld2,    __in  RANGE_LIST    rlhNew,    __in  ULONG         ulFlags    );																		
CM_Modify_Res_Des(    __out PRES_DES      prdResDes,    __in  RES_DES       rdResDes,    __in  RESOURCEID    ResourceID,    __in_bcount(ResourceLen) PCVOID ResourceData,    __in  ULONG         ResourceLen,    __in  ULONG         ulFlags    );																		
CM_Modify_Res_Des_Ex(    __out PRES_DES      prdResDes,    __in  RES_DES       rdResDes,    __in  RESOURCEID    ResourceID,    __in_bcount(ResourceLen) PCVOID ResourceData,    __in  ULONG         ResourceLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Move_DevNode(    __in  DEVINST       dnFromDevInst,    __in  DEVINST       dnToDevInst,    __in  ULONG         ulFlags    );																		
CM_Move_DevNode_Ex(    __in  DEVINST       dnFromDevInst,    __in  DEVINST       dnToDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Next_Range(    __inout PRANGE_ELEMENT preElement,    __out PDWORDLONG    pullStart,    __out PDWORDLONG    pullEnd,    __in  ULONG         ulFlags    );																		
CM_Open_Class_Key_ExA(    __in_opt LPGUID     ClassGuid,    __in_opt LPCSTR     pszClassName,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkClass,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Open_Class_Key_ExW(    __in_opt LPGUID     ClassGuid,    __in_opt LPCWSTR    pszClassName,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkClass,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Open_Class_KeyA(    __in_opt LPGUID     ClassGuid,    __in_opt LPCSTR     pszClassName,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkClass,    __in  ULONG         ulFlags    );																		
CM_Open_Class_KeyW(    __in_opt LPGUID     ClassGuid,    __in_opt LPCWSTR    pszClassName,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkClass,    __in  ULONG         ulFlags    );																		
CM_Open_Device_Interface_Key_ExA(    __in  LPCSTR        pszDeviceInterface,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkDeviceInterface,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Open_Device_Interface_Key_ExW(    __in  LPCWSTR       pszDeviceInterface,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkDeviceInterface,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Open_Device_Interface_KeyA(    __in  LPCSTR        pszDeviceInterface,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkDeviceInterface,    __in  ULONG         ulFlags    );																		
CM_Open_Device_Interface_KeyW(    __in  LPCWSTR       pszDeviceInterface,    __in  REGSAM        samDesired,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkDeviceInterface,    __in  ULONG         ulFlags    );																		
CM_Open_DevNode_Key(    __in  DEVINST       dnDevNode,    __in  REGSAM        samDesired,    __in  ULONG         ulHardwareProfile,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkDevice,    __in  ULONG         ulFlags    );																		
CM_Open_DevNode_Key_Ex(    __in  DEVINST       dnDevNode,    __in  REGSAM        samDesired,    __in  ULONG         ulHardwareProfile,    __in  REGDISPOSITION Disposition,    __out PHKEY         phkDevice,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Query_And_Remove_SubTree_ExA(    __in  DEVINST       dnAncestor,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Query_And_Remove_SubTree_ExW(    __in  DEVINST       dnAncestor,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPWSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Query_And_Remove_SubTreeA(    __in  DEVINST       dnAncestor,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags    );																		
CM_Query_And_Remove_SubTreeW(    __in  DEVINST       dnAncestor,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPWSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags    );																		
CM_Query_Arbitrator_Free_Data(    __out_bcount(DataLen) PVOID pData,    __in  ULONG         DataLen,    __in  DEVINST       dnDevInst,    __in  RESOURCEID    ResourceID,    __in  ULONG         ulFlags    );																		
CM_Query_Arbitrator_Free_Data_Ex(    __out_bcount(DataLen) PVOID pData,    __in  ULONG         DataLen,    __in  DEVINST       dnDevInst,    __in  RESOURCEID    ResourceID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Query_Arbitrator_Free_Size(    __out PULONG        pulSize,    __in  DEVINST       dnDevInst,    __in  RESOURCEID    ResourceID,    __in  ULONG         ulFlags    );																		
CM_Query_Arbitrator_Free_Size_Ex(    __out PULONG        pulSize,    __in  DEVINST       dnDevInst,    __in  RESOURCEID    ResourceID,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Query_Remove_SubTree(    __in  DEVINST       dnAncestor,    __in  ULONG         ulFlags    );																		
CM_Query_Remove_SubTree_Ex(    __in  DEVINST       dnAncestor,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Query_Resource_Conflict_List(    __out PCONFLICT_LIST pclConflictList,    __in  DEVINST       dnDevInst,    __in  RESOURCEID    ResourceID,    __in_bcount(ResourceLen) PCVOID ResourceData,    __in  ULONG         ResourceLen,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Reenumerate_DevNode(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Reenumerate_DevNode_Ex(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Register_Device_Driver(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Register_Device_Driver_Ex(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Register_Device_Interface_ExA(    __in  DEVINST       dnDevInst,    __in  LPGUID        InterfaceClassGuid,    __in_opt LPCSTR     pszReference,    __out_ecount(*pulLength) LPSTR pszDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Register_Device_Interface_ExW(    __in  DEVINST       dnDevInst,    __in  LPGUID        InterfaceClassGuid,    __in_opt LPCWSTR    pszReference,    __out_ecount(*pulLength) LPWSTR pszDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Register_Device_InterfaceA(    __in  DEVINST       dnDevInst,    __in  LPGUID        InterfaceClassGuid,    __in_opt LPCSTR     pszReference,    __out_ecount(*pulLength) LPSTR pszDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Register_Device_InterfaceW(    __in  DEVINST       dnDevInst,    __in  LPGUID        InterfaceClassGuid,    __in_opt LPCWSTR    pszReference,    __out_ecount(*pulLength) LPWSTR pszDeviceInterface,    __inout PULONG      pulLength,    __in  ULONG         ulFlags    );																		
CM_Remove_SubTree(    __in  DEVINST       dnAncestor,    __in  ULONG         ulFlags    );																		
CM_Remove_SubTree_Ex(    __in  DEVINST       dnAncestor,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Request_Device_Eject_ExA(    __in  DEVINST       dnDevInst,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Request_Device_Eject_ExW(    __in  DEVINST       dnDevInst,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPWSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Request_Device_EjectA(    __in  DEVINST       dnDevInst,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags    );																		
CM_Request_Device_EjectW(    __in  DEVINST       dnDevInst,    __out_opt PPNP_VETO_TYPE pVetoType,    __out_ecount_opt(ulNameLength) LPWSTR pszVetoName,    __in  ULONG         ulNameLength,    __in  ULONG         ulFlags    );																		
CM_Request_Eject_PC(    VOID    );																		
CM_Request_Eject_PC_Ex(    __in_opt HMACHINE   hMachine    );																		
CM_Run_Detection(    __in  ULONG         ulFlags    );																		
CM_Run_Detection_Ex(    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_Class_Registry_PropertyA(    __in  LPGUID        ClassGuid,    __in  ULONG         ulProperty,    __in_bcount_opt(ulLength) PCVOID Buffer,    __in  ULONG         ulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_Class_Registry_PropertyW(    __in  LPGUID        ClassGuid,    __in  ULONG         ulProperty,    __in_bcount_opt(ulLength) PCVOID Buffer,    __in  ULONG         ulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_DevNode_Problem(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProblem,    __in  ULONG         ulFlags    );																		
CM_Set_DevNode_Problem_Ex(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProblem,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_DevNode_Registry_Property_ExA(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __in_bcount_opt(ulLength) PCVOID Buffer,    __in  ULONG         ulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_DevNode_Registry_Property_ExW(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __in_bcount_opt(ulLength) PCVOID Buffer,    __in  ULONG         ulLength,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_DevNode_Registry_PropertyA(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __in_bcount_opt(ulLength) PCVOID Buffer,    __in  ULONG         ulLength,    __in  ULONG         ulFlags    );																		
CM_Set_DevNode_Registry_PropertyW(    __in  DEVINST       dnDevInst,    __in  ULONG         ulProperty,    __in_bcount_opt(ulLength) PCVOID Buffer,    __in  ULONG         ulLength,    __in  ULONG         ulFlags    );																		
CM_Set_HW_Prof(    __in  ULONG         ulHardwareProfile,    __in  ULONG         ulFlags    );																		
CM_Set_HW_Prof_Ex(    __in  ULONG         ulHardwareProfile,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_HW_Prof_Flags_ExA(    __in  DEVINSTID_A   pDeviceID,    __in  ULONG         ulConfig,    __in  ULONG         ulValue,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_HW_Prof_Flags_ExW(    __in  DEVINSTID_W   pDeviceID,    __in  ULONG         ulConfig,    __in  ULONG         ulValue,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Set_HW_Prof_FlagsA(    __in  DEVINSTID_A   pDeviceID,    __in  ULONG         ulConfig,    __in  ULONG         ulValue,    __in  ULONG         ulFlags    );																		
CM_Set_HW_Prof_FlagsW(    __in  DEVINSTID_W   pDeviceID,    __in  ULONG         ulConfig,    __in  ULONG         ulValue,    __in  ULONG         ulFlags    );																		
CM_Setup_DevNode(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Setup_DevNode_Ex(    __in  DEVINST       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Test_Range_Available(    __in  DWORDLONG     ullStartValue,    __in  DWORDLONG     ullEndValue,    __in  RANGE_LIST    rlh,    __in  ULONG         ulFlags    );																		
CM_Uninstall_DevNode(    __in  DEVNODE       dnDevInst,    __in  ULONG         ulFlags    );																		
CM_Uninstall_DevNode_Ex(    __in  DEVNODE       dnDevInst,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Unregister_Device_Interface_ExA(    __in  LPCSTR        pszDeviceInterface,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Unregister_Device_Interface_ExW(    __in  LPCWSTR       pszDeviceInterface,    __in  ULONG         ulFlags,    __in_opt HMACHINE   hMachine    );																		
CM_Unregister_Device_InterfaceA(    __in  LPCSTR        pszDeviceInterface,    __in  ULONG         ulFlags    );																		
CM_Unregister_Device_InterfaceW(    __in  LPCWSTR       pszDeviceInterface,    __in  ULONG         ulFlags    );																		
CM_WaitNoPendingInstallEvents(    __in  DWORD dwTimeout    );																		
ColorCorrectPalette( __in HDC hdc, __in HPALETTE hPal, __in DWORD deFirst, __in DWORD num);																		
ColorMatchToTarget( __in HDC hdc, __in HDC hdcTarget, __in DWORD action);																		
CombineTransform( __out LPXFORM lpxfOut, __in CONST XFORM *lpxf1, __in CONST XFORM *lpxf2);																		
CommConfigDialogA(    __in     LPCSTR lpszName,    __in_opt HWND hWnd,    __inout  LPCOMMCONFIG lpCC    );																		
CommConfigDialogW(    __in     LPCWSTR lpszName,    __in_opt HWND hWnd,    __inout  LPCOMMCONFIG lpCC    );																		
CommitComplete (    IN  HANDLE            EnlistmentHandle,    IN  PLARGE_INTEGER    TmVirtualClock    );																		
CommitEnlistment (    IN HANDLE EnlistmentHandle,    IN PLARGE_INTEGER TmVirtualClock    );																		
CommitSpoolData(__in    HANDLE  hPrinter,__in    HANDLE  hSpoolFile,        DWORD   cbCommit);																		
CommitTransaction (    IN HANDLE TransactionHandle    );																		
CommitTransactionAsync (    IN HANDLE TransactionHandle    );																		
CommitUrlCacheEntryA(    __in LPCSTR lpszUrlName,    __in_opt LPCSTR lpszLocalFileName,    __in FILETIME ExpireTime,    __in FILETIME LastModifiedTime,    __in DWORD CacheEntryType,    __in_ecount_opt(dwHeaderSize) LPBYTE lpHeaderInfo,    __in_opt DWORD dwHeaderSize,    __reserved LPCSTR lpszFileExtension,    __in_opt LPCSTR lpszOriginalUrl    );																		
CommitUrlCacheEntryA(    __in LPCSTR lpszUrlName,    __in_opt LPCSTR lpszLocalFileName,    __in FILETIME ExpireTime,    __in FILETIME LastModifiedTime,    __in DWORD CacheEntryType,    __in_ecount_opt(dwHeaderSize) LPCSTR lpHeaderInfo,    __in DWORD dwHeaderSize,    __reserved LPCSTR lpszFileExtension,    __in_opt LPCSTR lpszOriginalUrl    );																		
CommitUrlCacheEntryW(    __in LPCWSTR lpszUrlName,    __in_opt LPCWSTR lpszLocalFileName,    __in FILETIME ExpireTime,    __in FILETIME LastModifiedTime,    __in DWORD CacheEntryType,    __in_ecount_opt(dwHeaders) LPWSTR lpszHeaderInfo,    __in DWORD dwHeaders,    __reserved LPCWSTR lpszFileExtension,    __in_opt LPCWSTR lpszOriginalUrl    );																		
CommitUrlCacheEntryW(    __in LPCWSTR lpszUrlName,    __in_opt LPCWSTR lpszLocalFileName,    __in FILETIME ExpireTime,    __in FILETIME LastModifiedTime,    __in DWORD CacheEntryType,    __in_ecount_opt(dwHeaderSize) LPCWSTR lpHeaderInfo,    __in DWORD dwHeaderSize,    __reserved LPCWSTR lpszFileExtension,    __in_opt LPCWSTR lpszOriginalUrl    );																		
CompactVirtualDisk(    __in     HANDLE                           VirtualDiskHandle,    __in     COMPACT_VIRTUAL_DISK_FLAG        Flags,    __in_opt PCOMPACT_VIRTUAL_DISK_PARAMETERS Parameters,    __in_opt LPOVERLAPPED                     Overlapped    );																		
CompareFileTime(    __in CONST FILETIME *lpFileTime1,    __in CONST FILETIME *lpFileTime2    );																		
CompareStringA(    __in LCID     Locale,    __in DWORD    dwCmpFlags,    __in_ecount(cchCount1) PCNZCH lpString1,    __in int      cchCount1,    __in_ecount(cchCount2) PCNZCH  lpString2,    __in int      cchCount2);																		
CompareStringEx(    __in_opt LPCWSTR lpLocaleName,    __in DWORD dwCmpFlags,    __in_ecount(cchCount1) LPCWSTR lpString1,    __in int cchCount1,    __in_ecount(cchCount2) LPCWSTR lpString2,    __in int cchCount2,    __in_opt LPNLSVERSIONINFO lpVersionInformation,    __in_opt LPVOID lpReserved,    __in_opt LPARAM lParam);																		
CompareStringOrdinal(    __in LPCWSTR lpString1,    __in int     cchCount1,    __in LPCWSTR lpString2,    __in int     cchCount2,    __in BOOL    bIgnoreCase);																		
CompareStringW(    __in LCID     Locale,    __in DWORD    dwCmpFlags,    __in_ecount(cchCount1) PCNZWCH lpString1,    __in int      cchCount1,    __in_ecount(cchCount2) PCNZWCH  lpString2,    __in int      cchCount2);																		
ConfigurePortA(__in_opt    LPSTR   pName,__in        HWND      hWnd,__in        LPSTR   pPortName);																		
ConfigurePortW(__in_opt    LPWSTR   pName,__in        HWND      hWnd,__in        LPWSTR   pPortName);																		
ConnectNamedPipe(    __in        HANDLE hNamedPipe,    __inout_opt LPOVERLAPPED lpOverlapped    );																		
ConnectToPrinterDlg(__in    HWND    hwnd,       DWORD    Flags);																		
ContinueDebugEvent(    __in DWORD dwProcessId,    __in DWORD dwThreadId,    __in DWORD dwContinueStatus    );																		
ControlService(    __in        SC_HANDLE           hService,    __in        DWORD               dwControl,    __out       LPSERVICE_STATUS    lpServiceStatus    );																		
ControlServiceExA(    __in        SC_HANDLE               hService,    __in        DWORD                   dwControl,    __in        DWORD                   dwInfoLevel,    __inout     PVOID                   pControlParams    );																		
ControlServiceExW(    __in        SC_HANDLE               hService,    __in        DWORD                   dwControl,    __in        DWORD                   dwInfoLevel,    __inout     PVOID                   pControlParams    );																		
ConvertDefaultLocale(    __in LCID   Locale);																		
ConvertFiberToThread(    VOID    );																		
ConvertSecurityDescriptorToStringSecurityDescriptorA(    __in  PSECURITY_DESCRIPTOR  SecurityDescriptor,    __in  DWORD RequestedStringSDRevision,    __in  SECURITY_INFORMATION SecurityInformation,    __deref_out LPSTR  *StringSecurityDescriptor,    __out_opt PULONG StringSecurityDescriptorLen    );																		
ConvertSecurityDescriptorToStringSecurityDescriptorW(    __in  PSECURITY_DESCRIPTOR  SecurityDescriptor,    __in  DWORD RequestedStringSDRevision,    __in  SECURITY_INFORMATION SecurityInformation,    __deref_out LPWSTR  *StringSecurityDescriptor,    __out_opt PULONG StringSecurityDescriptorLen    );																		
ConvertSidToStringSidA(    __in  PSID     Sid,    __deref_out LPSTR  *StringSid    );																		
ConvertSidToStringSidW(    __in  PSID     Sid,    __deref_out LPWSTR  *StringSid    );																		
ConvertStringSecurityDescriptorToSecurityDescriptorA(    __in  LPCSTR StringSecurityDescriptor,    __in  DWORD StringSDRevision,    __deref_out PSECURITY_DESCRIPTOR  *SecurityDescriptor,    __out_opt PULONG  SecurityDescriptorSize    );																		
ConvertStringSecurityDescriptorToSecurityDescriptorW(    __in  LPCWSTR StringSecurityDescriptor,    __in  DWORD StringSDRevision,    __deref_out PSECURITY_DESCRIPTOR  *SecurityDescriptor,    __out_opt PULONG  SecurityDescriptorSize    );																		
ConvertStringSidToSidA(    __in LPCSTR   StringSid,    __deref_out PSID   *Sid    );																		
ConvertStringSidToSidW(    __in LPCWSTR   StringSid,    __deref_out PSID   *Sid    );																		
ConvertThreadToFiber(    __in_opt LPVOID lpParameter    );																		
ConvertThreadToFiberEx(    __in_opt LPVOID lpParameter,    __in     DWORD dwFlags    );																		
ConvertToAutoInheritPrivateObjectSecurity(    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,    __in        PSECURITY_DESCRIPTOR CurrentSecurityDescriptor,    __deref_out PSECURITY_DESCRIPTOR *NewSecurityDescriptor,    __in_opt    GUID *ObjectType,    __in        BOOLEAN IsDirectoryObject,    __in        PGENERIC_MAPPING GenericMapping    );																		
CopyAcceleratorTableA(    __in HACCEL hAccelSrc,    __out_ecount_part_opt(cAccelEntries, return) LPACCEL lpAccelDst,    __in int cAccelEntries);																		
CopyAcceleratorTableW(    __in HACCEL hAccelSrc,    __out_ecount_part_opt(cAccelEntries, return) LPACCEL lpAccelDst,    __in int cAccelEntries);																		
CopyCursor(__in HCURSOR hCursor);																		
CopyEnhMetaFileA( __in HENHMETAFILE hEnh, __in_opt LPCSTR lpFileName);																		
CopyEnhMetaFileW( __in HENHMETAFILE hEnh, __in_opt LPCWSTR lpFileName);																		
CopyExtendedContext(    __out PCONTEXT_EX Destination,    __in DWORD ContextFlags,    __in PCONTEXT_EX Source    );																		
CopyFileA(    __in LPCSTR lpExistingFileName,    __in LPCSTR lpNewFileName,    __in BOOL bFailIfExists    );																		
CopyFileExA(    __in     LPCSTR lpExistingFileName,    __in     LPCSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in_opt LPBOOL pbCancel,    __in     DWORD dwCopyFlags    );																		
CopyFileExW(    __in     LPCWSTR lpExistingFileName,    __in     LPCWSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in_opt LPBOOL pbCancel,    __in     DWORD dwCopyFlags    );																		
CopyFileTransactedA(    __in     LPCSTR lpExistingFileName,    __in     LPCSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in_opt LPBOOL pbCancel,    __in     DWORD dwCopyFlags,    __in     HANDLE hTransaction    );																		
CopyFileTransactedW(    __in     LPCWSTR lpExistingFileName,    __in     LPCWSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in_opt LPBOOL pbCancel,    __in     DWORD dwCopyFlags,    __in     HANDLE hTransaction    );																		
CopyFileW(    __in LPCWSTR lpExistingFileName,    __in LPCWSTR lpNewFileName,    __in BOOL bFailIfExists    );																		
CopyIcon(    __in HICON hIcon);																		
CopyImage(    __in HANDLE h,    __in UINT type,    __in int cx,    __in int cy,    __in UINT flags);																		
CopyLZFile(    __in INT hfSource,    __in INT hfDest    );																		
CopyRect(__out LPRECT lprcDst,__in CONST RECT *lprcSrc);																		
CopySid (    __in DWORD nDestinationSidLength,    __out_bcount(nDestinationSidLength) PSID pDestinationSid,    __in PSID pSourceSid    );																		
CountClipboardFormats(    VOID);																		
CreateAcceleratorTableA(    __in_ecount(cAccel) LPACCEL paccel,    __in int cAccel);																		
CreateAcceleratorTableW(    __in_ecount(cAccel) LPACCEL paccel,    __in int cAccel);																		
CreateActCtxA(    __in PCACTCTXA pActCtx    );																		
CreateActCtxW(    __in PCACTCTXW pActCtx    );																		
CreateBoundaryDescriptorA(    __in LPCSTR Name,    __in ULONG Flags    );																		
CreateBoundaryDescriptorW(    __in LPCWSTR Name,    __in ULONG Flags    );																		
CreateCaret(__in HWND hWnd,__in_opt HBITMAP hBitmap,__in int nWidth,__in int nHeight);																		
CreateCluster(    __in PCREATE_CLUSTER_CONFIG pConfig,    __in_opt PCLUSTER_SETUP_PROGRESS_CALLBACK   pfnProgressCallback,    __in_opt PVOID              pvCallbackArg    );																		
CreateClusterGroup(    __in HCLUSTER hCluster,    __in LPCWSTR lpszGroupName    );																		
CreateClusterNotifyPort(    __in HCHANGE hChange,    __in HCLUSTER hCluster,    __in DWORD dwFilter,    __in DWORD_PTR dwNotifyKey    );																		
CreateClusterResource(    __in HGROUP hGroup,    __in LPCWSTR lpszResourceName,    __in LPCWSTR lpszResourceType,    __in DWORD dwFlags    );																		
CreateClusterResourceType(    __in HCLUSTER hCluster,    __in LPCWSTR lpszResourceTypeName,    __in LPCWSTR lpszDisplayName,    __in LPCWSTR lpszResourceTypeDll,    __in DWORD dwLooksAlivePollInterval,    __in DWORD dwIsAlivePollInterval    );																		
CreateColorSpaceA( __in LPLOGCOLORSPACEA lplcs);																		
CreateColorSpaceW( __in LPLOGCOLORSPACEW lplcs);																		
CreateCompression(    OUT PVOID *context,    IN  ULONG reserved);																		
CreateConsoleScreenBuffer(    __in DWORD dwDesiredAccess,    __in DWORD dwShareMode,    __in_opt CONST SECURITY_ATTRIBUTES *lpSecurityAttributes,    __in DWORD dwFlags,    __reserved LPVOID lpScreenBufferData    );																		
CreateCursor(__in_opt HINSTANCE hInst,__in int xHotSpot,__in int yHotSpot,__in int nWidth,__in int nHeight,__in CONST VOID *pvANDPlane,__in CONST VOID *pvXORPlane);																		
CreateDeltaA(    __in DELTA_FILE_TYPE FileTypeSet,    __in DELTA_FLAG_TYPE SetFlags,    __in DELTA_FLAG_TYPE ResetFlags,    __in LPCSTR lpSourceName,    __in LPCSTR lpTargetName,    __in_opt LPCSTR lpSourceOptionsName,    __in_opt LPCSTR lpTargetOptionsName,    __in DELTA_INPUT GlobalOptions,    __in_opt const FILETIME *lpTargetFileTime,    __in ALG_ID HashAlgId,    __in LPCSTR lpDeltaName    );																		
CreateDeltaB(    __in DELTA_FILE_TYPE FileTypeSet,    __in DELTA_FLAG_TYPE SetFlags,    __in DELTA_FLAG_TYPE ResetFlags,    __in DELTA_INPUT Source,    __in DELTA_INPUT Target,    __in DELTA_INPUT SourceOptions,    __in DELTA_INPUT TargetOptions,    __in DELTA_INPUT GlobalOptions,    __in_opt const FILETIME *lpTargetFileTime,    __in ALG_ID HashAlgId,    __out LPDELTA_OUTPUT lpDelta    );																		
CreateDeltaW(    __in DELTA_FILE_TYPE FileTypeSet,    __in DELTA_FLAG_TYPE SetFlags,    __in DELTA_FLAG_TYPE ResetFlags,    __in LPCWSTR lpSourceName,    __in LPCWSTR lpTargetName,    __in_opt LPCWSTR lpSourceOptionsName,    __in_opt LPCWSTR lpTargetOptionsName,    __in DELTA_INPUT GlobalOptions,    __in_opt const FILETIME *lpTargetFileTime,    __in ALG_ID HashAlgId,    __in LPCWSTR lpDeltaName    );																		
CreateDesktopA(    __in LPCSTR lpszDesktop,    __reserved LPCSTR lpszDevice,    __reserved DEVMODEA* pDevmode,    __in DWORD dwFlags,    __in ACCESS_MASK dwDesiredAccess,    __in_opt LPSECURITY_ATTRIBUTES lpsa);																		
CreateDesktopExA(    __in LPCSTR lpszDesktop,    __reserved LPCSTR lpszDevice,    __reserved DEVMODEA* pDevmode,    __in DWORD dwFlags,    __in ACCESS_MASK dwDesiredAccess,    __in_opt LPSECURITY_ATTRIBUTES lpsa,    __in ULONG ulHeapSize,    __reserved PVOID pvoid);																		
CreateDesktopExW(    __in LPCWSTR lpszDesktop,    __reserved LPCWSTR lpszDevice,    __reserved DEVMODEW* pDevmode,    __in DWORD dwFlags,    __in ACCESS_MASK dwDesiredAccess,    __in_opt LPSECURITY_ATTRIBUTES lpsa,    __in ULONG ulHeapSize,    __reserved PVOID pvoid);																		
CreateDesktopW(    __in LPCWSTR lpszDesktop,    __reserved LPCWSTR lpszDevice,    __reserved DEVMODEW* pDevmode,    __in DWORD dwFlags,    __in ACCESS_MASK dwDesiredAccess,    __in_opt LPSECURITY_ATTRIBUTES lpsa);																		
CreateDialogIndirectParamA(    __in_opt HINSTANCE hInstance,    __in LPCDLGTEMPLATEA lpTemplate,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
CreateDialogIndirectParamW(    __in_opt HINSTANCE hInstance,    __in LPCDLGTEMPLATEW lpTemplate,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
CreateDialogParamA(    __in_opt HINSTANCE hInstance,    __in LPCSTR lpTemplateName,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
CreateDialogParamW(    __in_opt HINSTANCE hInstance,    __in LPCWSTR lpTemplateName,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
CreateDIBSection(__in_opt HDC hdc, __in CONST BITMAPINFO *lpbmi, __in UINT usage, __deref_opt_out VOID **ppvBits, __in_opt HANDLE hSection, __in DWORD offset);																		
CreateDirectoryA(    __in     LPCSTR lpPathName,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateDirectoryExA(    __in     LPCSTR lpTemplateDirectory,    __in     LPCSTR lpNewDirectory,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateDirectoryExW(    __in     LPCWSTR lpTemplateDirectory,    __in     LPCWSTR lpNewDirectory,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateDirectoryTransactedA(    __in_opt LPCSTR lpTemplateDirectory,    __in     LPCSTR lpNewDirectory,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in     HANDLE hTransaction    );																		
CreateDirectoryTransactedW(    __in_opt LPCWSTR lpTemplateDirectory,    __in     LPCWSTR lpNewDirectory,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in     HANDLE hTransaction    );																		
CreateDirectoryW(    __in     LPCWSTR lpPathName,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateEnhMetaFileA( __in_opt HDC hdc, __in_opt LPCSTR lpFilename, __in_opt CONST RECT *lprc, __in_opt LPCSTR lpDesc);																		
CreateEnhMetaFileW( __in_opt HDC hdc, __in_opt LPCWSTR lpFilename, __in_opt CONST RECT *lprc, __in_opt LPCWSTR lpDesc);																		
CreateEnlistment (    IN LPSECURITY_ATTRIBUTES lpEnlistmentAttributes OPTIONAL,    IN HANDLE            ResourceManagerHandle,    IN HANDLE            TransactionHandle,    IN NOTIFICATION_MASK NotificationMask,    IN DWORD             CreateOptions OPTIONAL,    IN PVOID             EnlistmentKey OPTIONAL    );																		
CreateEnvironmentBlock(    __out       LPVOID  *lpEnvironment,    __in_opt    HANDLE  hToken,    __in        BOOL    bInherit);																		
CreateEventA(    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,    __in     BOOL bManualReset,    __in     BOOL bInitialState,    __in_opt LPCSTR lpName    );																		
CreateEventExA(    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,    __in_opt LPCSTR lpName,    __in     DWORD dwFlags,    __in     DWORD dwDesiredAccess    );																		
CreateEventExW(    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,    __in_opt LPCWSTR lpName,    __in     DWORD dwFlags,    __in     DWORD dwDesiredAccess    );																		
CreateEventW(    __in_opt LPSECURITY_ATTRIBUTES lpEventAttributes,    __in     BOOL bManualReset,    __in     BOOL bInitialState,    __in_opt LPCWSTR lpName    );																		
CreateFont(_In_  int nHeight,_In_  int nWidth,_In_  int nEscapement,_In_  int nOrientation,_In_  int fnWeight,_In_  DWORD fdwItalic,_In_  DWORD fdwUnderline,_In_  DWORD fdwStrikeOut,_In_  DWORD fdwCharSet,_In_  DWORD fdwOutputPrecision,_In_  DWORD fdwClipPrecision,_In_  DWORD fdwQuality,_In_  DWORD fdwPitchAndFamily,_In_  LPCTSTR lpszFace);
CreateFiber(    __in     SIZE_T dwStackSize,    __in     LPFIBER_START_ROUTINE lpStartAddress,    __in_opt LPVOID lpParameter    );																		
CreateFiberEx(    __in     SIZE_T dwStackCommitSize,    __in     SIZE_T dwStackReserveSize,    __in     DWORD dwFlags,    __in     LPFIBER_START_ROUTINE lpStartAddress,    __in_opt LPVOID lpParameter    );																		
CreateFileA(    __in     LPCSTR lpFileName,    __in     DWORD dwDesiredAccess,    __in     DWORD dwShareMode,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in     DWORD dwCreationDisposition,    __in     DWORD dwFlagsAndAttributes,    __in_opt HANDLE hTemplateFile    );																		
CreateFileMappingA(    __in     HANDLE hFile,    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,    __in     DWORD flProtect,    __in     DWORD dwMaximumSizeHigh,    __in     DWORD dwMaximumSizeLow,    __in_opt LPCSTR lpName    );																		
CreateFileMappingNumaA(    __in     HANDLE hFile,    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,    __in     DWORD flProtect,    __in     DWORD dwMaximumSizeHigh,    __in     DWORD dwMaximumSizeLow,    __in_opt LPCSTR lpName,    __in     DWORD nndPreferred    );																		
CreateFileMappingNumaW(    __in     HANDLE hFile,    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,    __in     DWORD flProtect,    __in     DWORD dwMaximumSizeHigh,    __in     DWORD dwMaximumSizeLow,    __in_opt LPCWSTR lpName,    __in     DWORD nndPreferred    );																		
CreateFileMappingW(    __in     HANDLE hFile,    __in_opt LPSECURITY_ATTRIBUTES lpFileMappingAttributes,    __in     DWORD flProtect,    __in     DWORD dwMaximumSizeHigh,    __in     DWORD dwMaximumSizeLow,    __in_opt LPCWSTR lpName    );																		
CreateFileTransactedA(    __in       LPCSTR lpFileName,    __in       DWORD dwDesiredAccess,    __in       DWORD dwShareMode,    __in_opt   LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in       DWORD dwCreationDisposition,    __in       DWORD dwFlagsAndAttributes,    __in_opt   HANDLE hTemplateFile,    __in       HANDLE hTransaction,    __in_opt   PUSHORT pusMiniVersion,    __reserved PVOID  lpExtendedParameter    );																		
CreateFileTransactedW(    __in       LPCWSTR lpFileName,    __in       DWORD dwDesiredAccess,    __in       DWORD dwShareMode,    __in_opt   LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in       DWORD dwCreationDisposition,    __in       DWORD dwFlagsAndAttributes,    __in_opt   HANDLE hTemplateFile,    __in       HANDLE hTransaction,    __in_opt   PUSHORT pusMiniVersion,    __reserved PVOID  lpExtendedParameter    );																		
CreateFileW(    __in     LPCWSTR lpFileName,    __in     DWORD dwDesiredAccess,    __in     DWORD dwShareMode,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in     DWORD dwCreationDisposition,    __in     DWORD dwFlagsAndAttributes,    __in_opt HANDLE hTemplateFile    );																		
CreateGPOLink(    __in LPOLESTR lpGPO,    __in LPOLESTR lpContainer,         BOOL fHighPriority);																		
CreateHalftonePalette( __in_opt HDC hdc);																		
CreateHardLinkA(    __in       LPCSTR lpFileName,    __in       LPCSTR lpExistingFileName,    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateHardLinkTransactedA(    __in       LPCSTR lpFileName,    __in       LPCSTR lpExistingFileName,    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in       HANDLE hTransaction    );																		
CreateHardLinkTransactedW(    __in       LPCWSTR lpFileName,    __in       LPCWSTR lpExistingFileName,    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in       HANDLE hTransaction    );																		
CreateHardLinkW(    __in       LPCWSTR lpFileName,    __in       LPCWSTR lpExistingFileName,    __reserved LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateIcon(__in_opt HINSTANCE hInstance,__in int nWidth,__in int nHeight,__in BYTE cPlanes,__in BYTE cBitsPixel,__in CONST BYTE *lpbANDbits,__in CONST BYTE *lpbXORbits);																		
CreateIconFromResource(__in PBYTE presbits,__in DWORD dwResSize,__in BOOL fIcon,__in DWORD dwVer);																		
CreateIconFromResourceEx(__in PBYTE presbits,__in DWORD dwResSize,__in BOOL fIcon,__in DWORD dwVer,__in int cxDesired,__in int cyDesired,__in UINT Flags);																		
CreateIconIndirect(    __in PICONINFO piconinfo);																		
CreateIoCompletionPort(    __in     HANDLE FileHandle,    __in_opt HANDLE ExistingCompletionPort,    __in     ULONG_PTR CompletionKey,    __in     DWORD NumberOfConcurrentThreads    );																		
CreateIpForwardEntry(    __in PMIB_IPFORWARDROW pRoute    );																		
CreateIpNetEntry(    __in PMIB_IPNETROW    pArpEntry    );																		
CreateJobObjectA(    __in_opt LPSECURITY_ATTRIBUTES lpJobAttributes,    __in_opt LPCSTR lpName    );																		
CreateJobObjectW(    __in_opt LPSECURITY_ATTRIBUTES lpJobAttributes,    __in_opt LPCWSTR lpName    );																		
CreateJobSet (    __in ULONG NumJob,    __in_ecount(NumJob) PJOB_SET_ARRAY UserJobSet,    __in ULONG Flags);																		
CreateMailslotA(    __in     LPCSTR lpName,    __in     DWORD nMaxMessageSize,    __in     DWORD lReadTimeout,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateMailslotW(    __in     LPCWSTR lpName,    __in     DWORD nMaxMessageSize,    __in     DWORD lReadTimeout,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateMappedBitmap(HINSTANCE hInstance, INT_PTR idBitmap,UINT wFlags, __in_opt LPCOLORMAP lpColorMap,int iNumMaps);																		
CreateMD5SSOHash (    __in PWSTR    pszChallengeInfo,    __in PWSTR    pwszRealm,    __in PWSTR    pwszTarget,    __out PBYTE   pbHexHash    );																		
CreateMDIWindowA(    __in LPCSTR lpClassName,    __in LPCSTR lpWindowName,    __in DWORD dwStyle,    __in int X,    __in int Y,    __in int nWidth,    __in int nHeight,    __in_opt HWND hWndParent,    __in_opt HINSTANCE hInstance,    __in LPARAM lParam);																		
CreateMDIWindowW(    __in LPCWSTR lpClassName,    __in LPCWSTR lpWindowName,    __in DWORD dwStyle,    __in int X,    __in int Y,    __in int nWidth,    __in int nHeight,    __in_opt HWND hWndParent,    __in_opt HINSTANCE hInstance,    __in LPARAM lParam);																		
CreateMemoryResourceNotification(    __in MEMORY_RESOURCE_NOTIFICATION_TYPE NotificationType    );																		
CreateMenu(    VOID);																		
CreateMutexA(    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,    __in     BOOL bInitialOwner,    __in_opt LPCSTR lpName    );																		
CreateMutexExA(    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,    __in_opt LPCSTR lpName,    __in     DWORD dwFlags,    __in     DWORD dwDesiredAccess    );																		
CreateMutexExW(    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,    __in_opt LPCWSTR lpName,    __in     DWORD dwFlags,    __in     DWORD dwDesiredAccess    );																		
CreateMutexW(    __in_opt LPSECURITY_ATTRIBUTES lpMutexAttributes,    __in     BOOL bInitialOwner,    __in_opt LPCWSTR lpName    );																		
CreateNamedPipeA(    __in     LPCSTR lpName,    __in     DWORD dwOpenMode,    __in     DWORD dwPipeMode,    __in     DWORD nMaxInstances,    __in     DWORD nOutBufferSize,    __in     DWORD nInBufferSize,    __in     DWORD nDefaultTimeOut,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreateNamedPipeW(    __in     LPCWSTR lpName,    __in     DWORD dwOpenMode,    __in     DWORD dwPipeMode,    __in     DWORD nMaxInstances,    __in     DWORD nOutBufferSize,    __in     DWORD nInBufferSize,    __in     DWORD nDefaultTimeOut,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
CreatePersistentTcpPortReservation(    __in  USHORT StartPort,    __in  USHORT NumberOfPorts,    __out PULONG64 Token    );																		
CreatePersistentUdpPortReservation(    __in  USHORT StartPort,    __in  USHORT NumberOfPorts,    __out PULONG64 Token    );																		
CreatePipe(    __out_ecount_full(1) PHANDLE hReadPipe,    __out_ecount_full(1) PHANDLE hWritePipe,    __in_opt LPSECURITY_ATTRIBUTES lpPipeAttributes,    __in     DWORD nSize    );																		
CreatePolygonRgn(__in_ecount(cPoint) CONST POINT *pptl,__in int cPoint,__in int iMode);																		
CreatePopupMenu(    VOID);																		
CreatePrintAsyncNotifyChannel(    __in_opt PCWSTR                            pszName,    __in     PrintAsyncNotificationType*       pNotificationType,             PrintAsyncNotifyUserFilter        eUserFilter,             PrintAsyncNotifyConversationStyle eConversationStyle,    __in_opt IPrintAsyncNotifyCallback*        pCallback,    __out    IPrintAsyncNotifyChannel**        ppIAsynchNotification    );																		
CreatePrivateNamespaceA(    __in_opt LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,    __in     LPVOID lpBoundaryDescriptor,    __in     LPCSTR lpAliasPrefix    );																		
CreatePrivateNamespaceW(    __in_opt LPSECURITY_ATTRIBUTES lpPrivateNamespaceAttributes,    __in     LPVOID lpBoundaryDescriptor,    __in     LPCWSTR lpAliasPrefix    );																		
CreatePrivateObjectSecurity (    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,    __in_opt    PSECURITY_DESCRIPTOR CreatorDescriptor,    __deref_out PSECURITY_DESCRIPTOR * NewDescriptor,    __in        BOOL IsDirectoryObject,    __in_opt    HANDLE Token,    __in        PGENERIC_MAPPING GenericMapping    );																		
CreatePrivateObjectSecurityEx (    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,    __in_opt    PSECURITY_DESCRIPTOR CreatorDescriptor,    __deref_out PSECURITY_DESCRIPTOR * NewDescriptor,    __in_opt    GUID *ObjectType,    __in        BOOL IsContainerObject,    __in        ULONG AutoInheritFlags,    __in_opt    HANDLE Token,    __in        PGENERIC_MAPPING GenericMapping    );																		
CreatePrivateObjectSecurityWithMultipleInheritance (    __in_opt    PSECURITY_DESCRIPTOR ParentDescriptor,    __in_opt    PSECURITY_DESCRIPTOR CreatorDescriptor,    __deref_out PSECURITY_DESCRIPTOR * NewDescriptor,    __in_ecount_opt(GuidCount) GUID **ObjectTypes,    __in        ULONG GuidCount,    __in        BOOL IsContainerObject,    __in        ULONG AutoInheritFlags,    __in_opt    HANDLE Token,    __in        PGENERIC_MAPPING GenericMapping    );																		
CreateProcessA(    __in_opt    LPCSTR lpApplicationName,    __inout_opt LPSTR lpCommandLine,    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,    __in        BOOL bInheritHandles,    __in        DWORD dwCreationFlags,    __in_opt    LPVOID lpEnvironment,    __in_opt    LPCSTR lpCurrentDirectory,    __in        LPSTARTUPINFOA lpStartupInfo,    __out       LPPROCESS_INFORMATION lpProcessInformation    );																		
CreateProcessAsUserA (    __in_opt    HANDLE hToken,    __in_opt    LPCSTR lpApplicationName,    __inout_opt LPSTR lpCommandLine,    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,    __in        BOOL bInheritHandles,    __in        DWORD dwCreationFlags,    __in_opt    LPVOID lpEnvironment,    __in_opt    LPCSTR lpCurrentDirectory,    __in        LPSTARTUPINFOA lpStartupInfo,    __out       LPPROCESS_INFORMATION lpProcessInformation    );																		
CreateProcessAsUserW (    __in_opt    HANDLE hToken,    __in_opt    LPCWSTR lpApplicationName,    __inout_opt LPWSTR lpCommandLine,    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,    __in        BOOL bInheritHandles,    __in        DWORD dwCreationFlags,    __in_opt    LPVOID lpEnvironment,    __in_opt    LPCWSTR lpCurrentDirectory,    __in        LPSTARTUPINFOW lpStartupInfo,    __out       LPPROCESS_INFORMATION lpProcessInformation    );																		
CreateProcessW(    __in_opt    LPCWSTR lpApplicationName,    __inout_opt LPWSTR lpCommandLine,    __in_opt    LPSECURITY_ATTRIBUTES lpProcessAttributes,    __in_opt    LPSECURITY_ATTRIBUTES lpThreadAttributes,    __in        BOOL bInheritHandles,    __in        DWORD dwCreationFlags,    __in_opt    LPVOID lpEnvironment,    __in_opt    LPCWSTR lpCurrentDirectory,    __in        LPSTARTUPINFOW lpStartupInfo,    __out       LPPROCESS_INFORMATION lpProcessInformation    );																		
CreateProcessWithLogonW(    __in        LPCWSTR lpUsername,    __in_opt    LPCWSTR lpDomain,    __in        LPCWSTR lpPassword,    __in        DWORD dwLogonFlags,    __in_opt    LPCWSTR lpApplicationName,    __inout_opt LPWSTR lpCommandLine,    __in        DWORD dwCreationFlags,    __in_opt    LPVOID lpEnvironment,    __in_opt    LPCWSTR lpCurrentDirectory,    __in        LPSTARTUPINFOW lpStartupInfo,    __out       LPPROCESS_INFORMATION lpProcessInformation      );																		
CreateProcessWithTokenW(    __in        HANDLE hToken,    __in        DWORD dwLogonFlags,    __in_opt    LPCWSTR lpApplicationName,    __inout_opt LPWSTR lpCommandLine,    __in        DWORD dwCreationFlags,    __in_opt    LPVOID lpEnvironment,    __in_opt    LPCWSTR lpCurrentDirectory,    __in        LPSTARTUPINFOW lpStartupInfo,    __out       LPPROCESS_INFORMATION lpProcessInformation      );																		
CreateProfile(    __in                            LPCWSTR pszUserSid,    __in                            LPCWSTR pszUserName,    __out_ecount(cchProfilePath)    LPWSTR  pszProfilePath,    __in                            DWORD   cchProfilePath);																		
CreateProxyArpEntry(    __in  DWORD   dwAddress,    __in  DWORD   dwMask,    __in  DWORD   dwIfIndex    );																		
CreateRemoteThread(    __in      HANDLE hProcess,    __in_opt  LPSECURITY_ATTRIBUTES lpThreadAttributes,    __in      SIZE_T dwStackSize,    __in      LPTHREAD_START_ROUTINE lpStartAddress,    __in_opt  LPVOID lpParameter,    __in      DWORD dwCreationFlags,    __out_opt LPDWORD lpThreadId    );																		
CreateRemoteThreadEx(    __in      HANDLE hProcess,    __in_opt  LPSECURITY_ATTRIBUTES lpThreadAttributes,    __in      SIZE_T dwStackSize,    __in      LPTHREAD_START_ROUTINE lpStartAddress,    __in_opt  LPVOID lpParameter,    __in      DWORD dwCreationFlags,    __in_opt  LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,    __out_opt LPDWORD lpThreadId    );																		
CreateResourceManager (    IN LPSECURITY_ATTRIBUTES lpResourceManagerAttributes OPTIONAL,    IN LPGUID ResourceManagerId,    IN DWORD CreateOptions OPTIONAL,    IN HANDLE TmHandle,    __in_opt LPWSTR Description    );																		
CreateRestrictedToken(    __in        HANDLE ExistingTokenHandle,    __in        DWORD Flags,    __in        DWORD DisableSidCount,    __in_ecount_opt(DisableSidCount) PSID_AND_ATTRIBUTES SidsToDisable,    __in        DWORD DeletePrivilegeCount,    __in_ecount_opt(DeletePrivilegeCount) PLUID_AND_ATTRIBUTES PrivilegesToDelete,    __in        DWORD RestrictedSidCount,    __in_ecount_opt(RestrictedSidCount) PSID_AND_ATTRIBUTES SidsToRestrict,    __deref_out PHANDLE NewTokenHandle    );																		
CreateSemaphoreA(    __in_opt LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,    __in     LONG lInitialCount,    __in     LONG lMaximumCount,    __in_opt LPCSTR lpName    );																		
CreateSemaphoreExA(    __in_opt    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,    __in        LONG lInitialCount,    __in        LONG lMaximumCount,    __in_opt    LPCSTR lpName,    __reserved  DWORD dwFlags,    __in        DWORD dwDesiredAccess    );																		
CreateSemaphoreExW(    __in_opt    LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,    __in        LONG lInitialCount,    __in        LONG lMaximumCount,    __in_opt    LPCWSTR lpName,    __reserved  DWORD dwFlags,    __in        DWORD dwDesiredAccess    );																		
CreateSemaphoreW(    __in_opt LPSECURITY_ATTRIBUTES lpSemaphoreAttributes,    __in     LONG lInitialCount,    __in     LONG lMaximumCount,    __in_opt LPCWSTR lpName    );																		
CreateServiceA(    __in        SC_HANDLE    hSCManager,    __in        LPCSTR     lpServiceName,    __in_opt    LPCSTR     lpDisplayName,    __in        DWORD        dwDesiredAccess,    __in        DWORD        dwServiceType,    __in        DWORD        dwStartType,    __in        DWORD        dwErrorControl,    __in_opt    LPCSTR     lpBinaryPathName,    __in_opt    LPCSTR     lpLoadOrderGroup,    __out_opt   LPDWORD      lpdwTagId,    __in_opt    LPCSTR     lpDependencies,    __in_opt    LPCSTR     lpServiceStartName,    __in_opt    LPCSTR     lpPassword    );																		
CreateServiceW(    __in        SC_HANDLE    hSCManager,    __in        LPCWSTR     lpServiceName,    __in_opt    LPCWSTR     lpDisplayName,    __in        DWORD        dwDesiredAccess,    __in        DWORD        dwServiceType,    __in        DWORD        dwStartType,    __in        DWORD        dwErrorControl,    __in_opt    LPCWSTR     lpBinaryPathName,    __in_opt    LPCWSTR     lpLoadOrderGroup,    __out_opt   LPDWORD      lpdwTagId,    __in_opt    LPCWSTR     lpDependencies,    __in_opt    LPCWSTR     lpServiceStartName,    __in_opt    LPCWSTR     lpPassword    );																		
CreateSymbolicLinkA (    __in LPCSTR lpSymlinkFileName,    __in LPCSTR lpTargetFileName,    __in DWORD dwFlags    );																		
CreateSymbolicLinkTransactedA (    __in     LPCSTR lpSymlinkFileName,    __in     LPCSTR lpTargetFileName,    __in     DWORD dwFlags,    __in     HANDLE hTransaction    );																		
CreateSymbolicLinkTransactedW (    __in     LPCWSTR lpSymlinkFileName,    __in     LPCWSTR lpTargetFileName,    __in     DWORD dwFlags,    __in     HANDLE hTransaction    );																		
CreateSymbolicLinkW(    __in LPCWSTR lpSymlinkFileName,    __in LPCWSTR lpTargetFileName,    __in DWORD dwFlags    );																		
CreateTapePartition(    __in HANDLE hDevice,    __in DWORD dwPartitionMethod,    __in DWORD dwCount,    __in DWORD dwSize    );																		
CreateThread(    __in_opt  LPSECURITY_ATTRIBUTES lpThreadAttributes,    __in      SIZE_T dwStackSize,    __in      LPTHREAD_START_ROUTINE lpStartAddress,    __in_opt __deref __drv_aliasesMem LPVOID lpParameter,    __in      DWORD dwCreationFlags,    __out_opt LPDWORD lpThreadId    );																		
CreateThreadpool(    __reserved PVOID reserved    );																		
CreateThreadpoolCleanupGroup(    VOID    );																		
CreateThreadpoolIo(    __in        HANDLE                fl,    __in        PTP_WIN32_IO_CALLBACK pfnio,    __inout_opt PVOID                 pv,    __in_opt    PTP_CALLBACK_ENVIRON  pcbe    );																		
CreateThreadpoolTimer(    __in        PTP_TIMER_CALLBACK   pfnti,    __inout_opt PVOID                pv,    __in_opt    PTP_CALLBACK_ENVIRON pcbe    );																		
CreateThreadpoolWait(    __in        PTP_WAIT_CALLBACK    pfnwa,    __inout_opt PVOID                pv,    __in_opt    PTP_CALLBACK_ENVIRON pcbe    );																		
CreateThreadpoolWork(    __in        PTP_WORK_CALLBACK    pfnwk,    __inout_opt PVOID                pv,    __in_opt    PTP_CALLBACK_ENVIRON pcbe    );																		
CreateTimerQueue(    VOID    );																		
CreateTimerQueueTimer(    __deref_out PHANDLE phNewTimer,    __in_opt    HANDLE TimerQueue,    __in        WAITORTIMERCALLBACK Callback,    __in_opt    PVOID Parameter,    __in        DWORD DueTime,    __in        DWORD Period,    __in        ULONG Flags    ) ;WINBASEAPI__checkReturnBOOLWINAPIChangeTimerQueueTimer(    __in_opt HANDLE TimerQueue,    __inout  HANDLE Timer,    __in     ULONG DueTime,    __in     ULONG Period    );																		
CreateToolbarEx(HWND hwnd, DWORD ws, UINT wID, int nBitmaps, HINSTANCE hBMInst, UINT_PTR wBMID, LPCTBBUTTON lpButtons, int iNumButtons, int dxButton, int dyButton,int dxBitmap, int dyBitmap, UINT uStructSize);																		
CreateToolhelp32Snapshot(    DWORD dwFlags,    DWORD th32ProcessID    );																		
CreateTransaction(    IN LPSECURITY_ATTRIBUTES lpTransactionAttributes OPTIONAL,    IN LPGUID UOW OPTIONAL,    IN DWORD CreateOptions OPTIONAL,    IN DWORD IsolationLevel OPTIONAL,    IN DWORD IsolationFlags OPTIONAL,    IN DWORD Timeout OPTIONAL,    __in_opt LPWSTR Description    );																		
CreateTransactionManager(    IN LPSECURITY_ATTRIBUTES lpTransactionAttributes OPTIONAL,    __in LPWSTR LogFileName,    IN ULONG CreateOptions OPTIONAL,    IN ULONG CommitStrength OPTIONAL    );																		
CreateUmsCompletionList(    __deref_out PUMS_COMPLETION_LIST* UmsCompletionList    );																		
CreateUmsThreadContext(    __deref_out PUMS_CONTEXT *lpUmsThread    );																		
CreateUpDownControl(DWORD dwStyle, int x, int y, int cx, int cy, HWND hParent, int nID, HINSTANCE hInst, HWND hBuddy,int nUpper, int nLower, int nPos);																		
CreateUrlCacheEntryA(    __in       LPCSTR lpszUrlName,    __in       DWORD dwExpectedFileSize,    __in_opt LPCSTR lpszFileExtension,    __inout_ecount(MAX_PATH) LPSTR lpszFileName,    __in       DWORD dwReserved    );																		
CreateUrlCacheEntryW(    __in       LPCWSTR lpszUrlName,    __in       DWORD dwExpectedFileSize,    __in_opt LPCWSTR lpszFileExtension,    __inout_ecount(MAX_PATH) LPWSTR lpszFileName,    __in       DWORD dwReserved    );																		
CreateUrlCacheGroup(    __in   DWORD  dwFlags,    __reserved LPVOID lpReserved    );																		
CreateVirtualDisk(    __in      PVIRTUAL_STORAGE_TYPE           VirtualStorageType,    __in      PCWSTR                          Path,    __in      VIRTUAL_DISK_ACCESS_MASK        VirtualDiskAccessMask,    __in_opt  PSECURITY_DESCRIPTOR            SecurityDescriptor,    __in      CREATE_VIRTUAL_DISK_FLAG        Flags,    __in      ULONG                           ProviderSpecificFlags,    __in      PCREATE_VIRTUAL_DISK_PARAMETERS Parameters,    __in_opt  LPOVERLAPPED                    Overlapped,    __out     PHANDLE                         Handle    );																		
CreateWaitableTimerA(    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,    __in     BOOL bManualReset,    __in_opt LPCSTR lpTimerName    );																		
CreateWaitableTimerExA(    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,    __in_opt LPCSTR lpTimerName,    __in     DWORD dwFlags,    __in     DWORD dwDesiredAccess    );																		
CreateWaitableTimerExW(    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,    __in_opt LPCWSTR lpTimerName,    __in     DWORD dwFlags,    __in     DWORD dwDesiredAccess    );																		
CreateWaitableTimerW(    __in_opt LPSECURITY_ATTRIBUTES lpTimerAttributes,    __in     BOOL bManualReset,    __in_opt LPCWSTR lpTimerName    );																		
CreateWellKnownSid(    __in     WELL_KNOWN_SID_TYPE WellKnownSidType,    __in_opt PSID DomainSid,    __out_bcount_part_opt(*cbSid, *cbSid) PSID pSid,    __inout  DWORD *cbSid    );																		
CreateWindow(__in_opt LPCSTR lpClassName,__in_opt LPCSTR lpWindowName,__in DWORD dwStyle,__in int X,__in int Y,__in int nWidth,__in int nHeight,__in_opt HWND hWndParent,__in_opt HMENU hMenu,__in_opt HINSTANCE hInstance,__in_opt LPVOID lpParam);																		
CreateWindowA(__in_opt LPCSTR lpClassName,__in_opt LPCSTR lpWindowName,__in DWORD dwStyle,__in int X,__in int Y,__in int nWidth,__in int nHeight,__in_opt HWND hWndParent,__in_opt HMENU hMenu,__in_opt HINSTANCE hInstance,__in_opt LPVOID lpParam);																		
CreateWindowW( __in_opt LPCSTR lpClassName,__in_opt LPCSTR lpWindowName,__in DWORD dwStyle,__in int X,__in int Y,__in int nWidth,__in int nHeight,__in_opt HWND hWndParent,__in_opt HMENU hMenu,__in_opt HINSTANCE hInstance,__in_opt LPVOID lpParam);																		
CreateWindowEx(__in DWORD dwExStyle,__in_opt LPCSTR lpClassName,__in_opt LPCSTR lpWindowName,__in DWORD dwStyle,__in int X,__in int Y,__in int nWidth,__in int nHeight,__in_opt HWND hWndParent,__in_opt HMENU hMenu,__in_opt HINSTANCE hInstance,__in_opt LPVOID lpParam);																		
CreateWindowExA(__in DWORD dwExStyle,__in_opt LPCSTR lpClassName,__in_opt LPCSTR lpWindowName,__in DWORD dwStyle,__in int X,__in int Y,__in int nWidth,__in int nHeight,__in_opt HWND hWndParent,__in_opt HMENU hMenu,__in_opt HINSTANCE hInstance,__in_opt LPVOID lpParam);																		
CreateWindowExW(__in DWORD dwExStyle,__in_opt LPCWSTR lpClassName,__in_opt LPCWSTR lpWindowName,__in DWORD dwStyle,__in int X,__in int Y,__in int nWidth,__in int nHeight,__in_opt HWND hWndParent,__in_opt HMENU hMenu,__in_opt HINSTANCE hInstance,__in_opt LPVOID lpParam);																		
CreateWindowStationA(    __in_opt LPCSTR lpwinsta,    __in DWORD dwFlags,    __in ACCESS_MASK dwDesiredAccess,    __in_opt LPSECURITY_ATTRIBUTES lpsa);																		
CreateWindowStationW(    __in_opt LPCWSTR lpwinsta,    __in DWORD dwFlags,    __in ACCESS_MASK dwDesiredAccess,    __in_opt LPSECURITY_ATTRIBUTES lpsa);																		
CredDeleteA(    __in LPCSTR TargetName,    __in DWORD Type,    __reserved DWORD Flags    );																		
CredDeleteW(    __in LPCWSTR TargetName,    __in DWORD Type,    __reserved DWORD Flags    );																		
CredEnumerateA(    __in_opt LPCSTR Filter,    __reserved DWORD Flags,    __out DWORD *Count,    __deref_out_ecount(*Count) PCREDENTIALA **Credential    );																		
CredEnumerateW(    __in_opt LPCWSTR Filter,    __reserved DWORD Flags,    __out DWORD *Count,    __deref_out_ecount(*Count) PCREDENTIALW **Credential    );																		
CredFindBestCredentialA (    IN LPCSTR TargetName,    IN DWORD Type,    IN DWORD Flags,    OUT PCREDENTIALA *Credential    );																		
CredFindBestCredentialW (    IN LPCWSTR TargetName,    IN DWORD Type,    IN DWORD Flags,    OUT PCREDENTIALW *Credential    );																		
CredFree(    __in PVOID Buffer    );																		
CredGetSessionTypes(    __in DWORD MaximumPersistCount,    __out LPDWORD MaximumPersist    );																		
CredGetTargetInfoA(    __in LPCSTR TargetName,    __in DWORD Flags,    __out PCREDENTIAL_TARGET_INFORMATIONA *TargetInfo    );																		
CredGetTargetInfoW(    __in LPCWSTR TargetName,    __in DWORD Flags,    __out PCREDENTIAL_TARGET_INFORMATIONW *TargetInfo    );																		
CredIsMarshaledCredentialA(    __in LPCSTR MarshaledCredential    );																		
CredIsMarshaledCredentialW(    __in LPCWSTR MarshaledCredential    );																		
CredIsProtectedA(    __in LPSTR                  pszProtectedCredentials,    __out CRED_PROTECTION_TYPE* pProtectionType    );																		
CredIsProtectedW(    __in LPWSTR                 pszProtectedCredentials,    __out CRED_PROTECTION_TYPE* pProtectionType    );																		
CredMarshalCredentialA(    __in CRED_MARSHAL_TYPE CredType,    __in PVOID Credential,    __out LPSTR *MarshaledCredential    );																		
CredMarshalCredentialW(    __in CRED_MARSHAL_TYPE CredType,    __in PVOID Credential,    __out LPWSTR *MarshaledCredential    );																		
CredPackAuthenticationBufferA(    __in DWORD                                      dwFlags,    __in LPSTR                                      pszUserName,    __in LPSTR                                      pszPassword,    __out_bcount_opt(*pcbPackedCredentials) PBYTE   pPackedCredentials,    __inout DWORD*                                  pcbPackedCredentials    );																		
CredPackAuthenticationBufferW(    __in DWORD                                      dwFlags,    __in LPWSTR                                     pszUserName,    __in LPWSTR                                     pszPassword,    __out_bcount_opt(*pcbPackedCredentials) PBYTE   pPackedCredentials,    __inout DWORD*                                  pcbPackedCredentials    );																		
CredProtectA(    __in BOOL                            fAsSelf,    __in_ecount(cchCredentials) LPSTR    pszCredentials,    __in DWORD                           cchCredentials,    __out_ecount(*pcchMaxChars) LPSTR    pszProtectedCredentials,    __inout DWORD*                       pcchMaxChars,    __out_opt CRED_PROTECTION_TYPE*      ProtectionType    );																		
CredProtectW(    __in BOOL                               fAsSelf,    __in_ecount(cchCredentials) LPWSTR      pszCredentials,    __in DWORD                              cchCredentials,    __out_ecount(*pcchMaxChars) LPWSTR      pszProtectedCredentials,    __inout DWORD*                          pcchMaxChars,    __out_opt CRED_PROTECTION_TYPE*         ProtectionType    );																		
CredReadA(    __in LPCSTR TargetName,    __in DWORD Type,    __reserved DWORD Flags,    __out PCREDENTIALA *Credential    );																		
CredReadDomainCredentialsA(    __in PCREDENTIAL_TARGET_INFORMATIONA TargetInfo,    __in DWORD Flags,    __out DWORD *Count,    __deref_out_ecount(*Count) PCREDENTIALA **Credential    );																		
CredReadDomainCredentialsW(    __in PCREDENTIAL_TARGET_INFORMATIONW TargetInfo,    __in DWORD Flags,    __out DWORD *Count,    __deref_out_ecount(*Count) PCREDENTIALW **Credential    );																		
CredReadW(    __in LPCWSTR TargetName,    __in DWORD Type,    __reserved DWORD Flags,    __out PCREDENTIALW *Credential    );																		
CredRenameA(    __in LPCSTR OldTargetName,    __in LPCSTR NewTargetName,    __in DWORD Type,    __reserved DWORD Flags    );																		
CredRenameW(    __in LPCWSTR OldTargetName,    __in LPCWSTR NewTargetName,    __in DWORD Type,    __reserved DWORD Flags    );																		
CredUICmdLinePromptForCredentialsA(    __in_opt PCSTR pszTargetName,    __reserved PCtxtHandle pContext,    __in DWORD dwAuthError,    __inout_ecount(ulUserBufferSize) PSTR UserName,    __in ULONG ulUserBufferSize,    __inout_ecount(ulPasswordBufferSize) PSTR pszPassword,    __in ULONG ulPasswordBufferSize,    __inout_opt PBOOL pfSave,    __in DWORD dwFlags    );																		
CredUICmdLinePromptForCredentialsW(    __in_opt PCWSTR pszTargetName,    __reserved PCtxtHandle pContext,    __in DWORD dwAuthError,    __inout_ecount(ulUserBufferSize) PWSTR UserName,    __in ULONG ulUserBufferSize,    __inout_ecount(ulPasswordBufferSize) PWSTR pszPassword,    __in ULONG ulPasswordBufferSize,    __inout_opt PBOOL pfSave,    __in DWORD dwFlags    );																		
CredUIConfirmCredentialsA(    __in PCSTR pszTargetName,    __in BOOL  bConfirm    );																		
CredUIConfirmCredentialsW(    __in PCWSTR pszTargetName,    __in BOOL  bConfirm    );																		
CredUIParseUserNameA(    __in CONST CHAR *userName,    __out_ecount(userBufferSize) CHAR *user,    __in ULONG userBufferSize,    __out_ecount(domainBufferSize) CHAR *domain,    __in ULONG domainBufferSize    );																		
CredUIParseUserNameW(    __in CONST WCHAR *UserName,    __out_ecount(userBufferSize) WCHAR *user,    __in ULONG userBufferSize,    __out_ecount(domainBufferSize) WCHAR *domain,    __in ULONG domainBufferSize    );																		
CredUIPromptForCredentialsA(    __in_opt PCREDUI_INFOA pUiInfo,    __in_opt PCSTR pszTargetName,    __reserved PCtxtHandle pContext,    __in DWORD dwAuthError,    __inout_ecount(ulUserNameBufferSize) PSTR  pszUserName,    __in ULONG ulUserNameBufferSize,    __inout_ecount(ulPasswordBufferSize) PSTR pszPassword,    __in ULONG ulPasswordBufferSize,    __inout_opt BOOL *save,    __in DWORD dwFlags    );																		
CredUIPromptForCredentialsW(    __in_opt PCREDUI_INFOW pUiInfo,    __in_opt PCWSTR pszTargetName,    __reserved PCtxtHandle pContext,    __in DWORD dwAuthError,    __inout_ecount(ulUserNameBufferSize) PWSTR pszUserName,    __in ULONG ulUserNameBufferSize,    __inout_ecount(ulPasswordBufferSize) PWSTR pszPassword,    __in ULONG ulPasswordBufferSize,    __inout_opt BOOL *save,    __in DWORD dwFlags    );																		
CredUIPromptForWindowsCredentialsA(    __in_opt PCREDUI_INFOA pUiInfo,    __in DWORD dwAuthError,    __inout ULONG *pulAuthPackage,    __in_bcount_opt(ulInAuthBufferSize) LPCVOID pvInAuthBuffer,    __in ULONG ulInAuthBufferSize,    __deref_out_bcount_full(*pulOutAuthBufferSize) LPVOID * ppvOutAuthBuffer,    __out ULONG * pulOutAuthBufferSize,    __inout_opt BOOL *pfSave,    __in DWORD dwFlags    );																		
CredUIPromptForWindowsCredentialsW(    __in_opt PCREDUI_INFOW pUiInfo,    __in DWORD dwAuthError,    __inout ULONG *pulAuthPackage,    __in_bcount_opt(ulInAuthBufferSize) LPCVOID pvInAuthBuffer,    __in ULONG ulInAuthBufferSize,    __deref_out_bcount_full(*pulOutAuthBufferSize) LPVOID * ppvOutAuthBuffer,    __out ULONG * pulOutAuthBufferSize,    __inout_opt BOOL *pfSave,    __in DWORD dwFlags    );																		
CredUIReadSSOCredW(    __in_opt PCWSTR pszRealm,    __deref_out PWSTR* ppszUsername    );																		
CredUIStoreSSOCredW(    __in_opt PCWSTR pszRealm,    __in PCWSTR pszUsername,    __in PCWSTR pszPassword,    __in BOOL   bPersist    );																		
CredUnmarshalCredentialA(    __in LPCSTR MarshaledCredential,    __out PCRED_MARSHAL_TYPE CredType,    __out PVOID *Credential    );																		
CredUnmarshalCredentialW(    __in LPCWSTR MarshaledCredential,    __out PCRED_MARSHAL_TYPE CredType,    __out PVOID *Credential    );																		
CredUnPackAuthenticationBufferA(    __in DWORD                                      dwFlags,    __in_bcount(cbAuthBuffer) PVOID                 pAuthBuffer,    __in DWORD                                      cbAuthBuffer,    __out_ecount_opt(*pcchMaxUserName) LPSTR        pszUserName,    __inout DWORD*                                  pcchlMaxUserName,    __out_ecount_opt(*pcchMaxDomainName) LPSTR      pszDomainName,    __inout_opt DWORD*                              pcchMaxDomainName,    __out_ecount_opt(*pcchMaxPassword) LPSTR        pszPassword,    __inout DWORD*                                  pcchMaxPassword    );																		
CredUnPackAuthenticationBufferW(    __in DWORD                                      dwFlags,    __in_bcount(cbAuthBuffer) PVOID                 pAuthBuffer,    __in DWORD                                      cbAuthBuffer,    __out_ecount_opt(*pcchMaxUserName) LPWSTR       pszUserName,    __inout DWORD*                                  pcchMaxUserName,    __out_ecount_opt(*pcchMaxDomainName) LPWSTR     pszDomainName,    __inout_opt DWORD*                              pcchMaxDomainName,    __out_ecount_opt(*pcchMaxPassword) LPWSTR       pszPassword,    __inout DWORD*                                  pcchMaxPassword    );																		
CredUnprotectA(    __in BOOL                                   fAsSelf,    __in_ecount(cchProtectedCredentials) LPSTR  pszProtectedCredentials,    __in DWORD                                  cchProtectedCredentials,    __out_ecount_opt(*pcchMaxChars) LPSTR       pszCredentials,    __inout DWORD*                              pcchMaxChars    );																		
CredUnprotectW(    __in BOOL                                   fAsSelf,    __in_ecount(cchProtectedCredentials) LPWSTR pszProtectedCredentials,    __in DWORD                                  cchProtectedCredentials,    __out_ecount_opt(*pcchMaxChars) LPWSTR      pszCredentials,    __inout DWORD*                              pcchMaxChars    );																		
CredWriteA (    __in PCREDENTIALA Credential,    __in DWORD Flags    );																		
CredWriteDomainCredentialsA (    __in PCREDENTIAL_TARGET_INFORMATIONA TargetInfo,    __in PCREDENTIALA Credential,    __in DWORD Flags    );																		
CredWriteDomainCredentialsW (    __in PCREDENTIAL_TARGET_INFORMATIONW TargetInfo,    __in PCREDENTIALW Credential,    __in DWORD Flags    );																		
CredWriteW (    __in PCREDENTIALW Credential,    __in DWORD Flags    );																		
CryptAcquireCertificatePrivateKey(    __in PCCERT_CONTEXT pCert,    __in DWORD dwFlags,    __reserved void *pvReserved,    __out HCRYPTPROV_OR_NCRYPT_KEY_HANDLE *phCryptProvOrNCryptKey,    __out_opt DWORD *pdwKeySpec,    __out_opt BOOL *pfCallerFreeProvOrNCryptKey    );																		
CryptAcquireContextA(    __out       HCRYPTPROV  *phProv,    __in_opt    LPCSTR    szContainer,    __in_opt    LPCSTR    szProvider,    __in        DWORD       dwProvType,    __in        DWORD       dwFlags    );																		
CryptAcquireContextA(    HCRYPTPROV *phProv,    LPCSTR pszContainer,    LPCSTR pszProvider,    DWORD dwProvType,    DWORD dwFlags    );																		
CryptAcquireContextA(    HCRYPTPROV *phProv,    LPCSTR szContainer,    LPCSTR szProvider,    DWORD dwProvType,    DWORD dwFlags    );																		
CryptAcquireContextW(    __out       HCRYPTPROV  *phProv,    __in_opt    LPCWSTR    szContainer,    __in_opt    LPCWSTR    szProvider,    __in        DWORD       dwProvType,    __in        DWORD       dwFlags    );																		
CryptAcquireContextW(    HCRYPTPROV *phProv,    LPCWSTR pszContainer,    LPCWSTR pszProvider,    DWORD dwProvType,    DWORD dwFlags    );																		
CryptAcquireContextW(    HCRYPTPROV *phProv,    LPCWSTR szContainer,    LPCWSTR szProvider,    DWORD dwProvType,    DWORD dwFlags    );																		
CryptBinaryToStringA(    __in_bcount(cbBinary) CONST BYTE *pbBinary,    __in DWORD cbBinary,    __in DWORD dwFlags,    __out_ecount_part_opt(*pcchString, *pcchString) LPSTR pszString,    __inout DWORD *pcchString    );																		
CryptBinaryToStringW(    __in_bcount(cbBinary) CONST BYTE *pbBinary,    __in DWORD cbBinary,    __in DWORD dwFlags,    __out_ecount_part_opt(*pcchString, *pcchString) LPWSTR pszString,    __inout DWORD *pcchString    );																		
CryptCancelAsyncRetrieval (    __in_opt HCRYPTASYNC hAsyncRetrieval    );																		
CryptCloseAsyncHandle (    __in_opt HCRYPTASYNC hAsync    );																		
CryptContextAddRef(    __in        HCRYPTPROV  hProv,    __reserved  DWORD       *pdwReserved,    __in        DWORD       dwFlags    );																		
CryptCreateAsyncHandle (    __in DWORD dwFlags,    __out PHCRYPTASYNC phAsync    );																		
CryptCreateHash(    __in    HCRYPTPROV  hProv,    __in    ALG_ID      Algid,    __in    HCRYPTKEY   hKey,    __in    DWORD       dwFlags,    __out   HCRYPTHASH  *phHash    );																		
CryptCreateKeyIdentifierFromCSP(    __in DWORD dwCertEncodingType,    __in_opt LPCSTR pszPubKeyOID,    __in_bcount(cbPubKeyStruc) const PUBLICKEYSTRUC *pPubKeyStruc,    __in DWORD cbPubKeyStruc,    __in DWORD dwFlags,    __reserved void *pvReserved,    __out_bcount_part_opt(*pcbHash, *pcbHash) BYTE *pbHash,    __inout DWORD *pcbHash    );																		
CryptDecodeMessage(    __in DWORD dwMsgTypeFlags,    __in_opt PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,    __in_opt PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,    __in DWORD dwSignerIndex,    __in_bcount(cbEncodedBlob) const BYTE *pbEncodedBlob,    __in DWORD cbEncodedBlob,    __in DWORD dwPrevInnerContentType,    __out_opt DWORD *pdwMsgType,    __out_opt DWORD *pdwInnerContentType,    __out_bcount_part_opt(*pcbDecoded, *pcbDecoded) BYTE *pbDecoded,    __inout_opt DWORD *pcbDecoded,    __deref_opt_out_opt PCCERT_CONTEXT *ppXchgCert,    __deref_opt_out_opt PCCERT_CONTEXT *ppSignerCert    );																		
CryptDecodeObject(    __in DWORD dwCertEncodingType,    __in LPCSTR lpszStructType,    __in_bcount(cbEncoded) const BYTE *pbEncoded,    __in DWORD cbEncoded,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbStructInfo, *pcbStructInfo) void *pvStructInfo,    __inout DWORD *pcbStructInfo    );																		
CryptDecodeObjectEx(    __in DWORD dwCertEncodingType,    __in LPCSTR lpszStructType,    __in_bcount(cbEncoded) const BYTE *pbEncoded,    __in DWORD cbEncoded,    __in DWORD dwFlags,    __in_opt PCRYPT_DECODE_PARA pDecodePara,    __out_opt void *pvStructInfo,    __inout DWORD *pcbStructInfo    );																		
CryptDecrypt(    __in                                            HCRYPTKEY   hKey,    __in                                            HCRYPTHASH  hHash,    __in                                            BOOL        Final,    __in                                            DWORD       dwFlags,    __inout_bcount_part(*pdwDataLen, *pdwDataLen)   BYTE        *pbData,    __inout                                         DWORD       *pdwDataLen    );																		
CryptDecryptAndVerifyMessageSignature(    __in PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,    __in PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,    __in DWORD dwSignerIndex,    __in_bcount(cbEncryptedBlob) const BYTE *pbEncryptedBlob,    __in DWORD cbEncryptedBlob,    __out_bcount_part_opt(*pcbDecrypted, *pcbDecrypted) BYTE *pbDecrypted,    __inout_opt DWORD *pcbDecrypted,    __deref_opt_out_opt PCCERT_CONTEXT *ppXchgCert,    __deref_opt_out_opt PCCERT_CONTEXT *ppSignerCert    );																		
CryptDecryptMessage(    __in PCRYPT_DECRYPT_MESSAGE_PARA pDecryptPara,    __in_bcount(cbEncryptedBlob) const BYTE *pbEncryptedBlob,    __in DWORD cbEncryptedBlob,    __out_bcount_part_opt(*pcbDecrypted, *pcbDecrypted) BYTE *pbDecrypted,    __inout_opt DWORD *pcbDecrypted,    __deref_opt_out_opt PCCERT_CONTEXT *ppXchgCert    );																		
CryptDeriveKey(    __in    HCRYPTPROV  hProv,    __in    ALG_ID      Algid,    __in    HCRYPTHASH  hBaseData,    __in    DWORD       dwFlags,    __out   HCRYPTKEY   *phKey    );																		
CryptDestroyHash(    __in    HCRYPTHASH  hHash    );																		
CryptDestroyKey(    __in    HCRYPTKEY   hKey    );																		
CryptDuplicateHash(    __in        HCRYPTHASH  hHash,    __reserved  DWORD       *pdwReserved,    __in        DWORD       dwFlags,    __out       HCRYPTHASH  *phHash    );																		
CryptDuplicateKey(    __in        HCRYPTKEY   hKey,    __reserved  DWORD   *pdwReserved,    __in        DWORD   dwFlags,    __out       HCRYPTKEY   *phKey    );																		
CryptEncodeObject(    __in DWORD dwCertEncodingType,    __in LPCSTR lpszStructType,    __in const void *pvStructInfo,    __out_bcount_part_opt(*pcbEncoded, *pcbEncoded) BYTE *pbEncoded,    __inout DWORD *pcbEncoded    );																		
CryptEncodeObjectEx(    __in DWORD dwCertEncodingType,    __in LPCSTR lpszStructType,    __in const void *pvStructInfo,    __in DWORD dwFlags,    __in_opt PCRYPT_ENCODE_PARA pEncodePara,    __out_opt void *pvEncoded,    __inout DWORD *pcbEncoded    );																		
CryptEncrypt(    __in                                            HCRYPTKEY   hKey,    __in                                            HCRYPTHASH  hHash,    __in                                            BOOL    Final,    __in                                            DWORD   dwFlags,    __inout_bcount_part_opt(dwBufLen, *pdwDataLen)  BYTE    *pbData,    __inout                                         DWORD   *pdwDataLen,    __in                                            DWORD   dwBufLen    );																		
CryptEncryptMessage(    __in PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,    __in DWORD cRecipientCert,    __in_ecount(cRecipientCert) PCCERT_CONTEXT rgpRecipientCert[],    __in_bcount_opt(cbToBeEncrypted) const BYTE *pbToBeEncrypted,    __in DWORD cbToBeEncrypted,    __out_bcount_part_opt(*pcbEncryptedBlob, *pcbEncryptedBlob) BYTE *pbEncryptedBlob,    __inout DWORD *pcbEncryptedBlob    );																		
CryptEnumKeyIdentifierProperties(    __in_opt const CRYPT_HASH_BLOB *pKeyIdentifier,    __in DWORD dwPropId,    __in DWORD dwFlags,    __in_opt LPCWSTR pwszComputerName,    __reserved void *pvReserved,    __inout_opt void *pvArg,    __callback PFN_CRYPT_ENUM_KEYID_PROP pfnEnum    );																		
CryptEnumOIDFunction(    __in DWORD dwEncodingType,    __in_opt LPCSTR pszFuncName,    __in_opt LPCSTR pszOID,    __in DWORD dwFlags,    __inout_opt void *pvArg,    __callback PFN_CRYPT_ENUM_OID_FUNC pfnEnumOIDFunc    );																		
CryptEnumOIDInfo(    __in DWORD dwGroupId,    __in DWORD dwFlags,    __inout_opt void *pvArg,    __callback PFN_CRYPT_ENUM_OID_INFO pfnEnumOIDInfo    );																		
CryptEnumProvidersA(    __in                                                DWORD   dwIndex,    __reserved                                          DWORD   *pdwReserved,    __in                                                DWORD   dwFlags,    __out                                               DWORD   *pdwProvType,    __out_bcount_part_opt(*pcbProvName, *pcbProvName)   LPSTR szProvName,    __inout                                             DWORD   *pcbProvName    );																		
CryptEnumProvidersA(    DWORD   dwIndex,    DWORD * pdwReserved,    DWORD   dwFlags,    DWORD * pdwProvType,    LPSTR pszProvName,    DWORD * pcbProvName    );																		
CryptEnumProvidersA(    DWORD dwIndex,    DWORD *pdwReserved,    DWORD dwFlags,    DWORD *pdwProvType,    LPSTR szProvName,    DWORD *pcbProvName    );																		
CryptEnumProvidersW(    __in                                                DWORD   dwIndex,    __reserved                                          DWORD   *pdwReserved,    __in                                                DWORD   dwFlags,    __out                                               DWORD   *pdwProvType,    __out_bcount_part_opt(*pcbProvName, *pcbProvName)   LPWSTR szProvName,    __inout                                             DWORD   *pcbProvName    );																		
CryptEnumProvidersW(    DWORD   dwIndex,    DWORD * pdwReserved,    DWORD   dwFlags,    DWORD * pdwProvType,    LPWSTR pszProvName,    DWORD * pcbProvName    );																		
CryptEnumProvidersW(    DWORD dwIndex,    DWORD *pdwReserved,    DWORD dwFlags,    DWORD *pdwProvType,    LPWSTR szProvName,    DWORD *pcbProvName    );																		
CryptEnumProviderTypesA(    __in                                            DWORD   dwIndex,    __reserved                                      DWORD   *pdwReserved,    __in                                            DWORD   dwFlags,    __out                                           DWORD   *pdwProvType,    __out_bcount_part_opt(*pcbTypeName, *pcbTypeName)   LPSTR szTypeName,    __inout                                         DWORD   *pcbTypeName    );																		
CryptEnumProviderTypesA(    DWORD   dwIndex,    DWORD * pdwReserved,    DWORD   dwFlags,    DWORD * pdwProvType,    LPSTR pszTypeName,    DWORD * pcbTypeName    );																		
CryptEnumProviderTypesA(    DWORD dwIndex,    DWORD *pdwReserved,    DWORD dwFlags,    DWORD *pdwProvType,    LPSTR szTypeName,    DWORD *pcbTypeName    );																		
CryptEnumProviderTypesW(    __in                                            DWORD   dwIndex,    __reserved                                      DWORD   *pdwReserved,    __in                                            DWORD   dwFlags,    __out                                           DWORD   *pdwProvType,    __out_bcount_part_opt(*pcbTypeName, *pcbTypeName)   LPWSTR szTypeName,    __inout                                         DWORD   *pcbTypeName    );																		
CryptEnumProviderTypesW(    DWORD   dwIndex,    DWORD * pdwReserved,    DWORD   dwFlags,    DWORD * pdwProvType,    LPWSTR pszTypeName,    DWORD * pcbTypeName    );																		
CryptEnumProviderTypesW(    DWORD dwIndex,    DWORD *pdwReserved,    DWORD dwFlags,    DWORD *pdwProvType,    LPWSTR szTypeName,    DWORD *pcbTypeName    );																		
CryptExportKey(    __in                                            HCRYPTKEY   hKey,    __in                                            HCRYPTKEY   hExpKey,    __in                                            DWORD   dwBlobType,    __in                                            DWORD   dwFlags,    __out_bcount_part_opt(*pdwDataLen, *pdwDataLen) BYTE    *pbData,    __inout                                         DWORD   *pdwDataLen    );																		
CryptExportPKCS8(__in HCRYPTPROV hCryptProv,__in DWORD dwKeySpec,__in LPSTR pszPrivateKeyObjId,__in DWORD dwFlags,__in_opt void* pvAuxInfo,__out_bcount_opt (*pcbPrivateKeyBlob) BYTE* pbPrivateKeyBlob,__inout DWORD *pcbPrivateKeyBlob);																		
CryptExportPKCS8Ex(    __in CRYPT_PKCS8_EXPORT_PARAMS* psExportParams,__in DWORD dwFlags,__in_opt void* pvAuxInfo,__out_bcount_opt (*pcbPrivateKeyBlob) BYTE* pbPrivateKeyBlob,__inout DWORD* pcbPrivateKeyBlob);																		
CryptExportPublicKeyInfo(    __in HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,    __in_opt DWORD dwKeySpec,__in DWORD dwCertEncodingType,__out_bcount_part_opt(*pcbInfo, *pcbInfo) PCERT_PUBLIC_KEY_INFO pInfo,__inout DWORD *pcbInfo);																		
CryptExportPublicKeyInfoEx(    __in HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,    __in_opt DWORD dwKeySpec,__in DWORD dwCertEncodingType,__in_opt LPSTR pszPublicKeyObjId,__in DWORD dwFlags,__in_opt void *pvAuxInfo,__out_bcount_part_opt(*pcbInfo, *pcbInfo) PCERT_PUBLIC_KEY_INFO pInfo,__inout DWORD *pcbInfo);																		
CryptExportPublicKeyInfoFromBCryptKeyHandle(    __in BCRYPT_KEY_HANDLE hBCryptKey,    __in DWORD dwCertEncodingType,    __in_opt LPSTR pszPublicKeyObjId,    __in DWORD dwFlags,    __in_opt void *pvAuxInfo,    __out_bcount_part_opt(*pcbInfo, *pcbInfo) PCERT_PUBLIC_KEY_INFO pInfo,    __inout DWORD *pcbInfo    );																		
CryptFindCertificateKeyProvInfo(    __in PCCERT_CONTEXT pCert,    __in DWORD dwFlags,    __reserved void *pvReserved    );																		
CryptFindLocalizedName(    __in LPCWSTR pwszCryptName    );																		
CryptFindOIDInfo(    __in DWORD dwKeyType,    __in void *pvKey,    __in DWORD dwGroupId    );																		
CryptFlushTimeValidObject (     __in LPCSTR pszFlushTimeValidOid,     __in LPVOID pvPara,     __in PCCERT_CONTEXT pIssuer,     __in DWORD dwFlags,     __reserved LPVOID pvReserved     );																		
CryptFormatObject(    __in DWORD dwCertEncodingType,    __in DWORD dwFormatType,    __in DWORD dwFormatStrType,    __in_opt void *pFormatStruct,    __in_opt LPCSTR lpszStructType,    __in_bcount(cbEncoded) const BYTE *pbEncoded,    __in DWORD cbEncoded,    __out_bcount_part_opt(*pcbFormat, *pcbFormat) __typefix(WCHAR *) void *pbFormat,    __inout DWORD *pcbFormat    );																		
CryptFreeOIDFunctionAddress(    __in HCRYPTOIDFUNCADDR hFuncAddr,    __in DWORD dwFlags    );																		
CryptGenKey(    __in    HCRYPTPROV  hProv,    __in    ALG_ID      Algid,    __in    DWORD       dwFlags,    __out   HCRYPTKEY   *phKey    );																		
CryptGenRandom(    __in                    HCRYPTPROV  hProv,    __in                    DWORD   dwLen,    __inout_bcount(dwLen)   BYTE    *pbBuffer    );																		
CryptGetAsyncParam (    __in HCRYPTASYNC hAsync,    __in LPSTR pszParamOid,    __deref_opt_out_opt LPVOID* ppvParam,    __deref_opt_out_opt __callback  PFN_CRYPT_ASYNC_PARAM_FREE_FUNC* ppfnFree    );																		
CryptGetDefaultOIDDllList(    __in HCRYPTOIDFUNCSET hFuncSet,    __in DWORD dwEncodingType,    __out_ecount_part_opt(*pcchDllList, *pcchDllList) __nullnullterminated WCHAR *pwszDllList,    __inout DWORD *pcchDllList    );																		
CryptGetDefaultOIDFunctionAddress(    __in HCRYPTOIDFUNCSET hFuncSet,    __in DWORD dwEncodingType,    __in_opt LPCWSTR pwszDll,    __in DWORD dwFlags,    __deref_out void **ppvFuncAddr,    __inout HCRYPTOIDFUNCADDR *phFuncAddr    );																		
CryptGetDefaultProviderA(    __in                                            DWORD   dwProvType,    __reserved                                      DWORD   *pdwReserved,    __in                                            DWORD   dwFlags,    __out_bcount_part_opt(*pcbProvName, *pcbProvName)   LPSTR pszProvName,    __inout                                         DWORD   *pcbProvName    );																		
CryptGetDefaultProviderA(    DWORD dwProvType,    DWORD *pdwReserved,    DWORD dwFlags,    LPSTR pszProvName,    DWORD *pcbProvName    );																		
CryptGetDefaultProviderW(    __in                                            DWORD   dwProvType,    __reserved                                      DWORD   *pdwReserved,    __in                                            DWORD   dwFlags,    __out_bcount_part_opt(*pcbProvName, *pcbProvName)   LPWSTR pszProvName,    __inout                                         DWORD   *pcbProvName    );																		
CryptGetDefaultProviderW(    DWORD dwProvType,    DWORD *pdwReserved,    DWORD dwFlags,    LPWSTR pszProvName,    DWORD *pcbProvName    );																		
CryptGetHashParam(    __in                                        HCRYPTHASH  hHash,    __in                                        DWORD   dwParam,    __out_bcount_part_opt(*pdwDataLen, *pdwDataLen) BYTE    *pbData,    __inout                                     DWORD   *pdwDataLen,    __in                                        DWORD   dwFlags    );																		
CryptGetKeyIdentifierProperty(    __in const CRYPT_HASH_BLOB *pKeyIdentifier,    __in DWORD dwPropId,    __in DWORD dwFlags,    __in_opt LPCWSTR pwszComputerName,    __reserved void *pvReserved,    __out_bcount_part_opt(*pcbData, *pcbData) void *pvData,    __inout DWORD *pcbData    );																		
CryptGetKeyParam(    __in                                            HCRYPTKEY   hKey,    __in                                            DWORD   dwParam,    __out_bcount_part_opt(*pdwDataLen, *pdwDataLen) BYTE    *pbData,    __inout                                         DWORD   *pdwDataLen,    __in                                            DWORD   dwFlags    );																		
CryptGetMessageCertificates(    __in DWORD dwMsgAndCertEncodingType,    __in_opt HCRYPTPROV_LEGACY hCryptProv,__in DWORD dwFlags,__in_bcount(cbSignedBlob) const BYTE *pbSignedBlob,    __in DWORD cbSignedBlob    );																		
CryptGetMessageSignerCount(    __in DWORD dwMsgEncodingType,    __in_bcount(cbSignedBlob) const BYTE *pbSignedBlob,    __in DWORD cbSignedBlob    );																		
CryptGetObjectUrl (    __in LPCSTR pszUrlOid,    __in LPVOID pvPara,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbUrlArray, *pcbUrlArray) PCRYPT_URL_ARRAY pUrlArray,    __inout DWORD* pcbUrlArray,    __out_bcount_part_opt(*pcbUrlInfo, *pcbUrlInfo) PCRYPT_URL_INFO pUrlInfo,    __inout_opt DWORD* pcbUrlInfo,    __reserved LPVOID pvReserved    );																		
CryptGetOIDFunctionAddress(    __in HCRYPTOIDFUNCSET hFuncSet,    __in DWORD dwEncodingType,    __in LPCSTR pszOID,    __in DWORD dwFlags,    __deref_out void **ppvFuncAddr,    __out HCRYPTOIDFUNCADDR *phFuncAddr    );																		
CryptGetOIDFunctionValue(    __in DWORD dwEncodingType,    __in LPCSTR pszFuncName,    __in LPCSTR pszOID,    __in_opt LPCWSTR pwszValueName,    __out_opt DWORD *pdwValueType,    __out_bcount_part_opt(*pcbValueData, *pcbValueData) BYTE *pbValueData,    __inout_opt DWORD *pcbValueData    );																		
CryptGetProvParam(    __in                                            HCRYPTPROV  hProv,    __in                                            DWORD   dwParam,    __out_bcount_part_opt(*pdwDataLen, *pdwDataLen) BYTE    *pbData,    __inout                                         DWORD   *pdwDataLen,    __in                                            DWORD   dwFlags    );																		
CryptGetTimeValidObject (    __in LPCSTR pszTimeValidOid,    __in LPVOID pvPara,    __in PCCERT_CONTEXT pIssuer,    __in_opt LPFILETIME pftValidFor,    __in DWORD dwFlags,    __in DWORD dwTimeout,    __deref_opt_out LPVOID* ppvObject,    __in_opt PCRYPT_CREDENTIALS pCredentials,    __inout_opt PCRYPT_GET_TIME_VALID_OBJECT_EXTRA_INFO pExtraInfo    );																		
CryptGetUserKey(    __in    HCRYPTPROV  hProv,    __in    DWORD       dwKeySpec,    __out   HCRYPTKEY   *phUserKey    );																		
CryptHashCertificate(    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in ALG_ID Algid,    __in DWORD dwFlags,    __in_bcount_opt(cbEncoded) const BYTE *pbEncoded,    __in DWORD cbEncoded,    __out_bcount_part_opt(*pcbComputedHash, *pcbComputedHash) BYTE *pbComputedHash,    __inout DWORD *pcbComputedHash    );																		
CryptHashCertificate2(    __in LPCWSTR pwszCNGHashAlgid,    __in DWORD dwFlags,    __reserved void *pvReserved,    __in_bcount_opt(cbEncoded) const BYTE *pbEncoded,    __in DWORD cbEncoded,    __out_bcount_part_opt(*pcbComputedHash, *pcbComputedHash) BYTE *pbComputedHash,    __inout DWORD *pcbComputedHash    );																		
CryptHashData(    __in                    HCRYPTHASH  hHash,    __in_bcount(dwDataLen)  CONST BYTE  *pbData,    __in                    DWORD   dwDataLen,    __in                    DWORD   dwFlags    );																		
CryptHashMessage(    __in PCRYPT_HASH_MESSAGE_PARA pHashPara,    __in BOOL fDetachedHash,    __in DWORD cToBeHashed,    __in_ecount(cToBeHashed) const BYTE *rgpbToBeHashed[],    __in_ecount(cToBeHashed) DWORD rgcbToBeHashed[],    __out_bcount_part_opt(*pcbHashedBlob, *pcbHashedBlob) BYTE *pbHashedBlob,    __inout_opt DWORD *pcbHashedBlob,    __out_bcount_part_opt(*pcbComputedHash, *pcbComputedHash) BYTE *pbComputedHash,    __inout_opt DWORD *pcbComputedHash    );																		
CryptHashPublicKeyInfo(    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in ALG_ID Algid,    __in DWORD dwFlags,    __in DWORD dwCertEncodingType,    __in PCERT_PUBLIC_KEY_INFO pInfo,    __out_bcount_part_opt(*pcbComputedHash, *pcbComputedHash) BYTE *pbComputedHash,    __inout DWORD *pcbComputedHash    );																		
CryptHashSessionKey(    __in    HCRYPTHASH  hHash,    __in    HCRYPTKEY   hKey,    __in    DWORD   dwFlags    );																		
CryptHashToBeSigned(    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in DWORD dwCertEncodingType,    __in_bcount(cbEncoded) const BYTE *pbEncoded,    __in DWORD cbEncoded,    __out_bcount_part_opt(*pcbComputedHash, *pcbComputedHash) BYTE *pbComputedHash,    __inout DWORD *pcbComputedHash    );																		
CryptImportKey(    __in                    HCRYPTPROV  hProv,    __in_bcount(dwDataLen)  CONST BYTE  *pbData,    __in                    DWORD       dwDataLen,    __in                    HCRYPTKEY   hPubKey,    __in                    DWORD       dwFlags,    __out                   HCRYPTKEY   *phKey    );																		
CryptImportPKCS8(__in CRYPT_PKCS8_IMPORT_PARAMS sPrivateKeyAndParams,__in DWORD dwFlags, __out_opt HCRYPTPROV *phCryptProv, __in_opt void* pvAuxInfo);																		
CryptImportPublicKeyInfo(    __in HCRYPTPROV hCryptProv,    __in DWORD dwCertEncodingType,    __in PCERT_PUBLIC_KEY_INFO pInfo,    __out HCRYPTKEY *phKey    );																		
CryptImportPublicKeyInfoEx(    __in HCRYPTPROV hCryptProv,    __in DWORD dwCertEncodingType,    __in PCERT_PUBLIC_KEY_INFO pInfo,    __in ALG_ID aiKeyAlg,    __in DWORD dwFlags,    __in_opt void *pvAuxInfo,    __out HCRYPTKEY *phKey    );																		
CryptImportPublicKeyInfoEx2(    __in DWORD dwCertEncodingType,    __in PCERT_PUBLIC_KEY_INFO pInfo,    __in DWORD dwFlags,    __in_opt void *pvAuxInfo,    __out BCRYPT_KEY_HANDLE *phKey    );																		
CryptInitOIDFunctionSet(    __in LPCSTR pszFuncName,    __in DWORD dwFlags    );																		
CryptInstallCancelRetrieval(    __callback PFN_CRYPT_CANCEL_RETRIEVAL pfnCancel,    __in_opt const void *pvArg,    __in DWORD dwFlags,    __reserved void *pvReserved);																		
CryptInstallDefaultContext(    __in HCRYPTPROV hCryptProv,    __in DWORD dwDefaultType,    __in_opt const void *pvDefaultPara,    __in DWORD dwFlags,    __reserved void *pvReserved,    __out HCRYPTDEFAULTCONTEXT *phDefaultContext    );																		
CryptInstallOIDFunctionAddress(__in_opt HMODULE hModule, __in DWORD dwEncodingType,    __in LPCSTR pszFuncName,    __in DWORD cFuncEntry,    __in_ecount(cFuncEntry) const CRYPT_OID_FUNC_ENTRY rgFuncEntry[],    __in DWORD dwFlags    );																		
CryptMemAlloc (    __in ULONG cbSize    );																		
CryptMemFree (    __in_opt LPVOID pv    );																		
CryptMemRealloc (    __in_opt LPVOID pv,    __in ULONG cbSize    );																		
CryptMsgCalculateEncodedLength(    __in DWORD dwMsgEncodingType,    __in DWORD dwFlags,    __in DWORD dwMsgType,    __in void const *pvMsgEncodeInfo,    __in_opt LPSTR pszInnerContentObjID,    __in DWORD cbData    );																		
CryptMsgClose(    __in_opt HCRYPTMSG hCryptMsg    );																		
CryptMsgControl(    __in HCRYPTMSG hCryptMsg,    __in DWORD dwFlags,    __in DWORD dwCtrlType,    __in_opt void const *pvCtrlPara    );																		
CryptMsgCountersign(    __in HCRYPTMSG hCryptMsg,    __in DWORD dwIndex,    __in DWORD cCountersigners,    __in_ecount(cCountersigners) PCMSG_SIGNER_ENCODE_INFO rgCountersigners    );																		
CryptMsgCountersignEncoded(    __in DWORD dwEncodingType,    __in_bcount(cbSignerInfo) PBYTE pbSignerInfo,    __in DWORD cbSignerInfo,    __in DWORD cCountersigners,    __in_ecount(cCountersigners) PCMSG_SIGNER_ENCODE_INFO rgCountersigners,    __out_bcount_part_opt(*pcbCountersignature, *pcbCountersignature) PBYTE pbCountersignature,    __inout PDWORD pcbCountersignature    );																		
CryptMsgDuplicate(    __in_opt HCRYPTMSG hCryptMsg    );																		
CryptMsgEncodeAndSignCTL(    __in DWORD dwMsgEncodingType,    __in PCTL_INFO pCtlInfo,    __in PCMSG_SIGNED_ENCODE_INFO pSignInfo,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbEncoded, *pcbEncoded) BYTE *pbEncoded,    __inout DWORD *pcbEncoded    );																		
CryptMsgGetAndVerifySigner(    __in HCRYPTMSG hCryptMsg,    __in DWORD cSignerStore,    __in_ecount_opt(cSignerStore) HCERTSTORE *rghSignerStore,    __in DWORD dwFlags,    __deref_opt_out PCCERT_CONTEXT *ppSigner,    __inout_opt DWORD *pdwSignerIndex    );																		
CryptMsgGetParam(    __in HCRYPTMSG hCryptMsg,    __in DWORD dwParamType,    __in DWORD dwIndex,    __out_bcount_part_opt(*pcbData, *pcbData) void *pvData,    __inout DWORD *pcbData    );																		
CryptMsgOpenToDecode(    __in DWORD dwMsgEncodingType,    __in DWORD dwFlags,    __in DWORD dwMsgType,    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __reserved PCERT_INFO pRecipientInfo,    __in_opt PCMSG_STREAM_INFO pStreamInfo    );																		
CryptMsgOpenToEncode(    __in DWORD dwMsgEncodingType,    __in DWORD dwFlags,    __in DWORD dwMsgType,    __in void const *pvMsgEncodeInfo,    __in_opt LPSTR pszInnerContentObjID,    __in_opt PCMSG_STREAM_INFO pStreamInfo    );																		
CryptMsgSignCTL(    __in DWORD dwMsgEncodingType,    __in_bcount(cbCtlContent) BYTE *pbCtlContent,    __in DWORD cbCtlContent,    __in PCMSG_SIGNED_ENCODE_INFO pSignInfo,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbEncoded, *pcbEncoded) BYTE *pbEncoded,    __inout DWORD *pcbEncoded    );																		
CryptMsgUpdate(    __in HCRYPTMSG hCryptMsg,    __in_bcount_opt(cbData) const BYTE *pbData,    __in DWORD cbData,    __in BOOL fFinal    );																		
CryptMsgVerifyCountersignatureEncoded(    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in DWORD dwEncodingType,    __in_bcount(cbSignerInfo) PBYTE pbSignerInfo,    __in DWORD cbSignerInfo,    __in_bcount(cbSignerInfoCountersignature) PBYTE pbSignerInfoCountersignature,    __in DWORD cbSignerInfoCountersignature,    __in PCERT_INFO pciCountersigner    );																		
CryptMsgVerifyCountersignatureEncodedEx(    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in DWORD dwEncodingType,    __in_bcount(cbSignerInfo) PBYTE pbSignerInfo,    __in DWORD cbSignerInfo,    __in_bcount(cbSignerInfoCountersignature) PBYTE pbSignerInfoCountersignature,    __in DWORD cbSignerInfoCountersignature,    __in DWORD dwSignerType,    __in void *pvSigner,    __reserved DWORD dwFlags,    __reserved void *pvReserved    );																		
CryptProtectData(    __in            DATA_BLOB*      pDataIn,    __in_opt        LPCWSTR         szDataDescr,    __in_opt        DATA_BLOB*      pOptionalEntropy,    __reserved      PVOID           pvReserved,    __in_opt        CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,    __in            DWORD           dwFlags,    __out           DATA_BLOB*      pDataOut);																		
CryptProtectMemory(    __inout         LPVOID          pDataIn,__in DWORD cbDataIn,__in DWORD dwFlags);																		
CryptQueryObject(    __in DWORD                    dwObjectType,    __in const void               *pvObject,    __in DWORD                    dwExpectedContentTypeFlags,    __in DWORD                    dwExpectedFormatTypeFlags,    __in DWORD                    dwFlags,    __out_opt DWORD               *pdwMsgAndCertEncodingType,    __out_opt DWORD               *pdwContentType,    __out_opt DWORD               *pdwFormatType,    __out_opt HCERTSTORE          *phCertStore,    __out_opt HCRYPTMSG           *phMsg,    __deref_opt_out_opt const void **ppvContext    );																		
CryptRegisterDefaultOIDFunction(    __in DWORD dwEncodingType,    __in LPCSTR pszFuncName,    __in DWORD dwIndex,    __in LPCWSTR pwszDll    );																		
CryptRegisterOIDFunction(    __in DWORD dwEncodingType,    __in LPCSTR pszFuncName,    __in LPCSTR pszOID,    __in_opt LPCWSTR pwszDll,    __in_opt LPCSTR pszOverrideFuncName    );																		
CryptRegisterOIDInfo(    __in PCCRYPT_OID_INFO pInfo,    __in DWORD dwFlags    );																		
CryptReleaseContext(    __in    HCRYPTPROV  hProv,    __in    DWORD       dwFlags    );																		
CryptReleaseContext(    HCRYPTPROV hProv,    ULONG_PTR dwFlags    );																		
CryptRetrieveObjectByUrlA ( __in LPCSTR pszUrl, __in_opt LPCSTR pszObjectOid, __in DWORD dwRetrievalFlags, __in DWORD dwTimeout, __deref_out LPVOID* ppvObject, __in_opt HCRYPTASYNC hAsyncRetrieve, __in_opt PCRYPT_CREDENTIALS pCredentials, __in_opt LPVOID pvVerify, __inout_opt PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);																		
CryptRetrieveObjectByUrlW ( __in LPCWSTR pszUrl, __in_opt LPCSTR pszObjectOid, __in DWORD dwRetrievalFlags, __in DWORD dwTimeout, __deref_out LPVOID* ppvObject, __in_opt HCRYPTASYNC hAsyncRetrieve, __in_opt PCRYPT_CREDENTIALS pCredentials, __in_opt LPVOID pvVerify, __inout_opt PCRYPT_RETRIEVE_AUX_INFO pAuxInfo);																		
CryptRetrieveTimeStamp( __in LPCWSTR wszUrl, DWORD dwRetrievalFlags, DWORD dwTimeout, __in LPCSTR pszHashId, __in_opt const CRYPT_TIMESTAMP_PARA *pPara, __in_bcount(cbData) const BYTE  *pbData, DWORD cbData, __deref_out PCRYPT_TIMESTAMP_CONTEXT *ppTsContext, __deref_out_opt PCCERT_CONTEXT *ppTsSigner, __out_opt HCERTSTORE  *phStore );																		
CryptSetAsyncParam (    __in HCRYPTASYNC hAsync,    __in LPSTR pszParamOid,    __in_opt LPVOID pvParam,    __callback PFN_CRYPT_ASYNC_PARAM_FREE_FUNC pfnFree    );																		
CryptSetHashParam(    __in    HCRYPTHASH  hHash,    __in    DWORD       dwParam,    __in    CONST BYTE  *pbData,    __in    DWORD       dwFlags    );																		
CryptSetHashParam(    HCRYPTHASH hHash,    DWORD dwParam,    BYTE*pbData,    DWORD dwFlags    );																		
CryptSetKeyIdentifierProperty(    __in const CRYPT_HASH_BLOB *pKeyIdentifier,    __in DWORD dwPropId,    __in DWORD dwFlags,    __in_opt LPCWSTR pwszComputerName,    __reserved void *pvReserved,    __in_opt const void *pvData    );																		
CryptSetKeyParam(    __in    HCRYPTKEY   hKey,    __in    DWORD       dwParam,    __in    CONST BYTE  *pbData,    __in    DWORD       dwFlags    );																		
CryptSetKeyParam(    HCRYPTKEY hKey,    DWORD dwParam,    BYTE *pbData,    DWORD dwFlags    );																		
CryptSetOIDFunctionValue(    __in DWORD dwEncodingType,    __in LPCSTR pszFuncName,    __in LPCSTR pszOID,    __in_opt LPCWSTR pwszValueName,    __in DWORD dwValueType,    __in_bcount_opt(cbValueData) const BYTE *pbValueData,    __in DWORD cbValueData    );																		
CryptSetProviderA(    __in    LPCSTR    pszProvName,    __in    DWORD       dwProvType    );																		
CryptSetProviderA(    LPCSTR pszProvName,    DWORD dwProvType    );																		
CryptSetProviderExA(    __in        LPCSTR pszProvName,    __in        DWORD dwProvType,    __reserved  DWORD *pdwReserved,    __in        DWORD dwFlags    );																		
CryptSetProviderExA(    LPCSTR pszProvName,    DWORD dwProvType,    DWORD *pdwReserved,    DWORD dwFlags    );																		
CryptSetProviderExW(    __in        LPCWSTR pszProvName,    __in        DWORD dwProvType,    __reserved  DWORD *pdwReserved,    __in        DWORD dwFlags    );																		
CryptSetProviderExW(    LPCWSTR pszProvName,    DWORD dwProvType,    DWORD *pdwReserved,    DWORD dwFlags    );																		
CryptSetProviderW(    __in    LPCWSTR    pszProvName,    __in    DWORD       dwProvType    );																		
CryptSetProviderW(    LPCWSTR pszProvName,    DWORD dwProvType    );																		
CryptSetProvParam(    __in    HCRYPTPROV  hProv,    __in    DWORD       dwParam,    __in    CONST BYTE  *pbData,    __in    DWORD       dwFlags    );																		
CryptSetProvParam(    HCRYPTPROV hProv,    DWORD dwParam,    BYTE*pbData,    DWORD dwFlags    );																		
CryptSignAndEncodeCertificate(    __in_opt HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,__in_opt DWORD dwKeySpec,__in DWORD dwCertEncodingType,__in LPCSTR lpszStructType,__in const void *pvStructInfo,    __in PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,    __in_opt const void *pvHashAuxInfo,    __out_bcount_part_opt(*pcbEncoded, *pcbEncoded) BYTE *pbEncoded,    __inout DWORD *pcbEncoded    );																		
CryptSignAndEncryptMessage(    __in PCRYPT_SIGN_MESSAGE_PARA pSignPara,    __in PCRYPT_ENCRYPT_MESSAGE_PARA pEncryptPara,    __in DWORD cRecipientCert,    __in_ecount(cRecipientCert) PCCERT_CONTEXT rgpRecipientCert[],    __in_bcount(cbToBeSignedAndEncrypted) const BYTE *pbToBeSignedAndEncrypted,    __in DWORD cbToBeSignedAndEncrypted,    __out_bcount_part_opt(*pcbSignedAndEncryptedBlob, *pcbSignedAndEncryptedBlob) BYTE *pbSignedAndEncryptedBlob,    __inout DWORD *pcbSignedAndEncryptedBlob    );																		
CryptSignCertificate(    __in_opt HCRYPTPROV_OR_NCRYPT_KEY_HANDLE hCryptProvOrNCryptKey,    __in_opt DWORD dwKeySpec,__in DWORD dwCertEncodingType,__in_bcount(cbEncodedToBeSigned) const BYTE *pbEncodedToBeSigned,__in DWORD cbEncodedToBeSigned,    __in PCRYPT_ALGORITHM_IDENTIFIER pSignatureAlgorithm,    __in_opt const void *pvHashAuxInfo,    __out_bcount_part_opt(*pcbSignature, *pcbSignature) BYTE *pbSignature,    __inout DWORD *pcbSignature    );																		
CryptSignHashA(    __in                                          HCRYPTHASH  hHash,    __in                                          DWORD       dwKeySpec,    __in_opt                                      LPCSTR    szDescription,    __in                                          DWORD       dwFlags,    __out_bcount_part_opt(*pdwSigLen, *pdwSigLen) BYTE        *pbSignature,    __inout                                       DWORD       *pdwSigLen    );																		
CryptSignHashA(    HCRYPTHASH hHash,    DWORD dwKeySpec,    LPCSTR sDescription,    DWORD dwFlags,    BYTE *pbSignature,    DWORD *pdwSigLen    );																		
CryptSignHashA(    HCRYPTHASH hHash,    DWORD dwKeySpec,    LPCSTR szDescription,    DWORD dwFlags,    BYTE *pbSignature,    DWORD *pdwSigLen    );																		
CryptSignHashW(    __in                                          HCRYPTHASH  hHash,    __in                                          DWORD       dwKeySpec,    __in_opt                                      LPCWSTR    szDescription,    __in                                          DWORD       dwFlags,    __out_bcount_part_opt(*pdwSigLen, *pdwSigLen) BYTE        *pbSignature,    __inout                                       DWORD       *pdwSigLen    );																		
CryptSignHashW(    HCRYPTHASH hHash,    DWORD dwKeySpec,    LPCWSTR sDescription,    DWORD dwFlags,    BYTE *pbSignature,    DWORD *pdwSigLen    );																		
CryptSignHashW(    HCRYPTHASH hHash,    DWORD dwKeySpec,    LPCWSTR szDescription,    DWORD dwFlags,    BYTE *pbSignature,    DWORD *pdwSigLen    );																		
CryptSignMessage(    __in PCRYPT_SIGN_MESSAGE_PARA pSignPara,    __in BOOL fDetachedSignature,    __in DWORD cToBeSigned,    __in_ecount_opt(cToBeSigned) const BYTE *rgpbToBeSigned[],    __in_ecount(cToBeSigned) DWORD rgcbToBeSigned[],    __out_bcount_part_opt(*pcbSignedBlob, *pcbSignedBlob) BYTE *pbSignedBlob,    __inout DWORD *pcbSignedBlob    );																		
CryptSignMessageWithKey(    __in PCRYPT_KEY_SIGN_MESSAGE_PARA pSignPara,    __in_bcount(cbToBeSigned) const BYTE *pbToBeSigned,    __in DWORD cbToBeSigned,    __out_bcount_part_opt(*pcbSignedBlob, *pcbSignedBlob) BYTE *pbSignedBlob,    __inout DWORD *pcbSignedBlob    );																		
CryptStringToBinaryA(    __in_ecount(cchString) LPCSTR pszString,    __in DWORD cchString,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbBinary, *pcbBinary) BYTE *pbBinary,    __inout DWORD  *pcbBinary,    __out_opt DWORD *pdwSkip,    __out_opt DWORD *pdwFlags    );																		
CryptStringToBinaryW(    __in_ecount(cchString) LPCWSTR pszString,    __in DWORD cchString,    __in DWORD dwFlags,    __out_bcount_part_opt(*pcbBinary, *pcbBinary) BYTE *pbBinary,    __inout DWORD  *pcbBinary,    __out_opt DWORD *pdwSkip,    __out_opt DWORD *pdwFlags    );																		
CryptUIDlgCertMgr(    IN                  PCCRYPTUI_CERT_MGR_STRUCT pCryptUICertMgr    );																		
CryptUIDlgSelectCertificateFromStore(    IN HCERTSTORE hCertStore,    IN OPTIONAL HWND hwnd,  IN OPTIONAL LPCWSTR pwszTitle,    IN OPTIONAL LPCWSTR pwszDisplayString,    IN DWORD dwDontUseColumn,    IN DWORD dwFlags,    IN void *pvReserved    );																		
CryptUIDlgViewCertificateA(        IN  PCCRYPTUI_VIEWCERTIFICATE_STRUCTA   pCertViewInfo, OUT BOOL *pfPropertiesChanged);																		
CryptUIDlgViewCertificateW(        IN  PCCRYPTUI_VIEWCERTIFICATE_STRUCTW   pCertViewInfo, OUT BOOL *pfPropertiesChanged);																		
CryptUIDlgViewContext(    IN DWORD dwContextType,    IN const void *pvContext,    IN OPTIONAL HWND hwnd,IN OPTIONAL LPCWSTR pwszTitle,IN DWORD dwFlags,IN void *pvReserved);																		
CryptUIWizDigitalSign(    IN                  DWORD                               dwFlags,    IN     OPTIONAL     HWND                                hwndParent,    IN     OPTIONAL     LPCWSTR                             pwszWizardTitle,    IN                  PCCRYPTUI_WIZ_DIGITAL_SIGN_INFO     pDigitalSignInfo,    OUT    OPTIONAL     PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT *ppSignContext    );																		
CryptUIWizExport(     DWORD                                  dwFlags,     HWND                                   hwndParent,     LPCWSTR                                pwszWizardTitle,     PCCRYPTUI_WIZ_EXPORT_INFO              pExportInfo,     void                                   *pvoid);																		
CryptUIWizFreeDigitalSignContext(    IN                  PCCRYPTUI_WIZ_DIGITAL_SIGN_CONTEXT  pSignContext    );																		
CryptUIWizImport(     DWORD                               dwFlags,     HWND                                hwndParent,     LPCWSTR                             pwszWizardTitle,     PCCRYPTUI_WIZ_IMPORT_SRC_INFO       pImportSrc,     HCERTSTORE                          hDestCertStore);																		
CryptUninstallCancelRetrieval(        __in DWORD dwFlags,        __reserved void *pvReserved        );																		
CryptUninstallDefaultContext(    __in_opt HCRYPTDEFAULTCONTEXT hDefaultContext,    __in DWORD dwFlags,    __reserved void *pvReserved    );																		
CryptUnprotectData(    __in            DATA_BLOB*      pDataIn,__deref_opt_out_opt LPWSTR*     ppszDataDescr,__in_opt DATA_BLOB* pOptionalEntropy, __reserved PVOID pvReserved, __in_opt CRYPTPROTECT_PROMPTSTRUCT*  pPromptStruct,    __in            DWORD           dwFlags,    __out           DATA_BLOB*      pDataOut    );																		
CryptUnprotectMemory(    __inout         LPVOID          pDataIn,__in DWORD cbDataIn,__in DWORD dwFlags);																		
CryptUnregisterDefaultOIDFunction(    __in DWORD dwEncodingType,    __in LPCSTR pszFuncName,    __in LPCWSTR pwszDll    );																		
CryptUnregisterOIDFunction(    __in DWORD dwEncodingType,    __in LPCSTR pszFuncName,    __in LPCSTR pszOID    );																		
CryptUnregisterOIDInfo(    __in PCCRYPT_OID_INFO pInfo    );																		
CryptUpdateProtectedState(    __in_opt        PSID            pOldSid,    __in_opt        LPCWSTR         pwszOldPassword,    __in            DWORD           dwFlags,    __out_opt       DWORD           *pdwSuccessCount,    __out_opt       DWORD           *pdwFailureCount);																		
CryptVerifyCertificateSignature(    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in DWORD dwCertEncodingType,    __in_bcount(cbEncoded) const BYTE *pbEncoded,    __in DWORD cbEncoded,    __in PCERT_PUBLIC_KEY_INFO pPublicKey    );																		
CryptVerifyCertificateSignatureEx(    __in_opt HCRYPTPROV_LEGACY hCryptProv,    __in DWORD dwCertEncodingType,    __in DWORD dwSubjectType,    __in void *pvSubject,    __in DWORD dwIssuerType,    __in_opt void *pvIssuer,    __in DWORD dwFlags,    __reserved void *pvReserved    );																		
CryptVerifyDetachedMessageHash(    __in PCRYPT_HASH_MESSAGE_PARA pHashPara,    __in_bcount(cbDetachedHashBlob) BYTE *pbDetachedHashBlob,    __in DWORD cbDetachedHashBlob,    __in DWORD cToBeHashed,    __in_ecount(cToBeHashed) const BYTE *rgpbToBeHashed[],    __in_ecount(cToBeHashed) DWORD rgcbToBeHashed[],    __out_bcount_part_opt(*pcbComputedHash, *pcbComputedHash) BYTE *pbComputedHash,    __inout_opt DWORD *pcbComputedHash    );																		
CryptVerifyDetachedMessageSignature(    __in PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,    __in DWORD dwSignerIndex,    __in_bcount(cbDetachedSignBlob) const BYTE *pbDetachedSignBlob,    __in DWORD cbDetachedSignBlob,    __in DWORD cToBeSigned,    __in_ecount(cToBeSigned) const BYTE *rgpbToBeSigned[],    __in_ecount(cToBeSigned) DWORD rgcbToBeSigned[],    __deref_opt_out_opt PCCERT_CONTEXT *ppSignerCert    );																		
CryptVerifyMessageHash(    __in PCRYPT_HASH_MESSAGE_PARA pHashPara,    __in_bcount(cbHashedBlob) BYTE *pbHashedBlob,    __in DWORD cbHashedBlob,    __out_bcount_part_opt(*pcbToBeHashed, *pcbToBeHashed) BYTE *pbToBeHashed,    __inout_opt DWORD *pcbToBeHashed,    __out_bcount_part_opt(*pcbComputedHash, *pcbComputedHash) BYTE *pbComputedHash,    __inout_opt DWORD *pcbComputedHash    );																		
CryptVerifyMessageSignature(    __in PCRYPT_VERIFY_MESSAGE_PARA pVerifyPara,    __in DWORD dwSignerIndex,    __in_bcount(cbSignedBlob) const BYTE *pbSignedBlob,    __in DWORD cbSignedBlob,    __out_bcount_part_opt(*pcbDecoded, *pcbDecoded) BYTE *pbDecoded,    __inout_opt DWORD *pcbDecoded,    __deref_opt_out_opt PCCERT_CONTEXT *ppSignerCert    );																		
CryptVerifyMessageSignatureWithKey(    __in PCRYPT_KEY_VERIFY_MESSAGE_PARA pVerifyPara,    __in_opt PCERT_PUBLIC_KEY_INFO pPublicKeyInfo,    __in_bcount(cbSignedBlob) const BYTE *pbSignedBlob,    __in DWORD cbSignedBlob,    __out_bcount_part_opt(*pcbDecoded, *pcbDecoded) BYTE *pbDecoded,    __inout_opt DWORD *pcbDecoded    );																		
CryptVerifySignatureA(    __in                    HCRYPTHASH  hHash,    __in_bcount(dwSigLen)   CONST BYTE  *pbSignature,    __in                    DWORD       dwSigLen,    __in                    HCRYPTKEY   hPubKey,    __in_opt                LPCSTR    szDescription,    __in                    DWORD       dwFlags    );																		
CryptVerifySignatureA(    HCRYPTHASH hHash,    CONST BYTE *pbSignature,    DWORD dwSigLen,    HCRYPTKEY hPubKey,    LPCSTR sDescription,    DWORD dwFlags    );																		
CryptVerifySignatureA(    HCRYPTHASH hHash,    CONST BYTE *pbSignature,    DWORD dwSigLen,    HCRYPTKEY hPubKey,    LPCSTR szDescription,    DWORD dwFlags    );																		
CryptVerifySignatureW(    __in                    HCRYPTHASH  hHash,    __in_bcount(dwSigLen)   CONST BYTE  *pbSignature,    __in                    DWORD       dwSigLen,    __in                    HCRYPTKEY   hPubKey,    __in_opt                LPCWSTR    szDescription,    __in                    DWORD       dwFlags    );																		
CryptVerifySignatureW(    HCRYPTHASH hHash,    CONST BYTE *pbSignature,    DWORD dwSigLen,    HCRYPTKEY hPubKey,    LPCWSTR sDescription,    DWORD dwFlags    );																		
CryptVerifySignatureW(    HCRYPTHASH hHash,    CONST BYTE *pbSignature,    DWORD dwSigLen,    HCRYPTKEY hPubKey,    LPCWSTR szDescription,    DWORD dwFlags    );																		
CryptVerifyTimeStampSignature (    __in_bcount( cbTSContentInfo )                                const BYTE  *pbTSContentInfo,                                DWORD       cbTSContentInfo,    __in_bcount_opt(cbData)                                const BYTE  *pbData,                                DWORD 	    cbData,    __in_opt                    HCERTSTORE  hAdditionalStore,    __deref_out                 PCRYPT_TIMESTAMP_CONTEXT   *ppTsContext,    __deref_out_opt             PCCERT_CONTEXT *ppTsSigner,    __out_opt                   HCERTSTORE  *phStore    );																	
CryptXmlEncode(    __in            HCRYPTXML           hCryptXml,                    CRYPT_XML_CHARSET   dwCharset,    __in_ecount_opt(cProperty)                     const CRYPT_XML_PROPERTY* rgProperty,     __in            ULONG               cProperty,     __inout         void                *pvCallbackState,    __in            PFN_CRYPT_XML_WRITE_CALLBACK pfnWrite    );																		
CryptXmlEnumAlgorithmInfo(    __in            DWORD               dwGroupId,    __in            DWORD               dwFlags,    __inout_opt     void                *pvArg,    __callback PFN_CRYPT_XML_ENUM_ALG_INFO pfnEnumAlgInfo    );																		
CryptXmlGetTransforms(    __deref_out const CRYPT_XML_TRANSFORM_CHAIN_CONFIG   **ppConfig    );																		
CryptXmlOpenToDecode(    __in_opt        const CRYPT_XML_TRANSFORM_CHAIN_CONFIG    *pConfig,                    DWORD               dwFlags,    __in_ecount_opt(cProperty)                     const CRYPT_XML_PROPERTY* rgProperty,     __in            ULONG               cProperty,     __in            const CRYPT_XML_BLOB *pEncoded,    __deref_out     HCRYPTXML           *phCryptXml    );																		
CryptXmlOpenToEncode(    __in_opt        const CRYPT_XML_TRANSFORM_CHAIN_CONFIG    *pConfig,                    DWORD               dwFlags,    __in_opt        LPCWSTR             wszId,    __in_ecount_opt(cProperty)                     const CRYPT_XML_PROPERTY* rgProperty,     __in            ULONG               cProperty,     __in_opt        const CRYPT_XML_BLOB *pEncoded,    __deref_out     HCRYPTXML           *phSignature    );																		
DavAddConnection(    __inout HANDLE *ConnectionHandle,    __in LPCWSTR RemoteName,    __in_opt LPCWSTR UserName,    __in_opt LPCWSTR Password,    __in_bcount(CertSize) PBYTE ClientCert,    __in DWORD CertSize    );																		
DavCancelConnectionsToServer(    __in LPWSTR lpName,    BOOL fForce    );																		
DavDeleteConnection(    __in HANDLE ConnectionHandle    );																		
DavFlushFile(    __in HANDLE hFile    );																		
DavGetExtendedError(    __in HANDLE hFile,    __out DWORD *ExtError,    __out_ecount(*cChSize) LPWSTR ExtErrorString,    __inout DWORD *cChSize    );																		
DavGetHTTPFromUNCPath (    __in LPCWSTR  UncPath,    __out_ecount(*lpSize) LPWSTR HttpPath,    IN OUT  LPDWORD lpSize    );																		
DavGetTheLockOwnerOfTheFile(    __in LPCWSTR FileName,    __out_bcount_opt(*LockOwnerNameLengthInBytes) PWSTR LockOwnerName,    __inout PULONG LockOwnerNameLengthInBytes    );																		
DavGetUNCFromHTTPPath (    __in LPCWSTR  HttpPath,    __out_ecount(*lpSize) LPWSTR UncPath,    IN OUT  LPDWORD lpSize    );																		
DavInvalidateCache(	__in LPWSTR URLName	);																
DavRegisterAuthCallback(__in PFNDAVAUTHCALLBACK CallBack,                         __in ULONG Version);																		
DavUnregisterAuthCallback(__in OPAQUE_HANDLE hCallback);																		
DbgHelpCreateUserDump(    __in_opt LPCSTR FileName,    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,    __in_opt PVOID UserData    );																		
DbgHelpCreateUserDump(    __in_opt LPCSTR FileName,    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,    __in_opt PVOID UserData    );																		
DbgHelpCreateUserDumpW(    __in_opt LPCWSTR FileName,    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,    __in_opt PVOID UserData    );																		
DbgHelpCreateUserDumpW(    __in_opt LPCWSTR FileName,    __in PDBGHELP_CREATE_USER_DUMP_CALLBACK Callback,    __in_opt PVOID UserData    );																		
DdAttachSurface(    LPDDRAWI_DDRAWSURFACE_LCL   pSurfaceFrom,    LPDDRAWI_DDRAWSURFACE_LCL   pSurfaceTo    );																		
DdChangeSurfacePointer(    LPDDRAWI_DDRAWSURFACE_LCL   pSurfaceLocal,    LPDDRAWI_DIRECTDRAW_GBL     pDirectDrawGlobal,    LPVOID                      pSurfacePointer    );																		
DdCreateDIBSection(    HDC               hdc,    CONST BITMAPINFO* pbmi,    UINT              iUsage,    VOID**            ppvBits,    HANDLE            hSectionApp,    DWORD             dwOffset    );																		
DdCreateDirectDrawObject(    LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal,    HDC                     hdc    );																		
DdCreateSurfaceObject(    LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal,    BOOL                      bPrimarySurface    );																		
DdDeleteDirectDrawObject(    LPDDRAWI_DIRECTDRAW_GBL   pDirectDrawGlobal    );																		
DdDeleteSurfaceObject(    LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal    );																		
DdeAbandonTransaction(    __in DWORD idInst,    __in HCONV hConv,    __in DWORD idTransaction);																		
DdeAccessData(    __in HDDEDATA hData,    __out_opt LPDWORD pcbDataSize);																		
DdeAddData(    __in HDDEDATA hData,    __in_bcount(cb) LPBYTE pSrc,    __in DWORD cb,    __in DWORD cbOff);																		
DdeClientTransaction(    __in_opt LPBYTE pData,    __in DWORD cbData,    __in HCONV hConv,    __in_opt HSZ hszItem,    __in UINT wFmt,    __in UINT wType,    __in DWORD dwTimeout,    __out_opt LPDWORD pdwResult);																		
DdeCmpStringHandles(    __in HSZ hsz1,    __in HSZ hsz2);																		
DdeConnect(    __in DWORD idInst,    __in HSZ hszService,    __in HSZ hszTopic,    __in_opt PCONVCONTEXT pCC);																		
DdeConnectList(    __in DWORD idInst,    __in HSZ hszService,    __in HSZ hszTopic,    __in HCONVLIST hConvList,    __in_opt PCONVCONTEXT pCC);																		
DdeCreateDataHandle(    __in DWORD idInst,    __in_bcount_opt(cb) LPBYTE pSrc,    __in DWORD cb,    __in DWORD cbOff,    __in_opt HSZ hszItem,    __in UINT wFmt,    __in UINT afCmd);																		
DdeCreateStringHandleA(    __in DWORD idInst,    __in LPCSTR psz,    __in int iCodePage);																		
DdeCreateStringHandleW(    __in DWORD idInst,    __in LPCWSTR psz,    __in int iCodePage);																		
DdeDisconnect(    __in HCONV hConv);																		
DdeDisconnectList(    __in HCONVLIST hConvList);																		
DdeEnableCallback(    __in DWORD idInst,    __in HCONV hConv,    __in UINT wCmd);																		
DdeFreeDataHandle(    __in HDDEDATA hData);																		
DdeFreeStringHandle(    __in DWORD idInst,    __in HSZ hsz);																		
DdeGetData(    __in HDDEDATA hData,    __out_bcount_opt(cbMax) LPBYTE pDst,    __in DWORD cbMax,    __in DWORD cbOff);																		
DdeGetLastError(    __in DWORD idInst);																		
DdeImpersonateClient(    __in HCONV hConv);																		
DdeInitializeA(    __inout LPDWORD pidInst,    __in PFNCALLBACK pfnCallback,    __in DWORD afCmd,    __reserved DWORD ulRes);																		
DdeInitializeW(    __inout LPDWORD pidInst,    __in PFNCALLBACK pfnCallback,    __in DWORD afCmd,    __reserved DWORD ulRes);																		
DdeKeepStringHandle(    __in DWORD idInst,    __in HSZ hsz);																		
DdeNameService(    __in DWORD idInst,    __in_opt HSZ hsz1,    __in_opt HSZ hsz2,    __in UINT afCmd);																		
DdePostAdvise(    __in DWORD idInst,    __in HSZ hszTopic,    __in HSZ hszItem);																		
DdeQueryConvInfo(    __in HCONV hConv,    __in DWORD idTransaction,    __inout PCONVINFO pConvInfo);																		
DdeQueryNextServer(    __in HCONVLIST hConvList,    __in HCONV hConvPrev);																		
DdeQueryStringA(    __in DWORD idInst,    __in HSZ hsz,    __out_ecount_opt(cchMax) LPSTR psz,    __in DWORD cchMax,    __in int iCodePage);																		
DdeQueryStringW(    __in DWORD idInst,    __in HSZ hsz,    __out_ecount_opt(cchMax) LPWSTR psz,    __in DWORD cchMax,    __in int iCodePage);																		
DdeReconnect(    __in HCONV hConv);																		
DdeSetQualityOfService(    HWND hwndClient,    CONST SECURITY_QUALITY_OF_SERVICE *pqosNew,    PSECURITY_QUALITY_OF_SERVICE pqosPrev);																		
DdeSetUserHandle(    __in HCONV hConv,    __in DWORD id,    __in DWORD_PTR hUser);																		
DdeUnaccessData(    __in HDDEDATA hData);																		
DdeUninitialize(    __in DWORD idInst);																		
DdGetDC( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal, LPPALETTEENTRY pColorTable );																		
DdGetDxHandle( LPDDRAWI_DIRECTDRAW_LCL	pDDraw, LPDDRAWI_DDRAWSURFACE_LCL pSurface, BOOL bRelease );														
DdQueryDirectDrawObject( LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal,    LPDDHALINFO pHalInfo, LPDDHAL_DDCALLBACKS pDDCallbacks, LPDDHAL_DDSURFACECALLBACKS  pDDSurfaceCallbacks, LPDDHAL_DDPALETTECALLBACKS  pDDPaletteCallbacks, LPD3DHAL_CALLBACKS          pD3dCallbacks,    LPD3DHAL_GLOBALDRIVERDATA   pD3dDriverData,    LPDDHAL_DDEXEBUFCALLBACKS pD3dBufferCallbacks, LPDDSURFACEDESC pD3dTextureFormats, LPDWORD pdwFourCC, LPVIDMEM pvmList );																		
DdQueryDisplaySettingsUniqueness( VOID );																		
DdReenableDirectDrawObject( LPDDRAWI_DIRECTDRAW_GBL pDirectDrawGlobal, BOOL* pbNewMode );																		
DdReleaseDC( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal    );																		
DdResetVisrgn( LPDDRAWI_DDRAWSURFACE_LCL pSurfaceLocal, HWND hWnd );																		
DdSetGammaRamp( LPDDRAWI_DIRECTDRAW_LCL	pDDraw, HDC hdc, LPVOID lpGammaRamp );																	
DdSwapTextureHandles( LPDDRAWI_DIRECTDRAW_LCL	pDDraw, LPDDRAWI_DDRAWSURFACE_LCL  pDDSLcl1, LPDDRAWI_DDRAWSURFACE_LCL  pDDSLcl2 );																	
DdUnattachSurface( LPDDRAWI_DDRAWSURFACE_LCL pSurface, LPDDRAWI_DDRAWSURFACE_LCL pSurfaceAttached );																		
DeactivateActCtx( __in DWORD dwFlags, __in ULONG_PTR ulCookie );																		
DebugActiveProcess( __in DWORD dwProcessId );																		
DebugActiveProcessStop( __in DWORD dwProcessId );																		
DebugBreak( VOID );																		
DebugBreakProcess ( __in HANDLE Process );																		
DebugSetProcessKillOnExit( __in BOOL KillOnExit );																		
DecodePointer ( __in_opt PVOID Ptr );																		
DecodeSystemPointer ( __in_opt PVOID Ptr );	
DecryptFile( __in LPCSTR lpFileName, __reserved DWORD dwReserved );																		
DecryptFileA( __in LPCSTR lpFileName, __reserved DWORD dwReserved );																		
DecryptFileW(__in LPCWSTR lpFileName, __reserved DWORD dwReserved);	
DefDlgProc( __in HWND hDlg, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																	
DefDlgProcA( __in HWND hDlg, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
DefDlgProcW( __in HWND hDlg, __in UINT Msg, __in WPARAM wParam, __in LPARAM lParam);																		
DeferWindowPos(__in HDWP hWinPosInfo, __in HWND hWnd, __in_opt HWND hWndInsertAfter, __in int x, __in int y, __in int cx, __in int cy, __in UINT uFlags);																		
DefFrameProcA(__in HWND hWnd, __in_opt HWND hWndMDIClient, __in UINT uMsg, __in WPARAM wParam, __in LPARAM lParam);																		
DefFrameProcW(__in HWND hWnd, __in_opt HWND hWndMDIClient, __in UINT uMsg, __in WPARAM wParam, __in LPARAM lParam);																		
DefineDosDeviceA(__in DWORD dwFlags,__in LPCSTR lpDeviceName,__in_opt LPCSTR lpTargetPath);																		
DefineDosDeviceW(__in DWORD dwFlags,__in LPCWSTR lpDeviceName,__in_opt LPCWSTR lpTargetPath);																		
DefMDIChildProcA(__in HWND hWnd,__in UINT uMsg,__in WPARAM wParam,__in LPARAM lParam);																		
DefMDIChildProcW(__in HWND hWnd,__in UINT uMsg,__in WPARAM wParam,__in LPARAM lParam);																		
DefRawInputProc(__in_ecount(nInput) PRAWINPUT* paRawInput,__in INT nInput,__in UINT cbSizeHeader);																		
DefSubclassProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam);	
DefWindowProc(__in HWND hWnd,__in UINT Msg,__in WPARAM wParam,__in LPARAM lParam);																		
DefWindowProcA(__in HWND hWnd,__in UINT Msg,__in WPARAM wParam,__in LPARAM lParam);																		
DefWindowProcW(__in HWND hWnd,__in UINT Msg,__in WPARAM wParam,__in LPARAM lParam);																		
DeInitCompression(VOID);																		
DeleteAce ( __inout PACL pAcl, __in DWORD dwAceIndex );																		
DeleteAllGPOLinks(    __in LPOLESTR lpContainer);																		
DeleteAtom( __in ATOM nAtom );																		
DeleteBoundaryDescriptor(    __in HANDLE BoundaryDescriptor    );																		
DeleteClusterGroup(    __in HGROUP hGroup    );																		
DeleteClusterResource(    __in HRESOURCE hResource    );																		
DeleteClusterResourceType(    __in HCLUSTER hCluster,    __in LPCWSTR lpszResourceTypeName    );																		
DeleteColorSpace( __in HCOLORSPACE hcs);																		
DeleteCriticalSection(    __inout LPCRITICAL_SECTION lpCriticalSection    );																		
DeleteEnhMetaFile( __in_opt HENHMETAFILE hmf);																		
DeleteFiber(    __in LPVOID lpFiber    );																		
DeleteFileA(    __in LPCSTR lpFileName    );																		
DeleteFileTransactedA(    __in     LPCSTR lpFileName,    __in     HANDLE hTransaction    );																		
DeleteFileTransactedW(    __in     LPCWSTR lpFileName,    __in     HANDLE hTransaction    );																		
DeleteFileW(    __in LPCWSTR lpFileName    );																		
DeleteFormA(__in    HANDLE    hPrinter,__in    LPSTR   pFormName);																		
DeleteFormW(__in    HANDLE    hPrinter,__in    LPWSTR   pFormName);																		
DeleteGPOLink(    __in LPOLESTR lpGPO,    __in LPOLESTR lpContainer);																		
DeleteIPAddress(    __in ULONG NTEContext    );																		
DeleteIpForwardEntry(    __in PMIB_IPFORWARDROW pRoute    );																		
DeleteIpNetEntry(    __in PMIB_IPNETROW    pArpEntry    );																		
DeleteMenu(    __in HMENU hMenu,    __in UINT uPosition,    __in UINT uFlags);																		
DeleteMonitorA(__in_opt    LPSTR     pName,__in_opt    LPSTR     pEnvironment,__in        LPSTR     pMonitorName);																		
DeleteMonitorW(__in_opt    LPWSTR     pName,__in_opt    LPWSTR     pEnvironment,__in        LPWSTR     pMonitorName);																		
DeletePersistentTcpPortReservation(    __in USHORT StartPort,    __in USHORT NumberOfPorts    );																		
DeletePersistentUdpPortReservation(    __in USHORT StartPort,    __in USHORT NumberOfPorts    );																		
DeletePortA(__in_opt    LPSTR pName,__in        HWND    hWnd,__in        LPSTR pPortName);																		
DeletePortW(__in_opt    LPWSTR pName,__in        HWND    hWnd,__in        LPWSTR pPortName);																		
DeletePrinter(__inout HANDLE   hPrinter);																		
DeletePrinterConnectionA(__in LPSTR   pName);																		
DeletePrinterConnectionW(__in LPWSTR   pName);																		
DeletePrinterDataA(__in    HANDLE  hPrinter,__in    LPSTR pValueName);																		
DeletePrinterDataExA(__in    HANDLE   hPrinter,__in    LPCSTR pKeyName,__in    LPCSTR pValueName);																		
DeletePrinterDataExW(__in    HANDLE   hPrinter,__in    LPCWSTR pKeyName,__in    LPCWSTR pValueName);																		
DeletePrinterDataW(__in    HANDLE  hPrinter,__in    LPWSTR pValueName);																		
DeletePrinterDriverA(__in_opt    LPSTR    pName,__in_opt    LPSTR    pEnvironment,__in        LPSTR    pDriverName);																		
DeletePrinterDriverExA(__in_opt    LPSTR    pName,__in_opt    LPSTR    pEnvironment,__in        LPSTR    pDriverName,            DWORD      dwDeleteFlag,            DWORD      dwVersionFlag);																		
DeletePrinterDriverExW(__in_opt    LPWSTR    pName,__in_opt    LPWSTR    pEnvironment,__in        LPWSTR    pDriverName,            DWORD      dwDeleteFlag,            DWORD      dwVersionFlag);																		
DeletePrinterDriverW(__in_opt    LPWSTR    pName,__in_opt    LPWSTR    pEnvironment,__in        LPWSTR    pDriverName);																		
DeletePrinterKeyA(__in    HANDLE   hPrinter,__in    LPCSTR pKeyName);																		
DeletePrinterKeyW(__in    HANDLE   hPrinter,__in    LPCWSTR pKeyName);																		
DeletePrintProcessorA(__in_opt    LPSTR   pName,__in_opt    LPSTR   pEnvironment,__in        LPSTR   pPrintProcessorName);																		
DeletePrintProcessorW(__in_opt    LPWSTR   pName,__in_opt    LPWSTR   pEnvironment,__in        LPWSTR   pPrintProcessorName);																		
DeletePrintProvidorA(__in_opt    LPSTR   pName,__in_opt    LPSTR   pEnvironment,__in        LPSTR   pPrintProvidorName);																		
DeletePrintProvidorW(__in_opt    LPWSTR   pName,__in_opt    LPWSTR   pEnvironment,__in        LPWSTR   pPrintProvidorName);																		
DeleteProcThreadAttributeList(    __inout LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList    );																		
DeleteProfileA (    __in        LPCSTR    lpSidString,    __in_opt    LPCSTR    lpProfilePath,    __in_opt    LPCSTR    lpComputerName);																		
DeleteProfileW (    __in        LPCWSTR    lpSidString,    __in_opt    LPCWSTR    lpProfilePath,    __in_opt    LPCWSTR    lpComputerName);																		
DeleteProxyArpEntry(    __in  DWORD   dwAddress,    __in  DWORD   dwMask,    __in  DWORD   dwIfIndex    );																		
DeleteService(    __in        SC_HANDLE   hService    );																		
DeleteTimerQueue(    __in HANDLE TimerQueue    );																		
DeleteTimerQueueEx(    __in     HANDLE TimerQueue,    __in_opt HANDLE CompletionEvent    );																		
DeleteTimerQueueTimer(    __in_opt HANDLE TimerQueue,    __in     HANDLE Timer,    __in_opt HANDLE CompletionEvent    );																		
DeleteUmsCompletionList(    __in PUMS_COMPLETION_LIST UmsCompletionList    );																		
DeleteUmsThreadContext(    __in PUMS_CONTEXT UmsThread    );																		
DeleteUrlCacheEntry(    __in LPCSTR lpszUrlName    );																		
DeleteUrlCacheEntryA(    __in LPCSTR lpszUrlName    );																		
DeleteUrlCacheEntryW(    __in LPCWSTR lpszUrlName    );																		
DeleteUrlCacheGroup(    __in   GROUPID GroupId,    __in   DWORD   dwFlags,       __reserved LPVOID  lpReserved    );																		
DeleteVolumeMountPointA(    __in LPCSTR lpszVolumeMountPoint    );																		
DeleteVolumeMountPointW(    __in LPCWSTR lpszVolumeMountPoint    );																		
DeleteWpadCacheForNetworks(    __in WPAD_CACHE_DELETE	);																	
DeltaFree(    __in LPVOID lpMemory    );																		
DeltaNormalizeProvidedB(    __in DELTA_FILE_TYPE FileTypeSet,    __in DELTA_FLAG_TYPE NormalizeFlags,    __in DELTA_INPUT NormalizeOptions,    __inout_bcount( uSourceSize ) LPVOID lpSource,    __in SIZE_T uSourceSize    );																		
DequeueUmsCompletionListItems(    __in PUMS_COMPLETION_LIST UmsCompletionList,    __in DWORD WaitTimeOut,    __out PUMS_CONTEXT* UmsThreadList    );																		
DeregisterEventSource (    __in HANDLE hEventLog    );																		
DeregisterShellHookWindow(__in HWND hwnd);																		
DestroyAcceleratorTable(    __in HACCEL hAccel);																		
DestroyCaret(VOID);																		
DestroyCluster(    __in HCLUSTER    hCluster,    __in_opt PCLUSTER_SETUP_PROGRESS_CALLBACK   pfnProgressCallback,    __in_opt PVOID   pvCallbackArg,    __in     BOOL    fdeleteVirtualComputerObjects    );																		
DestroyClusterGroup(    __in HGROUP hGroup    );																		
DestroyCompression(    IN PVOID context);																		
DestroyCursor(__in HCURSOR hCursor);																		
DestroyEnvironmentBlock(    __in    LPVOID  lpEnvironment);																		
DestroyIcon(__in HICON hIcon);																		
DestroyMenu(    __in HMENU hMenu);																		
DestroyPrivateObjectSecurity (    __deref PSECURITY_DESCRIPTOR * ObjectDescriptor    );																		
DestroyWindow(    __in HWND hWnd);																		
DetachVirtualDisk(    __in     HANDLE                   VirtualDiskHandle,    __in     DETACH_VIRTUAL_DISK_FLAG Flags,    __in     ULONG                    ProviderSpecificFlags    );																		
DetectAutoProxyUrl(    __out_ecount(dwAutoProxyUrlLength) LPSTR lpszAutoProxyUrl,    __in DWORD dwAutoProxyUrlLength,    __in DWORD dwDetectFlags    );																		
DeviceCapabilitiesA(    __in                LPCSTR         pDevice,    __in_opt            LPCSTR         pPort,    __in                WORD             fwCapability,    __out_xcount_opt(1) LPSTR          pOutput,    __in_opt            CONST DEVMODEA   *pDevMode    );																		
DeviceCapabilitiesW(    __in                LPCWSTR         pDevice,    __in_opt            LPCWSTR         pPort,    __in                WORD             fwCapability,    __out_xcount_opt(1) LPWSTR          pOutput,    __in_opt            CONST DEVMODEW   *pDevMode    );																		
DeviceIoControl(    __in        HANDLE hDevice,    __in        DWORD dwIoControlCode,    __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer,    __in        DWORD nInBufferSize,    __out_bcount_part_opt(nOutBufferSize, *lpBytesReturned) LPVOID lpOutBuffer,    __in        DWORD nOutBufferSize,    __out_opt   LPDWORD lpBytesReturned,    __inout_opt LPOVERLAPPED lpOverlapped    );																		
DhcpCApiCleanup(VOID);																	
DhcpCApiInitialize(    OUT     LPDWORD                Version	);																	
DhcpDeRegisterParamChange(IN DWORD Flags, IN LPVOID Reserved, IN LPVOID Event);																	
DhcpRegisterParamChange(IN DWORD Flags,__reserved LPVOID Reserved, __in LPWSTR AdapterName, IN LPDHCPCAPI_CLASSID ClassId,IN  DHCPCAPI_PARAMS_ARRAY  Params,IN OUT  LPVOID Handle);																	
DhcpRemoveDNSRegistrations(VOID);																		
DhcpRequestParams(IN DWORD Flags, IN LPVOID Reserved, __in LPWSTR AdapterName, IN LPDHCPCAPI_CLASSID ClassId, IN DHCPCAPI_PARAMS_ARRAY  SendParams,IN OUT  DHCPCAPI_PARAMS_ARRAY  RecdParams,__out_bcount_part(*pSize, *pSize) LPBYTE  Buffer,__inout LPDWORD pSize,__in LPWSTR RequestIdStr);															
DhcpUndoRequestParams(__reserved DWORD Flags,__reserved LPVOID Reserved,__in LPWSTR AdapterName,__in LPWSTR RequestIdStr);																	
Dhcpv6CApiCleanup(VOID);																	
Dhcpv6CApiInitialize(OUT LPDWORD Version	);																	
Dhcpv6ReleasePrefix(__nullterminated IN LPWSTR				adapterName, IN LPDHCPV6CAPI_CLASSID     		classId,IN LPDHCPV6PrefixLeaseInformation	leaseInfo	);										
Dhcpv6RenewPrefix(IN __nullterminated LPWSTR		adapterName, IN LPDHCPV6CAPI_CLASSID 		pclassId,IN OUT LPDHCPV6PrefixLeaseInformation	prefixleaseInfo,__deref_out OUT DWORD*  pdwTimeToWait,IN DWORD );										
Dhcpv6RequestParams(BOOL forceNewInform,IN LPVOID reserved,__nullterminated IN LPWSTR adapterName,IN LPDHCPV6CAPI_CLASSID classId,IN OUT  DHCPV6CAPI_PARAMS_ARRAY 	recdParams,IN LPBYTE);                 								
Dhcpv6RequestPrefix(IN __nullterminated LPWSTR		adapterName, IN LPDHCPV6CAPI_CLASSID 		pclassId,IN OUT LPDHCPV6PrefixLeaseInformation	prefixleaseInfo,__deref_out OUT DWORD* 			pdwTimeToWait	);									
DialogBoxIndirectParamA(    __in_opt HINSTANCE hInstance,    __in LPCDLGTEMPLATEA hDialogTemplate,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
DialogBoxIndirectParamW(    __in_opt HINSTANCE hInstance,    __in LPCDLGTEMPLATEW hDialogTemplate,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
DialogBoxParamA(    __in_opt HINSTANCE hInstance,    __in LPCSTR lpTemplateName,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
DialogBoxParamW(    __in_opt HINSTANCE hInstance,    __in LPCWSTR lpTemplateName,    __in_opt HWND hWndParent,    __in_opt DLGPROC lpDialogFunc,    __in LPARAM dwInitParam);																		
DiInstallDevice(    __in_opt  HWND hwndParent,    __in      HDEVINFO DeviceInfoSet,    __in      PSP_DEVINFO_DATA DeviceInfoData,    __in_opt  PSP_DRVINFO_DATA DriverInfoData,    __in      DWORD Flags,    __out_opt PBOOL NeedReboot    );																		
DiInstallDriverA(    __in_opt  HWND hwndParent,    __in      LPCSTR InfPath,    __in      DWORD Flags,    __out_opt PBOOL NeedReboot    );																		
DiInstallDriverW(    __in_opt  HWND hwndParent,    __in      LPCWSTR InfPath,    __in      DWORD Flags,    __out_opt PBOOL NeedReboot    );																		
DiRollbackDriver(    __in      HDEVINFO DeviceInfoSet,    __in      PSP_DEVINFO_DATA DeviceInfoData,    __in_opt  HWND hwndParent,    __in      DWORD Flags,    __out_opt PBOOL NeedReboot    );																		
DisableMediaSense(    __out HANDLE *pHandle,    __in  OVERLAPPED *pOverLapped    );																		
DisableProcessWindowsGhosting(    VOID);																		
DisableThreadLibraryCalls (__in HMODULE hLibModule);																		
DisableThreadProfiling(__in HANDLE PerformanceDataHandle);																		
DisassociateCurrentThreadFromCallback(__inout PTP_CALLBACK_INSTANCE pci);																		
DisconnectNamedPipe(__in HANDLE hNamedPipe);																		
DiShowUpdateDevice(    __in_opt  HWND hwndParent,    __in      HDEVINFO DeviceInfoSet,    __in      PSP_DEVINFO_DATA DeviceInfoData,    __in      DWORD Flags,    __out_opt PBOOL NeedReboot    );																		
DispatchMessage(__in CONST MSG *lpMsg);
DispatchMessageA(__in CONST MSG *lpMsg);																		
DispatchMessageW(__in CONST MSG *lpMsg);																		
DisplayConfigGetDeviceInfo(    __inout DISPLAYCONFIG_DEVICE_INFO_HEADER* requestPacket);																		
DisplayConfigSetDeviceInfo(    __in DISPLAYCONFIG_DEVICE_INFO_HEADER* setPacket);																		
DiUninstallDevice(__in      HWND hwndParent,    __in      HDEVINFO DeviceInfoSet,    __in      PSP_DEVINFO_DATA DeviceInfoData,    __in      DWORD Flags,    __out_opt PBOOL NeedReboot    );																		
DlgDirListA(__in HWND hDlg,    __inout LPSTR lpPathSpec,    __in int nIDListBox,    __in int nIDStaticPath,    __in UINT uFileType);																		
DlgDirListComboBoxA(    __in HWND hDlg,    __inout LPSTR lpPathSpec,    __in int nIDComboBox,    __in int nIDStaticPath,    __in UINT uFiletype);																		
DlgDirListComboBoxW(    __in HWND hDlg,    __inout LPWSTR lpPathSpec,    __in int nIDComboBox,    __in int nIDStaticPath,    __in UINT uFiletype);																		
DlgDirListW(    __in HWND hDlg,    __inout LPWSTR lpPathSpec,    __in int nIDListBox,    __in int nIDStaticPath,    __in UINT uFileType);																		
DlgDirSelectComboBoxExA(    __in HWND hwndDlg,    __out_ecount(cchOut) LPSTR lpString,    __in int cchOut,    __in int idComboBox);																		
DlgDirSelectComboBoxExW(    __in HWND hwndDlg,    __out_ecount(cchOut) LPWSTR lpString,    __in int cchOut,    __in int idComboBox);																		
DlgDirSelectExA(    __in HWND hwndDlg,    __out_ecount(chCount) LPSTR lpString,    __in int chCount,    __in int idListBox);																		
DlgDirSelectExW(    __in HWND hwndDlg,    __out_ecount(chCount) LPWSTR lpString,    __in int chCount,    __in int idListBox);																		
DnsAcquireContextHandle_A(    __in            DWORD           CredentialFlags,    __in_opt        PVOID           Credentials,    __deref_out     PHANDLE         pContext    );																		
DnsAcquireContextHandle_W(    __in            DWORD           CredentialFlags,    __in_opt        PVOID           Credentials,    __deref_out     PHANDLE         pContext    );																		
DnsExtractRecordsFromMessage_UTF8(    __in            PDNS_MESSAGE_BUFFER pDnsBuffer,    __in            WORD                wMessageLength,    __deref_out     PDNS_RECORD *       ppRecord    );																		
DnsExtractRecordsFromMessage_W(    __in            PDNS_MESSAGE_BUFFER pDnsBuffer,    __in            WORD                wMessageLength,    __deref_out     PDNS_RECORD *       ppRecord    );																		
DnsFree(    __inout     PVOID           pData,    __in        DNS_FREE_TYPE   FreeType    );																		
DnsHostnameToComputerNameA (    __in    LPCSTR Hostname,    __out_ecount_part_opt(*nSize, *nSize + 1) LPSTR ComputerName,    __inout LPDWORD nSize    );																		
DnsHostnameToComputerNameW (    __in    LPCWSTR Hostname,    __out_ecount_part_opt(*nSize, *nSize + 1) LPWSTR ComputerName,    __inout LPDWORD nSize    );																		
DnsModifyRecordsInSet_A(    __in_opt        PDNS_RECORD     pAddRecords,    __in_opt        PDNS_RECORD     pDeleteRecords,    __in            DWORD           Options,    __in_opt        HANDLE          hCredentials,    __inout_opt     PVOID           pExtraList,    __inout_opt     PVOID           pReserved    );																		
DnsModifyRecordsInSet_UTF8(    __in_opt        PDNS_RECORD     pAddRecords,    __in_opt        PDNS_RECORD     pDeleteRecords,    __in            DWORD           Options,    __in_opt        HANDLE          hCredentials,    __inout_opt     PVOID           pExtraList,    __inout_opt     PVOID           pReserved    );																		
DnsModifyRecordsInSet_W(    __in_opt        PDNS_RECORD     pAddRecords,    __in_opt        PDNS_RECORD     pDeleteRecords,    __in            DWORD           Options,    __in_opt        HANDLE          hCredentials,    __inout_opt     PVOID           pExtraList,    __inout_opt     PVOID           pReserved    );																		
DnsNameCompare_A(    __in    PCSTR           pName1,    __in    PCSTR           pName2    );																		
DnsNameCompare_W(    __in    PCWSTR          pName1,    __in    PCWSTR          pName2    );																		
DnsQuery_A(    __in                PCSTR           pszName,    __in                WORD            wType,    __in                DWORD           Options,    __inout_opt         PVOID           pExtra,    __deref_out_opt     PDNS_RECORD *   ppQueryResults,    __deref_opt_out_opt PVOID *         pReserved    );																		
DnsQuery_UTF8(    __in                PCSTR           pszName,    __in                WORD            wType,    __in                DWORD           Options,    __inout_opt         PVOID           pExtra,    __deref_out_opt     PDNS_RECORD *   ppQueryResults,    __deref_opt_out_opt PVOID *         pReserved    );																		
DnsQuery_W(    __in                PCWSTR          pszName,    __in                WORD            wType,    __in                DWORD           Options,    __inout_opt         PVOID           pExtra,    __deref_out_opt     PDNS_RECORD *   ppQueryResults,    __deref_opt_out_opt PVOID *         pReserved    );																		
DnsQueryConfig(    __in                                    DNS_CONFIG_TYPE     Config,    __in                                    DWORD               Flag,    __in_opt                                PCWSTR              pwsAdapterName,    __in_opt                                PVOID               pReserved,    __out_bcount_part(*pBufLen, *pBufLen)   PVOID               pBuffer,    __inout                                 PDWORD              pBufLen    );																		
DnsRecordCompare(    __in            PDNS_RECORD     pRecord1,    __in            PDNS_RECORD     pRecord2    );																		
DnsRecordCopyEx(    __in    PDNS_RECORD     pRecord,    __in    DNS_CHARSET     CharSetIn,    __in    DNS_CHARSET     CharSetOut    );																		
DnsRecordListFree(    __inout_opt PDNS_RECORD     pRecordList,    __in        DNS_FREE_TYPE   FreeType    );																		
DnsRecordSetCompare(    __inout                 PDNS_RECORD     pRR1,    __inout                 PDNS_RECORD     pRR2,    __deref_opt_out_opt     PDNS_RECORD *   ppDiff1,    __deref_opt_out_opt     PDNS_RECORD *   ppDiff2    );																		
DnsRecordSetCopyEx(    __in    PDNS_RECORD     pRecordSet,    __in    DNS_CHARSET     CharSetIn,    __in    DNS_CHARSET     CharSetOut    );																		
DnsReleaseContextHandle(    __in        HANDLE          hContext    );																		
DnsReplaceRecordSetA(    __in            PDNS_RECORD     pReplaceSet,    __in            DWORD           Options,    __in_opt        HANDLE          hContext,    __inout_opt     PVOID           pExtraInfo,    __inout_opt     PVOID           pReserved    );																		
DnsReplaceRecordSetUTF8(    __in            PDNS_RECORD     pReplaceSet,    __in            DWORD           Options,    __in_opt        HANDLE          hContext,    __inout_opt     PVOID           pExtraInfo,    __inout_opt     PVOID           pReserved    );																		
DnsReplaceRecordSetW(    __in            PDNS_RECORD     pReplaceSet,    __in            DWORD           Options,    __in_opt        HANDLE          hContext,    __inout_opt     PVOID           pExtraInfo,    __inout_opt     PVOID           pReserved    );																		
DnsWriteQuestionToBuffer_UTF8(    __inout     PDNS_MESSAGE_BUFFER pDnsBuffer,    __inout     PDWORD              pdwBufferSize,    __in        PCSTR               pszName,    __in        WORD                wType,    __in        WORD                Xid,    __in        BOOL                fRecursionDesired    );																		
DnsWriteQuestionToBuffer_W(    __inout     PDNS_MESSAGE_BUFFER pDnsBuffer,    __inout     PDWORD              pdwBufferSize,    __in        PCWSTR              pszName,    __in        WORD                wType,    __in        WORD                Xid,    __in        BOOL                fRecursionDesired    );																		
DocumentPropertiesA(__in_opt        HWND      hWnd,__in            HANDLE    hPrinter,__in            LPSTR   pDeviceName,__out_opt       PDEVMODEA pDevModeOutput,__in_opt        PDEVMODEA pDevModeInput,                DWORD     fMode);																		
DocumentPropertiesW(__in_opt        HWND      hWnd,__in            HANDLE    hPrinter,__in            LPWSTR   pDeviceName,__out_opt       PDEVMODEW pDevModeOutput,__in_opt        PDEVMODEW pDevModeInput,                DWORD     fMode);																		
DosDateTimeToFileTime(    __in  WORD wFatDate,    __in  WORD wFatTime,    __out LPFILETIME lpFileTime    );																		
DPA_Clone(__in const HDPA hdpa, __inout_opt HDPA hdpaNew);																		
DPA_Create(int cItemGrow);																		
DPA_CreateEx(__in int cpGrow, __in_opt HANDLE hheap);																		
DPA_DeleteAllPtrs(__inout HDPA hdpa);																		
DPA_DeletePtr(__inout HDPA hdpa, __in int i);																		
DPA_Destroy(__inout_opt HDPA hdpa);																		
DPA_DestroyCallback(__in HDPA hdpa, __in PFNDAENUMCALLBACKCONST pfnCB, __in_opt void *pData)DPA_DestroyCallback(hdpa, (PFNDAENUMCALLBACK)pfnCB, pData);																		
DPA_DestroyCallback(__inout_opt HDPA hdpa, __in PFNDAENUMCALLBACK pfnCB, __in_opt void *pData);																		
DPA_EnumCallback(__in HDPA hdpa, __in PFNDAENUMCALLBACKCONST pfnCB, __in_opt void *pData);																		
DPA_EnumCallback(__in_opt HDPA hdpa, __in_opt PFNDAENUMCALLBACK pfnCB, __in_opt void *pData);																		
DPA_EnumCallback(hdpa, (PFNDAENUMCALLBACK)pfnCB, pData);																		
DPA_GetPtr(__in HDPA hdpa, __in INT_PTR i);																		
DPA_GetPtrIndex(__in HDPA hdpa, __in_opt const void *p);																		
DPA_GetSize(__in_opt HDPA hdpa);																		
DPA_Grow(__inout HDPA pdpa, __in int cp);																		
DPA_InsertPtr(__inout HDPA hdpa, __in int i, __in_opt void *p);																		
DPA_LoadStream(__deref_out HDPA * phdpa, __in PFNDPASTREAM pfn, __in struct IStream * pstream, __in_opt void *pvInstData);																		
DPA_Merge(__inout HDPA hdpaDest, __in HDPA hdpaSrc, __in DWORD dwFlags, __in PFNDACOMPARE pfnCompare, __in PFNDPAMERGE pfnMerge, __in LPARAM lParam);																		
DPA_SaveStream(__in HDPA hdpa, __in PFNDPASTREAM pfn, __in struct IStream * pstream, __in_opt void *pvInstData);																		
DPA_Search(__in HDPA hdpa, __in_opt void *pFind, __in int iStart, __in PFNDACOMPARE pfnCompare, __in LPARAM lParam, __in UINT options);																		
DPA_SetPtr(__inout HDPA hdpa, __in int i, __in_opt void *p);																		
DPA_Sort(__inout HDPA hdpa, __in PFNDACOMPARE pfnCompare, __in LPARAM lParam);																		
DPA_Sort(__inout HDPA hdpa, __in PFNDACOMPARECONST pfnCompare, __in LPARAM lParam);																		
DPtoLP( __in HDC hdc, __inout_ecount(c) LPPOINT lppt, __in int c);																		
DragDetect(    __in HWND hwnd,    __in POINT pt);																		
DragObject(    __in HWND hwndParent,    __in HWND hwndFrom,    __in UINT fmt,    __in ULONG_PTR data,    __in_opt HCURSOR hcur);																		
DrawAnimatedRects(    __in_opt HWND hwnd,    __in int idAni,    __in CONST RECT *lprcFrom,    __in CONST RECT *lprcTo);																		
DrawCaption(    __in HWND hwnd,    __in HDC hdc,    __in CONST RECT * lprect,    __in UINT flags);																		
DrawEdge(    __in HDC hdc,    __inout LPRECT qrc,    __in UINT edge,    __in UINT grfFlags);																		
DrawFocusRect(__in HDC hDC,__in CONST RECT * lprc);																		
DrawFrameControl(    __in HDC,    __inout LPRECT,    __in UINT,    __in UINT);																		
DrawIcon(    __in HDC hDC,    __in int X,    __in int Y,    __in HICON hIcon);																		
DrawInsert(HWND handParent, HWND hLB, int nItem);																		
DrawMenuBar(    __in HWND hWnd);																		
DrawShadowText(__in HDC hdc, __in_ecount(cch) LPCWSTR pszText, __in UINT cch, __in RECT* prc, __in DWORD dwFlags, __in COLORREF crText, __in COLORREF crShadow,__in int ixOffset, __in int iyOffset);																		
DrawStateA(    __in HDC hdc,    __in_opt HBRUSH hbrFore,    __in_opt DRAWSTATEPROC qfnCallBack,    __in LPARAM lData,    __in WPARAM wData,    __in int x,    __in int y,    __in int cx,    __in int cy,    __in UINT uFlags);																		
DrawStateW(    __in HDC hdc,    __in_opt HBRUSH hbrFore,    __in_opt DRAWSTATEPROC qfnCallBack,    __in LPARAM lData,    __in WPARAM wData,    __in int x,    __in int y,    __in int cx,    __in int cy,    __in UINT uFlags);																		
DrawTextA(    __in HDC hdc,    __inout_ecount_opt(cchText) LPCSTR lpchText,    __in int cchText,    __inout LPRECT lprc,    __in UINT format);																		
DrawTextExA(    __in HDC hdc,    __inout_ecount_opt(cchText) LPSTR lpchText,    __in int cchText,    __inout LPRECT lprc,    __in UINT format,    __in_opt LPDRAWTEXTPARAMS lpdtp);																		
DrawTextExW(    __in HDC hdc,    __inout_ecount_opt(cchText) LPWSTR lpchText,    __in int cchText,    __inout LPRECT lprc,    __in UINT format,    __in_opt LPDRAWTEXTPARAMS lpdtp);																		
DrawTextW(    __in HDC hdc,    __inout_ecount_opt(cchText) LPCWSTR lpchText,    __in int cchText,    __inout LPRECT lprc,    __in UINT format);																		
DSA_Create(int cbItem, int cItemGrow);																		
DSA_DeleteAllItems(__inout HDSA hdsa);																		
DSA_Destroy(__inout_opt HDSA hdsa);																		
DSA_DestroyCallback(__inout_opt HDSA hdsa, __in PFNDAENUMCALLBACK pfnCB, __in_opt void *pData);																		
DSA_DestroyCallback(__inout_opt HDSA hdsa, __in PFNDAENUMCALLBACKCONST pfnCB, __in_opt void *pData)DSA_DeleteItem(__inout HDSA hdsa, __in int i);																		
DSA_EnumCallback(__in HDSA hdsa, __in PFNDAENUMCALLBACK pfnCB, __in_opt void *pData);																		
DSA_EnumCallback(__in HDSA hdsa, __in PFNDAENUMCALLBACKCONST pfnCB, __in_opt void *pData);																		
DSA_GetItem(__in HDSA hdsa, __in int i, __out_xcount(pdsa->cbItem) void *pitem);																		
DSA_GetItemPtr(__in HDSA hdsa, __in int i);																		
DSA_InsertItem(__inout HDSA hdsa, __in int i, __in const void *pitem);																		
DSA_SetItem(__inout HDSA hdsa, __in int i, __in const void *pitem);																		
DsAddressToSiteNamesA(    IN __in_opt LPCSTR ComputerName OPTIONAL,    IN DWORD EntryCount,    IN PSOCKET_ADDRESS SocketAddresses,    OUT __deref_out_ecount(EntryCount) LPSTR **SiteNames);																		
DsAddressToSiteNamesExA(    IN __in_opt LPCSTR ComputerName OPTIONAL,    IN DWORD EntryCount,    IN PSOCKET_ADDRESS SocketAddresses,    OUT __deref_out_ecount(EntryCount) LPSTR **SiteNames,    OUT __deref_out_ecount(EntryCount) LPSTR **SubnetNames);																		
DsAddressToSiteNamesExW(    IN __in_opt LPCWSTR ComputerName OPTIONAL,    IN DWORD EntryCount,    IN PSOCKET_ADDRESS SocketAddresses,    OUT __deref_out_ecount(EntryCount) LPWSTR **SiteNames,    OUT __deref_out_ecount(EntryCount) LPWSTR **SubnetNames);																		
DsAddressToSiteNamesW(    IN __in_opt LPCWSTR ComputerName OPTIONAL,    IN DWORD EntryCount,    IN PSOCKET_ADDRESS SocketAddresses,    OUT __deref_out_ecount(EntryCount) LPWSTR **SiteNames);																		
DsAddSidHistoryA(__in HANDLE hDS,__reserved DWORD Flags,__in LPCSTR SrcDomain,__in LPCSTR SrcPrincipal,__in_opt LPCSTR  SrcDomainController,__in_opt RPC_AUTH_IDENTITY_HANDLE SrcDomainCreds,__in LPCSTR DstDomain,__in LPCSTR DstPrincipal); 																	
DsAddSidHistoryW( __in HANDLE hDS, __reserved DWORD Flags, __in LPCWSTR SrcDomain, __in LPCWSTR SrcPrincipal, __in_opt LPCWSTR SrcDomainController, __in_opt RPC_AUTH_IDENTITY_HANDLE SrcDomainCreds,__in LPCWSTR DstDomain,__in LPCWSTR DstPrincipal);																	
DsBindA( __in_opt LPCSTR DomainControllerName, __in_opt LPCSTR DnsDomainName, __out HANDLE *phDS);																		
DsBindByInstanceA( __in_opt LPCSTR ServerName, __in_opt LPCSTR Annotation, __in_opt GUID * InstanceGuid, __in_opt LPCSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __in_opt LPCSTR ServicePrincipalName, __in_opt DWORD BindFlags, __out HANDLE *phDS);																		
DsBindByInstanceW(__in_opt LPCWSTR ServerName, __in_opt LPCWSTR Annotation, __in_opt GUID * InstanceGuid, __in_opt LPCWSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __in_opt LPCWSTR ServicePrincipalName, __in_opt DWORD BindFlags, __out HANDLE *phDS);																		
DsBindingSetTimeout( __in HANDLE hDS, __in ULONG cTimeoutSecs );																		
DsBindToISTGA( __in_opt LPCSTR SiteName, __out HANDLE *phDS);																		
DsBindToISTGW( __in_opt LPCWSTR SiteName, __out HANDLE *phDS);																		
DsBindW( __in_opt LPCWSTR DomainControllerName, __in_opt LPCWSTR DnsDomainName, __out HANDLE *phDS);																		
DsBindWithCredA( __in_opt LPCSTR DomainControllerName, __in_opt LPCSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __out HANDLE *phDS);																		
DsBindWithCredW( __in_opt LPCWSTR DomainControllerName, __in_opt LPCWSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __out HANDLE *phDS);																		
DsBindWithSpnA( __in_opt LPCSTR DomainControllerName, __in_opt LPCSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __in_opt LPCSTR ServicePrincipalName, __out HANDLE *phDS);																		
DsBindWithSpnExA( __in_opt LPCSTR DomainControllerName, __in_opt LPCSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __in_opt LPCSTR ServicePrincipalName, __in_opt DWORD BindFlags,__out HANDLE *phDS);																		
DsBindWithSpnExW( __in_opt LPCWSTR DomainControllerName, __in_opt LPCWSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __in_opt LPCWSTR ServicePrincipalName, __in_opt DWORD BindFlags, __out HANDLE *phDS);																		
DsBindWithSpnW( __in_opt LPCWSTR DomainControllerName, __in_opt LPCWSTR DnsDomainName, __in_opt RPC_AUTH_IDENTITY_HANDLE AuthIdentity, __in_opt LPCWSTR ServicePrincipalName, __out HANDLE *phDS);																		
DsClientMakeSpnForTargetServerA(    __in LPCSTR ServiceClass,    __in LPCSTR ServiceName, __inout DWORD *pcSpnLength, __out_ecount_part(*pcSpnLength, *pcSpnLength) LPSTR pszSpn    );																		
DsClientMakeSpnForTargetServerW(    __in LPCWSTR ServiceClass,    __in LPCWSTR ServiceName,    __inout DWORD *pcSpnLength,    __out_ecount_part (*pcSpnLength, *pcSpnLength) LPWSTR pszSpn    );																		
DsCrackNamesA( __in_opt HANDLE hDS, __in DS_NAME_FLAGS flags, __in DS_NAME_FORMAT formatOffered, __in DS_NAME_FORMAT formatDesired, __in DWORD cNames, __in_ecount(cNames) const LPCSTR *rpNames, __deref_out PDS_NAME_RESULTA *ppResult); 																	
DsCrackNamesW( __in_opt HANDLE hDS, __in DS_NAME_FLAGS flags, __in DS_NAME_FORMAT formatOffered, __in DS_NAME_FORMAT formatDesired, __in DWORD cNames, __in_ecount(cNames) const LPCWSTR *rpNames, __deref_out PDS_NAME_RESULTW *ppResult); 																	
DsCrackSpnA(    __in LPCSTR pszSpn,    __inout_opt LPDWORD pcServiceClass,    __out_ecount_part_opt (*pcServiceClass, *pcServiceClass) LPSTR ServiceClass,    __inout_opt LPDWORD pcServiceName,    __out_ecount_part_opt (*pcServiceName, *pcServiceName) LPSTR ServiceName,    __inout_opt LPDWORD pcInstanceName,    __out_ecount_part_opt (*pcInstanceName, *pcInstanceName) LPSTR InstanceName,    __out_opt USHORT *pInstancePort    );																		
DsCrackSpnW(    __in LPCWSTR pszSpn,    __inout_opt DWORD *pcServiceClass,    __out_ecount_part_opt (*pcServiceClass, *pcServiceClass) LPWSTR ServiceClass,    __inout_opt DWORD *pcServiceName,    __out_ecount_part_opt (*pcServiceName, *pcServiceName) LPWSTR ServiceName,    __inout_opt DWORD *pcInstanceName,    __out_ecount_part_opt (*pcInstanceName, *pcInstanceName) LPWSTR InstanceName,    __out_opt USHORT *pInstancePort    );																		
DsCrackUnquotedMangledRdnA(     __in_ecount(cchRDN) LPCSTR pszRDN,     DWORD cchRDN,     __out_opt GUID *pGuid,     __out_opt DS_MANGLE_FOR *peDsMangleFor     );																		
DsCrackUnquotedMangledRdnW(     __in_ecount(cchRDN) LPCWSTR pszRDN,     DWORD cchRDN,     __out_opt GUID *pGuid,     __out_opt DS_MANGLE_FOR *peDsMangleFor     );																		
DsCrackUnquotedMangledRdnW(     IN LPCWSTR pszRDN,     IN DWORD cchRDN,     OUT OPTIONAL GUID *pGuid,     OUT OPTIONAL DS_MANGLE_FOR *peDsMangleFor     );																		
DsDeregisterDnsHostRecordsA (    __in_opt LPSTR ServerName OPTIONAL,    __in_opt LPSTR DnsDomainName OPTIONAL,    __in_opt GUID  *DomainGuid OPTIONAL,    __in_opt GUID  *DsaGuid OPTIONAL,    __in LPSTR DnsHostName    );																		
DsDeregisterDnsHostRecordsW (    __in_opt LPWSTR ServerName OPTIONAL,    __in_opt LPWSTR DnsDomainName OPTIONAL,    __in_opt GUID   *DomainGuid OPTIONAL,    __in_opt GUID   *DsaGuid OPTIONAL,    __in LPWSTR DnsHostName    );																		
DsEnumerateDomainTrustsA (    __in_opt LPSTR ServerName OPTIONAL,    __in ULONG Flags,    __deref_out_ecount(*DomainCount) PDS_DOMAIN_TRUSTSA *Domains,    __out PULONG DomainCount    );																		
DsEnumerateDomainTrustsW (    __in_opt LPWSTR ServerName OPTIONAL,    __in ULONG Flags,    __deref_out_ecount(*DomainCount) PDS_DOMAIN_TRUSTSW *Domains,    __out PULONG DomainCount    );																		
DsFreeDomainControllerInfoA(DWORD InfoLevel, DWORD cInfo, __in_ecount(cInfo) VOID *pInfo); 																
DsFreeDomainControllerInfoW(DWORD InfoLevel, DWORD cInfo, __in_ecount(cInfo) VOID *pInfo);  																
DsFreeNameResultA(__in DS_NAME_RESULTA *pResult); 																	
DsFreeNameResultW(__in DS_NAME_RESULTW *pResult); 																	
DsFreePasswordCredentials(__in RPC_AUTH_IDENTITY_HANDLE AuthIdentity);																		
DsFreeSchemaGuidMapA(__in PDS_SCHEMA_GUID_MAPA    pGuidMap); 																	
DsFreeSchemaGuidMapW(__in PDS_SCHEMA_GUID_MAPW    pGuidMap); 																	
DsFreeSpnArrayA(__in DWORD cSpn,__deref_in_ecount(cSpn) LPSTR *rpszSpn);																		
DsFreeSpnArrayW(__in DWORD cSpn,__deref_inout_ecount(cSpn) LPWSTR *rpszSpn);																		
DsGetDcCloseW(    IN HANDLE GetDcContextHandle    );																		
DsGetDcNameA(    IN __in_opt LPCSTR ComputerName OPTIONAL,    IN __in_opt LPCSTR DomainName OPTIONAL,    IN GUID *DomainGuid OPTIONAL,    IN __in_opt LPCSTR SiteName OPTIONAL,    IN ULONG Flags,    OUT PDOMAIN_CONTROLLER_INFOA *DomainControllerInfo);																		
DsGetDcNameW(    IN __in_opt LPCWSTR ComputerName OPTIONAL,    IN __in_opt LPCWSTR DomainName OPTIONAL,    IN GUID *DomainGuid OPTIONAL,    IN __in_opt LPCWSTR SiteName OPTIONAL,    IN ULONG Flags,    OUT PDOMAIN_CONTROLLER_INFOW *DomainControllerInfo);																		
DsGetDcNextA(    IN HANDLE GetDcContextHandle,    OUT PULONG SockAddressCount OPTIONAL,    OUT LPSOCKET_ADDRESS *SockAddresses OPTIONAL,    OUT __deref_opt_out LPSTR *DnsHostName OPTIONAL    );																		
DsGetDcNextW(    IN HANDLE GetDcContextHandle,    OUT PULONG SockAddressCount OPTIONAL,    OUT LPSOCKET_ADDRESS *SockAddresses OPTIONAL,    OUT __deref_opt_out LPWSTR *DnsHostName OPTIONAL    );																		
DsGetDcOpenA(    IN LPCSTR DnsName,    IN ULONG OptionFlags,    IN LPCSTR SiteName OPTIONAL,    IN GUID *DomainGuid OPTIONAL,    IN LPCSTR DnsForestName OPTIONAL,    IN ULONG DcFlags,    OUT PHANDLE RetGetDcContext    );																		
DsGetDcOpenW(    IN LPCWSTR DnsName,    IN ULONG OptionFlags,    IN LPCWSTR SiteName OPTIONAL,    IN GUID *DomainGuid OPTIONAL,    IN LPCWSTR DnsForestName OPTIONAL,    IN ULONG DcFlags,    OUT PHANDLE RetGetDcContext    );																		
DsGetDcSiteCoverageA(    IN __in_opt LPCSTR ServerName OPTIONAL,    OUT PULONG EntryCount,    OUT __deref_out_ecount(*EntryCount) LPSTR **SiteNames    );																		
DsGetDcSiteCoverageW(    IN __in_opt LPCWSTR ServerName OPTIONAL,    OUT PULONG EntryCount,    OUT __deref_out_ecount(*EntryCount) LPWSTR **SiteNames    );																		
DsGetDomainControllerInfoA( __in HANDLE hDs, __in LPCSTR DomainName, DWORD InfoLevel, __out DWORD *pcOut, __deref_out_ecount(*pcOut) VOID **ppInfo);																	
DsGetDomainControllerInfoW( __in HANDLE hDs, __in LPCWSTR DomainName, DWORD InfoLevel, __out DWORD *pcOut, __deref_out_ecount(*pcOut) VOID **ppInfo);																		
DsGetForestTrustInformationW (    IN LPCWSTR ServerName OPTIONAL,    IN LPCWSTR TrustedDomainName OPTIONAL,    IN DWORD Flags,    OUT PLSA_FOREST_TRUST_INFORMATION *ForestTrustInfo    );																		
DsGetRdnW(    __deref_inout_ecount_part(*pcDN,*pcDN) LPCWCH   *ppDN,    __inout DWORD    *pcDN,    __deref_out_ecount(*pcKey)    LPCWCH   *ppKey,    __out    DWORD    *pcKey,    __deref_out_ecount(*pcVal)    LPCWCH   *ppVal,    __out    DWORD    *pcVal    );																		
DsGetSiteNameA(    IN __in_opt LPCSTR ComputerName OPTIONAL,    OUT __deref_out LPSTR *SiteName);																		
DsGetSiteNameW(    IN __in_opt LPCWSTR ComputerName OPTIONAL,    OUT  __deref_out LPWSTR *SiteName);																		
DsGetSpnA(    __in DS_SPN_NAME_TYPE ServiceType,    __in LPCSTR ServiceClass,    __in_opt LPCSTR ServiceName,    __in USHORT InstancePort,    __in USHORT cInstanceNames,    __in_ecount_opt(cInstanceNames) LPCSTR *pInstanceNames,    __in_opt const USHORT *pInstancePorts,    __out DWORD *pcSpn,    __deref_out_ecount (*pcSpn) LPSTR **prpszSpn    );																		
DsGetSpnW(    __in DS_SPN_NAME_TYPE ServiceType,    __in LPCWSTR ServiceClass,    __in LPCWSTR ServiceName,    __in USHORT InstancePort,    __in USHORT cInstanceNames,    __in_ecount(cInstanceNames) LPCWSTR *pInstanceNames,    __in_opt const USHORT *pInstancePorts,    __out DWORD *pcSpn,    __deref_out_ecount(*pcSpn) LPWSTR **prpszSpn    );																		
DsInheritSecurityIdentityA( __in HANDLE hDS, __reserved DWORD Flags, __in LPCSTR SrcPrincipal, __in LPCSTR DstPrincipal);																		
DsInheritSecurityIdentityW( __in HANDLE hDS, __reserved DWORD Flags, __in LPCWSTR SrcPrincipal, __in LPCWSTR DstPrincipal);																
DsIsMangledDnA( __in LPCSTR pszDn, DS_MANGLE_FOR eDsMangleFor );																		
DsIsMangledDnW( __in LPCWSTR pszDn, DS_MANGLE_FOR eDsMangleFor );																		
DsIsMangledDnW( LPCWSTR pszDn, DS_MANGLE_FOR eDsMangleFor );																		
DsIsMangledRdnValueA( __in_ecount(cRdn) LPCSTR pszRdn, DWORD cRdn, DS_MANGLE_FOR eDsMangleForDesired );																		
DsIsMangledRdnValueW( __in_ecount(cRdn) LPCWSTR pszRdn, DWORD cRdn, DS_MANGLE_FOR eDsMangleForDesired );																		
DsIsMangledRdnValueW( LPCWSTR pszRdn, DWORD cRdn, DS_MANGLE_FOR eDsMangleForDesired );																		
DsListDomainsInSiteA( __in HANDLE hDs, __in LPCSTR site, __deref_out PDS_NAME_RESULTA *ppDomains); 																	
DsListDomainsInSiteW( __in HANDLE hDs, __in LPCWSTR site, __deref_out PDS_NAME_RESULTW *ppDomains); 																	
DsListInfoForServerA( __in HANDLE hDs, __in LPCSTR server, __deref_out PDS_NAME_RESULTA *ppInfo); 																		
DsListInfoForServerW( __in HANDLE hDs, __in LPCWSTR server, __deref_out PDS_NAME_RESULTW *ppInfo); 																	
DsListRolesA( __in HANDLE hDs, __deref_out PDS_NAME_RESULTA *ppRoles); 																	
DsListRolesW( __in HANDLE hDs, __deref_out PDS_NAME_RESULTW *ppRoles); 																		
DsListServersForDomainInSiteA( __in HANDLE hDs, __in LPCSTR domain, __in LPCSTR site, __deref_out PDS_NAME_RESULTA *ppServers);  																	
DsListServersForDomainInSiteW( __in HANDLE hDs, __in LPCWSTR domain, __in LPCWSTR site, __deref_out PDS_NAME_RESULTW *ppServers);   																	
DsListServersInSiteA( __in HANDLE hDs, __in LPCSTR site, __deref_out PDS_NAME_RESULTA *ppServers); 																	
DsListServersInSiteW( __in HANDLE hDs, __in LPCWSTR site, __deref_out PDS_NAME_RESULTW *ppServers); 																		
DsListSitesA( __in HANDLE hDs, __deref_out PDS_NAME_RESULTA *ppSites); 																	
DsListSitesW( __in HANDLE hDs, __deref_out PDS_NAME_RESULTW *ppSites); 																
DsMakePasswordCredentialsA(    __in_opt LPCSTR User,    __in_opt LPCSTR Domain,    __in_opt LPCSTR Password,    __out RPC_AUTH_IDENTITY_HANDLE *pAuthIdentity    );																		
DsMakePasswordCredentialsW(    __in_opt LPCWSTR User,    __in_opt LPCWSTR Domain,    __in_opt LPCWSTR Password,    __out RPC_AUTH_IDENTITY_HANDLE *pAuthIdentity    );																		
DsMakeSpnA(    __in LPCSTR ServiceClass,    __in LPCSTR ServiceName,    __in_opt LPCSTR InstanceName,    __in USHORT InstancePort,    __in_opt LPCSTR Referrer,    __inout DWORD *pcSpnLength,    __out_ecount_part (*pcSpnLength, *pcSpnLength) LPSTR pszSpn);																		
DsMakeSpnW(    __in LPCWSTR ServiceClass,    __in LPCWSTR ServiceName,    __in_opt LPCWSTR InstanceName,    __in USHORT InstancePort,    __in_opt LPCWSTR Referrer,    __inout DWORD *pcSpnLength,    __out_ecount_part_opt(*pcSpnLength, *pcSpnLength) LPWSTR pszSpn);																		
DsMapSchemaGuidsA( __in HANDLE hDs, DWORD cGuids, __in_ecount(cGuids) GUID *rGuids, __deref_out DS_SCHEMA_GUID_MAPA **ppGuidMap); 																		
DsMapSchemaGuidsW( __in HANDLE hDs, DWORD cGuids, __in_ecount(cGuids) GUID *rGuids, __deref_out DS_SCHEMA_GUID_MAPW **ppGuidMap); 																	
DsMergeForestTrustInformationW(    IN LPCWSTR DomainName,    IN PLSA_FOREST_TRUST_INFORMATION NewForestTrustInfo,    IN PLSA_FOREST_TRUST_INFORMATION OldForestTrustInfo OPTIONAL,    OUT PLSA_FOREST_TRUST_INFORMATION *MergedForestTrustInfo    );																		
DsQuerySitesByCostA( __in HANDLE hDS, __in LPSTR pszFromSite, __deref_in_ecount (cToSites) LPSTR   *rgszToSites, DWORD cToSites, __reserved DWORD dwFlags, __deref_out PDS_SITE_COST_INFO *prgSiteInfo );																		
DsQuerySitesByCostW( __in HANDLE hDS, __in LPWSTR pwszFromSite, __deref_in_ecount (cToSites) LPWSTR *rgwszToSites, __in DWORD cToSites, __reserved DWORD dwFlags, __deref_out PDS_SITE_COST_INFO *prgSiteInfo );																		
DsQuerySitesFree( __in PDS_SITE_COST_INFO  rgSiteInfo    );																		
DsQuoteRdnValue( DWORD    cUnquotedRdnValueLength,    __in_ecount(cUnquotedRdnValueLength)   LPCTCH   psUnquotedRdnValue,    __inout DWORD    *pcQuotedRdnValueLength,    __out_ecount_part(*pcQuotedRdnValueLength, *pcQuotedRdnValueLength)    LPTCH    psQuotedRdnValue    );																		
DsQuoteRdnValueA( DWORD    cUnquotedRdnValueLength,    __in_ecount (cUnquotedRdnValueLength) IN     LPCCH    psUnquotedRdnValue,    __inout DWORD    *pcQuotedRdnValueLength,    __out_ecount_part (*pcQuotedRdnValueLength, *pcQuotedRdnValueLength) LPCH     psQuotedRdnValue);																		
DsQuoteRdnValueW( DWORD    cUnquotedRdnValueLength,    __in_ecount(cUnquotedRdnValueLength) IN     LPCWCH   psUnquotedRdnValue,    __inout DWORD    *pcQuotedRdnValueLength,    __out_ecount_part(*pcQuotedRdnValueLength, *pcQuotedRdnValueLength) LPWCH    psQuotedRdnValue);																		
DsRemoveDsDomainA( __in HANDLE  hDs, __in LPSTR DomainDN );																		
DsRemoveDsDomainW( __in HANDLE  hDs, __in LPWSTR DomainDN );																		
DsRemoveDsServerA( __in HANDLE  hDs, __in LPSTR ServerDN, __in_opt LPSTR DomainDN, __out_opt BOOL *fLastDcInDomain, BOOL fCommit );																		
DsRemoveDsServerW( __in HANDLE  hDs, __in LPWSTR ServerDN, __in_opt LPWSTR DomainDN, __out_opt BOOL *fLastDcInDomain, BOOL fCommit );																		
DsReplicaAddA( __in HANDLE hDS, __in LPCSTR NameContext, __in LPCSTR SourceDsaDn, __in LPCSTR TransportDn, __in LPCSTR SourceDsaAddress, __in_opt const PSCHEDULE pSchedule, DWORD Options );																		
DsReplicaAddW( __in HANDLE hDS, __in LPCWSTR NameContext, __in LPCWSTR SourceDsaDn, __in LPCWSTR TransportDn, __in LPCWSTR SourceDsaAddress, __in_opt const PSCHEDULE pSchedule, DWORD Options );																		
DsReplicaConsistencyCheck( __in HANDLE hDS, DS_KCC_TASKID TaskID, DWORD dwFlags); 																	
DsReplicaDelA( __in HANDLE hDS, __in LPCSTR NameContext __in LPCSTR DsaSrc, ULONG Options );																		
DsReplicaDelW( __in HANDLE hDS, __in LPCWSTR NameContext, __in LPCWSTR DsaSrc, ULONG Options );																		
DsReplicaFreeInfo( DS_REPL_INFO_TYPE InfoType, __in VOID * pInfo); 																		
DsReplicaGetInfo2W( __in HANDLE hDS, DS_REPL_INFO_TYPE InfoType, __in_opt LPCWSTR pszObject, __in_opt UUID * puuidForSourceDsaObjGuid, __in_opt LPCWSTR pszAttributeName, __in_opt LPCWSTR pszValue, DWORD dwFlags, DWORD dwEnumerationContext, __deref_out VOID ** ppInfo); 																		
DsReplicaGetInfoW( __in HANDLE hDS, DS_REPL_INFO_TYPE InfoType, __in_opt LPCWSTR pszObject, __in_opt UUID * puuidForSourceDsaObjGuid, __deref_out VOID ** ppInfo);  								
DsReplicaModifyA(    __in HANDLE hDS,    __in LPCSTR NameContext,    __in_opt const UUID *pUuidSourceDsa,    __reserved LPCSTR TransportDn,    __in LPCSTR SourceDsaAddress,    __in_opt const PSCHEDULE pSchedule,    __reserved DWORD ReplicaFlags,    DWORD ModifyFields,    DWORD Options    );																		
DsReplicaModifyW(    __in HANDLE hDS,    __in LPCWSTR NameContext,    __in_opt const UUID *pUuidSourceDsa,    __reserved LPCWSTR TransportDn,    __in LPCWSTR SourceDsaAddress,    __in_opt const PSCHEDULE pSchedule,    DWORD ReplicaFlags,    DWORD ModifyFields,    DWORD Options    );																		
DsReplicaSyncA(    __in HANDLE hDS,    __in LPCSTR NameContext,    __in const UUID *pUuidDsaSrc,    ULONG Options    );																		
DsReplicaSyncAllA (    __in HANDLE				hDS,    __in LPCSTR				pszNameContext,    ULONG										
DsReplicaSyncAllW (    __in HANDLE				hDS,    __in LPCWSTR				pszNameContext,    ULONG										
DsReplicaSyncW(    __in HANDLE hDS,    __in LPCWSTR NameContext,    __in const UUID *pUuidDsaSrc,    ULONG Options    );																		
DsReplicaUpdateRefsA(    __in HANDLE hDS,    __in LPCSTR NameContext,    __in LPCSTR DsaDest,    __in const UUID *pUuidDsaDest,    ULONG Options    );																		
DsReplicaUpdateRefsW(    __in HANDLE hDS,    __in LPCWSTR NameContext,    __in LPCWSTR DsaDest,    __in const UUID *pUuidDsaDest,    ULONG Options    );																		
DsReplicaVerifyObjectsA( __in HANDLE hDS, __in LPCSTR NameContext, __in const UUID * pUuidDsaSrc, ULONG ulOptions); 																
DsReplicaVerifyObjectsW( __in HANDLE hDS, __in LPCWSTR NameContext, __in const UUID * pUuidDsaSrc, ULONG ulOptions);  																		
DsRoleFreeMemory( IN PVOID Buffer );																		
DsRoleGetPrimaryDomainInformation( IN  LPCWSTR lpServer OPTIONAL, IN  DSROLE_PRIMARY_DOMAIN_INFO_LEVEL InfoLevel, OUT PBYTE *Buffer );																		
DsServerRegisterSpnA( DS_SPN_WRITE_OP Operation, __in LPCSTR ServiceClass, __in_opt LPCSTR UserObjectDN );																		
DsServerRegisterSpnW( DS_SPN_WRITE_OP Operation, __in LPCWSTR ServiceClass, __in_opt LPCWSTR UserObjectDN );																		
DsUnBindA( __in HANDLE *phDS);    																
DsUnBindW( __in HANDLE *phDS);     																	
DsUnquoteRdnValue(    DWORD    cQuotedRdnValueLength,    __in_ecount(cQuotedRdnValueLength)     LPCTCH   psQuotedRdnValue,    __inout DWORD    *pcUnquotedRdnValueLength,    __out_ecount_part(*pcUnquotedRdnValueLength,*pcUnquotedRdnValueLength)    LPTCH    psUnquotedRdnValue    );																		
DsUnquoteRdnValueA(    DWORD    cQuotedRdnValueLength,    __in_ecount (cQuotedRdnValueLength) LPCCH    psQuotedRdnValue,    __inout DWORD    *pcUnquotedRdnValueLength,    __out_ecount_part (*pcUnquotedRdnValueLength, *pcUnquotedRdnValueLength) LPCH     psUnquotedRdnValue);																		
DsUnquoteRdnValueW(    DWORD    cQuotedRdnValueLength,    __in_ecount (cQuotedRdnValueLength) LPCWCH   psQuotedRdnValue,    __inout DWORD    *pcUnquotedRdnValueLength,    __out_ecount_part (*pcUnquotedRdnValueLength, *pcUnquotedRdnValueLength) LPWCH    psUnquotedRdnValue);																		
DsValidateSubnetNameA(    __in IN LPCSTR SubnetName);																		
DsValidateSubnetNameW(    __in IN LPCWSTR SubnetName);																		
DsWriteAccountSpnA(    __in HANDLE hDS,    __in DS_SPN_WRITE_OP Operation,    __in LPCSTR pszAccount,    __in DWORD cSpn,    __in_ecount(cSpn) LPCSTR *rpszSpn    );																		
DsWriteAccountSpnW(    __in HANDLE hDS,    __in DS_SPN_WRITE_OP Operation,    __in LPCWSTR pszAccount,    __in DWORD cSpn,    __in_ecount(cSpn) LPCWSTR *rpszSpn    );																		
DuplicateEncryptionInfoFile(     __in       LPCWSTR SrcFileName,     __in       LPCWSTR DstFileName,                 DWORD                           dwCreationDistribution,                 DWORD                           dwAttributes,      __in_opt   CONST LPSECURITY_ATTRIBUTES     lpSecurityAttributes     );																		
DuplicateEncryptionInfoFile(     __in       LPCWSTR SrcFileName,     __in       LPCWSTR DstFileName,                 DWORD                   dwCreationDistribution,                 DWORD                   dwAttributes,      __in_opt   LPSECURITY_ATTRIBUTES   lpSecurityAttributes     );																		
DuplicateHandle(    __in        HANDLE hSourceProcessHandle,    __in        HANDLE hSourceHandle,    __in        HANDLE hTargetProcessHandle,    __deref_out LPHANDLE lpTargetHandle,    __in        DWORD dwDesiredAccess,    __in        BOOL bInheritHandle,    __in        DWORD dwOptions    );																		
DuplicateToken(    __in        HANDLE ExistingTokenHandle,    __in        SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,    __deref_out PHANDLE DuplicateTokenHandle    );																		
DuplicateTokenEx(    __in        HANDLE hExistingToken,    __in        DWORD dwDesiredAccess,    __in_opt    LPSECURITY_ATTRIBUTES lpTokenAttributes,    __in        SECURITY_IMPERSONATION_LEVEL ImpersonationLevel,    __in        TOKEN_TYPE TokenType,    __deref_out PHANDLE phNewToken);																		
DXVAHD_CreateDevice(__in IDirect3DDevice9Ex* pD3DDevice,__in const DXVAHD_CONTENT_DESC* pContentDesc,__in DXVAHD_DEVICE_USAGE Usage,__in_opt PDXVAHDSW_Plugin pPlugin,__deref_out IDXVAHD_Device** ppDevice);																		
EmptyClipboard(VOID);																		
EmptyWorkingSet(__in HANDLE hProcess);																		
EnableMenuItem(__in HMENU hMenu,__in UINT uIDEnableItem,__in UINT uEnable);																		
EnableRouter(__out HANDLE* pHandle,__out OVERLAPPED* pOverlapped);																		
EnableScrollBar(__in HWND hWnd,__in UINT wSBflags,__in UINT wArrows);																		
EnableThreadProfiling(__in HANDLE ThreadHandle,__in DWORD Flags,__in DWORD64 HardwareCounters,__out HANDLE *PerformanceDataHandle);																		
EnableWindow(__in HWND hWnd,__in BOOL bEnable);																		
EncodePointer (__in_opt PVOID Ptr);																		
EncodeSystemPointer(__in_opt PVOID Ptr);																		
EncryptFileA(__in LPCSTR lpFileName);																		
EncryptFileW(__in LPCWSTR lpFileName);																		
EncryptionDisable(    __in LPCWSTR DirPath,         BOOL        Disable    );																		
EndDeferWindowPos(    __in HDWP hWinPosInfo);																		
EndDialog(__in HWND hDlg,__in INT_PTR nResult);																		
EndDoc(__in HDC hdc);																		
EndDocPrinter(__in  HANDLE   hPrinter);																		
EndMenu(VOID);																		
EndPage(__in HDC hdc);																		
EndPagePrinter(__in    HANDLE   hPrinter);																		
EndPaint(__in HWND hWnd,    __in CONST PAINTSTRUCT *lpPaint);																		
EndPath(__in HDC hdc);																		
EndTask(__in HWND hWnd,    __in BOOL fShutDown,    __in BOOL fForce);																		
EndUpdateResourceA(    __in HANDLE hUpdate,    __in BOOL   fDiscard    );																		
EndUpdateResourceW(    __in HANDLE hUpdate,    __in BOOL   fDiscard    );																		
EnterCriticalPolicySection(    __in        BOOL    bMachine);																		
EnterCriticalSection(    __inout LPCRITICAL_SECTION lpCriticalSection    );																		
EnterUmsSchedulingMode(    __in PUMS_SCHEDULER_STARTUP_INFO SchedulerStartupInfo    );																		
EnumCalendarInfoA(    __in CALINFO_ENUMPROCA lpCalInfoEnumProc,    __in LCID              Locale,    __in CALID             Calendar,    __in CALTYPE           CalType);																		
EnumCalendarInfoExA(    __in CALINFO_ENUMPROCEXA lpCalInfoEnumProcEx,    __in LCID                Locale,    __in CALID               Calendar,    __in CALTYPE             CalType);																		
EnumCalendarInfoExEx(    __in CALINFO_ENUMPROCEXEX pCalInfoEnumProcExEx,    __in_opt LPCWSTR lpLocaleName,    __in CALID Calendar,    __in_opt LPCWSTR lpReserved,    __in CALTYPE CalType,    __in LPARAM lParam);																		
EnumCalendarInfoExW(    __in CALINFO_ENUMPROCEXW lpCalInfoEnumProcEx,    __in LCID                Locale,    __in CALID               Calendar,    __in CALTYPE             CalType);																		
EnumCalendarInfoW(    __in CALINFO_ENUMPROCW lpCalInfoEnumProc,    __in LCID              Locale,    __in CALID             Calendar,    __in CALTYPE           CalType);																		
EnumChildWindows(__in_opt HWND hWndParent,__in WNDENUMPROC lpEnumFunc,__in LPARAM lParam);																		
EnumClipboardFormats(    __in UINT format);																		
EnumDateFormatsA(    __in DATEFMT_ENUMPROCA lpDateFmtEnumProc,    __in LCID              Locale,    __in DWORD             dwFlags);																		
EnumDateFormatsExA(    __in DATEFMT_ENUMPROCEXA lpDateFmtEnumProcEx,    __in LCID                Locale,    __in DWORD               dwFlags);																		
EnumDateFormatsExEx(    __in DATEFMT_ENUMPROCEXEX lpDateFmtEnumProcExEx,    __in_opt LPCWSTR lpLocaleName,    __in DWORD dwFlags,    __in LPARAM lParam);																		
EnumDateFormatsExW(    __in DATEFMT_ENUMPROCEXW lpDateFmtEnumProcEx,    __in LCID                Locale,    __in DWORD               dwFlags);																		
EnumDateFormatsW(    __in DATEFMT_ENUMPROCW lpDateFmtEnumProc,    __in LCID              Locale,    __in DWORD             dwFlags);																		
EnumDependentServicesA(    __in            SC_HANDLE               hService,    __in            DWORD                   dwServiceState,    __out_bcount_opt(cbBufSize)                    LPENUM_SERVICE_STATUSA  lpServices,    __in            DWORD                   cbBufSize,    __out           LPDWORD                 pcbBytesNeeded,    __out           LPDWORD                 lpServicesReturned    );																		
EnumDependentServicesW(    __in            SC_HANDLE               hService,    __in            DWORD                   dwServiceState,    __out_bcount_opt(cbBufSize)                    LPENUM_SERVICE_STATUSW  lpServices,    __in            DWORD                   cbBufSize,    __out           LPDWORD                 pcbBytesNeeded,    __out           LPDWORD                 lpServicesReturned    );																		
EnumDesktopsA(    __in_opt HWINSTA hwinsta,    __in DESKTOPENUMPROCA lpEnumFunc,    __in LPARAM lParam);																		
EnumDesktopsW(    __in_opt HWINSTA hwinsta,    __in DESKTOPENUMPROCW lpEnumFunc,    __in LPARAM lParam);																		
EnumDesktopWindows(    __in_opt HDESK hDesktop,    __in WNDENUMPROC lpfn,    __in LPARAM lParam);																		
EnumDeviceDrivers (    __out_bcount(cb) LPVOID *lpImageBase,    __in DWORD cb,    __out LPDWORD lpcbNeeded    );																		
EnumDirTree(    __in_opt HANDLE hProcess,    __in PCSTR RootPath,    __in PCSTR InputPathName,    __out_ecount_opt(MAX_PATH + 1) PSTR OutputPathBuffer,    __in_opt PENUMDIRTREE_CALLBACK cb,    __in_opt PVOID data    );																		
EnumDirTree(__in_opt HANDLE hProcess,__in PCSTR RootPath,__in PCSTR InputPathName,__out_ecount_opt(MAX_PATH + 1) PSTR OutputPathBuffer,__in_opt PENUMDIRTREE_CALLBACK cb,__in_opt PVOID data);																		
EnumDirTreeW(    __in_opt HANDLE hProcess,    __in PCWSTR RootPath,    __in PCWSTR InputPathName,    __out_ecount_opt(MAX_PATH + 1) PWSTR OutputPathBuffer,    __in_opt PENUMDIRTREE_CALLBACKW cb,    __in_opt PVOID data    );																		
EnumDirTreeW(__in_opt HANDLE hProcess,__in PCWSTR RootPath,__in PCWSTR InputPathName,__out_ecount_opt(MAX_PATH + 1) PWSTR OutputPathBuffer,__in_opt PENUMDIRTREE_CALLBACKW cb,__in_opt PVOID data);																		
EnumDisplayDevicesA(    __in_opt LPCSTR lpDevice,    __in DWORD iDevNum,    __inout PDISPLAY_DEVICEA lpDisplayDevice,    __in DWORD dwFlags);																		
EnumDisplayDevicesW(    __in_opt LPCWSTR lpDevice,    __in DWORD iDevNum,    __inout PDISPLAY_DEVICEW lpDisplayDevice,    __in DWORD dwFlags);																		
EnumDisplayMonitors(    __in_opt HDC hdc,    __in_opt LPCRECT lprcClip,    __in MONITORENUMPROC lpfnEnum,    __in LPARAM dwData);																		
EnumDisplaySettingsA(    __in_opt LPCSTR lpszDeviceName,    __in DWORD iModeNum,    __inout DEVMODEA* lpDevMode);																		
EnumDisplaySettingsExA(    __in_opt LPCSTR lpszDeviceName,    __in DWORD iModeNum,    __inout DEVMODEA* lpDevMode,    __in DWORD dwFlags);																		
EnumDisplaySettingsExW(    __in_opt LPCWSTR lpszDeviceName,    __in DWORD iModeNum,    __inout DEVMODEW* lpDevMode,    __in DWORD dwFlags);																		
EnumDisplaySettingsW(    __in_opt LPCWSTR lpszDeviceName,    __in DWORD iModeNum,    __inout DEVMODEW* lpDevMode);																		
EnumEnhMetaFile( __in_opt HDC hdc, __in HENHMETAFILE hmf, __in ENHMFENUMPROC proc,                 __in_opt LPVOID param, __in_opt CONST RECT * lpRect);																		
EnumerateLoadedModules(    __in HANDLE hProcess,    __in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,    __in_opt PVOID UserContext    );																		
EnumerateLoadedModules(__in HANDLE hProcess,__in PENUMLOADED_MODULES_CALLBACK EnumLoadedModulesCallback,__in_opt PVOID UserContext);																		
EnumerateLoadedModules64(    __in HANDLE hProcess,    __in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,    __in_opt PVOID UserContext    );																		
EnumerateLoadedModules64(__in HANDLE hProcess,__in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,__in_opt PVOID UserContext);																		
EnumerateLoadedModulesEx(    __in HANDLE hProcess,    __in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,    __in_opt PVOID UserContext    );																		
EnumerateLoadedModulesEx(__in HANDLE hProcess,__in PENUMLOADED_MODULES_CALLBACK64 EnumLoadedModulesCallback,__in_opt PVOID UserContext);																		
EnumerateLoadedModulesExW(    __in HANDLE hProcess,    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,    __in_opt PVOID UserContext    );																		
EnumerateLoadedModulesExW(__in HANDLE hProcess,__in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,__in_opt PVOID UserContext);																		
EnumerateLoadedModulesW64(    __in HANDLE hProcess,    __in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,    __in_opt PVOID UserContext    );																		
EnumerateLoadedModulesW64(__in HANDLE hProcess,__in PENUMLOADED_MODULES_CALLBACKW64 EnumLoadedModulesCallback,__in_opt PVOID UserContext);																		
EnumFormsA(__in    HANDLE  hPrinter,        DWORD   Level,__out_bcount_opt(cbBuf)        LPBYTE  pForm,        DWORD   cbBuf,__out   LPDWORD pcbNeeded,__out   LPDWORD pcReturned);																		
EnumFormsW(__in    HANDLE  hPrinter,        DWORD   Level,__out_bcount_opt(cbBuf)        LPBYTE  pForm,        DWORD   cbBuf,__out   LPDWORD pcbNeeded,__out   LPDWORD pcReturned);																		
EnumICMProfilesA( __in HDC hdc, __in ICMENUMPROCA proc, __in_opt LPARAM param);																		
EnumICMProfilesW( __in HDC hdc, __in ICMENUMPROCW proc, __in_opt LPARAM param);																		
EnumJobsA(__in  HANDLE  hPrinter,      DWORD   FirstJob,      DWORD   NoJobs,      DWORD   Level,__out_bcount_opt(cbBuf)      LPBYTE  pJob,      DWORD   cbBuf,__out LPDWORD pcbNeeded,__out LPDWORD pcReturned);																		
EnumJobsW(__in  HANDLE  hPrinter,      DWORD   FirstJob,      DWORD   NoJobs,      DWORD   Level,__out_bcount_opt(cbBuf)      LPBYTE  pJob,      DWORD   cbBuf,__out LPDWORD pcbNeeded,__out LPDWORD pcReturned);																		
EnumLanguageGroupLocalesA(    __in LANGGROUPLOCALE_ENUMPROCA lpLangGroupLocaleEnumProc,    __in LGRPID                    LanguageGroup,    __in DWORD                     dwFlags,    __in LONG_PTR                  lParam);																		
EnumLanguageGroupLocalesW(    __in LANGGROUPLOCALE_ENUMPROCW lpLangGroupLocaleEnumProc,    __in LGRPID                    LanguageGroup,    __in DWORD                     dwFlags,    __in LONG_PTR                  lParam);																		
EnumMetaFile( __in HDC hdc, __in HMETAFILE hmf, __in MFENUMPROC proc, __in_opt LPARAM param);																		
EnumMonitorsA(__in_opt    LPSTR   pName,            DWORD       Level,__out_bcount_opt(cbBuf)            LPBYTE      pMonitor,            DWORD       cbBuf,__out       LPDWORD    pcbNeeded,__out       LPDWORD    pcReturned);																		
EnumMonitorsW(__in_opt    LPWSTR   pName,            DWORD       Level,__out_bcount_opt(cbBuf)            LPBYTE      pMonitor,            DWORD       cbBuf,__out       LPDWORD    pcbNeeded,__out       LPDWORD    pcReturned);																		
EnumPageFilesA (    PENUM_PAGE_FILE_CALLBACKA pCallBackRoutine,    LPVOID pContext    );																		
EnumPageFilesW (    PENUM_PAGE_FILE_CALLBACKW pCallBackRoutine,    LPVOID pContext    );																		
EnumPortsA(__in_opt    LPSTR pName,            DWORD   Level,__out_bcount_opt(cbBuf)            LPBYTE  pPort,            DWORD   cbBuf,__out       LPDWORD pcbNeeded,__out       LPDWORD pcReturned);																		
EnumPortsW(__in_opt    LPWSTR pName,            DWORD   Level,__out_bcount_opt(cbBuf)            LPBYTE  pPort,            DWORD   cbBuf,__out       LPDWORD pcbNeeded,__out       LPDWORD pcReturned);																		
EnumPrinterDataA(__in        HANDLE   hPrinter,            DWORD    dwIndex,__out_bcount(cbValueName)            LPSTR  pValueName,            DWORD    cbValueName,__out       LPDWORD  pcbValueName,__out_opt   LPDWORD  pType,            LPBYTE   pData,            DWORD    cbData,__out_opt   LPDWORD  pcbData);																		
EnumPrinterDataExA(__in    HANDLE    hPrinter,__in    LPCSTR  pKeyName,__out_bcount_opt(cbEnumValues)        LPBYTE    pEnumValues,        DWORD     cbEnumValues,__out   LPDWORD   pcbEnumValues,__out   LPDWORD   pnEnumValues);																		
EnumPrinterDataExW(__in    HANDLE    hPrinter,__in    LPCWSTR  pKeyName,__out_bcount_opt(cbEnumValues)        LPBYTE    pEnumValues,        DWORD     cbEnumValues,__out   LPDWORD   pcbEnumValues,__out   LPDWORD   pnEnumValues);																		
EnumPrinterDataW(__in        HANDLE   hPrinter,            DWORD    dwIndex,__out_bcount(cbValueName)            LPWSTR  pValueName,            DWORD    cbValueName,__out       LPDWORD  pcbValueName,__out_opt   LPDWORD  pType,            LPBYTE   pData,            DWORD    cbData,__out_opt   LPDWORD  pcbData);																		
EnumPrinterDriversA(__in_opt    LPSTR        pName,__in_opt    LPSTR        pEnvironment,            DWORD          Level,__out_bcount_opt(cbBuf)            LPBYTE        pDriverInfo,            DWORD          cbBuf,__out       LPDWORD        pcbNeeded,__out       LPDWORD        pcReturned);																		
EnumPrinterDriversW(__in_opt    LPWSTR        pName,__in_opt    LPWSTR        pEnvironment,            DWORD          Level,__out_bcount_opt(cbBuf)            LPBYTE        pDriverInfo,            DWORD          cbBuf,__out       LPDWORD        pcbNeeded,__out       LPDWORD        pcReturned);																		
EnumPrinterKeyA(__in    HANDLE   hPrinter,__in    LPCSTR pKeyName,__out_bcount_opt(cbSubkey)        LPSTR  pSubkey,        DWORD    cbSubkey,__out   LPDWORD  pcbSubkey);																		
EnumPrinterKeyW(__in    HANDLE   hPrinter,__in    LPCWSTR pKeyName,__out_bcount_opt(cbSubkey)        LPWSTR  pSubkey,        DWORD    cbSubkey,__out   LPDWORD  pcbSubkey);																		
EnumPrintersA(__in          DWORD   Flags,__in_opt      LPSTR Name,              DWORD   Level,__out_bcount_opt(cbBuf)              LPBYTE  pPrinterEnum,              DWORD   cbBuf,__out         LPDWORD pcbNeeded,__out         LPDWORD pcReturned);																		
EnumPrintersW(__in          DWORD   Flags,__in_opt      LPWSTR Name,              DWORD   Level,__out_bcount_opt(cbBuf)              LPBYTE  pPrinterEnum,              DWORD   cbBuf,__out         LPDWORD pcbNeeded,__out         LPDWORD pcReturned);																		
EnumPrintProcessorDatatypesA(__in_opt    LPSTR   pName,__in        LPSTR   pPrintProcessorName,            DWORD     Level,__out_bcount_opt(cbBuf)            LPBYTE    pDatatypes,            DWORD     cbBuf,__out       LPDWORD   pcbNeeded,__out       LPDWORD   pcReturned);																		
EnumPrintProcessorDatatypesW(__in_opt    LPWSTR   pName,__in        LPWSTR   pPrintProcessorName,            DWORD     Level,__out_bcount_opt(cbBuf)            LPBYTE    pDatatypes,            DWORD     cbBuf,__out       LPDWORD   pcbNeeded,__out       LPDWORD   pcReturned);																		
EnumPrintProcessorsA(__in_opt   LPSTR   pName,__in_opt   LPSTR   pEnvironment,           DWORD     Level,__out_bcount_opt(cbBuf)           LPBYTE    pPrintProcessorInfo,           DWORD     cbBuf,__out      LPDWORD   pcbNeeded,__out      LPDWORD   pcReturned);																		
EnumPrintProcessorsW(__in_opt   LPWSTR   pName,__in_opt   LPWSTR   pEnvironment,           DWORD     Level,__out_bcount_opt(cbBuf)           LPBYTE    pPrintProcessorInfo,           DWORD     cbBuf,__out      LPDWORD   pcbNeeded,__out      LPDWORD   pcReturned);																		
EnumProcesses ( __out_bcount(cb) DWORD * lpidProcess, __in DWORD cb, __out LPDWORD lpcbNeeded );																		
EnumProcessModules( __in  HANDLE hProcess, __out_bcount(cb) HMODULE *lphModule, __in  DWORD cb, __out LPDWORD lpcbNeeded );																		
EnumProcessModulesEx( __in  HANDLE hProcess, __out_bcount(cb)  HMODULE *lphModule, __in  DWORD cb, __out  LPDWORD lpcbNeeded, __in  DWORD dwFilterFlag );																		
EnumPropsA( __in HWND hWnd, __in PROPENUMPROCA lpEnumFunc);																		
EnumPropsExA( __in HWND hWnd, __in PROPENUMPROCEXA lpEnumFunc, __in LPARAM lParam);																		
EnumPropsExW( __in HWND hWnd, __in PROPENUMPROCEXW lpEnumFunc, __in LPARAM lParam);																		
EnumPropsW( __in HWND hWnd, __in PROPENUMPROCW lpEnumFunc);																		
EnumProtocolsA ( __in_opt LPINT lpiProtocols, __out_bcount(*lpdwBufferLength) LPVOID lpProtocolBuffer, __inout  LPDWORD lpdwBufferLength );																		
EnumProtocolsW ( __in_opt LPINT lpiProtocols, __out_bcount(*lpdwBufferLength) LPVOID lpProtocolBuffer, __inout  LPDWORD lpdwBufferLength );																		
EnumResourceLanguagesA(    __in_opt HMODULE hModule,    __in     LPCSTR lpType,    __in     LPCSTR lpName,    __in     ENUMRESLANGPROCA lpEnumFunc,    __in     LONG_PTR lParam    );																		
EnumResourceLanguagesExA(    __in_opt HMODULE hModule,    __in LPCSTR lpType,    __in LPCSTR lpName,    __in ENUMRESLANGPROCA lpEnumFunc,    __in LONG_PTR lParam,    DWORD dwFlags,    LANGID LangId    );																		
EnumResourceLanguagesExW(    __in_opt HMODULE hModule,    __in LPCWSTR lpType,    __in LPCWSTR lpName,    __in ENUMRESLANGPROCW lpEnumFunc,    __in LONG_PTR lParam,    DWORD dwFlags,    LANGID LangId    );																		
EnumResourceLanguagesW(    __in_opt HMODULE hModule,    __in     LPCWSTR lpType,    __in     LPCWSTR lpName,    __in     ENUMRESLANGPROCW lpEnumFunc,    __in     LONG_PTR lParam    );																		
EnumResourceNamesA(    __in_opt HMODULE hModule,    __in     LPCSTR lpType,    __in     ENUMRESNAMEPROCA lpEnumFunc,    __in     LONG_PTR lParam    );																		
EnumResourceNamesExA(    __in_opt HMODULE hModule,    __in LPCSTR lpType,    __in ENUMRESNAMEPROCA lpEnumFunc,    __in LONG_PTR lParam,    DWORD dwFlags,    LANGID LangId    );																		
EnumResourceNamesExW(    __in_opt HMODULE hModule,    __in LPCWSTR lpType,    __in ENUMRESNAMEPROCW lpEnumFunc,    __in LONG_PTR lParam,    DWORD dwFlags,    LANGID LangId    );																		
EnumResourceNamesW(    __in_opt HMODULE hModule,    __in     LPCWSTR lpType,    __in     ENUMRESNAMEPROCW lpEnumFunc,    __in     LONG_PTR lParam    );																		
EnumResourceTypesA(    __in_opt HMODULE hModule,    __in     ENUMRESTYPEPROCA lpEnumFunc,    __in     LONG_PTR lParam    );																		
EnumResourceTypesExA(    __in_opt HMODULE hModule,    __in ENUMRESTYPEPROCA lpEnumFunc,    __in LONG_PTR lParam,    DWORD dwFlags,    LANGID LangId    );																		
EnumResourceTypesExW(    __in_opt HMODULE hModule,    __in ENUMRESTYPEPROCW lpEnumFunc,    __in LONG_PTR lParam,    DWORD dwFlags,    LANGID LangId    );																		
EnumResourceTypesW(    __in_opt HMODULE hModule,    __in     ENUMRESTYPEPROCW lpEnumFunc,    __in     LONG_PTR lParam    );																		
EnumServicesStatusA( __in SC_HANDLE hSCManager, __in DWORD dwServiceType, __in DWORD dwServiceState, __out_bcount_opt(cbBufSize) LPENUM_SERVICE_STATUSA  lpServices, __in DWORD cbBufSize, __out LPDWORD pcbBytesNeeded, __out LPDWORD lpServicesReturned, __inout_opt LPDWORD lpResumeHandle );																		
EnumServicesStatusExA( __in SC_HANDLE hSCManager, __in SC_ENUM_TYPE InfoLevel, __in DWORD dwServiceType, __in DWORD dwServiceState, __out_bcount_opt(cbBufSize) LPBYTE lpServices, __in DWORD cbBufSize, __out LPDWORD pcbBytesNeeded, __out LPDWORD lpServicesReturned, __inout_opt LPDWORD lpResumeHandle, __in_opt LPCSTR pszGroupName );																		
EnumServicesStatusExW( __in SC_HANDLE hSCManager, __in SC_ENUM_TYPE InfoLevel, __in DWORD dwServiceType, __in DWORD dwServiceState, __out_bcount_opt(cbBufSize) LPBYTE lpServices, __in DWORD cbBufSize, __out LPDWORD pcbBytesNeeded, __out LPDWORD lpServicesReturned, __inout_opt LPDWORD lpResumeHandle, __in_opt LPCWSTR pszGroupName );																		
EnumServicesStatusW( __in SC_HANDLE hSCManager, __in DWORD dwServiceType, __in DWORD dwServiceState, __out_bcount_opt(cbBufSize) LPENUM_SERVICE_STATUSW  lpServices, __in DWORD cbBufSize, __out LPDWORD pcbBytesNeeded, __out LPDWORD lpServicesReturned, __inout_opt LPDWORD lpResumeHandle    );																		
EnumSystemCodePagesA(    __in CODEPAGE_ENUMPROCA lpCodePageEnumProc,    __in DWORD              dwFlags);																		
EnumSystemCodePagesW(    __in CODEPAGE_ENUMPROCW lpCodePageEnumProc,    __in DWORD              dwFlags);																		
EnumSystemFirmwareTables(    __in DWORD FirmwareTableProviderSignature,    __out_bcount_part_opt(BufferSize, return) PVOID pFirmwareTableEnumBuffer,    __in DWORD BufferSize    );																		
EnumSystemGeoID(    __in GEOCLASS        GeoClass,    __in GEOID           ParentGeoId,    __in GEO_ENUMPROC    lpGeoEnumProc);																		
EnumSystemLanguageGroupsA(    __in LANGUAGEGROUP_ENUMPROCA lpLanguageGroupEnumProc,    __in DWORD                   dwFlags,    __in LONG_PTR                lParam);																		
EnumSystemLanguageGroupsW(    __in LANGUAGEGROUP_ENUMPROCW lpLanguageGroupEnumProc,    __in DWORD                   dwFlags,    __in LONG_PTR                lParam);																		
EnumSystemLocalesA(    __in LOCALE_ENUMPROCA lpLocaleEnumProc,    __in DWORD            dwFlags);																		
EnumSystemLocalesEx(    __in LOCALE_ENUMPROCEX lpLocaleEnumProcEx,    __in DWORD dwFlags,    __in LPARAM lParam,    __in_opt LPVOID lpReserved);																		
EnumSystemLocalesW(    __in LOCALE_ENUMPROCW lpLocaleEnumProc,    __in DWORD            dwFlags);																		
EnumThreadWindows(__in DWORD dwThreadId,__in WNDENUMPROC lpfn,__in LPARAM lParam);																		
EnumTimeFormatsA(    __in TIMEFMT_ENUMPROCA lpTimeFmtEnumProc,    __in LCID              Locale,    __in DWORD             dwFlags);																		
EnumTimeFormatsEx(    __in TIMEFMT_ENUMPROCEX lpTimeFmtEnumProcEx,    __in_opt LPCWSTR lpLocaleName,    __in DWORD dwFlags,    __in LPARAM lParam);																		
EnumTimeFormatsW(    __in TIMEFMT_ENUMPROCW lpTimeFmtEnumProc,    __in LCID              Locale,    __in DWORD             dwFlags);																		
EnumUILanguagesA(    __in UILANGUAGE_ENUMPROCA lpUILanguageEnumProc,    __in DWORD                dwFlags,    __in LONG_PTR             lParam);																		
EnumUILanguagesW(    __in UILANGUAGE_ENUMPROCW lpUILanguageEnumProc,    __in DWORD                dwFlags,    __in LONG_PTR             lParam);																		
EnumWindows(__in WNDENUMPROC lpEnumFunc,__in LPARAM lParam);																		
EnumWindowStationsA( __in WINSTAENUMPROCA lpEnumFunc, __in LPARAM lParam);																		
EnumWindowStationsW( __in WINSTAENUMPROCW lpEnumFunc, __in LPARAM lParam);																		
EqualDomainSid( __in  PSID pSid1, __in  PSID pSid2, __out BOOL *pfEqual );																		
EqualPrefixSid ( __in PSID pSid1, __in PSID pSid2 );																		
EqualRect(__in CONST RECT *lprc1,__in CONST RECT *lprc2);																		
EqualSid ( __in PSID pSid1, __in PSID pSid2 );																		
EraseTape( __in HANDLE hDevice, __in DWORD dwEraseType, __in BOOL bImmediate );																		
EscapeCommFunction( __in HANDLE hFile, __in DWORD dwFunc );																		
EvictClusterNode( __in HNODE hNode );																		
EvictClusterNodeEx( __in HNODE hNode, __in DWORD dwTimeOut, __out HRESULT * phrCleanupStatus );																		
ExcludeUpdateRgn( __in HDC hDC, __in HWND hWnd);																		
ExecuteUmsThread( __inout PUMS_CONTEXT UmsThread );																		
ExitProcess( __in UINT uExitCode );																		
ExitThread( __in DWORD dwExitCode );																		
ExitWindowsEx( __in UINT uFlags, __in DWORD dwReason);																		
ExpandEnvironmentStringsA( __in LPCSTR lpSrc, __out_ecount_part_opt(nSize, return) LPSTR lpDst, __in DWORD nSize );																		
ExpandEnvironmentStringsForUserA(    __in_opt                HANDLE      hToken,    __in                    LPCSTR    lpSrc,    __out_ecount(dwSize)    LPSTR     lpDest,    __in                    DWORD       dwSize);																		
ExpandEnvironmentStringsForUserW(    __in_opt                HANDLE      hToken,    __in                    LPCWSTR    lpSrc,    __out_ecount(dwSize)    LPWSTR     lpDest,    __in                    DWORD       dwSize);																		
ExpandEnvironmentStringsW(    __in LPCWSTR lpSrc,    __out_ecount_part_opt(nSize, return) LPWSTR lpDst,    __in DWORD nSize    );																		
ExpandVirtualDisk(    __in     HANDLE                          VirtualDiskHandle,    __in     EXPAND_VIRTUAL_DISK_FLAG        Flags,    __in     PEXPAND_VIRTUAL_DISK_PARAMETERS Parameters,    __in_opt LPOVERLAPPED                    Overlapped    );																		
ExportRSoPData(    __in LPOLESTR lpNameSpace,    __in LPOLESTR lpFileName);																		
ExtCreatePen( __in DWORD iPenStyle,__in DWORD cWidth,__in CONST LOGBRUSH *plbrush,__in DWORD cStyle,__in_ecount_opt(cStyle) CONST DWORD *pstyle);																		
ExtSelectClipRgn(__in HDC hdc, __in_opt HRGN hrgn, __in int mode);																		
ExtTextOutA( __in HDC hdc, __in int x, __in int y, __in UINT options, __in_opt CONST RECT * lprect, __in_ecount_opt(c) LPCSTR lpString, __in UINT c, __in_ecount_opt(c) CONST INT * lpDx);																		
ExtTextOutW( __in HDC hdc, __in int x, __in int y, __in UINT options, __in_opt CONST RECT * lprect, __in_ecount_opt(c) LPCWSTR lpString, __in UINT c, __in_ecount_opt(c) CONST INT * lpDx);																		
FailClusterResource(    __in HRESOURCE hResource    );																		
FatalAppExitA(    __in UINT uAction,    __in LPCSTR lpMessageText    );																		
FatalAppExitW(    __in UINT uAction,    __in LPCWSTR lpMessageText    );																		
FatalExit(    __in int ExitCode    );																		
FaxAbort(    IN HANDLE FaxHandle,    IN DWORD JobId    );																		
FaxAccessCheck(    IN HANDLE FaxHandle,    IN DWORD  AccessMask    );																		
FaxClose(    IN HANDLE FaxHandle    );																		
FaxCompleteJobParamsA( IN OUT PFAX_JOB_PARAMA *JobParams, IN OUT PFAX_COVERPAGE_INFOA *CoverpageInfo );																		
FaxCompleteJobParamsW( IN OUT PFAX_JOB_PARAMW *JobParams, IN OUT PFAX_COVERPAGE_INFOW *CoverpageInfo );																		
FaxConnectFaxServerA( IN  LPCSTR MachineName OPTIONAL, OUT LPHANDLE FaxHandle );																		
FaxConnectFaxServerW( IN  LPCWSTR MachineName OPTIONAL, OUT LPHANDLE FaxHandle );																		
FaxEnableRoutingMethodA( IN  HANDLE FaxPortHandle, IN  LPCSTR RoutingGuid, IN  BOOL Enabled );																		
FaxEnableRoutingMethodW( IN  HANDLE FaxPortHandle, IN  LPCWSTR RoutingGuid, IN  BOOL Enabled );																		
FaxEnumGlobalRoutingInfoA( IN  HANDLE FaxHandle, OUT PFAX_GLOBAL_ROUTING_INFOA *RoutingInfo, OUT LPDWORD MethodsReturned );																		
FaxEnumGlobalRoutingInfoW( IN  HANDLE FaxHandle, OUT PFAX_GLOBAL_ROUTING_INFOW *RoutingInfo, OUT LPDWORD MethodsReturned );																		
FaxEnumJobsA( IN  HANDLE FaxHandle, OUT PFAX_JOB_ENTRYA *JobEntry, OUT LPDWORD JobsReturned );																		
FaxEnumJobsW( IN  HANDLE FaxHandle, OUT PFAX_JOB_ENTRYW *JobEntry, OUT LPDWORD JobsReturned );																		
FaxEnumPortsA( IN  HANDLE FaxHandle, OUT PFAX_PORT_INFOA *PortInfo, OUT LPDWORD PortsReturned );																		
FaxEnumPortsW( IN  HANDLE FaxHandle, OUT PFAX_PORT_INFOW *PortInfo, OUT LPDWORD PortsReturned );																		
FaxEnumRoutingMethodsA( IN  HANDLE FaxPortHandle, OUT PFAX_ROUTING_METHODA *RoutingMethod, OUT LPDWORD MethodsReturned );																		
FaxEnumRoutingMethodsW( IN  HANDLE FaxPortHandle, OUT PFAX_ROUTING_METHODW *RoutingMethod, OUT LPDWORD MethodsReturned );																		
FaxFreeBuffer( LPVOID Buffer );																		
FaxGetConfigurationA( IN  HANDLE FaxHandle, OUT PFAX_CONFIGURATIONA *FaxConfig );																		
FaxGetConfigurationW( IN  HANDLE FaxHandle, OUT PFAX_CONFIGURATIONW *FaxConfig );																		
FaxGetDeviceStatusA( IN  HANDLE FaxPortHandle, OUT PFAX_DEVICE_STATUSA *DeviceStatus );																		
FaxGetDeviceStatusW( IN  HANDLE FaxPortHandle, OUT PFAX_DEVICE_STATUSW *DeviceStatus );																		
FaxGetJobA( IN  HANDLE FaxHandle, IN  DWORD JobId, OUT PFAX_JOB_ENTRYA *JobEntry );																		
FaxGetJobW( IN  HANDLE FaxHandle, IN  DWORD JobId, OUT PFAX_JOB_ENTRYW *JobEntry );																		
FaxGetLoggingCategoriesA( IN  HANDLE FaxHandle, OUT PFAX_LOG_CATEGORYA *Categories, OUT LPDWORD NumberCategories );																		
FaxGetLoggingCategoriesW( IN  HANDLE FaxHandle, OUT PFAX_LOG_CATEGORYW *Categories, OUT LPDWORD NumberCategories );																		
FaxGetPageData(   IN HANDLE FaxHandle,   IN DWORD JobId,   OUT LPBYTE *Buffer,   OUT LPDWORD BufferSize,   OUT LPDWORD ImageWidth,   OUT LPDWORD ImageHeight   );																		
FaxGetPortA( IN  HANDLE FaxPortHandle, OUT PFAX_PORT_INFOA *PortInfo );																		
FaxGetPortW( IN  HANDLE FaxPortHandle, OUT PFAX_PORT_INFOW *PortInfo );																		
FaxGetRoutingInfoA(    IN  HANDLE FaxPortHandle,    IN  LPCSTR RoutingGuid,    OUT LPBYTE *RoutingInfoBuffer,    OUT LPDWORD RoutingInfoBufferSize    );																		
FaxGetRoutingInfoW(    IN  HANDLE FaxPortHandle,    IN  LPCWSTR RoutingGuid,    OUT LPBYTE *RoutingInfoBuffer,    OUT LPDWORD RoutingInfoBufferSize    );																		
FaxInitializeEventQueue(    IN HANDLE FaxHandle,    IN HANDLE CompletionPort,    IN ULONG_PTR CompletionKey,    IN HWND hWnd,    IN UINT MessageStart    );																		
FaxOpenPort(    IN  HANDLE FaxHandle,    IN  DWORD DeviceId,    IN  DWORD Flags,    OUT LPHANDLE FaxPortHandle    );																		
FaxPrintCoverPageA(    IN const FAX_CONTEXT_INFOA *FaxContextInfo,    IN const FAX_COVERPAGE_INFOA *CoverPageInfo    );																		
FaxPrintCoverPageW(    IN const FAX_CONTEXT_INFOW *FaxContextInfo,    IN const FAX_COVERPAGE_INFOW *CoverPageInfo    );																		
FaxRegisterRoutingExtensionW(    IN HANDLE  FaxHandle,    IN LPCWSTR ExtensionName,    IN LPCWSTR FriendlyName,    IN LPCWSTR ImageName,    IN PFAX_ROUTING_INSTALLATION_CALLBACKW CallBack,    IN LPVOID Context    );																		
FaxRegisterServiceProviderW(    IN LPCWSTR DeviceProvider,    IN LPCWSTR FriendlyName,    IN LPCWSTR ImageName,    IN LPCWSTR TspName    );																		
FaxSendDocumentA(    IN HANDLE FaxHandle,    IN LPCSTR FileName,    IN PFAX_JOB_PARAMA JobParams,    IN const FAX_COVERPAGE_INFOA *CoverpageInfo, OPTIONAL    OUT LPDWORD FaxJobId OPTIONAL    );																		
FaxSendDocumentForBroadcastA(    IN HANDLE FaxHandle,    IN LPCSTR FileName,    OUT LPDWORD FaxJobId,    IN PFAX_RECIPIENT_CALLBACKA FaxRecipientCallback,    IN LPVOID Context    );																		
FaxSendDocumentForBroadcastW(    IN HANDLE FaxHandle,    IN LPCWSTR FileName,    OUT LPDWORD FaxJobId,    IN PFAX_RECIPIENT_CALLBACKW FaxRecipientCallback,    IN LPVOID Context    );																		
FaxSendDocumentW(    IN HANDLE FaxHandle,    IN LPCWSTR FileName,    IN PFAX_JOB_PARAMW JobParams,    IN const FAX_COVERPAGE_INFOW *CoverpageInfo, OPTIONAL    OUT LPDWORD FaxJobId OPTIONAL    );																		
FaxSetConfigurationA(    IN  HANDLE FaxHandle,    IN  const FAX_CONFIGURATIONA *FaxConfig    );																		
FaxSetConfigurationW(    IN  HANDLE FaxHandle,    IN  const FAX_CONFIGURATIONW *FaxConfig    );																		
FaxSetGlobalRoutingInfoA(    IN  HANDLE FaxHandle,    IN  const FAX_GLOBAL_ROUTING_INFOA *RoutingInfo    );																		
FaxSetGlobalRoutingInfoW(    IN  HANDLE FaxHandle,    IN  const FAX_GLOBAL_ROUTING_INFOW *RoutingInfo    );																		
FaxSetJobA(   IN HANDLE FaxHandle,   IN DWORD JobId,   IN DWORD Command,   IN const FAX_JOB_ENTRYA *JobEntry   );																		
FaxSetJobW(   IN HANDLE FaxHandle,   IN DWORD JobId,   IN DWORD Command,   IN const FAX_JOB_ENTRYW *JobEntry   );																		
FaxSetLoggingCategoriesA(    IN  HANDLE FaxHandle,    IN  const FAX_LOG_CATEGORYA *Categories,    IN  DWORD NumberCategories    );																		
FaxSetLoggingCategoriesW(    IN  HANDLE FaxHandle,    IN  const FAX_LOG_CATEGORYW *Categories,    IN  DWORD NumberCategories    );																		
FaxSetPortA(    IN  HANDLE FaxPortHandle,    IN  const FAX_PORT_INFOA *PortInfo    );																		
FaxSetPortW(    IN  HANDLE FaxPortHandle,    IN  const FAX_PORT_INFOW *PortInfo    );																		
FaxSetRoutingInfoA(    IN  HANDLE FaxPortHandle,    IN  LPCSTR RoutingGuid,    IN  const BYTE *RoutingInfoBuffer,    IN  DWORD RoutingInfoBufferSize    );																		
FaxSetRoutingInfoW(    IN  HANDLE FaxPortHandle,    IN  LPCWSTR RoutingGuid,    IN  const BYTE *RoutingInfoBuffer,    IN  DWORD RoutingInfoBufferSize    );																		
FaxStartPrintJobA(    IN  LPCSTR PrinterName,    IN  const FAX_PRINT_INFOA *PrintInfo,    OUT LPDWORD FaxJobId,    OUT PFAX_CONTEXT_INFOA FaxContextInfo    );																		
FaxStartPrintJobW(    IN  LPCWSTR PrinterName,    IN  const FAX_PRINT_INFOW *PrintInfo,    OUT LPDWORD FaxJobId,    OUT PFAX_CONTEXT_INFOW FaxContextInfo    );																		
FaxUnregisterRoutingExtensionA( IN HANDLE hFaxHandle, IN LPCSTR lpctstrExtensionName);																		
FaxUnregisterRoutingExtensionW( IN HANDLE hFaxHandle, IN LPCWSTR lpctstrExtensionName);																		
FaxUnregisterServiceProviderW( IN LPCWSTR DeviceProvider );																		
FileEncryptionStatusA( __in  LPCSTR lpFileName, __out LPDWORD  lpStatus );																		
FileEncryptionStatusW( __in  LPCWSTR lpFileName, __out LPDWORD  lpStatus );																		
FileTimeToDosDateTime( __in  CONST FILETIME *lpFileTime, __out LPWORD lpFatDate, __out LPWORD lpFatTime );																		
FileTimeToLocalFileTime( __in  CONST FILETIME *lpFileTime, __out LPFILETIME lpLocalFileTime );																		
FileTimeToSystemTime( __in  CONST FILETIME *lpFileTime, __out LPSYSTEMTIME lpSystemTime );																		
FillConsoleOutputAttribute( __in HANDLE hConsoleOutput, __in WORD   wAttribute, __in DWORD  nLength, __in COORD  dwWriteCoord, __out LPDWORD lpNumberOfAttrsWritten );																		
FillConsoleOutputCharacterA( __in HANDLE hConsoleOutput, __in CHAR  cCharacter, __in DWORD  nLength, __in COORD  dwWriteCoord, __out LPDWORD lpNumberOfCharsWritten );																		
FillConsoleOutputCharacterW( __in HANDLE hConsoleOutput, __in WCHAR  cCharacter, __in DWORD  nLength, __in COORD  dwWriteCoord, __out LPDWORD lpNumberOfCharsWritten );																		
FillPath(__in HDC hdc);																		
FillRect(__in HDC hDC,__in CONST RECT *lprc,__in HBRUSH hbr);																		
FindActCtxSectionGuid( __in DWORD dwFlags, __reserved const GUID *lpExtensionGuid, __in ULONG ulSectionId, __in_opt const GUID *lpGuidToFind, __out PACTCTX_SECTION_KEYED_DATA ReturnedData );																		
FindActCtxSectionStringA( __in DWORD dwFlags, __reserved const GUID *lpExtensionGuid, __in ULONG ulSectionId, __in LPCSTR lpStringToFind, __out PACTCTX_SECTION_KEYED_DATA ReturnedData );																		
FindActCtxSectionStringW( __in DWORD dwFlags, __reserved const GUID *lpExtensionGuid, __in ULONG ulSectionId, __in LPCWSTR lpStringToFind, __out PACTCTX_SECTION_KEYED_DATA ReturnedData );																		
FindAtomA( __in_opt LPCSTR lpString );																		
FindAtomW( __in_opt LPCWSTR lpString );																		
FindCertsByIssuer( __out_bcount_part_opt(*pcbCertChains, *pcbCertChains) PCERT_CHAIN pCertChains, __inout DWORD *pcbCertChains, __out DWORD *pcCertChains, __in_bcount_opt(cbEncodedIssuerName) BYTE* pbEncodedIssuerName, __in DWORD cbEncodedIssuerName, __in_opt LPCWSTR pwszPurpose, __in DWORD dwKeySpec );																		
FindClose( __inout HANDLE hFindFile );																		
FindCloseChangeNotification( __in HANDLE hChangeHandle );																		
FindClosePrinterChangeNotification(__in   HANDLE hChange );																		
FindCloseUrlCache( __in HANDLE hEnumHandle );																		
FindDebugInfoFile ( __in PCSTR FileName, __in PCSTR SymbolPath, __out_ecount(MAX_PATH + 1) PSTR DebugFilePath );																		
FindDebugInfoFile (__in PCSTR FileName,__in PCSTR SymbolPath,__out_ecount(MAX_PATH + 1) PSTR DebugFilePath);																		
FindDebugInfoFileEx (    __in PCSTR FileName,    __in PCSTR SymbolPath,    __out_ecount(MAX_PATH + 1) PSTR  DebugFilePath,    __in_opt PFIND_DEBUG_FILE_CALLBACK Callback,    __in_opt PVOID CallerData    );																		
FindDebugInfoFileEx (__in PCSTR FileName,__in PCSTR SymbolPath,__out_ecount(MAX_PATH + 1) PSTR  DebugFilePath,__in_opt PFIND_DEBUG_FILE_CALLBACK Callback,__in_opt PVOID CallerData);																		
FindDebugInfoFileExW (    __in PCWSTR FileName,    __in PCWSTR SymbolPath,    __out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,    __in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,    __in_opt PVOID CallerData    );																		
FindDebugInfoFileExW (__in PCWSTR FileName,__in PCWSTR SymbolPath,__out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,__in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,__in_opt PVOID CallerData);																		
FindExecutableImage(    __in PCSTR FileName,    __in PCSTR SymbolPath,    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath    );																		
FindExecutableImage(__in PCSTR FileName,__in PCSTR SymbolPath,__out_ecount(MAX_PATH + 1) PSTR ImageFilePath);																		
FindExecutableImageEx(    __in PCSTR FileName,    __in PCSTR SymbolPath,    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath,    __in_opt PFIND_EXE_FILE_CALLBACK Callback,    __in_opt PVOID CallerData    );																		
FindExecutableImageEx(__in PCSTR FileName,__in PCSTR SymbolPath,__out_ecount(MAX_PATH + 1) PSTR ImageFilePath,__in_opt PFIND_EXE_FILE_CALLBACK Callback,__in_opt PVOID CallerData);																		
FindExecutableImageExW(    __in PCWSTR FileName,    __in PCWSTR SymbolPath,    __out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,    __in_opt PFIND_EXE_FILE_CALLBACKW Callback,    __in PVOID CallerData    );																		
FindExecutableImageExW(__in PCWSTR FileName,__in PCWSTR SymbolPath,__out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,__in_opt PFIND_EXE_FILE_CALLBACKW Callback,__in PVOID CallerData);																		
FindFileInPath(    __in HANDLE hprocess,    __in PCSTR SearchPath,    __in PCSTR FileName,    __in PVOID id,    __in DWORD two,    __in DWORD three,    __in DWORD flags,    __out_ecount(MAX_PATH + 1) PSTR FilePath    );																		
FindFileInPath(__in HANDLE hprocess,__in PCSTR SearchPath,__in PCSTR FileName,__in PVOID id,__in DWORD two,__in DWORD three,__in DWORD flags,__out_ecount(MAX_PATH + 1) PSTR FilePath);																		
FindFileInSearchPath(    __in HANDLE hprocess,    __in PCSTR SearchPath,    __in PCSTR FileName,    __in DWORD one,    __in DWORD two,    __in DWORD three,    __out_ecount(MAX_PATH + 1) PSTR FilePath    );																		
FindFileInSearchPath(__in HANDLE hprocess,__in PCSTR SearchPath,__in PCSTR FileName,__in DWORD one,__in DWORD two,__in DWORD three,__out_ecount(MAX_PATH + 1) PSTR FilePath);																		
FindFirstChangeNotificationA(    __in LPCSTR lpPathName,    __in BOOL bWatchSubtree,    __in DWORD dwNotifyFilter    );																		
FindFirstChangeNotificationW(    __in LPCWSTR lpPathName,    __in BOOL bWatchSubtree,    __in DWORD dwNotifyFilter    );																		
FindFirstFileA(    __in  LPCSTR lpFileName,    __out LPWIN32_FIND_DATAA lpFindFileData    );																		
FindFirstFileExA(    __in       LPCSTR lpFileName,    __in       FINDEX_INFO_LEVELS fInfoLevelId,    __out      LPVOID lpFindFileData,    __in       FINDEX_SEARCH_OPS fSearchOp,    __reserved LPVOID lpSearchFilter,    __in       DWORD dwAdditionalFlags    );																		
FindFirstFileExW(    __in       LPCWSTR lpFileName,    __in       FINDEX_INFO_LEVELS fInfoLevelId,    __out      LPVOID lpFindFileData,    __in       FINDEX_SEARCH_OPS fSearchOp,    __reserved LPVOID lpSearchFilter,    __in       DWORD dwAdditionalFlags    );																		
FindFirstFileNameTransactedW (    __in     LPCWSTR lpFileName,    __in     DWORD dwFlags,    __inout  LPDWORD StringLength,    __inout_ecount(*StringLength) PWCHAR LinkName,    __in_opt HANDLE hTransaction    );																		
FindFirstFileNameW (    __in    LPCWSTR lpFileName,    __in    DWORD dwFlags,    __inout LPDWORD StringLength,    __inout_ecount(*StringLength) PWCHAR LinkName    );																		
FindFirstFileTransactedA(    __in       LPCSTR lpFileName,    __in       FINDEX_INFO_LEVELS fInfoLevelId,    __out      LPVOID lpFindFileData,    __in       FINDEX_SEARCH_OPS fSearchOp,    __reserved LPVOID lpSearchFilter,    __in       DWORD dwAdditionalFlags,    __in       HANDLE hTransaction    );																		
FindFirstFileTransactedW(    __in       LPCWSTR lpFileName,    __in       FINDEX_INFO_LEVELS fInfoLevelId,    __out      LPVOID lpFindFileData,    __in       FINDEX_SEARCH_OPS fSearchOp,    __reserved LPVOID lpSearchFilter,    __in       DWORD dwAdditionalFlags,    __in       HANDLE hTransaction    );																		
FindFirstFileW(    __in  LPCWSTR lpFileName,    __out LPWIN32_FIND_DATAW lpFindFileData    );																		
FindFirstFreeAce (    __in        PACL pAcl,    __deref_out LPVOID *pAce    );																		
FindFirstPrinterChangeNotification(__in     HANDLE hPrinter,         DWORD  fdwFilter,         DWORD  fdwOptions,__in_opt PVOID  pPrinterNotifyOptions    );																		
FindFirstStreamTransactedW (    __in       LPCWSTR lpFileName,    __in       STREAM_INFO_LEVELS InfoLevel,    __out      LPVOID lpFindStreamData,    __reserved DWORD dwFlags,    __in       HANDLE hTransaction    );																		
FindFirstStreamW(    __in       LPCWSTR lpFileName,    __in       STREAM_INFO_LEVELS InfoLevel,    __out      LPVOID lpFindStreamData,    __reserved DWORD dwFlags    );																		
FindFirstUrlCacheContainerA(    __inout LPDWORD pdwModified,    __out_bcount(*lpcbContainerInfo) LPINTERNET_CACHE_CONTAINER_INFOA lpContainerInfo,    __inout LPDWORD lpcbContainerInfo,    __in DWORD dwOptions    );																		
FindFirstUrlCacheContainerW(    __inout LPDWORD pdwModified,    __out_bcount(*lpcbContainerInfo) LPINTERNET_CACHE_CONTAINER_INFOW lpContainerInfo,    __inout LPDWORD lpcbContainerInfo,    __in DWORD dwOptions    );																		
FindFirstUrlCacheEntryA(    __in_opt LPCSTR lpszUrlSearchPattern,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo    );																		
FindFirstUrlCacheEntryExA(    __in_opt LPCSTR  lpszUrlSearchPattern,    __in DWORD dwFlags,    __in DWORD  dwFilter,    __in GROUPID  GroupId,    __inout_bcount_opt(*lpcbEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpFirstCacheEntryInfo,    __inout LPDWORD lpcbEntryInfo,    __reserved LPVOID lpGroupAttributes,    __reserved LPDWORD lpcbGroupAttributes,    __reserved LPVOID lpReserved    );																		
FindFirstUrlCacheEntryExW(    __in_opt LPCWSTR  lpszUrlSearchPattern,    __in DWORD dwFlags,    __in DWORD  dwFilter,    __in GROUPID  GroupId,    __inout_bcount_opt(*lpcbEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,    __inout LPDWORD lpcbEntryInfo,    __reserved LPVOID lpGroupAttributes,    __reserved LPDWORD lpcbGroupAttributes,    __reserved LPVOID lpReserved    );																		
FindFirstUrlCacheEntryW(    __in_opt LPCWSTR lpszUrlSearchPattern,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpFirstCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo    );																		
FindFirstUrlCacheGroup(    __in      DWORD                           dwFlags,    __in      DWORD                           dwFilter,    __reserved    LPVOID                          lpSearchCondition,    __reserved    DWORD                           dwSearchCondition,    __out     GROUPID*                        lpGroupId,    __reserved    LPVOID                          lpReserved    );																		
FindFirstVolumeA(    __out_ecount(cchBufferLength) LPSTR lpszVolumeName,    __in DWORD cchBufferLength    );																		
FindFirstVolumeMountPointA(    __in LPCSTR lpszRootPathName,    __out_ecount(cchBufferLength) LPSTR lpszVolumeMountPoint,    __in DWORD cchBufferLength    );																		
FindFirstVolumeMountPointW(    __in LPCWSTR lpszRootPathName,    __out_ecount(cchBufferLength) LPWSTR lpszVolumeMountPoint,    __in DWORD cchBufferLength    );																		
FindFirstVolumeW(    __out_ecount(cchBufferLength) LPWSTR lpszVolumeName,    __in DWORD cchBufferLength    );																		
FindNextChangeNotification(    __in HANDLE hChangeHandle    );																		
FindNextFileA(    __in  HANDLE hFindFile,    __out LPWIN32_FIND_DATAA lpFindFileData    );																		
FindNextFileNameW (    __in    HANDLE hFindStream,    __inout LPDWORD StringLength,    __inout_ecount(*StringLength) PWCHAR LinkName    );																		
FindNextFileW(    __in  HANDLE hFindFile,    __out LPWIN32_FIND_DATAW lpFindFileData    );																		
FindNextPrinterChangeNotification(__in        HANDLE hChange,__out_opt   PDWORD pdwChange,__in_opt    LPVOID pvReserved,__out_opt   LPVOID *ppPrinterNotifyInfo    );																		
FindNextStreamW(    __in  HANDLE hFindStream,    __out LPVOID lpFindStreamData    );																		
FindNextUrlCacheContainerA(    __in HANDLE hEnumHandle,    __out_bcount(*lpcbContainerInfo) LPINTERNET_CACHE_CONTAINER_INFOA lpContainerInfo,    __inout LPDWORD lpcbContainerInfo    );																		
FindNextUrlCacheContainerW(    __in HANDLE hEnumHandle,    __out_bcount(*lpcbContainerInfo) LPINTERNET_CACHE_CONTAINER_INFOW lpContainerInfo,    __inout LPDWORD lpcbContainerInfo    );																		
FindNextUrlCacheEntryA(    __in HANDLE hEnumHandle,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo    );																		
FindNextUrlCacheEntryExA(    __in HANDLE hEnumHandle,    __inout_bcount_opt(*lpcbEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpNextCacheEntryInfo,    __inout LPDWORD lpcbEntryInfo,    __reserved LPVOID lpGroupAttributes,    __reserved LPDWORD lpcbGroupAttributes,    __reserved LPVOID lpReserved    );																		
FindNextUrlCacheEntryExW(    __in HANDLE hEnumHandle,    __inout_bcount_opt(*lpcbEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo,    __inout LPDWORD lpcbEntryInfo,    __reserved LPVOID lpGroupAttributes,    __reserved LPDWORD lpcbGroupAttributes,    __reserved LPVOID lpReserved    );																		
FindNextUrlCacheEntryW(    __in HANDLE hEnumHandle,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpNextCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo    );																		
FindNextUrlCacheGroup(    __in HANDLE                               hFind,    __out GROUPID*                            lpGroupId,    __reserved LPVOID                             lpReserved    );																		
FindNextVolumeA(    __inout HANDLE hFindVolume,    __out_ecount(cchBufferLength) LPSTR lpszVolumeName,    __in    DWORD cchBufferLength    );																		
FindNextVolumeMountPointA(    __in HANDLE hFindVolumeMountPoint,    __out_ecount(cchBufferLength) LPSTR lpszVolumeMountPoint,    __in DWORD cchBufferLength    );																		
FindNextVolumeMountPointW(    __in HANDLE hFindVolumeMountPoint,    __out_ecount(cchBufferLength) LPWSTR lpszVolumeMountPoint,    __in DWORD cchBufferLength    );																		
FindNextVolumeW(    __inout HANDLE hFindVolume,    __out_ecount(cchBufferLength) LPWSTR lpszVolumeName,    __in    DWORD cchBufferLength    );																		
FindNLSString(    __in                    LCID Locale,    __in                    DWORD dwFindNLSStringFlags,    __in_ecount(cchSource)  LPCWSTR lpStringSource,    __in                    int cchSource,    __in_ecount(cchValue)   LPCWSTR lpStringValue,    __in                    int cchValue,    __out_opt               LPINT pcchFound);																		
FindNLSStringEx(    __in_opt LPCWSTR lpLocaleName,    __in DWORD dwFindNLSStringFlags,    __in_ecount(cchSource) LPCWSTR lpStringSource,    __in int cchSource,    __in_ecount(cchValue) LPCWSTR lpStringValue,    __in int cchValue,    __out_opt LPINT pcchFound,    __in_opt LPNLSVERSIONINFO lpVersionInformation,    __in_opt LPVOID lpReserved,    __in_opt LPARAM lParam);																		
FindResourceA(    __in_opt HMODULE hModule,    __in     LPCSTR lpName,    __in     LPCSTR lpType    );																		
FindResourceExA(    __in_opt HMODULE hModule,    __in     LPCSTR lpType,    __in     LPCSTR lpName,    __in     WORD    wLanguage    );																		
FindResourceExW(    __in_opt HMODULE hModule,    __in     LPCWSTR lpType,    __in     LPCWSTR lpName,    __in     WORD    wLanguage    );																		
FindResourceW(    __in_opt HMODULE hModule,    __in     LPCWSTR lpName,    __in     LPCWSTR lpType    );																		
FindStringOrdinal(    __in                    DWORD dwFindStringOrdinalFlags,    __in_ecount(cchSource)  LPCWSTR lpStringSource,    __in                    int cchSource,    __in_ecount(cchValue)   LPCWSTR lpStringValue,    __in                    int cchValue,    __in                    BOOL bIgnoreCase);																		
FindVolumeClose(    __in HANDLE hFindVolume    );																		
FindVolumeMountPointClose(    __in HANDLE hFindVolumeMountPoint    );																		
FindWindowA(__in_opt LPCSTR lpClassName,__in_opt LPCSTR lpWindowName);																		
FindWindowExA(__in_opt HWND hWndParent,__in_opt HWND hWndChildAfter,__in_opt LPCSTR lpszClass,__in_opt LPCSTR lpszWindow);																		
FindWindowExW(__in_opt HWND hWndParent,__in_opt HWND hWndChildAfter,__in_opt LPCWSTR lpszClass,__in_opt LPCWSTR lpszWindow);																		
FindWindowW(__in_opt LPCWSTR lpClassName,__in_opt LPCWSTR lpWindowName);																		
FixBrushOrgEx( __in HDC hdc, __in int x, __in int y,  __in_opt LPPOINT ptl);																		
FlashWindow( __in  HWND hWnd, __in  BOOL bInvert);																		
FlashWindowEx( __in PFLASHWINFO pfwi);																		
FlatSB_EnableScrollBar(HWND, int, UINT);																		
FlatSB_GetScrollInfo(HWND, int code, LPSCROLLINFO);																		
FlatSB_GetScrollPos(HWND, int code);																		
FlatSB_GetScrollProp(HWND, int propIndex, LPINT);																		
FlatSB_GetScrollPropPtr(HWND, int propIndex, PINT_PTR);																		
FlatSB_GetScrollRange(HWND, int code, LPINT, LPINT);																		
FlatSB_SetScrollInfo(HWND, int code, LPSCROLLINFO psi, BOOL fRedraw);																		
FlatSB_SetScrollPos(HWND, int code, int pos, BOOL fRedraw);																		
FlatSB_SetScrollProp(HWND, UINT index, INT_PTR newValue, BOOL);																		
FlatSB_SetScrollRange(HWND, int code, int min, int max, BOOL fRedraw);																		
FlatSB_ShowScrollBar(HWND, int code, BOOL);																		
FlattenPath(__in HDC hdc);																		
FlsAlloc( __in_opt PFLS_CALLBACK_FUNCTION lpCallback );																		
FlsFree( __in DWORD dwFlsIndex );																		
FlsGetValue( __in DWORD dwFlsIndex );																		
FlsSetValue( __in DWORD dwFlsIndex, __in_opt PVOID lpFlsData );																		
FlushConsoleInputBuffer( __in HANDLE hConsoleInput );																		
FlushFileBuffers( __in HANDLE hFile );																		
FlushInstructionCache( __in HANDLE hProcess, __in_bcount_opt(dwSize) LPCVOID lpBaseAddress, __in SIZE_T dwSize );																		
FlushIpNetTable( __in DWORD   dwIfIndex );																		
FlushPrinter(__in HANDLE  hPrinter,__in_bcount_opt(cbBuf) LPVOID  pBuf, DWORD cbBuf,__out LPDWORD pcWritten, DWORD cSleep);																		
FlushProcessWriteBuffers( VOID );																		
FlushViewOfFile(    __in LPCVOID lpBaseAddress,    __in SIZE_T dwNumberOfBytesToFlush    );																		
FoldStringA(    __in DWORD    dwMapFlags,    __in_ecount(cchSrc) LPCSTR  lpSrcStr,    __in int      cchSrc,    __out_ecount_opt(cchDest) LPSTR  lpDestStr,    __in int      cchDest);																		
FoldStringW(    __in DWORD    dwMapFlags,    __in_ecount(cchSrc) LPCWSTR  lpSrcStr,    __in int      cchSrc,    __out_ecount_opt(cchDest) LPWSTR  lpDestStr,    __in int      cchDest);																		
FormatMessageA(    __in     DWORD dwFlags,    __in_opt LPCVOID lpSource,    __in     DWORD dwMessageId,    __in     DWORD dwLanguageId,    __out    LPSTR lpBuffer,    __in     DWORD nSize,    __in_opt va_list *Arguments    );																		
FormatMessageW(    __in     DWORD dwFlags,    __in_opt LPCVOID lpSource,    __in     DWORD dwMessageId,    __in     DWORD dwLanguageId,    __out    LPWSTR lpBuffer,    __in     DWORD nSize,    __in_opt va_list *Arguments    );																		
FrameRect(__in HDC hDC,__in CONST RECT *lprc,__in HBRUSH hbr);																		
FreeConnections(   IN Connections* connections   );																		
FreeConsole(    VOID);																		
FreeCountedString(   IN CountedString* countedString   );																		
FreeEncryptedFileMetadata(    __in    PBYTE   pbMetadata    ); 																		
FreeEncryptionCertificateHashList(    __in    PENCRYPTION_CERTIFICATE_HASH_LIST       pUsers    );																		
FreeEnvironmentStringsA(    __in __nullnullterminated LPCH    );																		
FreeEnvironmentStringsW(    __in __nullnullterminated LPWCH    );																		
FreeFixupInfo(   IN FixupInfo* fixupInfo   );																		
FreeGPOListA (    __in        PGROUP_POLICY_OBJECTA   pGPOList);																		
FreeGPOListW (    __in        PGROUP_POLICY_OBJECTW   pGPOList);																		
FreeInheritedFromArray(    __in_ecount(AceCnt) PINHERITED_FROMW pInheritArray,    __in USHORT AceCnt,    __in_opt PFN_OBJECT_MGR_FUNCTS   pfnArray OPTIONAL    );																		
FreeIsolationInfo(   IN IsolationInfo* isolationInfo   );																		
FreeIsolationInfoEx(   IN IsolationInfoEx* isolationInfo   );																		
FreeLibrary (    __in HMODULE hLibModule    );																		
FreeLibraryAndExitThread (    __in HMODULE hLibModule,    __in DWORD dwExitCode    );																		
FreeLibraryWhenCallbackReturns(    __inout PTP_CALLBACK_INSTANCE pci,    __in    HMODULE               mod    );																		
FreeNapComponentRegistrationInfoArray(   IN UINT16 count,   IN NapComponentRegistrationInfo** info   );																		
FreeNetworkSoH(   IN NetworkSoH* networkSoh   );																		
FreePrinterNotifyInfo(__in   PPRINTER_NOTIFY_INFO pPrinterNotifyInfo    );																		
FreePrivateData(   IN PrivateData* privateData   );																		
FreeResource(    __in HGLOBAL hResData    );																		
FreeSid(    __in PSID pSid    );																		
FreeSoH(   IN SoH* soh   );																		
FreeSoHAttributeValue(   IN SoHAttributeType type,   IN SoHAttributeValue* value   );																		
FreeSystemHealthAgentState(   IN SystemHealthAgentState* state   );																		
FreeUserPhysicalPages(    __in    HANDLE hProcess,    __inout PULONG_PTR NumberOfPages,    __in_ecount(*NumberOfPages) PULONG_PTR PageArray    );																		
FtpCommandA(    __in HINTERNET hConnect,    __in BOOL fExpectResponse,    __in DWORD dwFlags,    __in LPCSTR lpszCommand,    __in_opt DWORD_PTR dwContext,    __out_opt HINTERNET *phFtpCommand    );																		
FtpCommandW(    __in HINTERNET hConnect,    __in BOOL fExpectResponse,    __in DWORD dwFlags,    __in LPCWSTR lpszCommand,    __in_opt DWORD_PTR dwContext,    __out_opt HINTERNET *phFtpCommand    );																		
FtpCreateDirectoryA(    __in HINTERNET hConnect,    __in LPCSTR lpszDirectory    );																		
FtpCreateDirectoryW(    __in HINTERNET hConnect,    __in LPCWSTR lpszDirectory    );																		
FtpDeleteFileA(    __in HINTERNET hConnect,    __in LPCSTR lpszFileName    );																		
FtpDeleteFileW(    __in HINTERNET hConnect,    __in LPCWSTR lpszFileName    );																		
FtpFindFirstFileA(    __in HINTERNET hConnect,    __in_opt LPCSTR lpszSearchFile,    __out_opt LPWIN32_FIND_DATAA lpFindFileData,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpFindFirstFileW(    __in HINTERNET hConnect,    __in_opt LPCWSTR lpszSearchFile,    __out_opt LPWIN32_FIND_DATAW lpFindFileData,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpGetCurrentDirectoryA(    __in HINTERNET hConnect,    __out_ecount(*lpdwCurrentDirectory) LPSTR lpszCurrentDirectory,    __inout LPDWORD lpdwCurrentDirectory    );																		
FtpGetCurrentDirectoryW(    __in HINTERNET hConnect,    __out_ecount(*lpdwCurrentDirectory) LPWSTR lpszCurrentDirectory,    __inout LPDWORD lpdwCurrentDirectory    );																		
FtpGetFileA(    __in HINTERNET hConnect,    __in LPCSTR lpszRemoteFile,    __in LPCSTR lpszNewFile,    __in BOOL fFailIfExists,    __in DWORD dwFlagsAndAttributes,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpGetFileEx(    __in HINTERNET hFtpSession,    __in LPCSTR lpszRemoteFile,    __in LPCWSTR lpszNewFile,    __in BOOL fFailIfExists,    __in DWORD dwFlagsAndAttributes,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpGetFileSize(    __in HINTERNET hFile,    __out_opt LPDWORD lpdwFileSizeHigh    );																		
FtpGetFileW(    __in HINTERNET hConnect,    __in LPCWSTR lpszRemoteFile,    __in LPCWSTR lpszNewFile,    __in BOOL fFailIfExists,    __in DWORD dwFlagsAndAttributes,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpOpenFileA(    __in HINTERNET hConnect,    __in LPCSTR lpszFileName,    __in DWORD dwAccess,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpOpenFileW(    __in HINTERNET hConnect,    __in LPCWSTR lpszFileName,    __in DWORD dwAccess,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpPutFileA(    __in HINTERNET hConnect,    __in LPCSTR lpszLocalFile,    __in LPCSTR lpszNewRemoteFile,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpPutFileEx(    __in HINTERNET hFtpSession,    __in LPCWSTR lpszLocalFile,    __in LPCSTR lpszNewRemoteFile,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpPutFileW(    __in HINTERNET hConnect,    __in LPCWSTR lpszLocalFile,    __in LPCWSTR lpszNewRemoteFile,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
FtpRemoveDirectoryA(    __in HINTERNET hConnect,    __in LPCSTR lpszDirectory    );																		
FtpRemoveDirectoryW(    __in HINTERNET hConnect,    __in LPCWSTR lpszDirectory    );																		
FtpRenameFileA(    __in HINTERNET hConnect,    __in LPCSTR lpszExisting,    __in LPCSTR lpszNew    );																		
FtpRenameFileW(    __in HINTERNET hConnect,    __in LPCWSTR lpszExisting,    __in LPCWSTR lpszNew    );																		
FtpSetCurrentDirectoryA(    __in HINTERNET hConnect,    __in LPCSTR lpszDirectory    );																		
FtpSetCurrentDirectoryW(    __in HINTERNET hConnect,    __in LPCWSTR lpszDirectory    );																		
FwpmCalloutAdd0(   __in HANDLE engineHandle,   __in const FWPM_CALLOUT0* callout,   __in_opt PSECURITY_DESCRIPTOR sd,   __out_opt UINT32* id   );																		
FwpmCalloutCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_CALLOUT_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmCalloutDeleteById0(   __in HANDLE engineHandle,   __in UINT32 id   );																		
FwpmCalloutDeleteByKey0(   __in HANDLE engineHandle,   __in const GUID* key   );																		
FwpmCalloutDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmCalloutEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_CALLOUT0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmCalloutGetById0(   __in HANDLE engineHandle,   __in UINT32 id,   __deref_out FWPM_CALLOUT0** callout   );																		
FwpmCalloutGetByKey0(   __in HANDLE engineHandle,   __in const GUID* key,   __deref_out FWPM_CALLOUT0** callout   );																		
FwpmCalloutGetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmCalloutSetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmCalloutSubscribeChanges0(   __in HANDLE engineHandle,   __in const FWPM_CALLOUT_SUBSCRIPTION0* subscription,   __in FWPM_CALLOUT_CHANGE_CALLBACK0 callback,   __in_opt void* context,   __out HANDLE* changeHandle   );																		
FwpmCalloutSubscriptionsGet0(   __in HANDLE engineHandle,      __deref_out_ecount(*numEntries)       FWPM_CALLOUT_SUBSCRIPTION0*** entries,   __out UINT32* numEntries   );																		
FwpmCalloutUnsubscribeChanges0(   __in HANDLE engineHandle,   __inout HANDLE changeHandle   );																		
FwpmEngineClose0(__inout HANDLE engineHandle);																		
FwpmEngineGetOption0(   __in HANDLE engineHandle,   __in FWPM_ENGINE_OPTION option,   __deref_out FWP_VALUE0** value   );																		
FwpmEngineGetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmEngineOpen0(   __in_opt const wchar_t* serverName,   __in UINT32 authnService,   __in_opt SEC_WINNT_AUTH_IDENTITY_W* authIdentity,   __in_opt const FWPM_SESSION0* session,   __out HANDLE* engineHandle   );																		
FwpmEngineSetOption0(   __in HANDLE engineHandle,   __in FWPM_ENGINE_OPTION option,   __in const FWP_VALUE0* newValue   );																		
FwpmEngineSetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmFilterAdd0(   __in HANDLE engineHandle,   __in const FWPM_FILTER0* filter,   __in_opt PSECURITY_DESCRIPTOR sd,   __out_opt UINT64* id   );																		
FwpmFilterCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_FILTER_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmFilterDeleteById0(   __in HANDLE engineHandle,   __in UINT64 id   );																		
FwpmFilterDeleteByKey0(   __in HANDLE engineHandle,   __in const GUID* key   );																		
FwpmFilterDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmFilterEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_FILTER0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmFilterGetById0(   __in HANDLE engineHandle,   __in UINT64 id,   __deref_out FWPM_FILTER0** filter   );																		
FwpmFilterGetByKey0(   __in HANDLE engineHandle,   __in const GUID* key,   __deref_out FWPM_FILTER0** filter   );																		
FwpmFilterGetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmFilterSetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmFilterSubscribeChanges0(   __in HANDLE engineHandle,   __in const FWPM_FILTER_SUBSCRIPTION0* subscription,   __in FWPM_FILTER_CHANGE_CALLBACK0 callback,   __in_opt void* context,   __out HANDLE* changeHandle   );																		
FwpmFilterSubscriptionsGet0(   __in HANDLE engineHandle,   __deref_out_ecount(*numEntries)       FWPM_FILTER_SUBSCRIPTION0*** entries,   __out UINT32* numEntries   );																		
FwpmFilterUnsubscribeChanges0(   __in HANDLE engineHandle,   __inout HANDLE changeHandle   );																		
FwpmGetAppIdFromFileName0(   __in PCWSTR fileName,   __deref_out FWP_BYTE_BLOB** appId   );																		
FwpmIPsecTunnelAdd0(   __in HANDLE engineHandle,   __in UINT32 flags,   __in_opt const FWPM_PROVIDER_CONTEXT0* mainModePolicy,   __in const FWPM_PROVIDER_CONTEXT0* tunnelPolicy,   __in UINT32 numFilterConditions,   __in const FWPM_FILTER_CONDITION0* filterConditions,   __in_opt PSECURITY_DESCRIPTOR sd   );																		
FwpmIPsecTunnelAdd1(   __in HANDLE engineHandle,   __in UINT32 flags,   __in_opt const FWPM_PROVIDER_CONTEXT1* mainModePolicy,   __in const FWPM_PROVIDER_CONTEXT1* tunnelPolicy,   __in UINT32 numFilterConditions,   __in const FWPM_FILTER_CONDITION0* filterConditions,   __in_opt const GUID* keyModKey,   __in_opt PSECURITY_DESCRIPTOR sd   );																		
FwpmIPsecTunnelDeleteByKey0(   __in HANDLE engineHandle,   __in const GUID* key   );																		
FwpmLayerCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_LAYER_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmLayerDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmLayerEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_LAYER0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmLayerGetById0(   __in HANDLE engineHandle,   __in UINT16 id,   __deref_out FWPM_LAYER0** layer   );																		
FwpmLayerGetByKey0(   __in HANDLE engineHandle,   __in const GUID* key,   __deref_out FWPM_LAYER0** layer   );																		
FwpmLayerGetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmLayerSetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmNetEventCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_NET_EVENT_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmNetEventDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmNetEventEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_NET_EVENT0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmNetEventEnum1(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_NET_EVENT1*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmNetEventsGetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmNetEventsSetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmNetEventSubscribe0(   __in HANDLE engineHandle,   __in const FWPM_NET_EVENT_SUBSCRIPTION0* subscription,   __in FWPM_NET_EVENT_CALLBACK0 callback,   __in_opt void* context,   __out HANDLE* eventsHandle   );																		
FwpmNetEventSubscriptionsGet0(   __in HANDLE engineHandle,   __deref_out_ecount(*numEntries)       FWPM_NET_EVENT_SUBSCRIPTION0*** entries,   __out UINT32* numEntries   );																		
FwpmNetEventUnsubscribe0(   __in HANDLE engineHandle,   __inout HANDLE eventsHandle   );																		
FwpmProviderAdd0(   __in HANDLE engineHandle,   __in const FWPM_PROVIDER0* provider,   __in_opt PSECURITY_DESCRIPTOR sd   );																		
FwpmProviderContextAdd0(   __in HANDLE engineHandle,   __in const FWPM_PROVIDER_CONTEXT0* providerContext,   __in_opt PSECURITY_DESCRIPTOR sd,   __out_opt UINT64* id   );																		
FwpmProviderContextAdd1(   __in HANDLE engineHandle,   __in const FWPM_PROVIDER_CONTEXT1* providerContext,   __in_opt PSECURITY_DESCRIPTOR sd,   __out_opt UINT64* id   );																		
FwpmProviderContextCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_PROVIDER_CONTEXT_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmProviderContextDeleteById0(   __in HANDLE engineHandle,   __in UINT64 id   );																		
FwpmProviderContextDeleteByKey0(   __in HANDLE engineHandle,   __in const GUID* key   );																		
FwpmProviderContextDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmProviderContextEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_PROVIDER_CONTEXT0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmProviderContextEnum1(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_PROVIDER_CONTEXT1*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmProviderContextGetById0(   __in HANDLE engineHandle,   __in UINT64 id,   __deref_out FWPM_PROVIDER_CONTEXT0** providerContext   );																		
FwpmProviderContextGetById1(   __in HANDLE engineHandle,   __in UINT64 id,   __deref_out FWPM_PROVIDER_CONTEXT1** providerContext   );																		
FwpmProviderContextGetByKey0(   __in HANDLE engineHandle,   __in const GUID* key,   __deref_out FWPM_PROVIDER_CONTEXT0** providerContext   );																		
FwpmProviderContextGetByKey1(   __in HANDLE engineHandle,   __in const GUID* key,   __deref_out FWPM_PROVIDER_CONTEXT1** providerContext   );																		
FwpmProviderContextGetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmProviderContextSetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmProviderContextSubscribeChanges0(   __in HANDLE engineHandle,   __in const FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0* subscription,   __in FWPM_PROVIDER_CONTEXT_CHANGE_CALLBACK0 callback,   __in_opt void* context,   __out HANDLE* changeHandle   );																		
FwpmProviderContextSubscriptionsGet0(   __in HANDLE engineHandle,      __deref_out_ecount(*numEntries)       FWPM_PROVIDER_CONTEXT_SUBSCRIPTION0*** entries,   __out UINT32* numEntries   );																		
FwpmProviderContextUnsubscribeChanges0(   __in HANDLE engineHandle,   __inout HANDLE changeHandle   );																		
FwpmProviderCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_PROVIDER_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmProviderDeleteByKey0(   __in HANDLE engineHandle,   __in const GUID* key   );																		
FwpmProviderDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmProviderEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_PROVIDER0*** entries,      __out UINT32* numEntriesReturned   );																		
FwpmProviderGetByKey0(   __in HANDLE engineHandle,   __in const GUID* key,   __deref_out FWPM_PROVIDER0** provider   );																		
FwpmProviderGetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmProviderSetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmProviderSubscribeChanges0(   __in HANDLE engineHandle,   __in const FWPM_PROVIDER_SUBSCRIPTION0* subscription,   __in FWPM_PROVIDER_CHANGE_CALLBACK0 callback,   __in_opt void* context,   __out HANDLE* changeHandle   );																		
FwpmProviderSubscriptionsGet0(   __in HANDLE engineHandle,      __deref_out_ecount(*numEntries)       FWPM_PROVIDER_SUBSCRIPTION0*** entries,   __out UINT32* numEntries   );																		
FwpmProviderUnsubscribeChanges0(   __in HANDLE engineHandle,   __inout HANDLE changeHandle   );																		
FwpmSessionCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_SESSION_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmSessionDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmSessionEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_SESSION0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmSubLayerAdd0(   __in HANDLE engineHandle,   __in const FWPM_SUBLAYER0* subLayer,   __in_opt PSECURITY_DESCRIPTOR sd   );																		
FwpmSubLayerCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPM_SUBLAYER_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpmSubLayerDeleteByKey0(   __in HANDLE engineHandle,   __in const GUID* key   );																		
FwpmSubLayerDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpmSubLayerEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPM_SUBLAYER0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpmSubLayerGetByKey0(   __in HANDLE engineHandle,   __in const GUID* key,   __deref_out FWPM_SUBLAYER0** subLayer   );																		
FwpmSubLayerGetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpmSubLayerSetSecurityInfoByKey0(   __in HANDLE engineHandle,   __in_opt const GUID* key,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpmSubLayerSubscribeChanges0(   __in HANDLE engineHandle,   __in const FWPM_SUBLAYER_SUBSCRIPTION0* subscription,   __in FWPM_SUBLAYER_CHANGE_CALLBACK0 callback,   __in_opt void* context,   __out HANDLE* changeHandle   );																		
FwpmSubLayerSubscriptionsGet0(   __in HANDLE engineHandle,      __deref_out_ecount(*numEntries)       FWPM_SUBLAYER_SUBSCRIPTION0*** entries,   __out UINT32* numEntries   );																		
FwpmSubLayerUnsubscribeChanges0(   __in HANDLE engineHandle,   __inout HANDLE changeHandle   );																		
FwpmSystemPortsGet0(   __in_opt HANDLE engineHandle,   __deref_out FWPM_SYSTEM_PORTS0** sysPorts   );																		
FwpmSystemPortsSubscribe0(   __in_opt HANDLE engineHandle,   __reserved void* reserved,   __in FWPM_SYSTEM_PORTS_CALLBACK0 callback,   __in_opt void* context,   __out HANDLE* sysPortsHandle   );																		
FwpmSystemPortsUnsubscribe0(   __in_opt HANDLE engineHandle,   __inout HANDLE sysPortsHandle   );																		
FwpmTransactionAbort0(__in HANDLE engineHandle);																		
FwpmTransactionBegin0(   __in HANDLE engineHandle,   __in UINT32 flags   );																		
FwpmTransactionCommit0(__in HANDLE engineHandle);																		
FwpsAleEndpointCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const FWPS_ALE_ENDPOINT_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
FwpsAleEndpointDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
FwpsAleEndpointEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) FWPS_ALE_ENDPOINT_PROPERTIES0*** entries,   __out UINT32* numEntriesReturned   );																		
FwpsAleEndpointGetById0(   __in HANDLE engineHandle,   __in UINT64 endpointId,   __out FWPS_ALE_ENDPOINT_PROPERTIES0** properties   );																		
FwpsAleEndpointGetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
FwpsAleEndpointSetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
FwpsOpenToken0(   IN HANDLE engineHandle,   IN LUID modifiedId,   IN DWORD desiredAccess,   OUT HANDLE* accessToken   );																		
GdiAlphaBlend(__in HDC hdcDest, __in int xoriginDest, __in int yoriginDest, __in int wDest, __in int hDest, __in HDC hdcSrc, __in int xoriginSrc, __in int yoriginSrc, __in int wSrc, __in int hSrc, __in BLENDFUNCTION ftn);																		
GdiComment(__in HDC hdc, __in UINT nSize, __in_bcount(nSize) CONST BYTE *lpData);																		
GdiFlush(void);																		
GdiGetBatchLimit(void);																		
GdiGradientFill( __in HDC hdc,                __in_ecount(nVertex) PTRIVERTEX pVertex,                __in ULONG nVertex,                __in PVOID pMesh,                __in ULONG nCount,                __in ULONG ulMode);																		
GdiMarshal(DWORD dwProcessIdTo, __in HGDIOBJ hGdiObj, __inout PVOID pData, ULONG ulFlags);																		
GdiMarshalSize(VOID);																		
GdiplusNotificationUnhook(    ULONG_PTR token);																		
GdiRegisterDdraw(__in PGDIREGISTERDDRAWPACKET pPacket, __out GDIMARSHALLOC *ppfnGdiAlloc);																		
GdiSetBatchLimit( __in DWORD dw);																		
GdiTransparentBlt(__in HDC hdcDest,__in int xoriginDest, __in int yoriginDest, __in int wDest, __in int hDest, __in HDC hdcSrc,                  __in int xoriginSrc, __in int yoriginSrc, __in int wSrc, __in int hSrc, __in UINT crTransparent);																		
GdiUnmarshal(__in PVOID pData, ULONG ulFlags);																		
GenerateConsoleCtrlEvent(    __in DWORD dwCtrlEvent,    __in DWORD dwProcessGroupId);																		
GetAce (    __in        PACL pAcl,    __in        DWORD dwAceIndex,    __deref_out LPVOID *pAce    );																		
GetAclInformation (    __in PACL pAcl,    __out_bcount(nAclInformationLength) LPVOID pAclInformation,    __in DWORD nAclInformationLength,    __in ACL_INFORMATION_CLASS dwAclInformationClass    );																		
GetACP(void);																		
GetActiveProcessorCount(    __in WORD GroupNumber    );																		
GetActiveProcessorGroupCount(    VOID    );																		
GetActiveWindow(    VOID);																		
GetAdapterIndex(    __in    LPWSTR  AdapterName,    __inout PULONG IfIndex    );																		
GetAdapterOrderMap(    VOID    );																		
GetAdaptersAddresses(    __in ULONG Family,    __in ULONG Flags,    __reserved PVOID Reserved,    __out_bcount_opt(*SizePointer) PIP_ADAPTER_ADDRESSES AdapterAddresses,     __inout PULONG SizePointer    );																		
GetAdaptersInfo(    __out_bcount_opt(*SizePointer)  PIP_ADAPTER_INFO AdapterInfo,     __inout                         PULONG           SizePointer    );																		
GetAddressByNameA (    __in     DWORD                dwNameSpace,    __in     LPGUID               lpServiceType,    __in_opt LPSTR                lpServiceName,    __in_opt LPINT                lpiProtocols,    __in     DWORD                dwResolution,    __in_opt LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,    __out_bcount(*lpdwBufferLength)    LPVOID               lpCsaddrBuffer,    __inout  LPDWORD              lpdwBufferLength,    __inout_bcount_opt(*lpdwAliasBufferLength) LPSTR  lpAliasBuffer,    __inout LPDWORD               lpdwAliasBufferLength    );																		
GetAddressByNameW (    __in     DWORD                dwNameSpace,    __in     LPGUID               lpServiceType,    __in_opt LPWSTR               lpServiceName,    __in_opt LPINT                lpiProtocols,    __in     DWORD                dwResolution,    __in_opt LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,    __out_bcount(*lpdwBufferLength)    LPVOID               lpCsaddrBuffer,    __inout  LPDWORD              lpdwBufferLength,    __inout_ecount_opt(*lpdwAliasBufferLength) LPWSTR  lpAliasBuffer,    __inout LPDWORD             lpdwAliasBufferLength    );																		
GetAllUsersProfileDirectoryA(    __out_ecount_opt(*lpcchSize)    LPSTR lpProfileDir,    __inout                         LPDWORD lpcchSize);																		
GetAllUsersProfileDirectoryW(    __out_ecount_opt(*lpcchSize)    LPWSTR lpProfileDir,    __inout                         LPDWORD lpcchSize);																		
GetAltTabInfoA(    __in_opt HWND hwnd,    __in int iItem,    __inout PALTTABINFO pati,    __out_ecount_opt(cchItemText) LPSTR pszItemText,    __in UINT cchItemText);																		
GetAltTabInfoW(    __in_opt HWND hwnd,    __in int iItem,    __inout PALTTABINFO pati,    __out_ecount_opt(cchItemText) LPWSTR pszItemText,    __in UINT cchItemText);																		
GetAncestor(    __in HWND hwnd,    __in UINT gaFlags);																		
GetApplicationRecoveryCallback(    __in  HANDLE hProcess,    __out APPLICATION_RECOVERY_CALLBACK* pRecoveryCallback,    __deref_opt_out_opt PVOID* ppvParameter,    __out_opt PDWORD pdwPingInterval,    __out_opt PDWORD pdwFlags    );																		
GetApplicationRestartSettings(    __in HANDLE hProcess,    __out_ecount_opt(*pcchSize) PWSTR pwzCommandline,    __inout PDWORD pcchSize,    __out_opt PDWORD pdwFlags    );																		
GetAppliedGPOListA (    __in        DWORD       dwFlags,    __in_opt    LPCSTR    pMachineName,    __in_opt    PSID        pSidUser,    __in        GUID        *pGuidExtension,    __deref_out PGROUP_POLICY_OBJECTA   *ppGPOList);																		
GetAppliedGPOListW (    __in        DWORD       dwFlags,    __in_opt    LPCWSTR    pMachineName,    __in_opt    PSID        pSidUser,    __in        GUID        *pGuidExtension,    __deref_out PGROUP_POLICY_OBJECTW   *ppGPOList);																		
GetArcDirection(__in HDC hdc);																		
GetAsyncKeyState(    __in int vKey);																		
GetAtomNameA(    __in ATOM nAtom,    __out_ecount_part(nSize, return + 1) LPSTR lpBuffer,    __in int nSize    );																		
GetAtomNameW(    __in ATOM nAtom,    __out_ecount_part(nSize, return + 1) LPWSTR lpBuffer,    __in int nSize    );																		
GetAuditedPermissionsFromAclA(__in  PACL pacl,__in  PTRUSTEE_A pTrustee,__out PACCESS_MASK  pSuccessfulAuditedRights,__out PACCESS_MASK  pFailedAuditRights);																		
GetAuditedPermissionsFromAclW(__in  PACL pacl,__out PACCESS_MASK  pSuccessfulAuditedRights,__out PACCESS_MASK  pFailedAuditRights);																		
GetBestInterface(__in  IPAddr  dwDestAddr, __out PDWORD  pdwBestIfIndex);																		
GetBestInterfaceEx(__in  struct sockaddr *pDestAddr, __out PDWORD pdwBestIfIndex);																		
GetBestRoute(__in DWORD dwDestAddr, __in_opt  DWORD dwSourceAddr, __out PMIB_IPFORWARDROW pBestRoute);																		
GetBinaryTypeA(__in  LPCSTR lpApplicationName, __out LPDWORD  lpBinaryType);																		
GetBinaryTypeW(__in  LPCWSTR lpApplicationName, __out LPDWORD  lpBinaryType);																		
GetBitmapBits(__in HBITMAP hbit, __in LONG cb, __out_bcount(cb) LPVOID lpvBits);																		
GetBkMode(__in HDC hdc);	
GetCalendarInfo(__in LCID Locale, __in CALID Calendar, __in CALTYPE  CalType, __out_ecount_opt(cchData) LPSTR   lpCalData, __in int cchData, __out_opt LPDWORD  lpValue);																																			
GetCalendarInfoA(__in LCID Locale, __in CALID Calendar, __in CALTYPE  CalType, __out_ecount_opt(cchData) LPSTR   lpCalData, __in int cchData, __out_opt LPDWORD  lpValue);																		
GetCalendarInfoEx(__in_opt LPCWSTR lpLocaleName, __in CALID Calendar, __in_opt LPCWSTR lpReserved, __in CALTYPE CalType, __out_ecount_opt(cchData) LPWSTR lpCalData, __in int cchData, __out_opt LPDWORD lpValue);																		
GetCalendarInfoW(__in LCID Locale, __in CALID Calendar, __in CALTYPE  CalType, __out_ecount_opt(cchData) LPWSTR   lpCalData, __in int cchData, __out_opt LPDWORD  lpValue);																		
GetCapture(VOID);																		
GetCaretBlinkTime(VOID);																		
GetCaretPos(__out LPPOINT lpPoint);																		
GetClassInfoA(__in_opt HINSTANCE hInstance,__in LPCSTR lpClassName,__out LPWNDCLASSA lpWndClass);																		
GetClassInfoExA(__in_opt HINSTANCE hInstance,__in LPCSTR lpszClass,__out LPWNDCLASSEXA lpwcx);																		
GetClassInfoExW(__in_opt HINSTANCE hInstance,__in LPCWSTR lpszClass,__out LPWNDCLASSEXW lpwcx);																		
GetClassInfoW(__in_opt HINSTANCE hInstance,__in LPCWSTR lpClassName,__out LPWNDCLASSW lpWndClass);																		
GetClassLongA(__in HWND hWnd,__in int nIndex);																		
GetClassLongPtrA(__in HWND hWnd,__in int nIndex);																		
GetClassLongPtrW(__in HWND hWnd,__in int nIndex);																		
GetClassLongW(__in HWND hWnd,__in int nIndex);																		
GetClassNameA(__in HWND hWnd,__out_ecount_part(nMaxCount, return) LPSTR lpClassName,__in int nMaxCount);																		
GetClassNameW(__in HWND hWnd,__out_ecount_part(nMaxCount, return) LPWSTR lpClassName,__in int nMaxCount);																		
GetClassWord(__in HWND hWnd,__in int nIndex);																		
GetClientRect(__in HWND hWnd,__out LPRECT lpRect);																		
GetClipboardData(__in UINT uFormat);																		
GetClipboardFormatNameA(__in UINT format,__out_ecount(cchMaxCount) LPSTR lpszFormatName,__in int cchMaxCount);																		
GetClipboardFormatNameW(__in UINT format,__out_ecount(cchMaxCount) LPWSTR lpszFormatName,__in int cchMaxCount);																		
GetClipboardOwner(VOID);																		
GetClipboardSequenceNumber(VOID);																		
GetClipboardViewer(VOID);																		
GetClipCursor(__out LPRECT lpRect);																		
GetClusterFromGroup(__in HGROUP hGroup);																		
GetClusterFromNetInterface(__in HNETINTERFACE hNetInterface);																		
GetClusterFromNetwork(__in HNETWORK hNetwork);																		
GetClusterFromNode(__in HNODE hNode);																		
GetClusterFromResource(__in HRESOURCE hResource);																		
GetClusterGroupKey(__in HGROUP hGroup,__in REGSAM samDesired);																		
GetClusterGroupState(__in HGROUP hGroup,__out_ecount_part_opt(*lpcchNodeName, *lpcchNodeName + 1) LPWSTR lpszNodeName,    __inout_opt LPDWORD lpcchNodeName    );																		
GetClusterInformation(__in HCLUSTER hCluster,__out_ecount_part(*lpcchClusterName, *lpcchClusterName + 1) LPWSTR lpszClusterName,    __inout LPDWORD lpcchClusterName,    __out_opt LPCLUSTERVERSIONINFO lpClusterInfo    );																		
GetClusterKey(    __in HCLUSTER hCluster,    __in REGSAM samDesired    );																		
GetClusterNetInterface(    __in HCLUSTER hCluster,    __in LPCWSTR lpszNodeName,    __in LPCWSTR lpszNetworkName,    __out_ecount_part(*lpcchInterfaceName, *lpcchInterfaceName + 1) LPWSTR lpszInterfaceName,    __inout LPDWORD lpcchInterfaceName    );																		
GetClusterNetInterfaceKey(    __in HNETINTERFACE hNetInterface,    __in REGSAM samDesired    );																		
GetClusterNetInterfaceState(    __in HNETINTERFACE hNetInterface    );																		
GetClusterNetworkId(    __in HNETWORK hNetwork,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszNetworkId,    __inout LPDWORD lpcchName    );																		
GetClusterNetworkKey(    __in HNETWORK hNetwork,    __in REGSAM samDesired    );																		
GetClusterNetworkState(    __in HNETWORK hNetwork    );																		
GetClusterNodeId(    __in_opt HNODE hNode,    __out_ecount_part(*lpcchName, *lpcchName + 1) LPWSTR lpszNodeId,    __inout LPDWORD lpcchName    );																		
GetClusterNodeKey(    __in HNODE hNode,    __in REGSAM samDesired    );																		
GetClusterNodeState(    __in HNODE hNode    );																		
GetClusterNotify(    __in HCHANGE hChange,    __out DWORD_PTR *lpdwNotifyKey,    __out LPDWORD lpdwFilterType,    __out_ecount(*lpcchName) LPWSTR lpszName,    __inout LPDWORD lpcchName,    __in DWORD dwMilliseconds    );																		
GetClusterQuorumResource(    __in HCLUSTER hCluster,    __out_ecount_part(*lpcchResourceName, *lpcchResourceName + 1) LPWSTR lpszResourceName,    __inout LPDWORD lpcchResourceName,    __out_ecount_part(*lpcchDeviceName, *lpcchDeviceName + 1) LPWSTR lpszDeviceName,    __inout LPDWORD lpcchDeviceName,    __out LPDWORD lpdwMaxQuorumLogSize    );																		
GetClusterResourceDependencyExpression(    __in HRESOURCE hResource,    __out_ecount_part_opt(*lpcchDependencyExpression, *lpcchDependencyExpression + 1)        LPWSTR lpszDependencyExpression,    __inout LPDWORD lpcchDependencyExpression    );																		
GetClusterResourceKey(    __in HRESOURCE hResource,    __in REGSAM samDesired    );																		
GetClusterResourceNetworkName(    __in HRESOURCE hResource,    __out_ecount_part(*nSize, *nSize + 1) LPWSTR lpBuffer,    __inout LPDWORD nSize    );																		
GetClusterResourceState(    __in HRESOURCE hResource,    __out_ecount_part_opt(*lpcchNodeName, *lpcchNodeName + 1) LPWSTR lpszNodeName,    __inout_opt LPDWORD lpcchNodeName,    __out_ecount_part_opt(*lpcchGroupName, *lpcchGroupName + 1) LPWSTR lpszGroupName,    __inout_opt LPDWORD lpcchGroupName    );																		
GetClusterResourceTypeKey(    __in HCLUSTER hCluster,    __in LPCWSTR lpszTypeName,    __in REGSAM samDesired    );																		
GetColorAdjustment( __in HDC hdc, __out LPCOLORADJUSTMENT lpca);																		
GetColorDirectoryA(    __in_opt PCSTR pMachineName,    __out_bcount_part_opt(*pdwSize, *pdwSize) PSTR pBuffer,    __inout PDWORD pdwSize    );																		
GetColorDirectoryW(    __in_opt PCWSTR pMachineName,    __out_bcount_part_opt(*pdwSize, *pdwSize) PWSTR pBuffer,    __inout PDWORD pdwSize    );																		
GetColorSpace( __in HDC hdc);																		
GetComboBoxInfo(    __in HWND hwndCombo,    __inout PCOMBOBOXINFO pcbi);																		
GetCommandLineA(    VOID    );																		
GetCommandLineW(    VOID    );																		
GetCommConfig(    __in      HANDLE hCommDev,    __out_bcount_opt(*lpdwSize) LPCOMMCONFIG lpCC,    __inout   LPDWORD lpdwSize    );																		
GetCommMask(    __in  HANDLE hFile,    __out LPDWORD lpEvtMask    );																		
GetCommModemStatus(    __in  HANDLE hFile,    __out LPDWORD lpModemStat    );																		
GetCommProperties(    __in    HANDLE hFile,    __inout LPCOMMPROP lpCommProp    );																		
GetCommState(    __in  HANDLE hFile,    __out LPDCB lpDCB    );																		
GetCommTimeouts(    __in  HANDLE hFile,    __out LPCOMMTIMEOUTS lpCommTimeouts    );																		
GetCompressedFileSizeA(    __in  LPCSTR lpFileName,    __out_opt LPDWORD  lpFileSizeHigh    );																		
GetCompressedFileSizeTransactedA(    __in      LPCSTR lpFileName,    __out_opt LPDWORD  lpFileSizeHigh,    __in      HANDLE hTransaction    );																		
GetCompressedFileSizeTransactedW(    __in      LPCWSTR lpFileName,    __out_opt LPDWORD  lpFileSizeHigh,    __in      HANDLE hTransaction    );																		
GetCompressedFileSizeW(    __in  LPCWSTR lpFileName,    __out_opt LPDWORD  lpFileSizeHigh    );																		
GetComputerNameA (    __out_ecount_part_opt(*nSize, *nSize + 1) LPSTR lpBuffer,    __inout LPDWORD nSize    );																		
GetComputerNameExA (    __in    COMPUTER_NAME_FORMAT NameType,    __out_ecount_part_opt(*nSize, *nSize + 1) LPSTR lpBuffer,    __inout LPDWORD nSize    );																		
GetComputerNameExW (    __in    COMPUTER_NAME_FORMAT NameType,    __out_ecount_part_opt(*nSize, *nSize + 1) LPWSTR lpBuffer,    __inout LPDWORD nSize    );																		
GetComputerNameW (    __out_ecount_part_opt(*nSize, *nSize + 1) LPWSTR lpBuffer,    __inout LPDWORD nSize    );																		
GetConsoleAliasA(    __in LPSTR Source,    __out_ecount(TargetBufferLength) LPSTR TargetBuffer,    __in DWORD TargetBufferLength,    __in LPSTR ExeName);																		
GetConsoleAliasesA(    __out_ecount(AliasBufferLength) LPSTR AliasBuffer,    __in DWORD AliasBufferLength,    __in LPSTR ExeName);																		
GetConsoleAliasesLengthA(    __in LPSTR ExeName);																		
GetConsoleAliasesLengthW(    __in LPWSTR ExeName);																		
GetConsoleAliasesW(    __out_ecount(AliasBufferLength) LPWSTR AliasBuffer,    __in DWORD AliasBufferLength,    __in LPWSTR ExeName);																		
GetConsoleAliasExesA(    __out_ecount(ExeNameBufferLength) LPSTR ExeNameBuffer,    __in DWORD ExeNameBufferLength);																		
GetConsoleAliasExesLengthA(    VOID);																		
GetConsoleAliasExesLengthW(    VOID);																		
GetConsoleAliasExesW(    __out_ecount(ExeNameBufferLength) LPWSTR ExeNameBuffer,    __in DWORD ExeNameBufferLength);																		
GetConsoleAliasW(    __in LPWSTR Source,    __out_ecount(TargetBufferLength) LPWSTR TargetBuffer,    __in DWORD TargetBufferLength,    __in LPWSTR ExeName);																		
GetConsoleCP(    VOID);																		
GetConsoleCursorInfo(    __in HANDLE hConsoleOutput,    __out PCONSOLE_CURSOR_INFO lpConsoleCursorInfo    );																		
GetConsoleDisplayMode(    __out LPDWORD lpModeFlags);																		
GetConsoleFontSize(    __in HANDLE hConsoleOutput,    __in DWORD nFont    );																		
GetConsoleHistoryInfo(    __out PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);																		
GetConsoleMode(    __in HANDLE hConsoleHandle,    __out LPDWORD lpMode    );																		
GetConsoleOriginalTitleA(    __out_ecount(nSize) LPSTR lpConsoleTitle,    __in DWORD nSize);																		
GetConsoleOriginalTitleW(    __out_ecount(nSize) LPWSTR lpConsoleTitle,    __in DWORD nSize);																		
GetConsoleOutputCP(    VOID);																		
GetConsoleProcessList(    __out_ecount(dwProcessCount) LPDWORD lpdwProcessList,    __in DWORD dwProcessCount);																		
GetConsoleScreenBufferInfo(    __in HANDLE hConsoleOutput,    __out PCONSOLE_SCREEN_BUFFER_INFO lpConsoleScreenBufferInfo    );																		
GetConsoleScreenBufferInfoEx(    __in HANDLE hConsoleOutput,    __inout_bcount_part(sizeof(ULONG), sizeof(CONSOLE_SCREEN_BUFFER_INFOEX) - sizeof(ULONG)) PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);																		
GetConsoleSelectionInfo( __out PCONSOLE_SELECTION_INFO lpConsoleSelectionInfo );
GetConsoleTitle( __out_ecount(nSize) LPSTR lpConsoleTitle, __in DWORD nSize );																			
GetConsoleTitleA( __out_ecount(nSize) LPSTR lpConsoleTitle, __in DWORD nSize );																		
GetConsoleTitleW( __out_ecount(nSize) LPWSTR lpConsoleTitle, __in DWORD nSize );																		
GetConsoleWindow( VOID );																		
GetCPInfo( __in UINT CodePage, __out LPCPINFO  lpCPInfo);																		
GetCPInfoExA( __in UINT CodePage, __in DWORD dwFlags, __out LPCPINFOEXA lpCPInfoEx);																		
GetCPInfoExW( __in UINT CodePage, __in DWORD dwFlags, __out LPCPINFOEXW lpCPInfoEx);																		
GetCurrencyFormatA( __in LCID Locale, __in DWORD dwFlags, __in LPCSTR lpValue,    __in_opt CONST CURRENCYFMTA *lpFormat, __out_ecount_opt(cchCurrency) LPSTR lpCurrencyStr, __in int cchCurrency);																		
GetCurrencyFormatEx( __in_opt LPCWSTR lpLocaleName, __in DWORD dwFlags, __in LPCWSTR lpValue, __in_opt CONST CURRENCYFMTW *lpFormat, __out_ecount_opt(cchCurrency) LPWSTR lpCurrencyStr, __in int cchCurrency);																		
GetCurrencyFormatW( __in LCID Locale, __in DWORD dwFlags, __in LPCWSTR lpValue, __in_opt CONST CURRENCYFMTW *lpFormat, __out_ecount_opt(cchCurrency) LPWSTR lpCurrencyStr, __in int cchCurrency);																		
GetCurrentActCtx( __deref_out HANDLE *lphActCtx);																		
GetCurrentConsoleFont( __in HANDLE hConsoleOutput, __in BOOL bMaximumWindow, __out PCONSOLE_FONT_INFO lpConsoleCurrentFont );																		
GetCurrentConsoleFontEx( __in HANDLE hConsoleOutput, __in BOOL bMaximumWindow, __out PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);																		
GetCurrentDirectoryA( __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPSTR lpBuffer );																		
GetCurrentDirectoryW( __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPWSTR lpBuffer );																		
GetCurrentHwProfileA ( __out LPHW_PROFILE_INFOA lpHwProfileInfo );																		
GetCurrentHwProfileW ( __out LPHW_PROFILE_INFOW lpHwProfileInfo );																		
GetCurrentProcess( VOID );																		
GetCurrentProcessId( VOID );																		
GetCurrentProcessorNumber( VOID );																		
GetCurrentProcessorNumberEx( __out PPROCESSOR_NUMBER ProcNumber );																		
GetCurrentThread( VOID );																		
GetCurrentThreadId( VOID );																		
GetCurrentUmsThread( VOID );																		
GetCursor(VOID);																		
GetCursorInfo( __inout PCURSORINFO pci);																		
GetCursorPos(__out LPPOINT lpPoint);																		
GetDateFormatA( __in LCID Locale, __in DWORD dwFlags, __in_opt CONST SYSTEMTIME *lpDate, __in_opt LPCSTR lpFormat, __out_ecount_opt(cchDate) LPSTR lpDateStr, __in int cchDate);																		
GetDateFormatEx( __in_opt LPCWSTR lpLocaleName, __in DWORD dwFlags, __in_opt CONST SYSTEMTIME *lpDate, __in_opt LPCWSTR lpFormat, __out_ecount_opt(cchDate) LPWSTR lpDateStr, __in int cchDate, __in_opt LPCWSTR lpCalendar);																		
GetDateFormatW( __in LCID Locale, __in DWORD dwFlags, __in_opt CONST SYSTEMTIME *lpDate, __in_opt LPCWSTR lpFormat, __out_ecount_opt(cchDate) LPWSTR lpDateStr, __in int cchDate);																		
GetDC(__in_opt HWND hWnd);																		
GetDCEx( __in_opt HWND hWnd, __in_opt HRGN hrgnClip, __in DWORD flags);																		
GetDCOrgEx( __in HDC hdc, __out LPPOINT lppt);																		
GetDefaultCommConfigA( __in LPCSTR lpszName, __out_bcount_part(*lpdwSize, *lpdwSize) LPCOMMCONFIG lpCC, __inout LPDWORD lpdwSize );																		
GetDefaultCommConfigW( __in LPCWSTR lpszName, __out_bcount_part(*lpdwSize, *lpdwSize) LPCOMMCONFIG lpCC, __inout LPDWORD lpdwSize );																		
GetDefaultPrinterA( __out_ecount_opt(*pcchBuffer) LPSTR pszBuffer, __inout LPDWORD pcchBuffer );																		
GetDefaultPrinterW( __out_ecount_opt(*pcchBuffer) LPWSTR pszBuffer, __inout LPDWORD   pcchBuffer );																		
GetDefaultUserProfileDirectoryA(__out_ecount_opt(*lpcchSize)LPSTR lpProfileDir, __inout LPDWORD lpcchSize);																		
GetDefaultUserProfileDirectoryW(__out_ecount_opt(*lpcchSize) LPWSTR lpProfileDir, __inout LPDWORD lpcchSize);																		
GetDeltaInfoA(__in LPCSTR lpDeltaName,__out LPDELTA_HEADER_INFO lpHeaderInfo);																		
GetDeltaInfoB(__in DELTA_INPUT Delta,__out LPDELTA_HEADER_INFO lpHeaderInfo);																		
GetDeltaInfoW(__in LPCWSTR lpDeltaName, __out LPDELTA_HEADER_INFO lpHeaderInfo);																		
GetDeltaSignatureA(__in DELTA_FILE_TYPE FileTypeSet,__in ALG_ID HashAlgId,__in LPCSTR lpSourceName,__out LPDELTA_HASH lpHash);																		
GetDeltaSignatureB(__in DELTA_FILE_TYPE FileTypeSet,__in ALG_ID HashAlgId,__in DELTA_INPUT Source,__out LPDELTA_HASH lpHash);																		
GetDeltaSignatureW(__in DELTA_FILE_TYPE FileTypeSet,__in ALG_ID HashAlgId,__in LPCWSTR lpSourceName,__out LPDELTA_HASH lpHash);																		
GetDesktopWindow(VOID);	
GetDeviceDriverBaseName( __in LPVOID ImageBase, __out_ecount(nSize) LPSTR lpFilename, __in DWORD nSize );																		
GetDeviceDriverBaseNameA( __in LPVOID ImageBase, __out_ecount(nSize) LPSTR lpFilename, __in DWORD nSize );																		
GetDeviceDriverBaseNameW( __in LPVOID ImageBase, __out_ecount(nSize) LPWSTR lpBaseName, __in DWORD nSize );
GetDeviceDriverFileName( __in LPVOID ImageBase, __out_ecount(nSize) LPSTR lpFilename, __in DWORD nSize );																			
GetDeviceDriverFileNameA( __in LPVOID ImageBase, __out_ecount(nSize) LPSTR lpFilename, __in DWORD nSize );																		
GetDeviceDriverFileNameW( __in LPVOID ImageBase, __out_ecount(nSize) LPWSTR lpFilename, __in DWORD nSize );																		
GetDeviceGammaRamp( __in HDC hdc, __out_bcount(3*256*2) LPVOID lpRamp);																		
GetDevicePowerState( __in  HANDLE hDevice, __out BOOL *pfOn );																		
GetDialogBaseUnits(VOID);																		
GetDIBColorTable( __in HDC  hdc,__in UINT iStart,__in UINT cEntries,__out_ecount_part(cEntries,return) RGBQUAD *prgbq);																		
GetDiskFreeSpaceA( __in_opt  LPCSTR lpRootPathName, __out_opt LPDWORD lpSectorsPerCluster, __out_opt LPDWORD lpBytesPerSector, __out_opt LPDWORD lpNumberOfFreeClusters, __out_opt LPDWORD lpTotalNumberOfClusters );																		
GetDiskFreeSpaceExA( __in_opt  LPCSTR lpDirectoryName, __out_opt PULARGE_INTEGER lpFreeBytesAvailableToCaller, __out_opt PULARGE_INTEGER lpTotalNumberOfBytes, __out_opt PULARGE_INTEGER lpTotalNumberOfFreeBytes );																		
GetDiskFreeSpaceExW( __in_opt  LPCWSTR lpDirectoryName, __out_opt PULARGE_INTEGER lpFreeBytesAvailableToCaller, __out_opt PULARGE_INTEGER lpTotalNumberOfBytes, __out_opt PULARGE_INTEGER lpTotalNumberOfFreeBytes );																		
GetDiskFreeSpaceW( __in_opt  LPCWSTR lpRootPathName, __out_opt LPDWORD lpSectorsPerCluster,    __out_opt LPDWORD lpBytesPerSector, __out_opt LPDWORD lpNumberOfFreeClusters, __out_opt LPDWORD lpTotalNumberOfClusters );																		
GetDisplayConfigBufferSizes( __in UINT32 flags, __out UINT32* numPathArrayElements, __out UINT32* numModeInfoArrayElements);																		
GetDlgCtrlID( __in HWND hWnd);																		
GetDlgItem( __in_opt HWND hDlg, __in int nIDDlgItem);																		
GetDlgItemInt( __in HWND hDlg, __in int nIDDlgItem, __out_opt BOOL *lpTranslated, __in BOOL bSigned);																		
GetDlgItemTextA( __in HWND hDlg, __in int nIDDlgItem, __out_ecount(cchMax) LPSTR lpString, __in int cchMax);																		
GetDlgItemTextW( __in HWND hDlg, __in int nIDDlgItem, __out_ecount(cchMax) LPWSTR lpString, __in int cchMax);																		
GetDllDirectoryA( __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPSTR lpBuffer );																		
GetDllDirectoryW( __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPWSTR lpBuffer );																		
GetDoubleClickTime(VOID);
GetDriveType(__in_opt LPCSTR lpRootPathName);																			
GetDriveTypeA(__in_opt LPCSTR lpRootPathName);																		
GetDriveTypeW(__in_opt LPCWSTR lpRootPathName);																		
GetDurationFormat( __in LCID Locale, __in DWORD dwFlags, __in_opt CONST SYSTEMTIME *lpDuration, __in ULONGLONG ullDuration, __in_opt LPCWSTR lpFormat,__out_ecount_opt(cchDuration) LPWSTR lpDurationStr, __in int cchDuration);																		
GetDurationFormatEx( __in_opt LPCWSTR lpLocaleName, __in DWORD dwFlags, __in_opt CONST SYSTEMTIME *lpDuration, __in ULONGLONG ullDuration, __in_opt LPCWSTR lpFormat, __out_ecount_opt(cchDuration) LPWSTR lpDurationStr, __in int cchDuration);																		
GetDynamicTimeZoneInformation( __out PDYNAMIC_TIME_ZONE_INFORMATION pTimeZoneInformation );																		
GetEffectiveClientRect(__in HWND hWnd, __out LPRECT lprc,  __in __nullterminated const INT *lpInfo);																		
GetEffectiveRightsFromAclA(__in  PACL pacl, __in  PTRUSTEE_A pTrustee, __out PACCESS_MASK  pAccessRights);																		
GetEffectiveRightsFromAclW(__in  PACL pacl,__in  PTRUSTEE_W pTrustee,__out PACCESS_MASK  pAccessRights);																		
GetEnabledExtendedFeatures( __in DWORD64 FeatureMask );																		
GetEncryptedFileMetadata( __in LPCWSTR lpFileName, __out PDWORD pcbMetadata, __deref_out_bcount(*pcbMetadata) PBYTE *ppbMetadata );																		
GetEnhMetaFileA( __in LPCSTR lpName);																		
GetEnhMetaFileBits( __in HENHMETAFILE hEMF, __in UINT nSize, __out_bcount_opt(nSize) LPBYTE lpData);																		
GetEnhMetaFileDescriptionA( __in HENHMETAFILE hemf, __in UINT cchBuffer, __out_ecount_opt(cchBuffer) LPSTR lpDescription);																		
GetEnhMetaFileDescriptionW( __in HENHMETAFILE hemf, __in UINT cchBuffer, __out_ecount_opt(cchBuffer) LPWSTR lpDescription);																		
GetEnhMetaFileHeader( __in HENHMETAFILE hemf, __in UINT nSize, __out_bcount_opt(nSize) LPENHMETAHEADER lpEnhMetaHeader);																		
GetEnhMetaFilePaletteEntries(__in HENHMETAFILE hemf, __in UINT nNumEntries, __out_ecount_opt(nNumEntries) LPPALETTEENTRY lpPaletteEntries);																		
GetEnhMetaFilePixelFormat( __in HENHMETAFILE hemf, __in UINT cbBuffer, __out_bcount_opt(cbBuffer) PIXELFORMATDESCRIPTOR *ppfd);																		
GetEnhMetaFileW( __in LPCWSTR lpName);																		
GetEnlistmentId ( IN HANDLE EnlistmentHandle, OUT LPGUID EnlistmentId );																		
GetEnlistmentRecoveryInformation ( IN  HANDLE EnlistmentHandle, IN  ULONG BufferSize, OUT PVOID  Buffer, OUT PULONG BufferUsed OPTIONAL );																		
GetEnvironmentStrings( VOID );																		
GetEnvironmentStringsW( VOID );				
GetEnvironmentVariable( __in_opt LPCSTR lpName, __out_ecount_part_opt(nSize, return + 1) LPSTR lpBuffer, __in DWORD nSize );																
GetEnvironmentVariableA( __in_opt LPCSTR lpName, __out_ecount_part_opt(nSize, return + 1) LPSTR lpBuffer, __in DWORD nSize );																		
GetEnvironmentVariableW( __in_opt LPCWSTR lpName, __out_ecount_part_opt(nSize, return + 1) LPWSTR lpBuffer, __in DWORD nSize );																		
GetErrorMode(VOID);																		
GetEventLogInformation ( __in  HANDLE hEventLog, __in DWORD dwInfoLevel, __out_bcount_part(cbBufSize, *pcbBytesNeeded) LPVOID lpBuffer, __in  DWORD cbBufSize, __out LPDWORD pcbBytesNeeded );																		
GetExitCodeProcess( __in  HANDLE hProcess, __out LPDWORD lpExitCode );																		
GetExitCodeThread( __in  HANDLE hThread, __out LPDWORD lpExitCode );																		
GetExpandedNameA( __in LPSTR lpszSource, __out_ecount(MAX_PATH) LPSTR lpszBuffer );																		
GetExpandedNameW( __in LPWSTR lpszSource, __out_ecount(MAX_PATH) LPWSTR lpszBuffer );																		
GetExplicitEntriesFromAclA(__in PACL pacl,__out PULONG pcCountOfExplicitEntries,__deref_out_ecount(*pcCountOfExplicitEntries) PEXPLICIT_ACCESS_A  * pListOfExplicitEntries);																		
GetExplicitEntriesFromAclW(__in PACL pacl,__out PULONG pcCountOfExplicitEntries,__deref_out_ecount(*pcCountOfExplicitEntries) PEXPLICIT_ACCESS_W  * pListOfExplicitEntries);																		
GetExtendedContextLength( __in DWORD ContextFlags, __out PDWORD ContextLength );																		
GetExtendedFeaturesMask( __in PCONTEXT_EX ContextEx );																		
GetExtendedTcpTable( __out_bcount_opt(*pdwSize) PVOID pTcpTable, __inout PDWORD pdwSize, __in BOOL bOrder, __in ULONG ulAf, __in TCP_TABLE_CLASS TableClass, __in ULONG Reserved );    																		
GetExtendedUdpTable( __out_bcount_opt(*pdwSize) PVOID pUdpTable, __inout PDWORD pdwSize, __in BOOL bOrder, __in ULONG ulAf, __in UDP_TABLE_CLASS TableClass, __in ULONG Reserved );																		
GetFileAttributes(__in LPCSTR lpFileName);	
GetFileAttributesA(__in LPCSTR lpFileName);	
GetFileAttributesEx( __in  LPCSTR lpFileName, __in  GET_FILEEX_INFO_LEVELS fInfoLevelId, __out LPVOID lpFileInformation );																		
GetFileAttributesExA( __in  LPCSTR lpFileName, __in  GET_FILEEX_INFO_LEVELS fInfoLevelId, __out LPVOID lpFileInformation );																		
GetFileAttributesExW( __in  LPCWSTR lpFileName, __in  GET_FILEEX_INFO_LEVELS fInfoLevelId, __out LPVOID lpFileInformation );																		
GetFileAttributesTransactedA( __in  LPCSTR lpFileName, __in  GET_FILEEX_INFO_LEVELS fInfoLevelId, __out LPVOID lpFileInformation, __in HANDLE hTransaction );																		
GetFileAttributesTransactedW( __in  LPCWSTR lpFileName, __in  GET_FILEEX_INFO_LEVELS fInfoLevelId, __out LPVOID lpFileInformation, __in HANDLE hTransaction );																		
GetFileAttributesW(__in LPCWSTR lpFileName);																		
GetFileBandwidthReservation( __in  HANDLE  hFile, __out LPDWORD lpPeriodMilliseconds, __out LPDWORD lpBytesPerPeriod, __out LPBOOL  pDiscardable, __out LPDWORD lpTransferSize, __out LPDWORD lpNumOutstandingRequests );																		
GetFileInformationByHandle( __in  HANDLE hFile, __out LPBY_HANDLE_FILE_INFORMATION lpFileInformation );																		
GetFileInformationByHandleEx( __in  HANDLE hFile, __in  FILE_INFO_BY_HANDLE_CLASS FileInformationClass, __out_bcount(dwBufferSize) LPVOID lpFileInformation, __in  DWORD dwBufferSize);																		
GetFileMUIInfo( DWORD dwFlags, __in PCWSTR pcwszFilePath, __inout_bcount_part_opt(*pcbFileMUIInfo,*pcbFileMUIInfo) PFILEMUIINFO pFileMUIInfo, __inout DWORD* pcbFileMUIInfo);																		
GetFileMUIPath( __in DWORD dwFlags, __in PCWSTR pcwszFilePath , __inout_ecount_opt (*pcchLanguage) PWSTR pwszLanguage, __inout PULONG  pcchLanguage, __out_ecount_opt (*pcchFileMUIPath) PWSTR pwszFileMUIPath, __inout PULONG pcchFileMUIPath, __inout PULONGLONG pululEnumerator);																		
GetFileSecurityA ( __in  LPCSTR lpFileName, __in  SECURITY_INFORMATION RequestedInformation, __out_bcount_part_opt(nLength, *lpnLengthNeeded) PSECURITY_DESCRIPTOR pSecurityDescriptor, __in  DWORD nLength, __out LPDWORD lpnLengthNeeded );																		
GetFileSecurityW ( __in  LPCWSTR lpFileName, __in  SECURITY_INFORMATION RequestedInformation, __out_bcount_part_opt(nLength, *lpnLengthNeeded) PSECURITY_DESCRIPTOR pSecurityDescriptor, __in  DWORD nLength, __out LPDWORD lpnLengthNeeded );																		
GetFileSize(__in HANDLE hFile, __out_opt LPDWORD lpFileSizeHigh);																		
GetFileSizeEx(__in  HANDLE hFile, __out PLARGE_INTEGER lpFileSize);																		
GetFileTime(__in HANDLE hFile, __out_opt LPFILETIME lpCreationTime,__out_opt LPFILETIME lpLastAccessTime,__out_opt LPFILETIME lpLastWriteTime);																		
GetFileType(__in HANDLE hFile);																		
GetFileVersionInfoA( __in LPCSTR lptstrFilename, __reserved DWORD dwHandle, __in DWORD dwLen, __out_bcount(dwLen) LPVOID lpData);																		
GetFileVersionInfoSizeA( __in LPCSTR lptstrFilename, __out_opt LPDWORD lpdwHandle);																		
GetFileVersionInfoSizeW( __in LPCWSTR lptstrFilename, __out_opt LPDWORD lpdwHandle);																		
GetFileVersionInfoW( __in LPCWSTR lptstrFilename, __reserved DWORD dwHandle, __in DWORD dwLen, __out_bcount(dwLen) LPVOID lpData);																		
GetFilterVersion( HTTP_FILTER_VERSION * pVer );																		
GetFinalPathNameByHandleA ( __in HANDLE hFile, __out_ecount(cchFilePath) LPSTR lpszFilePath, __in DWORD cchFilePath, __in DWORD dwFlags);																		
GetFinalPathNameByHandleW ( __in HANDLE hFile, __out_ecount(cchFilePath) LPWSTR lpszFilePath, __in DWORD cchFilePath, __in DWORD dwFlags);																		
GetFirmwareEnvironmentVariableA( __in LPCSTR lpName, __in LPCSTR lpGuid, __out_bcount_part_opt(nSize, return) PVOID pBuffer, __in DWORD nSize );																		
GetFirmwareEnvironmentVariableW( __in LPCWSTR lpName, __in LPCWSTR lpGuid, __out_bcount_part_opt(nSize, return) PVOID pBuffer, __in DWORD nSize );																		
GetFocus(VOID);																		
GetForegroundWindow(VOID);																		
GetFormA(__in HANDLE hPrinter,__in LPSTR pFormName, DWORD Level,__out_bcount_opt(cbBuf) LPBYTE pForm, DWORD cbBuf,__out LPDWORD pcbNeeded);																		
GetFormW(__in HANDLE hPrinter,__in LPWSTR pFormName, DWORD Level,__out_bcount_opt(cbBuf) LPBYTE pForm, DWORD cbBuf,__out LPDWORD pcbNeeded);																		
GetFriendlyIfIndex( __in DWORD IfIndex );																		
GetFriendlyNameOfCertA( __in PCCERT_CONTEXT pccert, __out_ecount_part_opt(cch, return) LPSTR pch, __in DWORD cch );																		
GetFriendlyNameOfCertW( __in PCCERT_CONTEXT pccert, __out_ecount_part_opt(cwch, return) LPWSTR pwch, __in DWORD cwch );																		
GetFullPathNameA( __in LPCSTR lpFileName, __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPSTR lpBuffer, __deref_opt_out LPSTR *lpFilePart );																		
GetFullPathNameTransactedA( __in LPCSTR lpFileName, __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPSTR lpBuffer, __deref_opt_out LPSTR *lpFilePart, __in HANDLE hTransaction );																		
GetFullPathNameTransactedW( __in LPCWSTR lpFileName, __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPWSTR lpBuffer, __deref_opt_out LPWSTR *lpFilePart, __in HANDLE hTransaction );																		
GetFullPathNameW( __in LPCWSTR lpFileName, __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPWSTR lpBuffer, __deref_opt_out LPWSTR *lpFilePart );																		
GetGeoInfo( __in GEOID Location, __in GEOTYPE GeoType, __out_ecount_opt(cchData) LPSTR lpGeoData, __in int cchData, __in LANGID LangId);	
GetGeoInfoA( __in GEOID Location, __in GEOTYPE GeoType, __out_ecount_opt(cchData) LPSTR lpGeoData, __in int cchData, __in LANGID LangId);																		
GetGeoInfoW( __in GEOID Location, __in GEOTYPE GeoType, __out_ecount_opt(cchData) LPWSTR lpGeoData, __in int cchData, __in LANGID LangId);																		
GetGestureConfig( __in HWND hwnd, __in DWORD dwReserved, __in DWORD dwFlags, __in PUINT pcIDs, __inout_ecount(*pcIDs) PGESTURECONFIG pGestureConfig, __in UINT cbSize);     																	
GetGestureExtraArgs(__in HGESTUREINFO hGestureInfo,__in UINT cbExtraArgs,__out_bcount(cbExtraArgs) PBYTE pExtraArgs);																		
GetGestureInfo(__in HGESTUREINFO hGestureInfo,__out PGESTUREINFO pGestureInfo);		
GetGPOList(__in_opt HANDLE hToken, __in_opt LPCSTR lpName, __in_opt LPCSTR lpHostName, __in_opt LPCSTR lpComputerName, __in DWORD dwFlags, __deref_out PGROUP_POLICY_OBJECTA * pGPOList);																																		
GetGPOListA(__in_opt HANDLE hToken, __in_opt LPCSTR lpName, __in_opt LPCSTR lpHostName, __in_opt LPCSTR lpComputerName, __in DWORD dwFlags, __deref_out PGROUP_POLICY_OBJECTA * pGPOList);																		
GetGPOListW(__in_opt HANDLE hToken, __in_opt LPCWSTR lpName, __in_opt LPCWSTR lpHostName, __in_opt LPCWSTR lpComputerName, __in DWORD dwFlags, __deref_out PGROUP_POLICY_OBJECTW * pGPOList);																		
GetGuiResources(__in HANDLE hProcess,__in DWORD uiFlags);																		
GetGUIThreadInfo(__in DWORD idThread,__inout PGUITHREADINFO pgui);																		
GetHandleInformation(__in  HANDLE hObject,__out LPDWORD lpdwFlags);																		
GetICMProfileA( __in HDC hdc,__inout LPDWORD pBufSize,__out_ecount_opt(*pBufSize) LPSTR pszFilename);																		
GetICMProfileW(__in HDC hdc,__inout LPDWORD pBufSize,__out_ecount_opt(*pBufSize) LPWSTR pszFilename);																		
GetIcmpStatistics(__out PMIB_ICMP Statistics);																		
GetIcmpStatisticsEx(__out PMIB_ICMP_EX Statistics,__in  ULONG Family);																		
GetIconInfo(__in HICON hIcon,__out PICONINFO piconinfo);																		
GetIconInfoExA(__in HICON hicon,__inout PICONINFOEXA piconinfo);																		
GetIconInfoExW(__in HICON hicon,__inout PICONINFOEXW piconinfo);																		
GetIfEntry(__inout PMIB_IFROW pIfRow);																		
GetIfTable(__out_bcount_opt(*pdwSize) PMIB_IFTABLE pIfTable, __inout PULONG pdwSize, __in BOOL bOrder);																		
GetImageConfigInformation(__in PLOADED_IMAGE LoadedImage, __out PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation );																		
GetImageUnusedHeaderBytes(__in PLOADED_IMAGE LoadedImage, __out PDWORD SizeUnusedHeaderBytes );																		
GetInheritanceSourceA(__in LPSTR pObjectName, __in SE_OBJECT_TYPE ObjectType, __in SECURITY_INFORMATION SecurityInfo, __in BOOL Container, __in_ecount_opt(GuidCount) GUID	** pObjectClassGuids, __in DWORD GuidCount, __in PACL pAcl, __in_opt PFN_OBJECT_MGR_FUNCTS pfnArray, __in PGENERIC_MAPPING pGenericMapping, __out PINHERITED_FROMA pInheritArray );																	
GetInheritanceSourceW(__in LPWSTR pObjectName, __in SE_OBJECT_TYPE ObjectType, __in SECURITY_INFORMATION SecurityInfo, __in BOOL Container, __in_ecount_opt(GuidCount) GUID	** pObjectClassGuids, __in DWORD GuidCount, __in PACL pAcl, __in_opt PFN_OBJECT_MGR_FUNCTS pfnArray, __in PGENERIC_MAPPING pGenericMapping, __out PINHERITED_FROMW pInheritArray );																	
GetInputState(VOID);																		
GetInterfaceInfo( __out_bcount_opt(*dwOutBufLen) PIP_INTERFACE_INFO  pIfTable, __inout PULONG dwOutBufLen );																		
GetIpAddrTable( __out_bcount_opt(*pdwSize) PMIB_IPADDRTABLE pIpAddrTable, __inout PULONG pdwSize, __in BOOL bOrder );																		
GetIpErrorString( __in    IP_STATUS ErrorCode, __out_ecount_opt(*Size + 1) PWSTR Buffer, __inout PDWORD Size );																		
GetIpForwardTable( __out_bcount_opt(*pdwSize) PMIB_IPFORWARDTABLE pIpForwardTable, __inout PULONG pdwSize, __in BOOL bOrder );																		
GetIpNetTable( __out_bcount_opt(*SizePointer) PMIB_IPNETTABLE IpNetTable, __inout PULONG SizePointer, __in BOOL Order );																		
GetIpStatistics( __out PMIB_IPSTATS Statistics );																		
GetIpStatisticsEx( __out PMIB_IPSTATS Statistics, __in  ULONG Family );																		
GetJobA(__in  HANDLE hPrinter, DWORD JobId, DWORD Level,__out_bcount_opt(cbBuf) LPBYTE pJob, DWORD cbBuf,__out LPDWORD  pcbNeeded);																		
GetJobW(__in  HANDLE hPrinter, DWORD JobId, DWORD Level,__out_bcount_opt(cbBuf) LPBYTE pJob, DWORD cbBuf,__out LPDWORD  pcbNeeded);																		
GetKBCodePage(VOID);																		
GetKernelObjectSecurity (__in  HANDLE Handle,__in  SECURITY_INFORMATION RequestedInformation,__out_bcount_opt(nLength) PSECURITY_DESCRIPTOR pSecurityDescriptor,__in  DWORD nLength,__out LPDWORD lpnLengthNeeded);																		
GetKerningPairsA(__in HDC hdc,__in DWORD nPairs,__out_ecount_part_opt(nPairs, return) LPKERNINGPAIR   lpKernPair);																		
GetKerningPairsW(__in HDC hdc,__in DWORD nPairs,__out_ecount_part_opt(nPairs, return) LPKERNINGPAIR   lpKernPair);																		
GetKeyboardLayout(__in DWORD idThread);																		
GetKeyboardLayoutList(__in int nBuff,__out_ecount_part_opt(nBuff, return) HKL FAR *lpList);																		
GetKeyboardLayoutNameA(__out_ecount(KL_NAMELENGTH) LPSTR pwszKLID);																		
GetKeyboardLayoutNameW(__out_ecount(KL_NAMELENGTH) LPWSTR pwszKLID);																		
GetKeyboardState(__out_ecount(256) PBYTE lpKeyState);																		
GetKeyboardType(__in int nTypeFlag);																		
GetKeyNameTextA(__in LONG lParam,__out_ecount(cchSize) LPSTR lpString,__in int cchSize);																		
GetKeyNameTextW(__in LONG lParam,__out_ecount(cchSize) LPWSTR lpString,__in int cchSize);																		
GetKeyState(__in int nVirtKey);																		
GetLargePageMinimum( VOID );																		
GetLargestConsoleWindowSize( __in HANDLE hConsoleOutput );																		
GetLastActivePopup(__in HWND hWnd);																		
GetLastError( VOID );																		
GetLastInputInfo(__out PLASTINPUTINFO plii);																		
GetLayeredWindowAttributes( __in HWND hwnd, __out_opt COLORREF* pcrKey, __out_opt BYTE* pbAlpha, __out_opt DWORD* pdwFlags);																		
GetLayout(__in HDC hdc);																		
GetLengthSid ( __in PSID pSid );																		
GetListBoxInfo( __in HWND hwnd);																		
GetLocaleInfoA( __in LCID Locale, __in LCTYPE LCType, __out_ecount_opt(cchData) LPSTR  lpLCData, __in int cchData);																		
GetLocaleInfoEx( __in_opt LPCWSTR lpLocaleName, __in LCTYPE LCType, __out_ecount_opt(cchData) LPWSTR lpLCData, __in int cchData);																		
GetLocaleInfoW( __in LCID Locale, __in LCTYPE LCType, __out_ecount_opt(cchData) LPWSTR  lpLCData, __in int cchData);																		
GetLocalTime( __out LPSYSTEMTIME lpSystemTime );																		
GetLogColorSpaceA( __in HCOLORSPACE hColorSpace,__out_bcount(nSize) LPLOGCOLORSPACEA lpBuffer,__in DWORD nSize);																		
GetLogColorSpaceW( __in HCOLORSPACE hColorSpace,__out_bcount(nSize) LPLOGCOLORSPACEW lpBuffer, __in DWORD nSize);																		
GetLogicalDrives(VOID);																		
GetLogicalDriveStringsA( __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPSTR lpBuffer );																		
GetLogicalDriveStringsW( __in DWORD nBufferLength, __out_ecount_part_opt(nBufferLength, return + 1) LPWSTR lpBuffer );																		
GetLogicalProcessorInformation( __out_bcount_part_opt(*ReturnedLength, *ReturnedLength) PSYSTEM_LOGICAL_PROCESSOR_INFORMATION Buffer, __inout PDWORD ReturnedLength );																		
GetLogicalProcessorInformationEx( __in LOGICAL_PROCESSOR_RELATIONSHIP RelationshipType,    __out_bcount_part_opt(*ReturnedLength, *ReturnedLength) PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX Buffer, __inout PDWORD ReturnedLength );																		
GetLongPathNameA( __in LPCSTR lpszShortPath, __out_ecount_part_opt(cchBuffer, return + 1) LPSTR  lpszLongPath, __in DWORD cchBuffer );																		
GetLongPathNameTransactedA(__in LPCSTR lpszShortPath, __out_ecount_part_opt(cchBuffer, return + 1) LPSTR  lpszLongPath, __in DWORD cchBuffer, __in HANDLE hTransaction );																		
GetLongPathNameTransactedW(__in LPCWSTR lpszShortPath, __out_ecount_part_opt(cchBuffer, return + 1) LPWSTR  lpszLongPath, __in DWORD cchBuffer, __in HANDLE hTransaction );																		
GetLongPathNameW(__in LPCWSTR lpszShortPath,__out_ecount_part_opt(cchBuffer, return + 1) LPWSTR  lpszLongPath,__in DWORD cchBuffer);																		
GetMailslotInfo(__inHANDLE hMailslot,__out_opt LPDWORD lpMaxMessageSize,__out_opt LPDWORD lpNextSize,__out_opt LPDWORD lpMessageCount,__out_opt LPDWORD lpReadTimeout );																		
GetMappedFileNameA (__in HANDLE hProcess,__in LPVOID lpv,__out_ecount(nSize) LPSTR lpFilename,__in DWORD nSize);																		
GetMappedFileNameW (__in HANDLE hProcess,__in LPVOID lpv,__out_ecount(nSize) LPWSTR lpFilename,__in DWORD nSize);																		
GetMaximumProcessorCount(__in WORD GroupNumber);																		
GetMaximumProcessorGroupCount(VOID);																		
GetMenu(__in HWND hWnd);																		
GetMenuBarInfo(__in HWND hwnd,__in LONG idObject,__in LONG idItem,__inout PMENUBARINFO pmbi);																		
GetMenuCheckMarkDimensions(VOID);																		
GetMenuContextHelpId(__in HMENU);																		
GetMenuDefaultItem(__in HMENU hMenu,__in UINT fByPos,__in UINT gmdiFlags);																		
GetMenuInfo(__in HMENU,__inout LPMENUINFO);																		
GetMenuItemCount(__in_opt HMENU hMenu);																		
GetMenuItemID(__in HMENU hMenu,__in int nPos);			
GetMenuItemInfo(__in HMENU hmenu,__in UINT item,__in BOOL fByPosition,__inout LPMENUITEMINFOA lpmii);																
GetMenuItemInfoA(__in HMENU hmenu,__in UINT item,__in BOOL fByPosition,__inout LPMENUITEMINFOA lpmii);																		
GetMenuItemInfoW(__in HMENU hmenu,__in UINT item,__in BOOL fByPosition,__inout LPMENUITEMINFOW lpmii);																		
GetMenuItemRect(__in_opt HWND hWnd,__in HMENU hMenu,__in UINT uItem,__out LPRECT lprcItem);																		
GetMenuState(__in HMENU hMenu,__in UINT uId,__in UINT uFlags);																		
GetMenuStringA(__in HMENU hMenu,__in UINT uIDItem,__out_ecount_opt(cchMax) LPSTR lpString,__in int cchMax,__in UINT flags);																		
GetMenuStringW(__in HMENU hMenu,__in UINT uIDItem,__out_ecount_opt(cchMax) LPWSTR lpString,__in int cchMax,__in UINT flags);	
GetMessage(__out LPMSG lpMsg,__in_opt HWND hWnd,__in UINT wMsgFilterMin,__in UINT wMsgFilterMax);																		
GetMessageA(__out LPMSG lpMsg,__in_opt HWND hWnd,__in UINT wMsgFilterMin,__in UINT wMsgFilterMax);																		
GetMessageExtraInfo(VOID);																		
GetMessagePos(VOID);																		
GetMessageTime(VOID);																		
GetMessageW(__out LPMSG lpMsg,__in_opt HWND hWnd,__in UINT wMsgFilterMin,__in UINT wMsgFilterMax);																		
GetMiterLimit(__in HDC hdc, __out PFLOAT plimit);			
GetModuleBaseName(__in HANDLE hProcess,__in_opt HMODULE hModule,__out_ ecount(nSize) LPSTR lpBaseName,__in DWORD nSize);																
GetModuleBaseNameA(__in HANDLE hProcess,__in_opt HMODULE hModule,__out_ ecount(nSize) LPSTR lpBaseName,__in DWORD nSize);																		
GetModuleBaseNameW(__in HANDLE hProcess,__in_opt HMODULE hModule,__out_ ecount(nSize) LPWSTR lpBaseName,__in DWORD nSize);																		
GetModuleFileNameA(__in_opt HMODULE hModule,__out_ ecount_part(nSize, return + 1) LPSTR lpFilename,__in DWORD nSize);
GetModuleFileName(__in_opt HMODULE hModule,__out_ ecount_part(nSize, return + 1) LPSTR lpFilename,__in DWORD nSize);																		
GetModuleFileNameExA(__in HANDLE hProcess,__in_opt HMODULE hModule,__out_ ecount(nSize) LPSTR lpFilename,__in DWORD nSize);																		
GetModuleFileNameExW(__in HANDLE hProcess,__in_opt HMODULE hModule,__out_ ecount(nSize) LPWSTR lpFilename,__in DWORD nSize);																		
GetModuleFileNameW(__in_opt HMODULE hModule,__out_ecount_part(nSize, return + 1) LPWSTR lpFilename,__in DWORD nSize);	
GetModuleHandle(__in_opt LPCSTR lpModuleName);																			
GetModuleHandleA(__in_opt LPCSTR lpModuleName);																		
GetModuleHandleExA( __in DWORD dwFlags, __in_opt LPCSTR lpModuleName, __out HMODULE* phModule );																		
GetModuleHandleExW( __in DWORD dwFlags, __in_opt LPCWSTR lpModuleName, __out HMODULE* phModule );																		
GetModuleHandleW( __in_opt LPCWSTR lpModuleName );																		
GetModuleInformation( __in HANDLE hProcess, __in HMODULE hModule, __out LPMODULEINFO lpmodinfo, __in DWORD cb );
GetMonitorInfo( __in HMONITOR hMonitor, __inout LPMONITORINFO lpmi);																		
GetMonitorInfoA( __in HMONITOR hMonitor, __inout LPMONITORINFO lpmi);																		
GetMonitorInfoW( __in HMONITOR hMonitor, __inout LPMONITORINFO lpmi);																		
GetMouseMovePointsEx( __in UINT cbSize, __in LPMOUSEMOVEPOINT lppt, __out_ecount(nBufPoints) LPMOUSEMOVEPOINT lpptBuf, __in int nBufPoints, __in DWORD resolution);																			
GetMultipleTrusteeA( __in_opt PTRUSTEE_A  pTrustee );																		
GetMultipleTrusteeOperationA( __in_opt PTRUSTEE_A  pTrustee );																		
GetMultipleTrusteeOperationW( __in_opt PTRUSTEE_W  pTrustee );																		
GetMultipleTrusteeW( __in_opt PTRUSTEE_W  pTrustee );																		
GetNameByTypeA( __in LPGUID lpServiceType, __out_bcount(dwNameLength) LPSTR lpServiceName, __in DWORD dwNameLength );																		
GetNameByTypeW( __in LPGUID lpServiceType, __out_bcount(dwNameLength) LPWSTR lpServiceName, __in DWORD dwNameLength );																		
GetNamedPipeAttribute( __in HANDLE Pipe, __in PIPE_ATTRIBUTE_TYPE AttributeType, __in PSTR AttributeName, __out_bcount(*AttributeValueLength) PVOID AttributeValue,    __inout PSIZE_T AttributeValueLength    );																		
GetNamedPipeClientComputerName( __in HANDLE Pipe, __out_bcount(ClientComputerNameLength)  LPSTR ClientComputerName, __in ULONG ClientComputerNameLength );																		
GetNamedPipeClientComputerNameA( __in HANDLE Pipe, __out_bcount(ClientComputerNameLength)  LPSTR ClientComputerName, __in ULONG ClientComputerNameLength );																		
GetNamedPipeClientComputerNameW( __in HANDLE Pipe, __out_bcount(ClientComputerNameLength)  LPWSTR ClientComputerName, __in ULONG ClientComputerNameLength );																		
GetNamedPipeClientProcessId( __in HANDLE Pipe, __out PULONG ClientProcessId );																		
GetNamedPipeClientSessionId( __in HANDLE Pipe, __out PULONG ClientSessionId );																		
GetNamedPipeHandleStateA(    __in      HANDLE hNamedPipe,    __out_opt LPDWORD lpState,    __out_opt LPDWORD lpCurInstances,    __out_opt LPDWORD lpMaxCollectionCount,    __out_opt LPDWORD lpCollectDataTimeout,    __out_ecount_opt(nMaxUserNameSize) LPSTR lpUserName,    __in      DWORD nMaxUserNameSize    );																		
GetNamedPipeHandleStateW(    __in      HANDLE hNamedPipe,    __out_opt LPDWORD lpState,    __out_opt LPDWORD lpCurInstances,    __out_opt LPDWORD lpMaxCollectionCount,    __out_opt LPDWORD lpCollectDataTimeout,    __out_ecount_opt(nMaxUserNameSize) LPWSTR lpUserName,    __in      DWORD nMaxUserNameSize    );																		
GetNamedPipeInfo(    __in      HANDLE hNamedPipe,    __out_opt LPDWORD lpFlags,    __out_opt LPDWORD lpOutBufferSize,    __out_opt LPDWORD lpInBufferSize,    __out_opt LPDWORD lpMaxInstances    );																		
GetNamedPipeServerProcessId(    __in HANDLE Pipe,    __out PULONG ServerProcessId    );																		
GetNamedPipeServerSessionId(    __in HANDLE Pipe,    __out PULONG ServerSessionId    );																		
GetNamedSecurityInfoA(__in  LPCSTR pObjectName,__in  SE_OBJECT_TYPE ObjectType,__in  SECURITY_INFORMATION   SecurityInfo,__out_opt const PSID * ppsidOwner,__out_opt const PSID * ppsidGroup,__out_opt const PACL * ppDacl,__out_opt const PACL * ppSacl,__out PSECURITY_DESCRIPTOR * ppSecurityDescriptor);																		
GetNamedSecurityInfoW(__in  LPCWSTR pObjectName,__in  SE_OBJECT_TYPE ObjectType,__in  SECURITY_INFORMATION SecurityInfo,__out_opt const PSID  * ppsidOwner,__out_opt const PSID  * ppsidGroup,__out_opt const PACL  * ppDacl,__out_opt const PACL  * ppSacl,__out PSECURITY_DESCRIPTOR  * ppSecurityDescriptor);																		
GetNativeSystemInfo(    __out LPSYSTEM_INFO lpSystemInfo    );																		
GetNetworkParams(    __out_bcount_opt(*pOutBufLen)   PFIXED_INFO pFixedInfo,     __inout                         PULONG      pOutBufLen    );																		
GetNextDlgGroupItem(    __in HWND hDlg,    __in_opt HWND hCtl,    __in BOOL bPrevious);																		
GetNextDlgTabItem(    __in HWND hDlg,    __in_opt HWND hCtl,    __in BOOL bPrevious);																		
GetNextUmsListItem(    __inout PUMS_CONTEXT UmsContext    );																		
GetNLSVersion(    __in    NLS_FUNCTION     Function,    __in    LCID             Locale,    __inout LPNLSVERSIONINFO lpVersionInformation);																		
GetNLSVersionEx(    __in    NLS_FUNCTION function,    __in_opt    LPCWSTR lpLocaleName,    __inout LPNLSVERSIONINFOEX lpVersionInformation);																		
GetNodeClusterState(    __in_opt    LPCWSTR lpszNodeName,    __out       LPDWORD pdwClusterState    );																		
GetNotificationResourceManager (    IN  HANDLE                          ResourceManagerHandle,    OUT PTRANSACTION_NOTIFICATION       TransactionNotification,    IN  ULONG                           NotificationLength,    IN  DWORD                           dwMilliseconds OPTIONAL,    OUT PULONG                          ReturnLength OPTIONAL    );																		
GetNotificationResourceManagerAsync (    IN  HANDLE                        ResourceManagerHandle,    OUT PTRANSACTION_NOTIFICATION     TransactionNotification,    IN  ULONG                         TransactionNotificationLength,    OUT PULONG                        ReturnLength,    IN  LPOVERLAPPED                  lpOverlapped    );																		
GetNtmsMediaPoolNameA(    __in HANDLE hSession,    __in LPNTMS_GUID lpPoolId,    __out_ecount_part(*lpdwBufSize, *lpdwBufSize) LPSTR lpNameBuf,    __inout LPDWORD lpdwBufSize    );																		
GetNtmsMediaPoolNameW(    __in HANDLE hSession,    __in LPNTMS_GUID lpPoolId,    __out_ecount_part(*lpdwBufSize, *lpdwBufSize) LPWSTR lpNameBuf,    __inout LPDWORD lpdwBufSize    );																		
GetNtmsUIOptionsA(    __in HANDLE hSession,    __in const LPNTMS_GUID lpObjectId,    __in DWORD dwType,    __out_ecount_part(*lpdwBufSize, *lpdwBufSize) LPSTR lpszDestination,    __inout LPDWORD lpdwBufSize    );																		
GetNtmsUIOptionsW(    __in HANDLE hSession,    __in const LPNTMS_GUID lpObjectId,    __in DWORD dwType,    __out_ecount_part(*lpdwBufSize, *lpdwBufSize) LPWSTR lpszDestination,    __inout LPDWORD lpdwBufSize    );																		
GetNumaAvailableMemoryNode(    __in  UCHAR Node,    __out PULONGLONG AvailableBytes    );																		
GetNumaAvailableMemoryNodeEx(    __in  USHORT Node,    __out PULONGLONG AvailableBytes    );																		
GetNumaHighestNodeNumber(    __out PULONG HighestNodeNumber    );																		
GetNumaNodeNumberFromHandle(    __in  HANDLE hFile,    __out PUSHORT NodeNumber    );																		
GetNumaNodeProcessorMask(    __in  UCHAR Node,    __out PULONGLONG ProcessorMask    );																		
GetNumaNodeProcessorMaskEx(    __in  USHORT Node,    __out PGROUP_AFFINITY ProcessorMask    );																		
GetNumaProcessorNode(    __in  UCHAR Processor,    __out PUCHAR NodeNumber    );																		
GetNumaProcessorNodeEx(    __in  PPROCESSOR_NUMBER Processor,    __out PUSHORT NodeNumber    );																		
GetNumaProximityNode(    __in  ULONG ProximityId,    __out PUCHAR NodeNumber    );																		
GetNumaProximityNodeEx(    __in  ULONG ProximityId,    __out PUSHORT NodeNumber    );																		
GetNumberFormatA(    __in LCID             Locale,    __in DWORD            dwFlags,    __in LPCSTR          lpValue,    __in_opt CONST NUMBERFMTA *lpFormat,    __out_ecount_opt(cchNumber) LPSTR          lpNumberStr,    __in int              cchNumber);																		
GetNumberFormatEx(    __in_opt LPCWSTR lpLocaleName,    __in DWORD dwFlags,    __in LPCWSTR lpValue,    __in_opt CONST NUMBERFMTW *lpFormat,    __out_ecount_opt(cchNumber) LPWSTR lpNumberStr,    __in int cchNumber);																		
GetNumberFormatW(    __in LCID             Locale,    __in DWORD            dwFlags,    __in LPCWSTR          lpValue,    __in_opt CONST NUMBERFMTW *lpFormat,    __out_ecount_opt(cchNumber) LPWSTR          lpNumberStr,    __in int              cchNumber);																		
GetNumberOfConsoleInputEvents(    __in HANDLE hConsoleInput,    __out LPDWORD lpNumberOfEvents    );																		
GetNumberOfConsoleMouseButtons(    __out LPDWORD lpNumberOfMouseButtons    );																		
GetNumberOfEventLogRecords (    __in  HANDLE hEventLog,    __out PDWORD NumberOfRecords    );																		
GetNumberOfInterfaces(    __out PDWORD  pdwNumIf    );																		
GetObject(HANDLE h,int c,LPVOID pv);																		
GetObjectA(__in HANDLE h, __in int c, __out_bcount_opt(c) LPVOID pv);																		
GetObjectW(__in HANDLE h, __in int c, __out_bcount_opt(c) LPVOID pv);																		
GetOEMCP(void);																		
GetOldestEventLogRecord (    __in  HANDLE hEventLog,    __out PDWORD OldestRecord    );																		
GetOpenCardNameA(    LPOPENCARDNAMEA);																		
GetOpenCardNameW(    LPOPENCARDNAMEW);																		
GetOpenClipboardWindow(    VOID);																		
GetOverlappedResult(    __in  HANDLE hFile,    __in  LPOVERLAPPED lpOverlapped,    __out LPDWORD lpNumberOfBytesTransferred,    __in  BOOL bWait    );																		
GetOwnerModuleFromTcp6Entry(    __in                      PMIB_TCP6ROW_OWNER_MODULE     pTcpEntry,    __in                      TCPIP_OWNER_MODULE_INFO_CLASS Class,    __out_bcount(*pdwSize)    PVOID                         pBuffer,    __inout                   PDWORD                        pdwSize    );    																		
GetOwnerModuleFromTcpEntry(    __in                   PMIB_TCPROW_OWNER_MODULE      pTcpEntry,    __in                   TCPIP_OWNER_MODULE_INFO_CLASS Class,    __out_bcount(*pdwSize) PVOID                         pBuffer,    __inout                PDWORD                        pdwSize    );																		
GetOwnerModuleFromUdp6Entry(    __in                      PMIB_UDP6ROW_OWNER_MODULE     pUdpEntry,    __in                      TCPIP_OWNER_MODULE_INFO_CLASS Class,    __out_bcount(*pdwSize)    PVOID                         pBuffer,    __inout                   PDWORD                        pdwSize    );    																		
GetOwnerModuleFromUdpEntry(    __in                      PMIB_UDPROW_OWNER_MODULE      pUdpEntry,    __in                      TCPIP_OWNER_MODULE_INFO_CLASS Class,    __out_bcount(*pdwSize)    PVOID                         pBuffer,    __inout                   PDWORD                        pdwSize    );																		
GetParent(__in HWND hWnd);																		
GetPath(__in HDC hdc, __out_ecount_opt(cpt) LPPOINT apt, __out_ecount_opt(cpt) LPBYTE aj, int cpt);																		
GetPerAdapterInfo(    __in                            ULONG                IfIndex,     __out_bcount_opt(*pOutBufLen)   PIP_PER_ADAPTER_INFO pPerAdapterInfo,     __inout                         PULONG               pOutBufLen    );																		
GetPerformanceInfo (    PPERFORMANCE_INFORMATION pPerformanceInformation,    DWORD cb    );																		
GetPerTcp6ConnectionEStats(    __in PMIB_TCP6ROW Row,    __in TCP_ESTATS_TYPE EstatsType,    __out_bcount_opt(RwSize) PUCHAR Rw,    __in  ULONG RwVersion,    __in  ULONG RwSize,    __out_bcount_opt(RosSize) PUCHAR Ros,    __in  ULONG RosVersion,    __in  ULONG RosSize,    __out_bcount_opt(RodSize) PUCHAR Rod,    __in  ULONG RodVersion,    __in  ULONG RodSize    );																		
GetPerTcpConnectionEStats(    __in PMIB_TCPROW Row,    __in TCP_ESTATS_TYPE EstatsType,    __out_bcount_opt(RwSize) PUCHAR Rw,    __in ULONG RwVersion,    __in ULONG RwSize,    __out_bcount_opt(RosSize) PUCHAR Ros,    __in ULONG RosVersion,    __in ULONG RosSize,    __out_bcount_opt(RodSize) PUCHAR Rod,    __in ULONG RodVersion,    __in ULONG RodSize    );																		
GetPhysicalCursorPos(__out LPPOINT lpPoint);																		
GetPhysicallyInstalledSystemMemory(    __out PULONGLONG TotalMemoryInKilobytes    );																		
GetPrinterA(__in  HANDLE  hPrinter,      DWORD   Level,__out_bcount_opt(cbBuf)      LPBYTE  pPrinter,      DWORD   cbBuf,__out LPDWORD pcbNeeded);																		
GetPrinterDataA(__in         HANDLE   hPrinter,__in         LPSTR  pValueName,__out_opt    LPDWORD  pType,__out_bcount_opt(nSize)             LPBYTE   pData,             DWORD    nSize,__out        LPDWORD  pcbNeeded);																		
GetPrinterDataExA(__in         HANDLE   hPrinter,__in         LPCSTR pKeyName,__in         LPCSTR pValueName,__out_opt    LPDWORD  pType,__out_bcount_opt(nSize)             LPBYTE   pData,             DWORD    nSize,__out        LPDWORD  pcbNeeded);																		
GetPrinterDataExW(__in         HANDLE   hPrinter,__in         LPCWSTR pKeyName,__in         LPCWSTR pValueName,__out_opt    LPDWORD  pType,__out_bcount_opt(nSize)             LPBYTE   pData,             DWORD    nSize,__out        LPDWORD  pcbNeeded);																		
GetPrinterDataW(__in         HANDLE   hPrinter,__in         LPWSTR  pValueName,__out_opt    LPDWORD  pType,__out_bcount_opt(nSize)             LPBYTE   pData,             DWORD    nSize,__out        LPDWORD  pcbNeeded);																		
GetPrinterDriverA(__in        HANDLE  hPrinter,__in_opt    LPSTR pEnvironment,            DWORD   Level,__out_bcount_opt(cbBuf)            LPBYTE  pDriverInfo,            DWORD   cbBuf,__out       LPDWORD pcbNeeded);																		
GetPrinterDriverDirectoryA(__in_opt    LPSTR   pName,__in_opt    LPSTR   pEnvironment,            DWORD     Level,__out_bcount_opt(cbBuf)            LPBYTE    pDriverDirectory,            DWORD     cbBuf,__out       LPDWORD   pcbNeeded);																		
GetPrinterDriverDirectoryW(__in_opt    LPWSTR   pName,__in_opt    LPWSTR   pEnvironment,            DWORD     Level,__out_bcount_opt(cbBuf)            LPBYTE    pDriverDirectory,            DWORD     cbBuf,__out       LPDWORD   pcbNeeded);																		
GetPrinterDriverW(__in        HANDLE  hPrinter,__in_opt    LPWSTR pEnvironment,            DWORD   Level,__out_bcount_opt(cbBuf)            LPBYTE  pDriverInfo,            DWORD   cbBuf,__out       LPDWORD pcbNeeded);																		
GetPrinterW(__in  HANDLE  hPrinter,      DWORD   Level,__out_bcount_opt(cbBuf)      LPBYTE  pPrinter,      DWORD   cbBuf,__out LPDWORD pcbNeeded);																		
GetPrintExecutionData(    __out PRINT_EXECUTION_DATA *pData    );																		
GetPrintProcessorDirectoryA(__in_opt   LPSTR    pName,__in_opt   LPSTR    pEnvironment,           DWORD      Level,__out_bcount_opt(cbBuf)           LPBYTE     pPrintProcessorInfo,           DWORD      cbBuf,__out      LPDWORD    pcbNeeded);																		
GetPrintProcessorDirectoryW(__in_opt   LPWSTR    pName,__in_opt   LPWSTR    pEnvironment,           DWORD      Level,__out_bcount_opt(cbBuf)           LPBYTE     pPrintProcessorInfo,           DWORD      cbBuf,__out      LPDWORD    pcbNeeded);																		
GetPriorityClass(    __in HANDLE hProcess    );																		
GetPriorityClipboardFormat(    __in_ecount(cFormats) UINT *paFormatPriorityList,    __in int cFormats);																		
GetPrivateObjectSecurity (    __in  PSECURITY_DESCRIPTOR ObjectDescriptor,    __in  SECURITY_INFORMATION SecurityInformation,    __out_bcount_part_opt(DescriptorLength, *ReturnLength) PSECURITY_DESCRIPTOR ResultantDescriptor,    __in  DWORD DescriptorLength,    __out PDWORD ReturnLength    );																		
GetPrivateProfileIntA(    __in     LPCSTR lpAppName,    __in     LPCSTR lpKeyName,    __in     INT nDefault,    __in_opt LPCSTR lpFileName    );																		
GetPrivateProfileIntW(    __in     LPCWSTR lpAppName,    __in     LPCWSTR lpKeyName,    __in     INT nDefault,    __in_opt LPCWSTR lpFileName    );																		
GetPrivateProfileSectionA(    __in     LPCSTR lpAppName,    __out_ecount_part_opt(nSize, return + 1) LPSTR lpReturnedString,    __in     DWORD nSize,    __in_opt LPCSTR lpFileName    );																		
GetPrivateProfileSectionNamesA(    __out_ecount_part_opt(nSize, return + 1) LPSTR lpszReturnBuffer,    __in     DWORD nSize,    __in_opt LPCSTR lpFileName    );																		
GetPrivateProfileSectionNamesW(    __out_ecount_part_opt(nSize, return + 1) LPWSTR lpszReturnBuffer,    __in     DWORD nSize,    __in_opt LPCWSTR lpFileName    );																		
GetPrivateProfileSectionW(    __in     LPCWSTR lpAppName,    __out_ecount_part_opt(nSize, return + 1) LPWSTR lpReturnedString,    __in     DWORD nSize,    __in_opt LPCWSTR lpFileName    );																		
GetPrivateProfileStringA(    __in_opt LPCSTR lpAppName,    __in_opt LPCSTR lpKeyName,    __in_opt LPCSTR lpDefault,    __out_ecount_part_opt(nSize, return + 1) LPSTR lpReturnedString,    __in     DWORD nSize,    __in_opt LPCSTR lpFileName    );																		
GetPrivateProfileStringW(    __in_opt LPCWSTR lpAppName,    __in_opt LPCWSTR lpKeyName,    __in_opt LPCWSTR lpDefault,    __out_ecount_part_opt(nSize, return + 1) LPWSTR lpReturnedString,    __in     DWORD nSize,    __in_opt LPCWSTR lpFileName    );																		
GetPrivateProfileStructA(    __in     LPCSTR lpszSection,    __in     LPCSTR lpszKey,    __out_bcount_opt(uSizeStruct) LPVOID   lpStruct,    __in     UINT     uSizeStruct,    __in_opt LPCSTR szFile    );																		
GetPrivateProfileStructW(    __in     LPCWSTR lpszSection,    __in     LPCWSTR lpszKey,    __out_bcount_opt(uSizeStruct) LPVOID   lpStruct,    __in     UINT     uSizeStruct,    __in_opt LPCWSTR szFile    );																		
GetProcAddress (    __in HMODULE hModule,    __in LPCSTR lpProcName    );																		
GetProcessAffinityMask(    __in  HANDLE hProcess,    __out PDWORD_PTR lpProcessAffinityMask,    __out PDWORD_PTR lpSystemAffinityMask    );																		
GetProcessDefaultLayout(__out DWORD *pdwDefaultLayout);																		
GetProcessDEPPolicy(    __in HANDLE hProcess,    __out LPDWORD lpFlags,    __out PBOOL lpPermanent    );																		
GetProcessGroupAffinity(    __in HANDLE hProcess,    __inout PUSHORT GroupCount,    __out_ecount(*GroupCount) PUSHORT GroupArray    );																		
GetProcessHandleCount(    __in  HANDLE hProcess,    __out PDWORD pdwHandleCount    );																		
GetProcessHeap( VOID );																		
GetProcessHeaps(    __in DWORD NumberOfHeaps,    __out_ecount_part(NumberOfHeaps, return) PHANDLE ProcessHeaps    );																		
GetProcessId(    __in HANDLE Process    );																		
GetProcessIdOfThread(    __in HANDLE Thread    );																		
GetProcessImageFileNameA (    __in HANDLE hProcess,    __out_ecount(nSize) LPSTR lpImageFileName,    __in DWORD nSize    );																		
GetProcessImageFileNameW (    __in HANDLE hProcess,    __out_ecount(nSize) LPWSTR lpImageFileName,    __in DWORD nSize    );																		
GetProcessIoCounters(    __in  HANDLE hProcess,    __out PIO_COUNTERS lpIoCounters    );																		
GetProcessMemoryInfo(    HANDLE Process,    PPROCESS_MEMORY_COUNTERS ppsmemCounters,    DWORD cb    );																		
GetProcessorSystemCycleTime (    __in USHORT Group,    __out_bcount_part_opt(*ReturnedLength, *ReturnedLength) PSYSTEM_PROCESSOR_CYCLE_TIME_INFORMATION Buffer,    __inout PDWORD ReturnedLength    );																		
GetProcessPreferredUILanguages(    __in DWORD dwFlags,    __out PULONG pulNumLanguages,    __out_ecount_opt(*pcchLanguagesBuffer) PZZWSTR pwszLanguagesBuffer,    __inout PULONG pcchLanguagesBuffer);																		
GetProcessPriorityBoost(    __in  HANDLE hProcess,    __out PBOOL  pDisablePriorityBoost    );																		
GetProcessShutdownParameters(    __out LPDWORD lpdwLevel,    __out LPDWORD lpdwFlags    );																		
GetProcessTimes(    __in  HANDLE hProcess,    __out LPFILETIME lpCreationTime,    __out LPFILETIME lpExitTime,    __out LPFILETIME lpKernelTime,    __out LPFILETIME lpUserTime    );																		
GetProcessVersion(    __in DWORD ProcessId    );																		
GetProcessWindowStation(    VOID);																		
GetProcessWorkingSetSize(    __in  HANDLE hProcess,    __out PSIZE_T lpMinimumWorkingSetSize,    __out PSIZE_T lpMaximumWorkingSetSize    );																		
GetProcessWorkingSetSizeEx(    __in  HANDLE hProcess,    __out PSIZE_T lpMinimumWorkingSetSize,    __out PSIZE_T lpMaximumWorkingSetSize,    __out PDWORD Flags    );																		
GetProductInfo(    __in  DWORD  dwOSMajorVersion,    __in  DWORD  dwOSMinorVersion,    __in  DWORD  dwSpMajorVersion,    __in  DWORD  dwSpMinorVersion,    __out PDWORD pdwReturnedProductType    );																		
GetProfileIntA(    __in LPCSTR lpAppName,    __in LPCSTR lpKeyName,    __in INT nDefault    );																		
GetProfileIntW(    __in LPCWSTR lpAppName,    __in LPCWSTR lpKeyName,    __in INT nDefault    );																		
GetProfilesDirectoryA(    __out_ecount_opt(*lpcchSize)    LPSTR lpProfileDir,    __inout                         LPDWORD lpcchSize);																		
GetProfilesDirectoryW(    __out_ecount_opt(*lpcchSize)    LPWSTR lpProfileDir,    __inout                         LPDWORD lpcchSize);																		
GetProfileSectionA(    __in LPCSTR lpAppName,    __out_ecount_part_opt(nSize, return + 1) LPSTR lpReturnedString,    __in DWORD nSize    );																		
GetProfileSectionW(    __in LPCWSTR lpAppName,    __out_ecount_part_opt(nSize, return + 1) LPWSTR lpReturnedString,    __in DWORD nSize    );																		
GetProfileStringA(    __in_opt LPCSTR lpAppName,    __in_opt LPCSTR lpKeyName,    __in_opt LPCSTR lpDefault,    __out_ecount_part_opt(nSize, return + 1) LPSTR lpReturnedString,    __in     DWORD nSize    );																		
GetProfileStringW(    __in_opt LPCWSTR lpAppName,    __in_opt LPCWSTR lpKeyName,    __in_opt LPCWSTR lpDefault,    __out_ecount_part_opt(nSize, return + 1) LPWSTR lpReturnedString,    __in     DWORD nSize    );																		
GetProfileType(    __out DWORD *dwFlags);																		
GetPropA(    __in HWND hWnd,    __in LPCSTR lpString);																		
GetPropW(    __in HWND hWnd,    __in LPCWSTR lpString);																		
GetQueuedCompletionStatus(    __in  HANDLE CompletionPort,    __out LPDWORD lpNumberOfBytesTransferred,    __out PULONG_PTR lpCompletionKey,    __out LPOVERLAPPED *lpOverlapped,    __in  DWORD dwMilliseconds    );																		
GetQueuedCompletionStatusEx(    __in  HANDLE CompletionPort,    __out_ecount_part(ulCount, *ulNumEntriesRemoved) LPOVERLAPPED_ENTRY lpCompletionPortEntries,    __in  ULONG ulCount,    __out PULONG ulNumEntriesRemoved,    __in  DWORD dwMilliseconds,    __in  BOOL fAlertable    );																		
GetQueueStatus(    __in UINT flags);																		
GetRawInputBuffer(    __out_bcount_opt(*pcbSize) PRAWINPUT pData,    __inout PUINT pcbSize,    __in UINT cbSizeHeader);																		
GetRawInputData(    __in HRAWINPUT hRawInput,    __in UINT uiCommand,    __out_bcount_part_opt(*pcbSize, return) LPVOID pData,    __inout PUINT pcbSize,    __in UINT cbSizeHeader);																		
GetRawInputDeviceInfoA(    __in_opt HANDLE hDevice,    __in UINT uiCommand,    __inout_bcount_part_opt(*pcbSize, *pcbSize) LPVOID pData,    __inout PUINT pcbSize);																		
GetRawInputDeviceInfoW(    __in_opt HANDLE hDevice,    __in UINT uiCommand,    __inout_bcount_part_opt(*pcbSize, *pcbSize) LPVOID pData,    __inout PUINT pcbSize);																		
GetRawInputDeviceList(    __out_ecount_opt(*puiNumDevices) PRAWINPUTDEVICELIST pRawInputDeviceList,    __inout PUINT puiNumDevices,    __in UINT cbSize);																		
GetRegisteredRawInputDevices(    __out_ecount_opt( *puiNumDevices) PRAWINPUTDEVICE pRawInputDevices,    __inout PUINT puiNumDevices,    __in UINT cbSize);																		
GetRTTAndHopCount(    __in  IPAddr DestIpAddress,    __out PULONG HopCount,    __in  ULONG  MaxHops,    __out PULONG RTT    );																		
GetScrollBarInfo(    __in HWND hwnd,    __in LONG idObject,    __inout PSCROLLBARINFO psbi);																		
GetScrollInfo(    __in HWND hwnd,    __in int nBar,    __inout LPSCROLLINFO lpsi);																		
GetScrollPos(    __in HWND hWnd,    __in int nBar);																		
GetScrollRange(    __in HWND hWnd,    __in int nBar,    __out LPINT lpMinPos,    __out LPINT lpMaxPos);																		
GetSecurityDescriptorControl (    __in  PSECURITY_DESCRIPTOR pSecurityDescriptor,    __out PSECURITY_DESCRIPTOR_CONTROL pControl,    __out LPDWORD lpdwRevision    );																		
GetSecurityDescriptorDacl (    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,    __out       LPBOOL lpbDaclPresent,    __deref_out PACL *pDacl,    __out       LPBOOL lpbDaclDefaulted    );																		
GetSecurityDescriptorGroup (    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,    __deref_out PSID *pGroup,    __out       LPBOOL lpbGroupDefaulted    );																		
GetSecurityDescriptorLength (    __in PSECURITY_DESCRIPTOR pSecurityDescriptor    );																		
GetSecurityDescriptorOwner (    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,    __deref_out PSID *pOwner,    __out       LPBOOL lpbOwnerDefaulted    );																		
GetSecurityDescriptorRMControl(    __in  PSECURITY_DESCRIPTOR SecurityDescriptor,    __out PUCHAR RMControl    );																		
GetSecurityDescriptorSacl (    __in        PSECURITY_DESCRIPTOR pSecurityDescriptor,    __out       LPBOOL lpbSaclPresent,    __deref_out PACL *pSacl,    __out       LPBOOL lpbSaclDefaulted    );																		
GetSecurityInfo(__in  HANDLE handle,__in  SE_OBJECT_TYPE ObjectType,__in  SECURITY_INFORMATION SecurityInfo,__out_opt PSID * ppsidOwner,__out_opt PSID * ppsidGroup,__out_opt PACL * ppDacl,__out_opt PACL * ppSacl,__out_opt PSECURITY_DESCRIPTOR * ppSecurityDescriptor);																		
GetServiceA (    __in     DWORD                dwNameSpace,    __in     LPGUID               lpGuid,    __in     LPSTR                lpServiceName,    __in     DWORD                dwProperties,    __out_bcount(*lpdwBufferSize)  LPVOID               lpBuffer,    __inout  LPDWORD              lpdwBufferSize,    __in_opt LPSERVICE_ASYNC_INFO lpServiceAsyncInfo    );																		
GetServiceDisplayNameA(    __in            SC_HANDLE               hSCManager,    __in            LPCSTR                lpServiceName,    __out_ecount_opt(*lpcchBuffer)                    LPSTR                 lpDisplayName,    __inout         LPDWORD                 lpcchBuffer    );																		
GetServiceDisplayNameW(    __in            SC_HANDLE               hSCManager,    __in            LPCWSTR                lpServiceName,    __out_ecount_opt(*lpcchBuffer)                    LPWSTR                 lpDisplayName,    __inout         LPDWORD                 lpcchBuffer    );																		
GetServiceKeyNameA(    __in            SC_HANDLE               hSCManager,    __in            LPCSTR                lpDisplayName,    __out_ecount_opt(*lpcchBuffer)                    LPSTR                 lpServiceName,    __inout         LPDWORD                 lpcchBuffer    );																		
GetServiceKeyNameW(    __in            SC_HANDLE               hSCManager,    __in            LPCWSTR                lpDisplayName,    __out_ecount_opt(*lpcchBuffer)                    LPWSTR                 lpServiceName,    __inout         LPDWORD                 lpcchBuffer    );																		
GetServiceW (    __in     DWORD                dwNameSpace,    __in     LPGUID               lpGuid,    __in     LPWSTR               lpServiceName,    __in     DWORD                dwProperties,    __out_bcount(*lpdwBufferSize) LPVOID               lpBuffer,    __inout  LPDWORD              lpdwBufferSize,    __in_opt LPSERVICE_ASYNC_INFO lpServiceAsyncInfo    );																		
GetShellWindow(VOID);																		
GetShortPathNameA(    __in LPCSTR lpszLongPath,    __out_ecount_part_opt(cchBuffer, return + 1) LPSTR  lpszShortPath,    __in DWORD cchBuffer    );																		
GetShortPathNameW(    __in LPCWSTR lpszLongPath,    __out_ecount_part_opt(cchBuffer, return + 1) LPWSTR  lpszShortPath,    __in DWORD cchBuffer    );																		
GetSidIdentifierAuthority (    __in PSID pSid    );																		
GetSidLengthRequired (    __in UCHAR nSubAuthorityCount    );																		
GetSidSubAuthority (    __in PSID pSid,    __in DWORD nSubAuthority    );																		
GetSidSubAuthorityCount (    __in PSID pSid    );																		
GetSpoolFileHandle(__in    HANDLE  hPrinter);																		
GetStandardColorSpaceProfileA(    __in_opt PCSTR pMachineName,    __in DWORD dwSCS,    __out_bcount_part_opt(*pcbSize, *pcbSize) PSTR pBuffer,    __inout PDWORD pcbSize    );																		
GetStandardColorSpaceProfileW(    __in_opt PCWSTR pMachineName,    __in DWORD dwSCS,    __out_bcount_part_opt(*pcbSize, *pcbSize) PWSTR pBuffer,    __inout PDWORD pcbSize    );																		
GetStartupInfoA(    __out LPSTARTUPINFOA lpStartupInfo    );																		
GetStartupInfoW(    __out LPSTARTUPINFOW lpStartupInfo    );																		
GetStdHandle(    __in DWORD nStdHandle    );																		
GetStorageDependencyInformation(    __in        HANDLE                      ObjectHandle,    __in        GET_STORAGE_DEPENDENCY_FLAG Flags,    __in        ULONG                       StorageDependencyInfoSize,    __inout     PSTORAGE_DEPENDENCY_INFO    StorageDependencyInfo,    __inout_opt PULONG                      SizeUsed    );																		
GetStringTypeA(    __in LCID     Locale,    __in DWORD    dwInfoType,    __in_ecount(cchSrc) LPCSTR   lpSrcStr,    __in int      cchSrc,    __out LPWORD  lpCharType);																		
GetStringTypeExA(    __in                 LCID       Locale,    __in                 DWORD      dwInfoType,    __in_ecount(cchSrc)  LPCSTR   lpSrcStr,    __in                 int        cchSrc,    __out_ecount(cchSrc) LPWORD     lpCharType);																		
GetStringTypeExW(    __in                 LCID       Locale,    __in                 DWORD      dwInfoType,    __in_ecount(cchSrc)  LPCWSTR   lpSrcStr,    __in                 int        cchSrc,    __out_ecount(cchSrc) LPWORD     lpCharType);																		
GetStringTypeW(    __in DWORD    dwInfoType,    __in_ecount(cchSrc)  LPCWSTR  lpSrcStr,    __in int      cchSrc,    __out LPWORD  lpCharType);																		
GetSubMenu(    __in HMENU hMenu,    __in int nPos);																		
GetSysColor(__in int nIndex);																		
GetSysColorBrush(__in int nIndex);																		
GetSystemDefaultLangID(void);																		
GetSystemDefaultLCID(void);																		
GetSystemDefaultLocaleName(    __out_ecount(cchLocaleName) LPWSTR lpLocaleName,    __in int cchLocaleName);																		
GetSystemDefaultUILanguage(void);																		
GetSystemDEPPolicy(    VOID    );																		
GetSystemDirectoryA(    __out_ecount_part_opt(uSize, return + 1) LPSTR lpBuffer,    __in UINT uSize    );																		
GetSystemDirectoryW(    __out_ecount_part_opt(uSize, return + 1) LPWSTR lpBuffer,    __in UINT uSize    );																		
GetSystemFileCacheSize (    __out PSIZE_T lpMinimumFileCacheSize,    __out PSIZE_T lpMaximumFileCacheSize,    __out PDWORD lpFlags    );																		
GetSystemFirmwareTable(    __in DWORD FirmwareTableProviderSignature,    __in DWORD FirmwareTableID,    __out_bcount_part_opt(BufferSize, return) PVOID pFirmwareTableBuffer,    __in DWORD BufferSize    );																		
GetSystemInfo(    __out LPSYSTEM_INFO lpSystemInfo    );																		
GetSystemMenu(    __in HWND hWnd,    __in BOOL bRevert);																		
GetSystemMetrics(    __in int nIndex);																		
GetSystemPaletteEntries(    __in HDC  hdc,    __in UINT iStart,    __in UINT cEntries,    __out_ecount_opt(cEntries) LPPALETTEENTRY pPalEntries    );																		
GetSystemPowerStatus(    __out LPSYSTEM_POWER_STATUS lpSystemPowerStatus    );																		
GetSystemPreferredUILanguages (    __in DWORD dwFlags,    __out PULONG pulNumLanguages,    __out_ecount_opt(*pcchLanguagesBuffer) PZZWSTR pwszLanguagesBuffer,    __inout PULONG pcchLanguagesBuffer);																		
GetSystemRegistryQuota(    __out_opt PDWORD pdwQuotaAllowed,    __out_opt PDWORD pdwQuotaUsed    );																		
GetSystemTime(    __out LPSYSTEMTIME lpSystemTime    );																		
GetSystemTimeAdjustment(    __out PDWORD lpTimeAdjustment,    __out PDWORD lpTimeIncrement,    __out PBOOL  lpTimeAdjustmentDisabled    );																		
GetSystemTimeAsFileTime(    __out LPFILETIME lpSystemTimeAsFileTime    );																		
GetSystemTimes(    __out_opt LPFILETIME lpIdleTime,    __out_opt LPFILETIME lpKernelTime,    __out_opt LPFILETIME lpUserTime    );																		
GetSystemWindowsDirectoryA(    __out_ecount_part_opt(uSize, return + 1) LPSTR lpBuffer,    __in UINT uSize    );																		
GetSystemWindowsDirectoryW(    __out_ecount_part_opt(uSize, return + 1) LPWSTR lpBuffer,    __in UINT uSize    );																		
GetSystemWow64DirectoryA(    __out_ecount_part_opt(uSize, return + 1) LPSTR lpBuffer,    __in UINT uSize    );																		
GetSystemWow64DirectoryW(    __out_ecount_part_opt(uSize, return + 1) LPWSTR lpBuffer,    __in UINT uSize    );																		
GetTabbedTextExtentA(    __in HDC hdc,    __in_ecount(chCount) LPCSTR lpString,    __in int chCount,    __in int nTabPositions,    __in_ecount_opt(nTabPositions) CONST INT *lpnTabStopPositions);																		
GetTabbedTextExtentW(    __in HDC hdc,    __in_ecount(chCount) LPCWSTR lpString,    __in int chCount,    __in int nTabPositions,    __in_ecount_opt(nTabPositions) CONST INT *lpnTabStopPositions);																		
GetTapeParameters(    __in    HANDLE hDevice,    __in    DWORD dwOperation,    __inout LPDWORD lpdwSize,    __out_bcount(*lpdwSize) LPVOID lpTapeInformation    );																		
GetTapePosition(    __in  HANDLE hDevice,    __in  DWORD dwPositionType,    __out LPDWORD lpdwPartition,    __out LPDWORD lpdwOffsetLow,    __out LPDWORD lpdwOffsetHigh    );																		
GetTapeStatus(    __in HANDLE hDevice    );																		
GetTcp6Table(    __out_bcount(*SizePointer)   PMIB_TCP6TABLE TcpTable,    __inout                      PULONG         SizePointer,    __in                         BOOL           Order    );																		
GetTcp6Table2(    __out_bcount(*SizePointer)   PMIB_TCP6TABLE2 TcpTable,    __inout                      PULONG          SizePointer,    __in                         BOOL            Order    );																		
GetTcpStatistics(    __out PMIB_TCPSTATS Statistics    );																		
GetTcpStatisticsEx(    __out PMIB_TCPSTATS Statistics,    __in  ULONG Family    );																		
GetTcpTable(    __out_bcount_opt(*SizePointer)   PMIB_TCPTABLE TcpTable,    __inout                          PULONG        SizePointer,    __in                             BOOL          Order    );																		
GetTcpTable2(    __out_bcount_opt(*SizePointer)   PMIB_TCPTABLE2 TcpTable,    __inout                          PULONG         SizePointer,    __in                             BOOL           Order    );																		
GetTempFileNameA(    __in LPCSTR lpPathName,    __in LPCSTR lpPrefixString,    __in UINT uUnique,    __out_ecount(MAX_PATH) LPSTR lpTempFileName    );																		
GetTempFileNameW(    __in LPCWSTR lpPathName,    __in LPCWSTR lpPrefixString,    __in UINT uUnique,    __out_ecount(MAX_PATH) LPWSTR lpTempFileName    );																		
GetTempPathA(    __in DWORD nBufferLength,    __out_ecount_part_opt(nBufferLength, return + 1) LPSTR lpBuffer    );																		
GetTempPathW(    __in DWORD nBufferLength,    __out_ecount_part_opt(nBufferLength, return + 1) LPWSTR lpBuffer    );																		
GetTextExtentExPointA(    __in HDC hdc,    __in_ecount(cchString) LPCSTR lpszString,    __in int cchString,    __in int nMaxExtent,    __out_opt LPINT lpnFit,    __out_ecount_part_opt (cchString, *lpnFit) LPINT lpnDx,    __out LPSIZE lpSize    );																		
GetTextExtentExPointW(    __in HDC hdc,    __in_ecount(cchString) LPCWSTR lpszString,    __in int cchString,    __in int nMaxExtent,    __out_opt LPINT lpnFit,    __out_ecount_part_opt (cchString, *lpnFit) LPINT lpnDx,    __out LPSIZE lpSize    );																		
GetTextExtentPoint32A(    __in HDC hdc,    __in_ecount(c) LPCSTR lpString,    __in int c,    __out LPSIZE psizl    );																		
GetTextExtentPoint32W(    __in HDC hdc,    __in_ecount(c) LPCWSTR lpString,    __in int c,    __out LPSIZE psizl    );																		
GetTextExtentPointA(    __in HDC hdc,    __in_ecount(c) LPCSTR lpString,    __in int c,    __out LPSIZE lpsz    );																		
GetTextExtentPointW(    __in HDC hdc,    __in_ecount(c) LPCWSTR lpString,    __in int c,    __out LPSIZE lpsz    );																		
GetTextFaceA( __in HDC hdc, __in int c, __out_ecount_part_opt(c, return)  LPSTR lpName);																		
GetTextFaceW( __in HDC hdc, __in int c, __out_ecount_part_opt(c, return)  LPWSTR lpName);																		
GetTextMetrics(HDC hdc,LPTEXTMETRIC lptm);																		
GetTextMetricsA( __in HDC hdc, __out LPTEXTMETRICA lptm);																		
GetTextMetricsW( __in HDC hdc, __out LPTEXTMETRICW lptm);																		
GetThreadContext(    __in    HANDLE hThread,    __inout LPCONTEXT lpContext    );																		
GetThreadDesktop(    __in DWORD dwThreadId);																		
GetThreadErrorMode(    VOID    );																		
GetThreadGroupAffinity(    __in HANDLE hThread,    __out PGROUP_AFFINITY GroupAffinity    );																		
GetThreadId(    __in HANDLE Thread    );																		
GetThreadIdealProcessorEx (    __in HANDLE hThread,    __out PPROCESSOR_NUMBER lpIdealProcessor    );																		
GetThreadIOPendingFlag(    __in  HANDLE hThread,    __out PBOOL  lpIOIsPending    );																		
GetThreadLocale(void);																		
GetThreadPreferredUILanguages(    __in DWORD dwFlags,    __out PULONG pulNumLanguages,    __out_ecount_opt(*pcchLanguagesBuffer) PZZWSTR pwszLanguagesBuffer,    __inout PULONG pcchLanguagesBuffer);																		
GetThreadPriority(    __in HANDLE hThread    );																		
GetThreadPriorityBoost(    __in  HANDLE hThread,    __out PBOOL pDisablePriorityBoost    );																		
GetThreadSelectorEntry(    __in  HANDLE hThread,    __in  DWORD dwSelector,    __out LPLDT_ENTRY lpSelectorEntry    );																		
GetThreadTimes(    __in  HANDLE hThread,    __out LPFILETIME lpCreationTime,    __out LPFILETIME lpExitTime,    __out LPFILETIME lpKernelTime,    __out LPFILETIME lpUserTime    );																		
GetThreadUILanguage(void);																		
GetTickCount(    VOID    );																		
GetTickCount64(    VOID    );																		
GetTimeFormatA(    __in LCID             Locale,    __in DWORD            dwFlags,    __in_opt CONST SYSTEMTIME *lpTime,    __in_opt LPCSTR          lpFormat,    __out_ecount_opt(cchTime) LPSTR          lpTimeStr,    __in int              cchTime);																		
GetTimeFormatEx(    __in_opt LPCWSTR lpLocaleName,    __in DWORD dwFlags,    __in_opt CONST SYSTEMTIME *lpTime,    __in_opt LPCWSTR lpFormat,    __out_ecount_opt(cchTime) LPWSTR lpTimeStr,    __in int cchTime);																		
GetTimeFormatW(    __in LCID             Locale,    __in DWORD            dwFlags,    __in_opt CONST SYSTEMTIME *lpTime,    __in_opt LPCWSTR          lpFormat,    __out_ecount_opt(cchTime) LPWSTR          lpTimeStr,    __in int              cchTime);																		
GetTimestampForLoadedLibrary(    __in HMODULE Module    );																		
GetTimestampForLoadedLibrary(__in HMODULE Module);																		
GetTimeZoneInformation(    __out LPTIME_ZONE_INFORMATION lpTimeZoneInformation    );																		
GetTimeZoneInformationForYear(    __in USHORT wYear,    __in_opt PDYNAMIC_TIME_ZONE_INFORMATION pdtzi,    __out LPTIME_ZONE_INFORMATION ptzi    );																		
GetTitleBarInfo(    __in HWND hwnd,    __inout PTITLEBARINFO pti);																		
GetTokenInformation (    __in      HANDLE TokenHandle,    __in      TOKEN_INFORMATION_CLASS TokenInformationClass,    __out_bcount_part_opt(TokenInformationLength, *ReturnLength) LPVOID TokenInformation,    __in      DWORD TokenInformationLength,    __out     PDWORD ReturnLength    );																		
GetTopWindow(__in_opt HWND hWnd);																		
GetTouchInputInfo( __in HTOUCHINPUT hTouchInput, __in UINT cInputs, __out_ecount(cInputs) PTOUCHINPUT pInputs, __in int cbSize); 										
GetTransactionId (    IN HANDLE TransactionHandle,    OUT LPGUID TransactionId    );																		
GetTransactionInformation (    IN HANDLE TransactionHandle,    OUT PDWORD Outcome OPTIONAL,    OUT PDWORD IsolationLevel OPTIONAL,    OUT PDWORD IsolationFlags OPTIONAL,    OUT PDWORD Timeout OPTIONAL,    __in DWORD BufferLength,    __out_ecount_part_opt(BufferLength, return + 1) LPWSTR Description    );																		
GetTrusteeFormA(    __in PTRUSTEE_A  pTrustee    );																		
GetTrusteeFormW(    __in PTRUSTEE_W  pTrustee    );																		
GetTrusteeNameA(    __in PTRUSTEE_A  pTrustee    );																		
GetTrusteeNameW(    __in PTRUSTEE_W  pTrustee    );																		
GetTrusteeTypeA(    __in_opt PTRUSTEE_A  pTrustee    );																		
GetTrusteeTypeW(    __in_opt PTRUSTEE_W  pTrustee    );																		
GetTypeByNameA (    __in    LPSTR         lpServiceName,    __inout LPGUID        lpServiceType    );																		
GetTypeByNameW (    __in    LPWSTR         lpServiceName,    __inout LPGUID         lpServiceType    );																		
GetUdp6Table(    __out_bcount(*SizePointer)   PMIB_UDP6TABLE Udp6Table,    __inout                      PULONG         SizePointer,    __in                         BOOL           Order    );																		
GetUdpStatistics(    __out PMIB_UDPSTATS Stats    );																		
GetUdpStatisticsEx(    __out PMIB_UDPSTATS Statistics,    __in  ULONG Family    );																		
GetUdpTable(    __out_bcount_opt(*SizePointer)   PMIB_UDPTABLE UdpTable,    __inout                          PULONG        SizePointer,    __in                             BOOL          Order    );																		
GetUILanguageInfo(    __in DWORD dwFlags,    __in PCZZWSTR pwmszLanguage,    __out_ecount_opt(*pcchFallbackLanguages) PZZWSTR pwszFallbackLanguages,    __inout_opt PDWORD pcchFallbackLanguages,    __out PDWORD pAttributes);																		
GetUmsCompletionListEvent(    __in PUMS_COMPLETION_LIST UmsCompletionList,    __inout PHANDLE UmsCompletionEvent    );																		
GetUniDirectionalAdapterInfo(    __out_bcount_opt(*dwOutBufLen) PIP_UNIDIRECTIONAL_ADAPTER_ADDRESS pIPIfInfo,    __inout                        PULONG                             dwOutBufLen    );																		
GetUpdatedClipboardFormats(    __out_ecount(cFormats) __notnull PUINT lpuiFormats,    __in UINT cFormats,    __out __notnull PUINT pcFormatsOut);																		
GetUpdateRect(    __in HWND hWnd,    __out_opt LPRECT lpRect,    __in BOOL bErase);																		
GetUpdateRgn(    __in HWND hWnd,    __in HRGN hRgn,    __in BOOL bErase);																		
GetUrlCacheConfigInfoA(    __inout LPINTERNET_CACHE_CONFIG_INFOA lpCacheConfigInfo,    __reserved LPDWORD lpcbCacheConfigInfo,    __in DWORD dwFieldControl    );																		
GetUrlCacheConfigInfoW(    __inout LPINTERNET_CACHE_CONFIG_INFOW lpCacheConfigInfo,    __reserved LPDWORD lpcbCacheConfigInfo,    __in DWORD dwFieldControl    );																		
GetUrlCacheEntryInfoA(    __in LPCSTR lpszUrlName,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,    __inout_opt LPDWORD lpcbCacheEntryInfo    );																		
GetUrlCacheEntryInfoExA(    __in LPCSTR lpszUrl,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,    __inout_opt LPDWORD lpcbCacheEntryInfo,    __reserved LPSTR lpszRedirectUrl,    __reserved LPDWORD lpcbRedirectUrl,    __reserved LPVOID lpReserved,    __in DWORD dwFlags    );																		
GetUrlCacheEntryInfoExW(    __in LPCWSTR lpszUrl,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,    __inout_opt LPDWORD lpcbCacheEntryInfo,    __reserved LPWSTR lpszRedirectUrl,    __reserved LPDWORD lpcbRedirectUrl,    __reserved LPVOID lpReserved,    __in DWORD dwFlags    );																		
GetUrlCacheEntryInfoW(    __in LPCWSTR lpszUrlName,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,    __inout_opt LPDWORD lpcbCacheEntryInfo    );																		
GetUrlCacheGroupAttributeA(    __in      GROUPID                         gid,    __reserved    DWORD                           dwFlags,    __in      DWORD                           dwAttributes,    __out LPINTERNET_CACHE_GROUP_INFOA lpGroupInfo,    __inout   LPDWORD                         lpdwGroupInfo,    __reserved    LPVOID                          lpReserved    );																		
GetUrlCacheGroupAttributeW(    __in      GROUPID                         gid,    __reserved    DWORD                           dwFlags,    __in      DWORD                           dwAttributes,    __out LPINTERNET_CACHE_GROUP_INFOW lpGroupInfo,    __inout   LPDWORD                         lpdwGroupInfo,    __reserved    LPVOID                          lpReserved    );																		
GetUserDefaultLangID(void);																		
GetUserDefaultLCID(void);																		
GetUserDefaultLocaleName(    __out_ecount(cchLocaleName) LPWSTR lpLocaleName,    __in int cchLocaleName);																		
GetUserDefaultUILanguage(void);																		
GetUserGeoID(    __in GEOCLASS    GeoClass);																		
GetUserNameA (    __out_ecount_part_opt(*pcbBuffer, *pcbBuffer) LPSTR lpBuffer,    __inout LPDWORD pcbBuffer    );																		
GetUserNameW (    __out_ecount_part_opt(*pcbBuffer, *pcbBuffer) LPWSTR lpBuffer,    __inout LPDWORD pcbBuffer    );																		
GetUserObjectInformationA(    __in HANDLE hObj,    __in int nIndex,    __out_bcount_opt(nLength) PVOID pvInfo,    __in DWORD nLength,    __out_opt LPDWORD lpnLengthNeeded);																		
GetUserObjectInformationW(    __in HANDLE hObj,    __in int nIndex,    __out_bcount_opt(nLength) PVOID pvInfo,    __in DWORD nLength,    __out_opt LPDWORD lpnLengthNeeded);																		
GetUserObjectSecurity(    __in HANDLE hObj,    __in PSECURITY_INFORMATION pSIRequested,    __out_bcount_opt(nLength) PSECURITY_DESCRIPTOR pSID,    __in DWORD nLength,    __out LPDWORD lpnLengthNeeded);																		
GetUserPreferredUILanguages (    __in DWORD dwFlags,    __out PULONG pulNumLanguages,    __out_ecount_opt(*pcchLanguagesBuffer) PZZWSTR pwszLanguagesBuffer,    __inout PULONG pcchLanguagesBuffer);																		
GetUserProfileDirectoryA(    __in                            HANDLE  hToken,    __out_ecount_opt(*lpcchSize)    LPSTR lpProfileDir,    __inout                         LPDWORD lpcchSize);																		
GetUserProfileDirectoryW(    __in                            HANDLE  hToken,    __out_ecount_opt(*lpcchSize)    LPWSTR lpProfileDir,    __inout                         LPDWORD lpcchSize);																		
GetVersion (    VOID    );																		
GetVersionExA(    __inout LPOSVERSIONINFOA lpVersionInformation    );																		
GetVersionExW(    __inout LPOSVERSIONINFOW lpVersionInformation    );																		
GetViewportExtEx( __in HDC hdc, __out LPSIZE lpsize);																		
GetViewportOrgEx( __in HDC hdc, __out LPPOINT lppoint);																		
GetVirtualDiskInformation(    __in        HANDLE                  VirtualDiskHandle,    __inout     PULONG                  VirtualDiskInfoSize,    __inout     PGET_VIRTUAL_DISK_INFO  VirtualDiskInfo,    __inout_opt PULONG                  SizeUsed    );																		
GetVirtualDiskPhysicalPath(    __in                              HANDLE VirtualDiskHandle,    __inout                           PULONG DiskPathSizeInBytes,    __out_bcount(DiskPathSizeInBytes) PWSTR  DiskPath    );																		
GetVolumeInformationA(    __in_opt  LPCSTR lpRootPathName,    __out_ecount_opt(nVolumeNameSize) LPSTR lpVolumeNameBuffer,    __in      DWORD nVolumeNameSize,    __out_opt LPDWORD lpVolumeSerialNumber,    __out_opt LPDWORD lpMaximumComponentLength,    __out_opt LPDWORD lpFileSystemFlags,    __out_ecount_opt(nFileSystemNameSize) LPSTR lpFileSystemNameBuffer,    __in      DWORD nFileSystemNameSize    );																		
GetVolumeInformationByHandleW(    __in      HANDLE hFile,    __out_ecount_opt(nVolumeNameSize) LPWSTR lpVolumeNameBuffer,    __in      DWORD nVolumeNameSize,    __out_opt LPDWORD lpVolumeSerialNumber,    __out_opt LPDWORD lpMaximumComponentLength,    __out_opt LPDWORD lpFileSystemFlags,    __out_ecount_opt(nFileSystemNameSize) LPWSTR lpFileSystemNameBuffer,    __in      DWORD nFileSystemNameSize    );																		
GetVolumeInformationW(    __in_opt  LPCWSTR lpRootPathName,    __out_ecount_opt(nVolumeNameSize) LPWSTR lpVolumeNameBuffer,    __in      DWORD nVolumeNameSize,    __out_opt LPDWORD lpVolumeSerialNumber,    __out_opt LPDWORD lpMaximumComponentLength,    __out_opt LPDWORD lpFileSystemFlags,    __out_ecount_opt(nFileSystemNameSize) LPWSTR lpFileSystemNameBuffer,    __in      DWORD nFileSystemNameSize    );																		
GetVolumeNameForVolumeMountPointA(    __in LPCSTR lpszVolumeMountPoint,    __out_ecount(cchBufferLength) LPSTR lpszVolumeName,    __in DWORD cchBufferLength    );																		
GetVolumeNameForVolumeMountPointW(    __in LPCWSTR lpszVolumeMountPoint,    __out_ecount(cchBufferLength) LPWSTR lpszVolumeName,    __in DWORD cchBufferLength    );																		
GetVolumePathNameA(    __in LPCSTR lpszFileName,    __out_ecount(cchBufferLength) LPSTR lpszVolumePathName,    __in DWORD cchBufferLength    );																		
GetVolumePathNamesForVolumeNameA(    __in  LPCSTR lpszVolumeName,    __out_ecount_part_opt(cchBufferLength, *lpcchReturnLength) __nullnullterminated LPCH lpszVolumePathNames,    __in  DWORD cchBufferLength,    __out PDWORD lpcchReturnLength    );																		
GetVolumePathNamesForVolumeNameW(    __in  LPCWSTR lpszVolumeName,    __out_ecount_part_opt(cchBufferLength, *lpcchReturnLength) __nullnullterminated LPWCH lpszVolumePathNames,    __in  DWORD cchBufferLength,    __out PDWORD lpcchReturnLength    );																		
GetVolumePathNameW(    __in LPCWSTR lpszFileName,    __out_ecount(cchBufferLength) LPWSTR lpszVolumePathName,    __in DWORD cchBufferLength    );																		
GetVolumesFromDriveA(    __in LPSTR pszDriveName,    __deref_out LPSTR *VolumeNameBufferPtr,    __deref_out LPSTR *DriveLetterBufferPtr    );																		
GetVolumesFromDriveW(    __in LPWSTR pszDriveName,    __deref_out LPWSTR *VolumeNameBufferPtr,    __deref_out LPWSTR *DriveLetterBufferPtr    );																		
GetWindow(__in HWND hWnd,__in UINT uCmd);																		
GetWindowContextHelpId(__in HWND);																		
GetWindowDC(    __in_opt HWND hWnd);																		
GetWindowDisplayAffinity(    __in HWND hWnd,    __out DWORD* pdwAffinity);																		
GetWindowExtEx( __in HDC hdc, __out LPSIZE lpsize);																		
GetWindowInfo(    __in HWND hwnd,    __inout PWINDOWINFO pwi);																		
GetWindowLongA(__in HWND hWnd,__in int nIndex);																		
GetWindowLongPtrA(__in HWND hWnd,__in int nIndex);																		
GetWindowLongPtrW(__in HWND hWnd,__in int nIndex);																		
GetWindowLongW(__in HWND hWnd,__in int nIndex);																		
GetWindowModuleFileNameA(    __in HWND hwnd,    __out_ecount_part(cchFileNameMax, return) LPSTR pszFileName,    __in UINT cchFileNameMax);																		
GetWindowModuleFileNameW(    __in HWND hwnd,    __out_ecount_part(cchFileNameMax, return) LPWSTR pszFileName,    __in UINT cchFileNameMax);																		
GetWindowOrgEx( __in HDC hdc, __out LPPOINT lppoint);																		
GetWindowPlacement(    __in HWND hWnd,    __inout WINDOWPLACEMENT *lpwndpl);																		
GetWindowRect(    __in HWND hWnd,    __out LPRECT lpRect);																		
GetWindowRgn(    __in HWND hWnd,    __in HRGN hRgn);																		
GetWindowRgnBox(    __in HWND hWnd,    __out LPRECT lprc);																		
GetWindowsAccountDomainSid(    __in    PSID pSid,    __out_bcount_part_opt(*cbDomainSid, *cbDomainSid) PSID pDomainSid,    __inout DWORD* cbDomainSid    );																		
GetWindowsDirectoryA(    __out_ecount_part_opt(uSize, return + 1) LPSTR lpBuffer,    __in UINT uSize    );																		
GetWindowsDirectoryW(    __out_ecount_part_opt(uSize, return + 1) LPWSTR lpBuffer,    __in UINT uSize    );																		
GetWindowSubclass(__in HWND hWnd, __in SUBCLASSPROC pfnSubclass, __in UINT_PTR uIdSubclass,__out_opt DWORD_PTR *pdwRefData);																		
GetWindowTextA(    __in HWND hWnd,    __out_ecount(nMaxCount) LPSTR lpString,    __in int nMaxCount);																		
GetWindowTextLengthA(    __in HWND hWnd);																		
GetWindowTextLengthW(    __in HWND hWnd);																		
GetWindowTextW(    __in HWND hWnd,    __out_ecount(nMaxCount) LPWSTR lpString,    __in int nMaxCount);																		
GetWindowThreadProcessId(__in HWND hWnd,__out_opt LPDWORD lpdwProcessId);																		
GetWindowWord(__in HWND hWnd,__in int nIndex);																		
GetWinMetaFileBits(  __in HENHMETAFILE hemf,                   __in UINT cbData16,                   __out_bcount_opt(cbData16) LPBYTE pData16,                   __in INT iMapMode,                   __in HDC hdcRef);																		
GetWorldTransform( __in HDC hdc, __out LPXFORM lpxf);																		
GetWriteWatch(    __in DWORD dwFlags,    __in PVOID lpBaseAddress,    __in SIZE_T dwRegionSize,    __out_ecount_part(*lpdwCount, *lpdwCount) PVOID *lpAddresses,    __inout ULONG_PTR *lpdwCount,    __out PULONG lpdwGranularity    );																		
GetWsChanges(    __in HANDLE hProcess,    __out_bcount(cb) PPSAPI_WS_WATCH_INFORMATION lpWatchInfo,    __in DWORD cb    );																		
GetWsChangesEx(    __in HANDLE hProcess,    __out_bcount_part(*cb, *cb) PPSAPI_WS_WATCH_INFORMATION_EX lpWatchInfoEx,    __inout PDWORD cb    );																		
GlobalAddAtomA(    __in_opt LPCSTR lpString    );																		
GlobalAddAtomW(    __in_opt LPCWSTR lpString    );																		
GlobalAlloc (    __in UINT uFlags,    __in SIZE_T dwBytes    );																		
GlobalCompact(    __in DWORD dwMinFree    );																		
GlobalDeleteAtom(    __in ATOM nAtom    );																		
GlobalFindAtomA(    __in_opt LPCSTR lpString    );																		
GlobalFindAtomW(    __in_opt LPCWSTR lpString    );																		
GlobalFix(    __in HGLOBAL hMem    );																		
GlobalFlags (    __in HGLOBAL hMem    );																		
GlobalFree(    __deref HGLOBAL hMem    );																		
GlobalGetAtomNameA(    __in ATOM nAtom,    __out_ecount_part(nSize, return + 1) LPSTR lpBuffer,    __in int nSize    );																		
GlobalGetAtomNameW(    __in ATOM nAtom,    __out_ecount_part(nSize, return + 1) LPWSTR lpBuffer,    __in int nSize    );																		
GlobalHandle (    __in LPCVOID pMem    );																		
GlobalLock (    __in HGLOBAL hMem    );																		
GlobalMemoryStatus(    __out LPMEMORYSTATUS lpBuffer    );																		
GlobalMemoryStatusEx(    __out LPMEMORYSTATUSEX lpBuffer    );																		
GlobalReAlloc (    __in HGLOBAL hMem,    __in SIZE_T dwBytes,    __in UINT uFlags    );																		
GlobalSize (    __in HGLOBAL hMem    );																		
GlobalUnfix(    __in HGLOBAL hMem    );																		
GlobalUnlock(    __in HGLOBAL hMem    );																		
GlobalUnWire(    __in HGLOBAL hMem    );																		
GlobalWire(    __in HGLOBAL hMem    );																		
GopherCreateLocatorA(    __in LPCSTR lpszHost,    __in INTERNET_PORT nServerPort,    __in_opt LPCSTR lpszDisplayString,    __in_opt LPCSTR lpszSelectorString,    __in DWORD dwGopherType,    __out_ecount_opt(*lpdwBufferLength) LPSTR lpszLocator,    __inout LPDWORD lpdwBufferLength    );																		
GopherCreateLocatorW(    __in LPCWSTR lpszHost,    __in INTERNET_PORT nServerPort,    __in_opt LPCWSTR lpszDisplayString,    __in_opt LPCWSTR lpszSelectorString,    __in DWORD dwGopherType,    __out_ecount_opt(*lpdwBufferLength) LPWSTR lpszLocator,    __inout LPDWORD lpdwBufferLength    );																		
GopherFindFirstFileA(    __in HINTERNET hConnect,    __in_opt LPCSTR lpszLocator,    __in_opt LPCSTR lpszSearchString,    __out_opt LPGOPHER_FIND_DATAA lpFindData,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
GopherFindFirstFileW(    __in HINTERNET hConnect,    __in_opt LPCWSTR lpszLocator,    __in_opt LPCWSTR lpszSearchString,    __out_opt LPGOPHER_FIND_DATAW lpFindData,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
GopherGetAttributeA(    __in HINTERNET hConnect,    __in LPCSTR lpszLocator,    __in_opt LPCSTR lpszAttributeName,    __out_ecount(dwBufferLength) __typefix(LPTSTR) LPBYTE lpBuffer,    __in DWORD dwBufferLength,    __out LPDWORD lpdwCharactersReturned,    __in_opt GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator,    __in_opt DWORD_PTR dwContext    );																		
GopherGetAttributeW(    __in HINTERNET hConnect,    __in LPCWSTR lpszLocator,    __in_opt LPCWSTR lpszAttributeName,    __out_ecount(dwBufferLength) __typefix(LPTSTR) LPBYTE lpBuffer,    __in DWORD dwBufferLength,    __out LPDWORD lpdwCharactersReturned,    __in_opt GOPHER_ATTRIBUTE_ENUMERATOR lpfnEnumerator,    __in_opt DWORD_PTR dwContext    );																		
GopherGetLocatorTypeA(    __in LPCSTR lpszLocator,    __out LPDWORD lpdwGopherType    );																		
GopherGetLocatorTypeW(    __in LPCWSTR lpszLocator,    __out LPDWORD lpdwGopherType    );																		
GopherOpenFileA(    __in HINTERNET hConnect,    __in LPCSTR lpszLocator,    __in_opt LPCSTR lpszView,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
GopherOpenFileW(    __in HINTERNET hConnect,    __in LPCWSTR lpszLocator,    __in_opt LPCWSTR lpszView,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
GradientFill(    __in HDC hdc,    __in_ecount(nVertex) PTRIVERTEX pVertex,    __in ULONG nVertex,    __in PVOID pMesh,    __in ULONG nMesh,    __in ULONG ulMode    );																		
GrayStringA(    __in HDC hDC,    __in_opt HBRUSH hBrush,    __in_opt GRAYSTRINGPROC lpOutputFunc,    __in LPARAM lpData,    __in int nCount,    __in int X,    __in int Y,    __in int nWidth,    __in int nHeight);																		
GrayStringW(    __in HDC hDC,    __in_opt HBRUSH hBrush,    __in_opt GRAYSTRINGPROC lpOutputFunc,    __in LPARAM lpData,    __in int nCount,    __in int X,    __in int Y,    __in int nWidth,    __in int nHeight);																		
Heap32First(    LPHEAPENTRY32 lphe,    DWORD th32ProcessID,    ULONG_PTR th32HeapID    );																		
Heap32ListFirst(    HANDLE hSnapshot,    LPHEAPLIST32 lphl    );																		
Heap32ListNext(    HANDLE hSnapshot,    LPHEAPLIST32 lphl    );																		
Heap32Next(    LPHEAPENTRY32 lphe    );																		
HeapAlloc(    __in HANDLE hHeap,    __in DWORD dwFlags,    __in SIZE_T dwBytes    );																		
HeapCompact(    __in HANDLE hHeap,    __in DWORD dwFlags    );																		
HeapCreate(    __in DWORD flOptions,    __in SIZE_T dwInitialSize,    __in SIZE_T dwMaximumSize    );																		
HeapDestroy(    __in HANDLE hHeap    );																		
HeapFree(    __inout HANDLE hHeap,    __in    DWORD dwFlags,    __drv_freesMem(Mem) __post __notvalid __deref LPVOID lpMem    );																		
HeapLock(    __in HANDLE hHeap    );																		
HeapQueryInformation (    __in_opt HANDLE HeapHandle,    __in HEAP_INFORMATION_CLASS HeapInformationClass,    __out_bcount_part_opt(HeapInformationLength, *ReturnLength) PVOID HeapInformation,    __in SIZE_T HeapInformationLength,    __out_opt PSIZE_T ReturnLength    );																		
HeapReAlloc(    __inout HANDLE hHeap,    __in    DWORD dwFlags,    __deref LPVOID lpMem,    __in    SIZE_T dwBytes    );																		
HeapSetInformation (    __in_opt HANDLE HeapHandle,    __in HEAP_INFORMATION_CLASS HeapInformationClass,    __in_bcount_opt(HeapInformationLength) PVOID HeapInformation,    __in SIZE_T HeapInformationLength    );																		
HeapSize(    __in HANDLE hHeap,    __in DWORD dwFlags,    __in LPCVOID lpMem    );																		
HeapUnlock(    __in HANDLE hHeap    );																		
HeapValidate(    __in     HANDLE hHeap,    __in     DWORD dwFlags,    __in_opt LPCVOID lpMem    );																		
HeapWalk(    __in    HANDLE hHeap,    __inout LPPROCESS_HEAP_ENTRY lpEntry    );																		
HideCaret(__in_opt HWND hWnd);																		
HiliteMenuItem(    __in HWND hWnd,    __in HMENU hMenu,    __in UINT uIDHiliteItem,    __in UINT uHilite);																		
HtmlHelpA(    __in_opt HWND hwndCaller,    __in LPCSTR pszFile,    __in UINT uCommand,    __in DWORD_PTR dwData    );																		
HtmlHelpW(    __in_opt HWND hwndCaller,    __in LPCWSTR pszFile,    __in UINT uCommand,    __in DWORD_PTR dwData    );																		
HttpAddFragmentToCache(    IN HANDLE ReqQueueHandle,    IN PCWSTR pUrlPrefix,    IN PHTTP_DATA_CHUNK pDataChunk,    IN PHTTP_CACHE_POLICY pCachePolicy,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpAddRequestHeadersA(    __in HINTERNET hRequest,    __in_ecount(dwHeadersLength) LPCSTR lpszHeaders,    __in DWORD dwHeadersLength,    __in DWORD dwModifiers    );																		
HttpAddRequestHeadersW(    __in HINTERNET hRequest,    __in_ecount(dwHeadersLength) LPCWSTR lpszHeaders,    __in DWORD dwHeadersLength,    __in DWORD dwModifiers    );																		
HttpAddUrl(    IN HANDLE ReqQueueHandle,    IN PCWSTR pFullyQualifiedUrl,    __reserved IN PVOID pReserved    );																		
HttpAddUrlToUrlGroup(    IN HTTP_URL_GROUP_ID UrlGroupId,    IN PCWSTR pFullyQualifiedUrl,    IN HTTP_URL_CONTEXT UrlContext OPTIONAL,    __reserved IN ULONG Reserved    );																		
HttpCancelHttpRequest(    IN HANDLE ReqQueueHandle,    IN HTTP_REQUEST_ID RequestId,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpCloseRequestQueue(    IN HANDLE ReqQueueHandle    );																		
HttpCloseServerSession(    IN HTTP_SERVER_SESSION_ID ServerSessionId    );																		
HttpCloseUrlGroup(    IN HTTP_URL_GROUP_ID UrlGroupId    );																		
HttpCreateHttpHandle(    OUT PHANDLE pReqQueueHandle,    __reserved IN ULONG Reserved    );																		
HttpCreateRequestQueue(    IN HTTPAPI_VERSION Version,    IN PCWSTR pName OPTIONAL,    IN PSECURITY_ATTRIBUTES pSecurityAttributes OPTIONAL,    IN ULONG Flags OPTIONAL,    OUT PHANDLE pReqQueueHandle    );																		
HttpCreateServerSession(    IN HTTPAPI_VERSION Version,    OUT PHTTP_SERVER_SESSION_ID pServerSessionId,    __reserved IN ULONG Reserved    );																		
HttpCreateUrlGroup(    IN HTTP_SERVER_SESSION_ID ServerSessionId,    OUT PHTTP_URL_GROUP_ID pUrlGroupId,    __reserved IN ULONG Reserved    );																		
HttpDeleteServiceConfiguration(    __reserved IN HANDLE ServiceHandle,    IN HTTP_SERVICE_CONFIG_ID ConfigId,    __in_bcount(ConfigInformationLength) IN PVOID pConfigInformation,    IN ULONG ConfigInformationLength,    __reserved IN LPOVERLAPPED pOverlapped    );																		
HttpEndRequestA(    __in HINTERNET hRequest,    __out_opt LPINTERNET_BUFFERSA lpBuffersOut,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
HttpEndRequestW(    __in HINTERNET hRequest,    __out_opt LPINTERNET_BUFFERSW lpBuffersOut,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
HttpFilterProc(    HTTP_FILTER_CONTEXT *      pfc,    DWORD                      NotificationType,    VOID *                     pvNotification    );																		
HttpFlushResponseCache(    IN HANDLE ReqQueueHandle,    IN PCWSTR pUrlPrefix,    IN ULONG Flags,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpInitialize(    IN HTTPAPI_VERSION Version,    IN ULONG Flags,    __reserved IN OUT PVOID pReserved    );																		
HttpOpenRequestA(    __in HINTERNET hConnect,    __in_opt LPCSTR lpszVerb,    __in_opt LPCSTR lpszObjectName,    __in_opt LPCSTR lpszVersion,    __in_opt LPCSTR lpszReferrer,    __in_z_opt LPCSTR FAR * lplpszAcceptTypes,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
HttpOpenRequestW(    __in HINTERNET hConnect,    __in_opt LPCWSTR lpszVerb,    __in_opt LPCWSTR lpszObjectName,    __in_opt LPCWSTR lpszVersion,    __in_opt LPCWSTR lpszReferrer,    __in_z_opt LPCWSTR FAR * lplpszAcceptTypes,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
HttpQueryInfoA(    __in HINTERNET hRequest,    __in DWORD dwInfoLevel,    __inout_bcount_opt(*lpdwBufferLength) __out_data_source(NETWORK) LPVOID lpBuffer,    __inout LPDWORD lpdwBufferLength,    __inout_opt LPDWORD lpdwIndex    );																		
HttpQueryInfoW(    __in HINTERNET hRequest,    __in DWORD dwInfoLevel,    __inout_bcount_opt(*lpdwBufferLength) __out_data_source(NETWORK) LPVOID lpBuffer,    __inout LPDWORD lpdwBufferLength,    __inout_opt LPDWORD lpdwIndex    );																		
HttpQueryRequestQueueProperty(    IN HANDLE Handle,    IN HTTP_SERVER_PROPERTY Property,    __out_bcount_part(PropertyInformationLength, *pReturnLength)    OUT PVOID pPropertyInformation,    IN ULONG PropertyInformationLength,    __reserved IN ULONG Reserved,    __out_opt OUT PULONG pReturnLength OPTIONAL,    __reserved IN PVOID pReserved    );																		
HttpQueryServerSessionProperty(    IN HTTP_SERVER_SESSION_ID ServerSessionId,    IN HTTP_SERVER_PROPERTY Property,    __out_bcount_part(PropertyInformationLength, *pReturnLength)    OUT PVOID pPropertyInformation,    IN ULONG PropertyInformationLength,    __out_opt OUT PULONG pReturnLength OPTIONAL    );																		
HttpQueryServiceConfiguration(    __reserved IN HANDLE ServiceHandle,    IN HTTP_SERVICE_CONFIG_ID ConfigId,    __in_bcount_opt(InputConfigInformationLength)    IN PVOID pInputConfigInformation OPTIONAL,    IN ULONG InputConfigInformationLength OPTIONAL,    __out_bcount_part_opt(OutputConfigInformationLength, *pReturnLength)    OUT PVOID pOutputConfigInformation OPTIONAL,    IN ULONG OutputConfigInformationLength OPTIONAL,    __out_opt OUT PULONG pReturnLength OPTIONAL,    __reserved IN LPOVERLAPPED pOverlapped    );																		
HttpQueryUrlGroupProperty(    IN HTTP_URL_GROUP_ID UrlGroupId,    IN HTTP_SERVER_PROPERTY Property,    __out_bcount_part(PropertyInformationLength, *pReturnLength)    OUT PVOID pPropertyInformation,    IN ULONG PropertyInformationLength,    __out_opt OUT PULONG pReturnLength OPTIONAL    );																		
HttpReadFragmentFromCache(    IN HANDLE ReqQueueHandle,    IN PCWSTR pUrlPrefix,    IN PHTTP_BYTE_RANGE pByteRange OPTIONAL,    __out_bcount_part(BufferLength, *pBytesRead) OUT PVOID pBuffer,    IN ULONG BufferLength,    OUT PULONG pBytesRead OPTIONAL,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpReceiveClientCertificate(    IN HANDLE ReqQueueHandle,    IN HTTP_CONNECTION_ID ConnectionId,    IN ULONG Flags,    __out_bcount_part(SslClientCertInfoSize, *pBytesReceived)    OUT PHTTP_SSL_CLIENT_CERT_INFO pSslClientCertInfo,    IN ULONG SslClientCertInfoSize,    __out_opt OUT PULONG pBytesReceived OPTIONAL,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpReceiveHttpRequest(    IN HANDLE ReqQueueHandle,    IN HTTP_REQUEST_ID RequestId,    IN ULONG Flags,    __out_bcount_part(RequestBufferLength, *pBytesReceived)    OUT PHTTP_REQUEST pRequestBuffer,    IN ULONG RequestBufferLength,    __out_opt OUT PULONG pBytesReceived OPTIONAL,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpReceiveRequestEntityBody(    IN HANDLE ReqQueueHandle,    IN HTTP_REQUEST_ID RequestId,    IN ULONG Flags,    __out_bcount_part(BufferLength, *pBytesReceived) OUT PVOID pBuffer,    IN ULONG BufferLength,    __out_opt OUT PULONG pBytesReceived OPTIONAL,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpRemoveUrl(    IN HANDLE ReqQueueHandle,    IN PCWSTR pFullyQualifiedUrl    );																		
HttpRemoveUrlFromUrlGroup(    IN HTTP_URL_GROUP_ID UrlGroupId,    IN PCWSTR pFullyQualifiedUrl,    IN ULONG Flags    );																		
HttpSendHttpResponse(    IN HANDLE ReqQueueHandle,    IN HTTP_REQUEST_ID RequestId,    IN ULONG Flags,    IN PHTTP_RESPONSE pHttpResponse,    IN PHTTP_CACHE_POLICY pCachePolicy OPTIONAL,    OUT PULONG pBytesSent OPTIONAL,    OUT PVOID pReserved1 OPTIONAL, IN ULONG Reserved2 OPTIONAL, IN LPOVERLAPPED pOverlapped OPTIONAL, IN PHTTP_LOG_DATA pLogData OPTIONAL );																		
HttpSendHttpResponse(    IN HANDLE ReqQueueHandle,    IN HTTP_REQUEST_ID RequestId,    IN ULONG Flags,    IN PHTTP_RESPONSE pHttpResponse,    IN PVOID pReserved1 OPTIONAL, OUT PULONG pBytesSent OPTIONAL,    OUT PVOID pReserved2 OPTIONAL, IN ULONG Reserved3 OPTIONAL, IN LPOVERLAPPED pOverlapped OPTIONAL, IN PVOID pReserved4 OPTIONAL );																		
HttpSendRequestA(    __in HINTERNET hRequest,    __in_ecount_opt(dwHeadersLength) LPCSTR lpszHeaders,    __in DWORD dwHeadersLength,    __in_bcount_opt(dwOptionalLength) LPVOID lpOptional,    __in DWORD dwOptionalLength    );																		
HttpSendRequestExA(    __in HINTERNET hRequest,    __in_opt LPINTERNET_BUFFERSA lpBuffersIn,    __out_opt LPINTERNET_BUFFERSA lpBuffersOut,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
HttpSendRequestExW(    __in HINTERNET hRequest,    __in_opt LPINTERNET_BUFFERSW lpBuffersIn,    __out_opt LPINTERNET_BUFFERSW lpBuffersOut,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
HttpSendRequestW(    __in HINTERNET hRequest,    __in_ecount_opt(dwHeadersLength) LPCWSTR lpszHeaders,    __in DWORD dwHeadersLength,    __in_bcount_opt(dwOptionalLength) LPVOID lpOptional,    __in DWORD dwOptionalLength    );																		
HttpSendResponseEntityBody(    IN HANDLE ReqQueueHandle,    IN HTTP_REQUEST_ID RequestId,    IN ULONG Flags,    IN USHORT EntityChunkCount OPTIONAL,    __in_ecount_opt(EntityChunkCount)    IN PHTTP_DATA_CHUNK pEntityChunks OPTIONAL,    OUT PULONG pBytesSent OPTIONAL,    OUT PVOID pReserved1 OPTIONAL, IN ULONG Reserved2 OPTIONAL, IN LPOVERLAPPED pOverlapped OPTIONAL, IN PHTTP_LOG_DATA pLogData OPTIONAL);																		
HttpSendResponseEntityBody(    IN HANDLE ReqQueueHandle,    IN HTTP_REQUEST_ID RequestId,    IN ULONG Flags,    IN USHORT EntityChunkCount OPTIONAL,    __in_ecount_opt(EntityChunkCount)    IN PHTTP_DATA_CHUNK pEntityChunks OPTIONAL,    OUT PULONG pBytesSent OPTIONAL,    OUT PVOID pReserved1 OPTIONAL, IN ULONG Reserved2 OPTIONAL, IN LPOVERLAPPED pOverlapped OPTIONAL, IN PVOID pReserved3 OPTIONAL);																		
HttpSetRequestQueueProperty(    IN HANDLE Handle,    IN HTTP_SERVER_PROPERTY Property,    __in_bcount(PropertyInformationLength) IN PVOID pPropertyInformation,    IN ULONG PropertyInformationLength,    __reserved IN ULONG Reserved,    __reserved IN PVOID pReserved    );																		
HttpSetServerSessionProperty(    IN HTTP_SERVER_SESSION_ID ServerSessionId,    IN HTTP_SERVER_PROPERTY Property,    __in_bcount(PropertyInformationLength) IN PVOID pPropertyInformation,    IN ULONG PropertyInformationLength    );																		
HttpSetServiceConfiguration(    __reserved IN HANDLE ServiceHandle,    IN HTTP_SERVICE_CONFIG_ID ConfigId,    __in_bcount(ConfigInformationLength) IN PVOID pConfigInformation,    IN ULONG ConfigInformationLength,    __reserved IN LPOVERLAPPED pOverlapped    );																		
HttpSetUrlGroupProperty(    IN HTTP_URL_GROUP_ID UrlGroupId,    IN HTTP_SERVER_PROPERTY Property,    __in_bcount(PropertyInformationLength) IN PVOID pPropertyInformation,    IN ULONG PropertyInformationLength    );																		
HttpShutdownRequestQueue(    IN HANDLE ReqQueueHandle    );																		
HttpTerminate(    IN ULONG Flags,    __reserved IN OUT PVOID pReserved    );																		
HttpWaitForDemandStart(    IN HANDLE ReqQueueHandle,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpWaitForDisconnect(    IN HANDLE ReqQueueHandle,    IN HTTP_CONNECTION_ID ConnectionId,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
HttpWaitForDisconnectEx(    IN HANDLE ReqQueueHandle,    IN HTTP_CONNECTION_ID ConnectionId,    __reserved IN ULONG Reserved OPTIONAL,    IN LPOVERLAPPED pOverlapped OPTIONAL    );																		
I_CryptGetAsn1Decoder(    IN HCRYPTASN1MODULE hAsn1Module    );																		
I_CryptGetAsn1Encoder(    IN HCRYPTASN1MODULE hAsn1Module    );																		
I_CryptInstallAsn1Module(    IN ASN1module_t pMod,    IN DWORD dwFlags,    IN void *pvReserved    );																		
I_CryptUninstallAsn1Module(    IN HCRYPTASN1MODULE hAsn1Module    );																		
Icmp6CreateFile(    VOID    );																		
Icmp6ParseReplies(    __in_bcount(ReplySize)   LPVOID                   ReplyBuffer,    __in                     DWORD                    ReplySize    );																		
Icmp6SendEcho2(    __in                     HANDLE                   IcmpHandle,    __in_opt                 HANDLE                   Event,#ifdef PIO_APC_ROUTINE_DEFINED    __in_opt                 PIO_APC_ROUTINE          ApcRoutine,#else    __in_opt                 FARPROC                  ApcRoutine,#endif    __in_opt                 PVOID                    ApcContext,    __in                     struct sockaddr_in6     *SourceAddress,    __in                     struct sockaddr_in6     *DestinationAddress,    __in_bcount(RequestSize) LPVOID                   RequestData,    __in                     WORD                     RequestSize,    __in_opt                 PIP_OPTION_INFORMATION   RequestOptions,    __out_bcount(ReplySize)  LPVOID                   ReplyBuffer,    __in                     DWORD                    ReplySize,    __in                     DWORD                    Timeout    );																		
IcmpCloseHandle(    __in HANDLE  IcmpHandle    );																		
IcmpCreateFile(    VOID    );																		
IcmpParseReplies(    __in_bcount(ReplySize)   LPVOID                   ReplyBuffer,    __in                     DWORD                    ReplySize    );																		
IcmpSendEcho(    __in                       HANDLE                   IcmpHandle,    __in                       IPAddr                   DestinationAddress,    __in_bcount(RequestSize)   LPVOID                   RequestData,    __in                       WORD                     RequestSize,    __in_opt                   PIP_OPTION_INFORMATION   RequestOptions,    __out_bcount(ReplySize)    LPVOID                   ReplyBuffer,    __in                       DWORD                    ReplySize,    __in                       DWORD                    Timeout    );																		
IcmpSendEcho2(    __in                        HANDLE                   IcmpHandle,    __in_opt                    HANDLE                   Event,#ifdef PIO_APC_ROUTINE_DEFINED    __in_opt                    PIO_APC_ROUTINE          ApcRoutine,#else    __in_opt                    FARPROC                  ApcRoutine,#endif    __in_opt                    PVOID                    ApcContext,    __in                        IPAddr                   DestinationAddress,    __in_bcount(RequestSize)    LPVOID                   RequestData,    __in                        WORD                     RequestSize,    __in_opt                    PIP_OPTION_INFORMATION   RequestOptions,    __out_bcount(ReplySize)     LPVOID                   ReplyBuffer,    __in                        DWORD                    ReplySize,    __in                        DWORD                    Timeout    );																		
IcmpSendEcho2Ex(    __in                       HANDLE                   IcmpHandle,    __in_opt                   HANDLE                   Event,#ifdef PIO_APC_ROUTINE_DEFINED    __in_opt                   PIO_APC_ROUTINE          ApcRoutine,#else    __in_opt                   FARPROC                  ApcRoutine,#endif    __in_opt                   PVOID                    ApcContext,    __in                       IPAddr                   SourceAddress,    __in                       IPAddr                   DestinationAddress,    __in_bcount(RequestSize)   LPVOID                   RequestData,    __in                       WORD                     RequestSize,    __in_opt                   PIP_OPTION_INFORMATION   RequestOptions,    __out_bcount(ReplySize)    LPVOID                   ReplyBuffer,    __in                       DWORD                    ReplySize,    __in                       DWORD                    Timeout    );																		
IkeextGetStatistics0(   __in HANDLE engineHandle,   __out IKEEXT_STATISTICS0* ikeextStatistics   );																		
IkeextGetStatistics1(   __in HANDLE engineHandle,   __out IKEEXT_STATISTICS1* ikeextStatistics   );																		
IkeextSaCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const IKEEXT_SA_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
IkeextSaDbGetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
IkeextSaDbSetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
IkeextSaDeleteById0(   __in HANDLE engineHandle,   __in UINT64 id   );																		
IkeextSaDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
IkeextSaEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) IKEEXT_SA_DETAILS0*** entries,   __out UINT32* numEntriesReturned   );																		
IkeextSaEnum1(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) IKEEXT_SA_DETAILS1*** entries,   __out UINT32* numEntriesReturned   );																		
IkeextSaGetById0(   __in HANDLE engineHandle,   __in UINT64 id,   __deref_out IKEEXT_SA_DETAILS0** sa   );																		
IkeextSaGetById1(   __in HANDLE engineHandle,   __in UINT64 id,   __in_opt GUID* saLookupContext,   __deref_out IKEEXT_SA_DETAILS1** sa   );																		
ImageAddCertificate(__in HANDLE FileHandle,__in LPWIN_CERTIFICATE Certificate,__out PDWORD Index);																		
ImageDirectoryEntryToData (    __in PVOID Base,    __in BOOLEAN MappedAsImage,    __in USHORT DirectoryEntry,    __out PULONG Size    );																		
ImageDirectoryEntryToData (__in PVOID Base,__in BOOLEAN MappedAsImage,__in USHORT DirectoryEntry,__out PULONG Size);																		
ImageDirectoryEntryToDataEx (    __in PVOID Base,    __in BOOLEAN MappedAsImage,    __in USHORT DirectoryEntry,    __out PULONG Size,    __out_opt PIMAGE_SECTION_HEADER *FoundHeader    );																		
ImageDirectoryEntryToDataEx (__in PVOID Base,__in BOOLEAN MappedAsImage,__in USHORT DirectoryEntry,__out PULONG Size,__out_opt PIMAGE_SECTION_HEADER *FoundHeader);																		
ImageEnumerateCertificates(__in HANDLE FileHandle,__in WORD TypeFilter,__out PDWORD CertificateCount,__inout_ecount_opt(IndexCount) PDWORD Indices,__in_opt DWORD IndexCount);																		
ImageGetCertificateData(__in HANDLE FileHandle,__in DWORD CertificateIndex,__out LPWIN_CERTIFICATE Certificate,__inout PDWORD RequiredLength);																		
ImageGetCertificateHeader(__in HANDLE FileHandle,__in DWORD CertificateIndex,__inout LPWIN_CERTIFICATE Certificateheader);																		
ImageGetDigestStream(__in HANDLE FileHandle,__in DWORD DigestLevel,__in DIGEST_FUNCTION DigestFunction,__in DIGEST_HANDLE DigestHandle);																		
ImagehlpApiVersion(    VOID    );																		
ImagehlpApiVersion(VOID);																		
ImagehlpApiVersionEx(    __in LPAPI_VERSION AppVersion    );																		
ImagehlpApiVersionEx(__in LPAPI_VERSION AppVersion);																		
ImageList_Add(__in HIMAGELIST himl, __in HBITMAP hbmImage, __in_opt HBITMAP hbmMask);																		
ImageList_AddMasked(__in HIMAGELIST himl, __in HBITMAP hbmImage, __in COLORREF crMask);																		
ImageList_BeginDrag(__in HIMAGELIST himlTrack, __in int iTrack, __in int dxHotspot, __in int dyHotspot);																		
ImageList_Copy(__in HIMAGELIST himlDst, __in int iDst, __in HIMAGELIST himlSrc, __in int iSrc, __in UINT uFlags);																		
ImageList_Create(int cx, int cy, UINT flags, int cInitial, int cGrow);																		
ImageList_Destroy(__in_opt HIMAGELIST himl);																		
ImageList_DragEnter(HWND hwndLock, int x, int y);																		
ImageList_DragLeave(HWND hwndLock);																		
ImageList_DragMove(int x, int y);																		
ImageList_DragShowNolock(BOOL fShow);																		
ImageList_DrawEx(__in HIMAGELIST himl, __in int i, __in HDC hdcDst, __in int x, __in int y, __in int dx, __in int dy, __in COLORREF rgbBk, __in COLORREF rgbFg, __in UINT fStyle);																		
ImageList_DrawIndirect(__in IMAGELISTDRAWPARAMS* pimldp);																		
ImageList_Duplicate(__in HIMAGELIST himl);																		
ImageList_EndDrag(void);																		
ImageList_GetBkColor(__in HIMAGELIST himl);																		
ImageList_GetDragImage(__out_opt POINT *ppt, __out_opt POINT *pptHotspot);																		
ImageList_GetIcon(__in HIMAGELIST himl, __in int i, __in UINT flags);																		
ImageList_GetIconSize(__in HIMAGELIST himl, __out_opt int *cx, __out_opt int *cy);																		
ImageList_GetImageCount(__in HIMAGELIST himl);																		
ImageList_GetImageInfo(__in HIMAGELIST himl, __in int i, __out IMAGEINFO *pImageInfo);																		
ImageList_LoadImageA(HINSTANCE hi, LPCSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags);																		
ImageList_LoadImageW(HINSTANCE hi, LPCWSTR lpbmp, int cx, int cGrow, COLORREF crMask, UINT uType, UINT uFlags);																		
ImageList_Merge(__in HIMAGELIST himl1, __in int i1, __in HIMAGELIST himl2, __in int i2, __in int dx, __in int dy);																		
ImageList_Read(__in struct IStream *pstm);																		
ImageList_ReadEx(__in DWORD dwFlags, __in struct IStream *pstm, __in REFIID riid, __deref_out PVOID* ppv);																		
ImageList_Remove(__in HIMAGELIST himl, __in int i);																		
ImageList_Replace(__in HIMAGELIST himl, __in int i, __in HBITMAP hbmImage, __in_opt HBITMAP hbmMask);																		
ImageList_ReplaceIcon(__in HIMAGELIST himl, __in int i, __in HICON hicon);																		
ImageList_SetBkColor(__in HIMAGELIST himl, __in COLORREF clrBk);																		
ImageList_SetDragCursorImage(__in HIMAGELIST himlDrag, __in int iDrag, __in int dxHotspot, __in int dyHotspot);																		
ImageList_SetIconSize(__in HIMAGELIST himl, __in int cx, __in int cy);																		
ImageList_SetImageCount(__in HIMAGELIST himl, __in UINT uNewCount);																		
ImageList_SetOverlayImage(__in HIMAGELIST himl, __in int iImage, __in int iOverlay);																		
ImageList_Write(__in HIMAGELIST himl, __in struct IStream *pstm);																		
ImageList_WriteEx(__in HIMAGELIST himl, __in DWORD dwFlags, __in struct IStream *pstm);																		
ImageLoad(__in PCSTR DllName,__in_opt PCSTR DllPath);																		
ImageNtHeader (    __in PVOID Base    );																		
ImageNtHeader (__in PVOID Base);																		
ImageRemoveCertificate(__in HANDLE FileHandle,__in DWORD Index);																		
ImageRvaToSection(    __in PIMAGE_NT_HEADERS NtHeaders,    __in PVOID Base,    __in ULONG Rva    );																		
ImageRvaToSection(__in PIMAGE_NT_HEADERS NtHeaders,__in PVOID Base,__in ULONG Rva);																		
ImageRvaToVa(    __in PIMAGE_NT_HEADERS NtHeaders,    __in PVOID Base,    __in ULONG Rva,    __in_opt OUT PIMAGE_SECTION_HEADER *LastRvaSection    );																		
ImageRvaToVa(__in PIMAGE_NT_HEADERS NtHeaders,__in PVOID Base,__in ULONG Rva,__in_opt OUT PIMAGE_SECTION_HEADER *LastRvaSection);																		
ImageUnload(__inout PLOADED_IMAGE LoadedImage);																		
ImpersonateAnonymousToken(    __in HANDLE ThreadHandle    );																		
ImpersonateDdeClientWindow(    HWND hWndClient,    HWND hWndServer);																		
ImpersonateLoggedOnUser(    __in HANDLE  hToken    );																		
ImpersonateNamedPipeClient(    __in HANDLE hNamedPipe    );																		
ImpersonateSelf(    __in SECURITY_IMPERSONATION_LEVEL ImpersonationLevel    );																		
ImportRSoPData(    __in LPOLESTR lpNameSpace,    __in LPOLESTR lpFileName);																		
InetIsOffline(    DWORD dwFlags);																		
InflateRect(__inout LPRECT lprc,__in int dx,__in int dy);																		
InitAtomTable(    __in DWORD nSize    );																		
InitCommonControlsEx(__in const INITCOMMONCONTROLSEX *picce);																		
InitCompression(    VOID);																		
InitializeAcl (    __out_bcount(nAclLength) PACL pAcl,    __in DWORD nAclLength,    __in DWORD dwAclRevision    );																		
InitializeConditionVariable (    __out PCONDITION_VARIABLE ConditionVariable    );																		
InitializeCriticalSection(    __out LPCRITICAL_SECTION lpCriticalSection    );																		
InitializeCriticalSectionAndSpinCount(    __out LPCRITICAL_SECTION lpCriticalSection,    __in  DWORD dwSpinCount    );																		
InitializeCriticalSectionEx(    __out LPCRITICAL_SECTION lpCriticalSection,    __in  DWORD dwSpinCount,    __in  DWORD Flags    );																		
InitializeExtendedContext(    __out PVOID Context,    __in DWORD ContextFlags,    __out PCONTEXT_EX* ContextEx    );																		
InitializeFlatSB(HWND);																		
InitializeNapAgentNotifier(IN NapNotifyType type, IN HANDLE hNotifyEvent);																		
InitializeProcessForWsWatch(    __in HANDLE hProcess    );																		
InitializeProcThreadAttributeList(    __out_xcount_opt(*lpSize) LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,    __in DWORD dwAttributeCount,    __reserved DWORD dwFlags,    __inout PSIZE_T lpSize    );																		
InitializeSecurityDescriptor (    __out PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in  DWORD dwRevision    );																		
InitializeSid (    __out PSID Sid,    __in  PSID_IDENTIFIER_AUTHORITY pIdentifierAuthority,    __in  BYTE nSubAuthorityCount    );																		
InitializeSListHead (    __inout PSLIST_HEADER ListHead    );																		
InitializeSRWLock (     __out PSRWLOCK SRWLock     );																		
InitiateShutdownA(    __in_opt LPSTR lpMachineName,    __in_opt LPSTR lpMessage,    __in     DWORD dwGracePeriod,    __in     DWORD dwShutdownFlags,    __in     DWORD dwReason    );																		
InitiateShutdownW(    __in_opt LPWSTR lpMachineName,    __in_opt LPWSTR lpMessage,    __in     DWORD dwGracePeriod,    __in     DWORD dwShutdownFlags,    __in     DWORD dwReason    );																		
InitiateSystemShutdownA(    __in_opt LPSTR lpMachineName,    __in_opt LPSTR lpMessage,    __in DWORD dwTimeout,    __in BOOL bForceAppsClosed,    __in BOOL bRebootAfterShutdown    );																		
InitiateSystemShutdownExA(    __in_opt LPSTR lpMachineName,    __in_opt LPSTR lpMessage,    __in DWORD dwTimeout,    __in BOOL bForceAppsClosed,    __in BOOL bRebootAfterShutdown,    __in DWORD dwReason    );																		
InitiateSystemShutdownExW(    __in_opt LPWSTR lpMachineName,    __in_opt LPWSTR lpMessage,    __in DWORD dwTimeout,    __in BOOL bForceAppsClosed,    __in BOOL bRebootAfterShutdown,    __in DWORD dwReason    );																		
InitiateSystemShutdownW(    __in_opt LPWSTR lpMachineName,    __in_opt LPWSTR lpMessage,    __in DWORD dwTimeout,    __in BOOL bForceAppsClosed,    __in BOOL bRebootAfterShutdown    );																		
InitOnceBeginInitialize (    __inout LPINIT_ONCE lpInitOnce,    __in DWORD dwFlags,    __out PBOOL fPending,    __deref_opt_out_opt LPVOID *lpContext    );																		
InitOnceComplete (    __inout LPINIT_ONCE lpInitOnce,    __in DWORD dwFlags,    __in_opt LPVOID lpContext    );																		
InitOnceExecuteOnce (    __inout PINIT_ONCE InitOnce,    __in __callback PINIT_ONCE_FN InitFn,    __inout_opt PVOID Parameter,    __deref_opt_out_opt LPVOID *Context    );																		
InitOnceInitialize (    __out PINIT_ONCE InitOnce    );																		
InSendMessage(    VOID);																		
InSendMessageEx(    __reserved LPVOID lpReserved);																		
InsertMenuA(    __in HMENU hMenu,    __in UINT uPosition,    __in UINT uFlags,    __in UINT_PTR uIDNewItem,    __in_opt LPCSTR lpNewItem);																		
InsertMenuItemA(    __in HMENU hmenu,    __in UINT item,    __in BOOL fByPosition,    __in LPCMENUITEMINFOA lpmi);																		
InsertMenuItemW(    __in HMENU hmenu,    __in UINT item,    __in BOOL fByPosition,    __in LPCMENUITEMINFOW lpmi);																		
InsertMenuW(    __in HMENU hMenu,    __in UINT uPosition,    __in UINT uFlags,    __in UINT_PTR uIDNewItem,    __in_opt LPCWSTR lpNewItem);																		
InstallHinfSectionA(    __in HWND Window,    __in HINSTANCE ModuleHandle,    __in PCSTR CommandLine,    __in INT ShowCommand    );																		
InstallHinfSectionW(    __in HWND Window,    __in HINSTANCE ModuleHandle,    __in PCWSTR CommandLine,    __in INT ShowCommand    );																		
InterlockedCompareExchange (    __inout LONG volatile *Destination,    __in    LONG Exchange,    __in    LONG Comperand    );																		
InterlockedCompareExchange64 (    __inout LONGLONG volatile *Destination,    __in    LONGLONG Exchange,    __in    LONGLONG Comperand    );																		
InterlockedDecrement (    __inout LONG volatile *lpAddend    );																		
InterlockedExchange (    __inout LONG volatile *Target,    __in    LONG Value    );																		
InterlockedExchangeAdd (    __inout LONG volatile *Addend,    __in    LONG Value    );																		
InterlockedFlushSList (    __inout PSLIST_HEADER ListHead    );																		
InterlockedIncrement (    __inout LONG volatile *lpAddend    );																		
InterlockedPopEntrySList (    __inout PSLIST_HEADER ListHead    );																		
InterlockedPushEntrySList (    __inout PSLIST_HEADER ListHead,    __inout PSLIST_ENTRY ListEntry    );																		
InternalGetWindowText(    __in HWND hWnd,    __out_ecount_part(cchMaxCount, return + 1) LPWSTR pString,    __in int cchMaxCount);																		
InternetAttemptConnect(    __in DWORD dwReserved    );																		
InternetAutodial(    __in       DWORD  dwFlags,    __in_opt HWND   hwndParent);																		
InternetAutodialHangup(    __in DWORD    dwReserved);																		
InternetCanonicalizeUrlA(    __in LPCSTR lpszUrl,    __out_ecount(*lpdwBufferLength) LPSTR lpszBuffer,    __inout LPDWORD lpdwBufferLength,    __in DWORD dwFlags    );																		
InternetCanonicalizeUrlW(    __in LPCWSTR lpszUrl,    __out_ecount(*lpdwBufferLength) LPWSTR lpszBuffer,    __inout LPDWORD lpdwBufferLength,    __in DWORD dwFlags    );																		
InternetCheckConnectionA(    __in LPCSTR lpszUrl,    __in DWORD dwFlags,    __in DWORD dwReserved    );																		
InternetCheckConnectionW(    __in LPCWSTR lpszUrl,    __in DWORD dwFlags,    __in DWORD dwReserved    );																		
InternetCombineUrlA(    __in LPCSTR lpszBaseUrl,    __in LPCSTR lpszRelativeUrl,    __out_ecount(*lpdwBufferLength) LPSTR lpszBuffer,    __inout LPDWORD lpdwBufferLength,    __in DWORD dwFlags    );																		
InternetCombineUrlW(    __in LPCWSTR lpszBaseUrl,    __in LPCWSTR lpszRelativeUrl,    __out_ecount(*lpdwBufferLength) LPWSTR lpszBuffer,    __inout LPDWORD lpdwBufferLength,    __in DWORD dwFlags    );																		
InternetConfirmZoneCrossing(    __in HWND hWnd,    __in LPSTR szUrlPrev,    __in LPSTR szUrlNew,    __in BOOL bPost    );																		
InternetConfirmZoneCrossingA(    __in HWND hWnd,    __in LPSTR szUrlPrev,    __in LPSTR szUrlNew,    __in BOOL bPost    );																		
InternetConfirmZoneCrossingW(    __in HWND hWnd,    __in LPWSTR szUrlPrev,    __in LPWSTR szUrlNew,    __in BOOL bPost    );																		
InternetConnectA(    __in HINTERNET hInternet,    __in LPCSTR lpszServerName,    __in INTERNET_PORT nServerPort,    __in_opt LPCSTR lpszUserName,    __in_opt LPCSTR lpszPassword,    __in DWORD dwService,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
InternetConnectW(    __in HINTERNET hInternet,    __in LPCWSTR lpszServerName,    __in INTERNET_PORT nServerPort,    __in_opt LPCWSTR lpszUserName,    __in_opt LPCWSTR lpszPassword,    __in DWORD dwService,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
InternetCrackUrlA(    __in_ecount(dwUrlLength) LPCSTR lpszUrl,    __in DWORD dwUrlLength,    __in DWORD dwFlags,    __inout LPURL_COMPONENTSA lpUrlComponents    );																		
InternetCrackUrlW(    __in_ecount(dwUrlLength) LPCWSTR lpszUrl,    __in DWORD dwUrlLength,    __in DWORD dwFlags,    __inout LPURL_COMPONENTSW lpUrlComponents    );																		
InternetCreateUrlA(    __in LPURL_COMPONENTSA lpUrlComponents,    __in DWORD dwFlags,    __out_ecount_opt(*lpdwUrlLength) LPSTR lpszUrl,    __inout LPDWORD lpdwUrlLength    );																		
InternetCreateUrlW(    __in LPURL_COMPONENTSW lpUrlComponents,    __in DWORD dwFlags,    __out_ecount_opt(*lpdwUrlLength) LPWSTR lpszUrl,    __inout LPDWORD lpdwUrlLength    );																		
InternetDial(    __in HWND     hwndParent,    __in_opt LPSTR   lpszConnectoid,    __in DWORD    dwFlags,    __out LPDWORD lpdwConnection,    __in DWORD    dwReserved    );																		
InternetDialA(    __in HWND     hwndParent,    __in_opt LPSTR   lpszConnectoid,    __in DWORD    dwFlags,    __out DWORD_PTR *lpdwConnection,    __in DWORD    dwReserved    );																		
InternetDialW(    __in HWND     hwndParent,    __in_opt LPWSTR   lpszConnectoid,    __in DWORD    dwFlags,    __out DWORD_PTR *lpdwConnection,    __in DWORD    dwReserved    );																		
InternetEnumPerSiteCookieDecisionA(    __out_ecount(*pcSiteNameSize) LPSTR pszSiteName,    __inout unsigned long *pcSiteNameSize,    __out unsigned long *pdwDecision,    __in unsigned long dwIndex		);																
InternetEnumPerSiteCookieDecisionW(    __out_ecount(*pcSiteNameSize) LPWSTR pszSiteName,    __inout unsigned long *pcSiteNameSize,    __out unsigned long *pdwDecision,    __in unsigned long dwIndex	);																	
InternetErrorDlg(    __in HWND hWnd,    __inout_opt HINTERNET hRequest,    __in DWORD dwError,    __in DWORD dwFlags,    __inout_opt LPVOID * lppvData    );																		
InternetFindNextFileA(    __in HINTERNET hFind,    __out LPVOID lpvFindData    );																		
InternetFindNextFileW(    __in HINTERNET hFind,    __out LPVOID lpvFindData    );																		
InternetGetConnectedState(    __out  LPDWORD  lpdwFlags,    __reserved DWORD    dwReserved);																		
InternetGetConnectedStateEx(    __out LPDWORD lpdwFlags,    __out_ecount_opt(dwNameLen) LPSTR lpszConnectionName,    __in DWORD dwNameLen,    __in DWORD dwReserved    );																		
InternetGetCookieA(    __in LPCSTR lpszUrl,    __in_opt LPCSTR lpszCookieName,    __out_ecount_opt(*lpdwSize) LPSTR lpszCookieData,    __inout LPDWORD lpdwSize    );																		
InternetGetCookieExA(    __in LPCSTR lpszUrl,    __in_opt LPCSTR lpszCookieName,    __in_ecount_opt(*lpdwSize) LPSTR lpszCookieData,    __inout LPDWORD lpdwSize,    __in DWORD dwFlags,    __reserved LPVOID lpReserved    );																		
InternetGetCookieExW(    __in LPCWSTR lpszUrl,    __in_opt LPCWSTR lpszCookieName,    __in_ecount_opt(*lpdwSize) LPWSTR lpszCookieData,    __inout LPDWORD lpdwSize,    __in DWORD dwFlags,    __reserved LPVOID lpReserved    );																		
InternetGetCookieW(    __in LPCWSTR lpszUrl,    __in_opt LPCWSTR lpszCookieName,    __out_ecount_opt(*lpdwSize) LPWSTR lpszCookieData,    __inout LPDWORD lpdwSize    );																		
InternetGetLastResponseInfoA(    __out LPDWORD lpdwError,    __out_ecount_opt(*lpdwBufferLength) LPSTR lpszBuffer,    __inout LPDWORD lpdwBufferLength    );																		
InternetGetLastResponseInfoW(    __out LPDWORD lpdwError,    __out_ecount_opt(*lpdwBufferLength) LPWSTR lpszBuffer,    __inout LPDWORD lpdwBufferLength    );																		
InternetGetPerSiteCookieDecisionA(    __in LPCSTR pchHostName,    __out unsigned long* pResult	);																	
InternetGetPerSiteCookieDecisionW(    __in LPCWSTR pchHostName,    __out unsigned long* pResult	);																	
InternetGoOnline(    __in_opt LPSTR   lpszURL,    __in HWND     hwndParent,    __in DWORD    dwFlags    );																		
InternetGoOnlineA(    __in_opt LPCSTR lpszURL,    __in HWND     hwndParent,    __in DWORD    dwFlags    );																		
InternetGoOnlineW(    __in_opt LPCWSTR lpszURL,    __in HWND     hwndParent,    __in DWORD    dwFlags    );																		
InternetHangUp(    __in   DWORD_PTR    dwConnection,    __reserved DWORD        dwReserved);																		
InternetInitializeAutoProxyDll(    __in DWORD dwReserved    );																		
InternetLockRequestFile(    __in  HINTERNET hInternet,    __out HANDLE * lphLockRequestInfo    );																		
InternetOpenA(    __in_opt LPCSTR lpszAgent,    __in DWORD dwAccessType,    __in_opt LPCSTR lpszProxy,    __in_opt LPCSTR lpszProxyBypass,    __in DWORD dwFlags    );																		
InternetOpenUrlA(    __in HINTERNET hInternet,    __in LPCSTR lpszUrl,    __in_ecount_opt(dwHeadersLength) LPCSTR lpszHeaders,    __in DWORD dwHeadersLength,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
InternetOpenUrlW(    __in HINTERNET hInternet,    __in LPCWSTR lpszUrl,    __in_ecount_opt(dwHeadersLength) LPCWSTR lpszHeaders,    __in DWORD dwHeadersLength,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
InternetOpenW(    __in_opt LPCWSTR lpszAgent,    __in DWORD dwAccessType,    __in_opt LPCWSTR lpszProxy,    __in_opt LPCWSTR lpszProxyBypass,    __in DWORD dwFlags    );																		
InternetQueryDataAvailable(    __in HINTERNET hFile,    __out_opt LPDWORD __out_data_source(NETWORK) lpdwNumberOfBytesAvailable,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
InternetQueryOptionA(    __in_opt HINTERNET hInternet,    __in DWORD dwOption,    __out_bcount_opt(*lpdwBufferLength) __out_data_source(NETWORK) LPVOID lpBuffer,    __inout LPDWORD lpdwBufferLength    );																		
InternetQueryOptionW(    __in_opt HINTERNET hInternet,    __in DWORD dwOption,    __out_bcount_opt(*lpdwBufferLength) __out_data_source(NETWORK) LPVOID lpBuffer,    __inout LPDWORD lpdwBufferLength    );																		
InternetReadFile(    __in HINTERNET hFile,    __out_bcount(dwNumberOfBytesToRead) __out_data_source(NETWORK) LPVOID lpBuffer,    __in DWORD dwNumberOfBytesToRead,    __out LPDWORD lpdwNumberOfBytesRead    );																		
InternetReadFileExA(    __in HINTERNET hFile,    __out __out_data_source(NETWORK) LPINTERNET_BUFFERSA lpBuffersOut,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
InternetReadFileExW(    __in HINTERNET hFile,    __out __out_data_source(NETWORK) LPINTERNET_BUFFERSW lpBuffersOut,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwContext    );																		
InternetSetCookieA(    __in LPCSTR lpszUrl,    __in_opt LPCSTR lpszCookieName,    __in LPCSTR lpszCookieData    );																		
InternetSetCookieExA(    __in LPCSTR lpszUrl,    __in_opt LPCSTR lpszCookieName,    __in LPCSTR lpszCookieData,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwReserved    );																		
InternetSetCookieExW(    __in LPCWSTR lpszUrl,    __in_opt LPCWSTR lpszCookieName,    __in LPCWSTR lpszCookieData,    __in DWORD dwFlags,    __in_opt DWORD_PTR dwReserved    );																		
InternetSetCookieW(    __in LPCWSTR lpszUrl,    __in_opt LPCWSTR lpszCookieName,    __in LPCWSTR lpszCookieData    );																		
InternetSetDialState(    __in_opt LPCSTR lpszConnectoid,    __in DWORD    dwState,    __in DWORD    dwReserved    );																		
InternetSetDialStateA(    __in_opt LPCSTR lpszConnectoid,    __in DWORD    dwState,    __in DWORD    dwReserved    );																		
InternetSetDialStateW(    __in_opt LPCWSTR lpszConnectoid,    __in DWORD    dwState,    __in DWORD    dwReserved    );																		
InternetSetFilePointer(    __in HINTERNET hFile,    __in LONG  lDistanceToMove,    __inout_opt PLONG lpDistanceToMoveHigh,    __in DWORD dwMoveMethod,    __reserved DWORD_PTR dwContext    );																		
InternetSetOptionA(    __in_opt HINTERNET hInternet,    __in       DWORD dwOption,    __in_opt LPVOID lpBuffer,    __in       DWORD dwBufferLength    );																		
InternetSetOptionExA(    __in_opt HINTERNET hInternet,    __in       DWORD dwOption,    __in_opt LPVOID lpBuffer,    __in       DWORD dwBufferLength,    __in       DWORD dwFlags    );																		
InternetSetOptionExW(    __in_opt HINTERNET hInternet,    __in       DWORD dwOption,    __in_opt LPVOID lpBuffer,    __in       DWORD dwBufferLength,    __in       DWORD dwFlags    );																		
InternetSetOptionW(    __in_opt HINTERNET hInternet,    __in       DWORD dwOption,    __in_opt LPVOID lpBuffer,    __in       DWORD dwBufferLength    );																		
InternetSetPerSiteCookieDecisionA(    __in LPCSTR pchHostName,    __in DWORD dwDecision	);																	
InternetSetPerSiteCookieDecisionW(    __in LPCWSTR pchHostName,    __in DWORD dwDecision	);																	
InternetSetStatusCallback(__in HINTERNET hInternet,__in_opt INTERNET_STATUS_CALLBACK lpfnInternetCallback);																		
InternetSetStatusCallbackA(__in HINTERNET hInternet,__in_opt INTERNET_STATUS_CALLBACK lpfnInternetCallback);																		
InternetSetStatusCallbackW(__in HINTERNET hInternet,__in_opt INTERNET_STATUS_CALLBACK lpfnInternetCallback);																		
InternetTimeFromSystemTime(__in CONST SYSTEMTIME *pst,__in DWORD dwRFC,__out_bcount(cbTime) LPSTR lpszTime,__in DWORD cbTime);																		
InternetTimeFromSystemTimeA(__in CONST SYSTEMTIME *pst,__in DWORD dwRFC,__out_bcount(cbTime) LPSTR lpszTime,__in DWORD cbTime);																		
InternetTimeFromSystemTimeW(__in CONST SYSTEMTIME *pst,__in DWORD dwRFC,__out_bcount(cbTime) LPWSTR lpszTime,__in DWORD cbTime);																		
InternetTimeToSystemTime(__in LPCSTR lpszTime,__out SYSTEMTIME *pst,__reserved DWORD dwReserved);																		
InternetTimeToSystemTimeA(__in LPCSTR lpszTime,__out SYSTEMTIME *pst,__reserved DWORD dwReserved);																		
InternetTimeToSystemTimeW(__in LPCWSTR lpszTime,__out SYSTEMTIME *pst,__reserved DWORD dwReserved);																		
InternetUnlockRequestFile(__inout HANDLE hLockRequestInfo);																		
InternetWriteFile(    __in HINTERNET hFile,    __in_bcount(dwNumberOfBytesToWrite) LPCVOID lpBuffer,    __in DWORD dwNumberOfBytesToWrite,    __out LPDWORD lpdwNumberOfBytesWritten    );																		
IntersectClipRect( __in HDC hdc, __in int left, __in int top, __in int right, __in int bottom);																		
IntersectRect(__out LPRECT lprcDst,__in CONST RECT *lprcSrc1,__in CONST RECT *lprcSrc2);																		
InvalidateRect(    __in_opt HWND hWnd,    __in_opt CONST RECT *lpRect,    __in BOOL bErase);																		
InvalidateRgn(    __in HWND hWnd,    __in_opt HRGN hRgn,    __in BOOL bErase);																		
InvertRect(__in HDC hDC,__in CONST RECT *lprc);																		
InvertRgn( __in HDC hdc, __in HRGN hrgn);																		
IpReleaseAddress(    __in PIP_ADAPTER_INDEX_MAP  AdapterInfo    );																		
IpRenewAddress(    __in PIP_ADAPTER_INDEX_MAP  AdapterInfo    );																		
IPsecDospGetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
IPsecDospGetStatistics0(   __in HANDLE engineHandle,   __out IPSEC_DOSP_STATISTICS0* idpStatistics   );																		
IPsecDospSetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
IPsecDospStateCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const IPSEC_DOSP_STATE_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
IPsecDospStateDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
IPsecDospStateEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntries) IPSEC_DOSP_STATE0*** entries,   __out UINT32* numEntries   );																		
IPsecGetStatistics0(   __in HANDLE engineHandle,   __out IPSEC_STATISTICS0* ipsecStatistics   );																		
IPsecGetStatistics1(   __in HANDLE engineHandle,   __out IPSEC_STATISTICS1* ipsecStatistics   );																		
IPsecSaContextAddInbound0(   __in HANDLE engineHandle,   __in UINT64 id,   __in const IPSEC_SA_BUNDLE0* inboundBundle   );																		
IPsecSaContextAddInbound1(   __in HANDLE engineHandle,   __in UINT64 id,   __in const IPSEC_SA_BUNDLE1* inboundBundle   );																		
IPsecSaContextAddOutbound0(   __in HANDLE engineHandle,   __in UINT64 id,   __in const IPSEC_SA_BUNDLE0* outboundBundle   );																		
IPsecSaContextAddOutbound1(   __in HANDLE engineHandle,   __in UINT64 id,   __in const IPSEC_SA_BUNDLE1* outboundBundle   );																		
IPsecSaContextCreate0(   __in HANDLE engineHandle,   __in const IPSEC_TRAFFIC0* outboundTraffic,   __out_opt UINT64* inboundFilterId,   __out UINT64* id   );																		
IPsecSaContextCreate1(   __in HANDLE engineHandle,   __in const IPSEC_TRAFFIC1* outboundTraffic,   __in_opt const IPSEC_VIRTUAL_IF_TUNNEL_INFO0* virtualIfTunnelInfo,   __out_opt UINT64* inboundFilterId,   __out UINT64* id   );																		
IPsecSaContextCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const IPSEC_SA_CONTEXT_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
IPsecSaContextDeleteById0(   __in HANDLE engineHandle,   __in UINT64 id   );																		
IPsecSaContextDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
IPsecSaContextEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) IPSEC_SA_CONTEXT0*** entries,   __out UINT32* numEntriesReturned   );																		
IPsecSaContextEnum1(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) IPSEC_SA_CONTEXT1*** entries,   __out UINT32* numEntriesReturned   );																		
IPsecSaContextExpire0(   __in HANDLE engineHandle,   __in UINT64 id   );																		
IPsecSaContextGetById0(   __in HANDLE engineHandle,   __in UINT64 id,   __deref_out IPSEC_SA_CONTEXT0** saContext   );																		
IPsecSaContextGetById1(   __in HANDLE engineHandle,   __in UINT64 id,   __deref_out IPSEC_SA_CONTEXT1** saContext   );																		
IPsecSaContextGetSpi0(   __in HANDLE engineHandle,   __in UINT64 id,   __in const IPSEC_GETSPI0* getSpi,   __out IPSEC_SA_SPI* inboundSpi   );																		
IPsecSaContextGetSpi1(   __in HANDLE engineHandle,   __in UINT64 id,   __in const IPSEC_GETSPI1* getSpi,   __out IPSEC_SA_SPI* inboundSpi   );																		
IPsecSaContextSetSpi0(   __in HANDLE engineHandle,   __in UINT64 id,   __in const IPSEC_GETSPI1* getSpi,   __in IPSEC_SA_SPI inboundSpi   );																		
IPsecSaContextUpdate0(   __in HANDLE engineHandle,   __in UINT64 flags,   __in const IPSEC_SA_CONTEXT1* newValues   );																		
IPsecSaCreateEnumHandle0(   __in HANDLE engineHandle,   __in_opt const IPSEC_SA_ENUM_TEMPLATE0* enumTemplate,   __out HANDLE* enumHandle   );																		
IPsecSaDbGetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __deref_out_opt PSID* sidOwner,   __deref_out_opt PSID* sidGroup,   __deref_out_opt PACL* dacl,   __deref_out_opt PACL* sacl,   __deref_out PSECURITY_DESCRIPTOR* securityDescriptor   );																		
IPsecSaDbSetSecurityInfo0(   __in HANDLE engineHandle,   __in SECURITY_INFORMATION securityInfo,   __in_opt const SID* sidOwner,   __in_opt const SID* sidGroup,   __in_opt const ACL* dacl,   __in_opt const ACL* sacl   );																		
IPsecSaDestroyEnumHandle0(   __in HANDLE engineHandle,   __inout HANDLE enumHandle   );																		
IPsecSaEnum0(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) IPSEC_SA_DETAILS0*** entries,   __out UINT32* numEntriesReturned   );																		
IPsecSaEnum1(   __in HANDLE engineHandle,   __in HANDLE enumHandle,   __in UINT32 numEntriesRequested,   __deref_out_ecount(*numEntriesReturned) IPSEC_SA_DETAILS1*** entries,   __out UINT32* numEntriesReturned   );																		
IsBadCodePtr(    __in_opt FARPROC lpfn    );																		
IsBadHugeReadPtr(    __in_opt CONST VOID *lp,    __in     UINT_PTR ucb    );																		
IsBadHugeWritePtr(    __in_opt LPVOID lp,    __in     UINT_PTR ucb    );																		
IsBadReadPtr(    __in_opt CONST VOID *lp,    __in     UINT_PTR ucb    );																		
IsBadStringPtrA(    __in_opt LPCSTR lpsz,    __in     UINT_PTR ucchMax    );																		
IsBadStringPtrW(    __in_opt LPCWSTR lpsz,    __in     UINT_PTR ucchMax    );																		
IsBadWritePtr(    __in_opt LPVOID lp,    __in     UINT_PTR ucb    );																		
IsCharAlphaA(    __in CHAR ch);																		
IsCharAlphaNumericA(    __in CHAR ch);																		
IsCharAlphaNumericW(    __in WCHAR ch);																		
IsCharAlphaW(    __in WCHAR ch);																		
IsCharLowerA(    __in CHAR ch);																		
IsCharLowerW(    __in WCHAR ch);																		
IsCharUpperA(    __in CHAR ch);																		
IsCharUpperW(    __in WCHAR ch);																		
IsChild(    __in HWND hWndParent,    __in HWND hWnd);																		
IsClipboardFormatAvailable(    __in UINT format);																		
IsDBCSLeadByte(    __in BYTE  TestChar);																		
IsDBCSLeadByteEx(    __in UINT  CodePage,    __in BYTE  TestChar);																		
IsDebuggerPresent(    VOID    );																		
IsDialogMessageA(    __in HWND hDlg,    __in LPMSG lpMsg);																		
IsDialogMessageW(    __in HWND hDlg,    __in LPMSG lpMsg);																		
IsDlgButtonChecked(    __in HWND hDlg,    __in int nIDButton);																		
IsFileOnClusterSharedVolume(    __in LPCWSTR lpszPathName,    __out PBOOL pbFileIsOnSharedVolume    );																		
IsGUIThread(__in BOOL bConvert);																		
IsHungAppWindow(    __in HWND hwnd);																		
IsIconic(    __in HWND hWnd);																		
IsMenu(    __in HMENU hMenu);																		
IsNLSDefinedString(    __in NLS_FUNCTION     Function,    __in DWORD            dwFlags,    __in LPNLSVERSIONINFO lpVersionInformation,    __in_ecount(cchStr) LPCWSTR          lpString,    __in INT              cchStr);																		
IsProcessDPIAware(    VOID);																		
IsProcessInJob (    __in     HANDLE ProcessHandle,    __in_opt HANDLE JobHandle,    __out    PBOOL Result    );																		
IsProcessorFeaturePresent(    __in DWORD ProcessorFeature    );																		
IsRectEmpty(__in CONST RECT *lprc);																		
IsSystemResumeAutomatic(    VOID    );																		
IsTextUnicode(    __in_bcount(iSize) CONST VOID* lpv,    __in        int iSize,    __inout_opt LPINT lpiResult    );																		
IsThreadAFiber(    VOID    );																		
IsThreadpoolTimerSet(    __inout PTP_TIMER pti    );																		
IsTokenRestricted(    __in HANDLE TokenHandle    );																		
IsTokenUntrusted(    __in HANDLE TokenHandle    );																		
IsTouchWindow(    __in HWND hwnd,    __out_opt PULONG pulFlags);																		
IsValidAcl (    __in PACL pAcl    );																		
IsValidCodePage(    __in UINT  CodePage);																		
IsValidLanguageGroup(    __in LGRPID  LanguageGroup,    __in DWORD   dwFlags);																		
IsValidLocale(    __in LCID   Locale,    __in DWORD  dwFlags);																		
IsValidLocaleName(    __in LPCWSTR lpLocaleName);																		
IsValidRelativeSecurityDescriptor (    __in PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in ULONG SecurityDescriptorLength,    __in SECURITY_INFORMATION RequiredInformation    );																		
IsValidSecurityDescriptor (    __in PSECURITY_DESCRIPTOR pSecurityDescriptor    );																		
IsValidSid (    __in PSID pSid    );																		
IsWellKnownSid (    __in PSID pSid,    __in WELL_KNOWN_SID_TYPE WellKnownSidType    );																		
IsWindow(    __in_opt HWND hWnd);																		
IsWindowEnabled(    __in HWND hWnd);																		
IsWindowUnicode(    __in HWND hWnd);																		
IsWindowVisible(    __in HWND hWnd);																		
IsWinEventHookInstalled(    __in DWORD event);																		
IsWow64Message(    VOID);																		
IsWow64Process(    __in  HANDLE hProcess,    __out PBOOL Wow64Process    );																		
IsZoomed(    __in HWND hWnd);																		
keybd_event(    __in BYTE bVk,    __in BYTE bScan,    __in DWORD dwFlags,    __in ULONG_PTR dwExtraInfo);																		
KillTimer(    __in_opt HWND hWnd,    __in UINT_PTR uIDEvent);																		
KsCreateAllocator(    __in HANDLE ConnectionHandle,    __in PKSALLOCATOR_FRAMING AllocatorFraming,    __out PHANDLE AllocatorHandle    );																		
KsCreatePin(    __in HANDLE FilterHandle,    __in PKSPIN_CONNECT Connect,    __in ACCESS_MASK DesiredAccess,    __out PHANDLE ConnectionHandle    );																		
KsCreateTopologyNode(    __in HANDLE ParentHandle,    __in PKSNODE_CREATE NodeCreate,    __in ACCESS_MASK DesiredAccess,    __out PHANDLE NodeHandle    );																		
KsGetMediaType(    __in int         Position,    __out AM_MEDIA_TYPE* AmMediaType,    __in HANDLE      FilterHandle,    __in ULONG       PinFactoryId    );																		
KsGetMediaTypeCount(    __in HANDLE      FilterHandle,    __in ULONG       PinFactoryId,    __out ULONG*      MediaTypeCount    );																		
KsGetMultiplePinFactoryItems(    __in HANDLE  FilterHandle,    __in ULONG   PinFactoryId,    __in ULONG   PropertyId,    __deref_out PVOID*  Items    );																		
KsOpenDefaultDevice(    __in REFGUID Category,    __in ACCESS_MASK Access,    __out PHANDLE DeviceHandle    );																		
KsResolveRequiredAttributes(    __in PKSDATARANGE DataRange,    __in_opt PKSMULTIPLE_ITEM Attributes    );																		
KsSynchronousDeviceControl(    __in HANDLE      Handle,    __in ULONG       IoControl,    __in_bcount_opt(InLength) PVOID   InBuffer,    __in ULONG       InLength,    __out_bcount_opt(OutLength) PVOID  OutBuffer,    __in ULONG       OutLength,    __inout_opt PULONG BytesReturned    );																		
LBItemFromPt(HWND hLB, POINT pt, BOOL bAutoScroll);																		
LCIDToLocaleName(    __in LCID     Locale,    __out_ecount_opt(cchName) LPWSTR  lpName,    __in int      cchName,    __in DWORD    dwFlags);																		
LCMapStringA(    __in LCID     Locale,    __in DWORD    dwMapFlags,    __in_ecount(cchSrc) LPCSTR  lpSrcStr,    __in int      cchSrc,    __out_xcount_opt(cchDest) LPSTR  lpDestStr,    __in int      cchDest);																		
LCMapStringEx(    __in_opt LPCWSTR lpLocaleName,    __in DWORD dwMapFlags,    __in_ecount(cchSrc) LPCWSTR lpSrcStr,    __in int cchSrc,    __out_xcount_opt(cchDest) LPWSTR lpDestStr,    __in int cchDest,    __in_opt LPNLSVERSIONINFO lpVersionInformation,    __in_opt LPVOID lpReserved,    __in_opt LPARAM lParam);																		
LCMapStringW(    __in LCID     Locale,    __in DWORD    dwMapFlags,    __in_ecount(cchSrc) LPCWSTR  lpSrcStr,    __in int      cchSrc,    __out_xcount_opt(cchDest) LPWSTR  lpDestStr,    __in int      cchDest);																		
LeaveCriticalPolicySection(    __in        HANDLE  hSection);																		
LeaveCriticalSection( __inout LPCRITICAL_SECTION lpCriticalSection );																		
LeaveCriticalSectionWhenCallbackReturns( __inout PTP_CALLBACK_INSTANCE pci, __inout PCRITICAL_SECTION pcs );																		
lineAccept( HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize );																		
lineAddProvider(LPCSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID );																		
lineAddProviderA( LPCSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID );																		
lineAddProviderW( LPCWSTR lpszProviderFilename, HWND hwndOwner, LPDWORD lpdwPermanentProviderID );																		
lineAddToConference( HCALL hConfCall, HCALL hConsultCall );																		
lineAgentSpecific(  HLINE hLine, DWORD dwAddressID, DWORD dwAgentExtensionIDIndex, LPVOID lpParams, DWORD dwSize );																		
lineAnswer( HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize );																		
lineBlindTransfer( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );																		
lineBlindTransferA( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );																		
lineBlindTransferW( HCALL hCall, LPCWSTR lpszDestAddressW, DWORD dwCountryCode );																		
lineClose( HLINE hLine );																		
lineCompleteCall( HCALL hCall, LPDWORD lpdwCompletionID, DWORD dwCompletionMode, DWORD dwMessageID );																		
lineCompleteTransfer( HCALL hCall, HCALL hConsultCall, LPHCALL lphConfCall, DWORD dwTransferMode );																		
lineConfigDialog( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );																		
lineConfigDialogA( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass );																		
lineConfigDialogEdit( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );																		
lineConfigDialogEditA( DWORD dwDeviceID, HWND hwndOwner, LPCSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );																		
lineConfigDialogEditW( DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass, LPVOID const lpDeviceConfigIn, DWORD dwSize, LPVARSTRING lpDeviceConfigOut );																		
lineConfigDialogW( DWORD dwDeviceID, HWND hwndOwner, LPCWSTR lpszDeviceClass );																		
lineConfigProvider( HWND hwndOwner, DWORD               dwPermanentProviderID    );																		
lineCreateAgentA( HLINE hLine, __in_opt LPCSTR lpszAgentID, __in_opt LPCSTR lpszAgentPIN, LPHAGENT lphAgent );																		
lineCreateAgentSessionA( HLINE hLine, HAGENT hAgent, __in_opt LPCSTR lpszAgentPIN, DWORD dwWorkingAddressID, LPGUID lpGroupID, LPHAGENTSESSION lphAgentSession );																		
lineCreateAgentSessionW( HLINE hLine, HAGENT hAgent, __in_opt LPCWSTR lpszAgentPIN, DWORD dwWorkingAddressID, LPGUID lpGroupID, LPHAGENTSESSION lphAgentSession );																		
lineCreateAgentW( HLINE hLine, __in_opt LPCWSTR lpszAgentID, __in_opt LPCWSTR lpszAgentPIN, LPHAGENT lphAgent );																		
LineDDA( __in int xStart, __in int yStart, __in int xEnd, __in int yEnd, __in LINEDDAPROC lpProc, __in_opt LPARAM data);																		
lineDeallocateCall(    HCALL               hCall    );																		
lineDevSpecific(    HLINE               hLine,    DWORD               dwAddressID,    HCALL               hCall,    LPVOID              lpParams,    DWORD               dwSize    );																		
lineDevSpecificFeature(    HLINE               hLine,    DWORD               dwFeature,    LPVOID              lpParams,    DWORD               dwSize    );																		
lineDial(    HCALL               hCall,    LPCSTR              lpszDestAddress,    DWORD               dwCountryCode    );																		
lineDialA(    HCALL               hCall,    LPCSTR              lpszDestAddress,    DWORD               dwCountryCode    );																		
lineDialW(    HCALL               hCall,    LPCWSTR             lpszDestAddress,    DWORD               dwCountryCode    );																		
lineDrop(    HCALL               hCall,    LPCSTR              lpsUserUserInfo,    DWORD               dwSize    );																		
lineForward(    HLINE               hLine,    DWORD               bAllAddresses,    DWORD               dwAddressID,    LPLINEFORWARDLIST   const lpForwardList,    DWORD               dwNumRingsNoAnswer,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
lineForwardA(    HLINE               hLine,    DWORD               bAllAddresses,    DWORD               dwAddressID,    LPLINEFORWARDLIST   const lpForwardList,    DWORD               dwNumRingsNoAnswer,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
lineForwardW(    HLINE               hLine,    DWORD               bAllAddresses,    DWORD               dwAddressID,    LPLINEFORWARDLIST   const lpForwardList,    DWORD               dwNumRingsNoAnswer,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
lineGatherDigits(    HCALL               hCall,    DWORD               dwDigitModes,    __out_ecount_opt(dwNumDigits)    LPSTR               lpsDigits,    DWORD               dwNumDigits,    LPCSTR              lpszTerminationDigits,    DWORD               dwFirstDigitTimeout,    DWORD               dwInterDigitTimeout    );																		
lineGatherDigitsA(    HCALL               hCall,    DWORD               dwDigitModes,    __out_ecount_opt(dwNumDigits)    LPSTR               lpsDigits,    DWORD               dwNumDigits,    LPCSTR              lpszTerminationDigits,    DWORD               dwFirstDigitTimeout,    DWORD               dwInterDigitTimeout    );																		
lineGatherDigitsW(    HCALL               hCall,    DWORD               dwDigitModes,    __out_ecount_opt(dwNumDigits)    LPWSTR              lpsDigits,    DWORD               dwNumDigits,    LPCWSTR             lpszTerminationDigits,    DWORD               dwFirstDigitTimeout,    DWORD               dwInterDigitTimeout    );																		
lineGenerateDigits(    HCALL               hCall,    DWORD               dwDigitMode,    LPCSTR              lpszDigits,    DWORD               dwDuration    );																		
lineGenerateDigitsA(    HCALL               hCall,    DWORD               dwDigitMode,    LPCSTR              lpszDigits,    DWORD               dwDuration    );																		
lineGenerateDigitsW(    HCALL               hCall,    DWORD               dwDigitMode,    LPCWSTR             lpszDigits,    DWORD               dwDuration    );																		
lineGenerateTone(    HCALL               hCall,    DWORD               dwToneMode,    DWORD               dwDuration,    DWORD               dwNumTones,    LPLINEGENERATETONE  const lpTones    );																		
lineGetAddressCaps(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    DWORD               dwAddressID,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    LPLINEADDRESSCAPS   lpAddressCaps    );																		
lineGetAddressCapsA(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    DWORD               dwAddressID,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    LPLINEADDRESSCAPS   lpAddressCaps    );																		
lineGetAddressCapsW(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    DWORD               dwAddressID,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    LPLINEADDRESSCAPS   lpAddressCaps    );																		
lineGetAddressID(    HLINE               hLine,    LPDWORD             lpdwAddressID,    DWORD               dwAddressMode,    LPCSTR              lpsAddress,    DWORD               dwSize    );																		
lineGetAddressIDA(    HLINE               hLine,    LPDWORD             lpdwAddressID,    DWORD               dwAddressMode,    LPCSTR              lpsAddress,    DWORD               dwSize    );																		
lineGetAddressIDW(    HLINE               hLine,    LPDWORD             lpdwAddressID,    DWORD               dwAddressMode,    LPCWSTR             lpsAddress,    DWORD               dwSize    );																		
lineGetAddressStatus(    HLINE               hLine,    DWORD               dwAddressID,    LPLINEADDRESSSTATUS lpAddressStatus    );																		
lineGetAddressStatusA(    HLINE               hLine,    DWORD               dwAddressID,    LPLINEADDRESSSTATUS lpAddressStatus    );																		
lineGetAddressStatusW(    HLINE               hLine,    DWORD               dwAddressID,    LPLINEADDRESSSTATUS lpAddressStatus    );																		
lineGetAgentActivityListA( HLINE hLine, DWORD dwAddressID, LPLINEAGENTACTIVITYLIST lpAgentActivityList );																		
lineGetAgentActivityListW( HLINE hLine, DWORD dwAddressID, LPLINEAGENTACTIVITYLIST lpAgentActivityList );																		
lineGetAgentCapsA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAppAPIVersion, LPLINEAGENTCAPS lpAgentCaps );																		
lineGetAgentCapsW( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAddressID, DWORD dwAppAPIVersion, LPLINEAGENTCAPS lpAgentCaps );																		
lineGetAgentGroupListA( HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList );																		
lineGetAgentGroupListW( HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList );																		
lineGetAgentInfo( HLINE hLine, HAGENT hAgent, LPLINEAGENTINFO lpAgentInfo );																		
lineGetAgentSessionInfo( HLINE hLine, HAGENTSESSION hAgentSession, LPLINEAGENTSESSIONINFO  lpAgentSessionInfo );																		
lineGetAgentSessionList( HLINE hLine, HAGENT hAgent, LPLINEAGENTSESSIONLIST  lpAgentSessionList );																		
lineGetAgentStatusA( HLINE hLine, DWORD dwAddressID, LPLINEAGENTSTATUS lpAgentStatus );																		
lineGetAgentStatusW( HLINE hLine, DWORD dwAddressID, LPLINEAGENTSTATUS lpAgentStatus );																		
lineGetAppPriority( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority );																		
lineGetAppPriorityA( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority );																		
lineGetAppPriorityW( LPCWSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPVARSTRING lpExtensionName, LPDWORD lpdwPriority );																		
lineGetCallInfo( HCALL hCall, LPLINECALLINFO lpCallInfo );																		
lineGetCallInfoA( HCALL hCall, LPLINECALLINFO lpCallInfo );																		
lineGetCallInfoW( HCALL hCall, LPLINECALLINFO lpCallInfo );																		
lineGetCallStatus( HCALL hCall, LPLINECALLSTATUS lpCallStatus );																		
lineGetConfRelatedCalls( HCALL hCall, LPLINECALLLIST lpCallList );																		
lineGetCountry( DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList );																		
lineGetCountryA( DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList );																		
lineGetCountryW( DWORD dwCountryID, DWORD dwAPIVersion, LPLINECOUNTRYLIST lpLineCountryList );																		
lineGetDevCaps( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps );																		
lineGetDevCapsA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps );																		
lineGetDevCapsW( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, DWORD dwExtVersion, LPLINEDEVCAPS lpLineDevCaps );																		
lineGetDevConfig( DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCSTR lpszDeviceClass );																		
lineGetDevConfigA( DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCSTR lpszDeviceClass );																		
lineGetDevConfigW( DWORD dwDeviceID, LPVARSTRING lpDeviceConfig, LPCWSTR lpszDeviceClass );																		
lineGetGroupListA( HLINE hLine, LPLINEAGENTGROUPLIST lpGroupList );																		
lineGetGroupListW( HLINE hLine, LPLINEAGENTGROUPLIST lpGroupList );																		
lineGetIcon(    DWORD               dwDeviceID,    LPCSTR              lpszDeviceClass,    LPHICON             lphIcon    );																		
lineGetIconA(    DWORD               dwDeviceID,    LPCSTR              lpszDeviceClass,    LPHICON             lphIcon    );																		
lineGetIconW(    DWORD               dwDeviceID,    LPCWSTR             lpszDeviceClass,    LPHICON             lphIcon    );																		
lineGetID(    HLINE               hLine,    DWORD               dwAddressID,    HCALL               hCall,    DWORD               dwSelect,    LPVARSTRING         lpDeviceID,    LPCSTR              lpszDeviceClass    );																		
lineGetIDA(    HLINE               hLine,    DWORD               dwAddressID,    HCALL               hCall,    DWORD               dwSelect,    LPVARSTRING         lpDeviceID,    LPCSTR              lpszDeviceClass    );																		
lineGetIDW(    HLINE               hLine,    DWORD               dwAddressID,    HCALL               hCall,    DWORD               dwSelect,    LPVARSTRING         lpDeviceID,    LPCWSTR             lpszDeviceClass    );																		
lineGetLineDevStatus(    HLINE               hLine,    LPLINEDEVSTATUS     lpLineDevStatus    );																		
lineGetLineDevStatusA(    HLINE               hLine,    LPLINEDEVSTATUS     lpLineDevStatus    );																		
lineGetLineDevStatusW(    HLINE               hLine,    LPLINEDEVSTATUS     lpLineDevStatus    );																		
lineGetMessage( HLINEAPP hLineApp, LPLINEMESSAGE lpMessage, DWORD dwTimeout );																		
lineGetNewCalls(    HLINE               hLine,    DWORD               dwAddressID,    DWORD               dwSelect,    LPLINECALLLIST      lpCallList    );																		
lineGetNumRings(    HLINE               hLine,    DWORD               dwAddressID,    LPDWORD             lpdwNumRings    );																		
lineGetProviderList( DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList );																		
lineGetProviderListA( DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList );																		
lineGetProviderListW( DWORD dwAPIVersion, LPLINEPROVIDERLIST lpProviderList );																		
lineGetProxyStatus( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAppAPIVersion, LPLINEPROXYREQUESTLIST lpLineProxyReqestList );																		
lineGetQueueInfo( HLINE hLine, DWORD dwQueueID, LPLINEQUEUEINFO lpLineQueueInfo );																		
lineGetQueueListA( HLINE hLine, LPGUID lpGroupID, LPLINEQUEUELIST lpQueueList );																		
lineGetQueueListW( HLINE hLine, LPGUID lpGroupID, LPLINEQUEUELIST lpQueueList );																		
lineGetRequest( HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer );																		
lineGetRequestA( HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer );																		
lineGetRequestW( HLINEAPP hLineApp, DWORD dwRequestMode, LPVOID lpRequestBuffer );																		
lineGetStatusMessages(    HLINE               hLine,    LPDWORD             lpdwLineStates,    LPDWORD             lpdwAddressStates    );																		
lineGetTranslateCaps(    HLINEAPP hLineApp,    DWORD dwAPIVersion,    LPLINETRANSLATECAPS lpTranslateCaps    );																		
lineGetTranslateCapsA(    HLINEAPP hLineApp,    DWORD dwAPIVersion,    LPLINETRANSLATECAPS lpTranslateCaps    );																		
lineGetTranslateCapsW(    HLINEAPP hLineApp,    DWORD dwAPIVersion,    LPLINETRANSLATECAPS lpTranslateCaps    );																		
lineHandoff(    HCALL               hCall,    LPCSTR              lpszFileName,    DWORD               dwMediaMode    );																		
lineHandoffA(    HCALL               hCall,    LPCSTR              lpszFileName,    DWORD               dwMediaMode    );																		
lineHandoffW(    HCALL               hCall,    LPCWSTR             lpszFileName,    DWORD               dwMediaMode    );																		
lineHold(    HCALL               hCall    );																		
lineInitialize(    LPHLINEAPP          lphLineApp,    HINSTANCE           hInstance,    LINECALLBACK        lpfnCallback,    LPCSTR              lpszAppName,    LPDWORD             lpdwNumDevs    );																		
lineInitializeExA( LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams );																		
lineInitializeExW( LPHLINEAPP lphLineApp, HINSTANCE hInstance, LINECALLBACK lpfnCallback, LPCWSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPLINEINITIALIZEEXPARAMS lpLineInitializeExParams );																		
lineMakeCall(    HLINE               hLine,    LPHCALL             lphCall,    LPCSTR              lpszDestAddress,    DWORD               dwCountryCode,    LPLINECALLPARAMS    const lpCallParams    );																		
lineMakeCallA(    HLINE               hLine,    LPHCALL             lphCall,    LPCSTR              lpszDestAddress,    DWORD               dwCountryCode,    LPLINECALLPARAMS    const lpCallParams    );																		
lineMakeCallW(    HLINE               hLine,    LPHCALL             lphCall,    LPCWSTR             lpszDestAddress,    DWORD               dwCountryCode,    LPLINECALLPARAMS    const lpCallParams    );																		
lineMonitorDigits(    HCALL               hCall,    DWORD               dwDigitModes    );																		
lineMonitorMedia(    HCALL               hCall,    DWORD               dwMediaModes    );																		
lineMonitorTones(    HCALL               hCall,    LPLINEMONITORTONE   const lpToneList,    DWORD               dwNumEntries    );																		
lineNegotiateAPIVersion(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    DWORD               dwAPILowVersion,    DWORD               dwAPIHighVersion,    LPDWORD             lpdwAPIVersion,    LPLINEEXTENSIONID   lpExtensionID    );																		
lineNegotiateExtVersion(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    DWORD               dwAPIVersion,    DWORD               dwExtLowVersion,    DWORD               dwExtHighVersion,    LPDWORD             lpdwExtVersion    );																		
lineOpen(    HLINEAPP hLineApp,    DWORD dwDeviceID,    LPHLINE lphLine,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    DWORD_PTR           dwCallbackInstance,    DWORD               dwPrivileges,    DWORD               dwMediaModes,    LPLINECALLPARAMS    const lpCallParams    );																		
lineOpenA(    HLINEAPP hLineApp,    DWORD dwDeviceID,    LPHLINE lphLine,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    DWORD_PTR           dwCallbackInstance,    DWORD               dwPrivileges,    DWORD               dwMediaModes,    LPLINECALLPARAMS    const lpCallParams    );																		
lineOpenW(    HLINEAPP hLineApp,    DWORD dwDeviceID,    LPHLINE lphLine,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    DWORD_PTR           dwCallbackInstance,    DWORD               dwPrivileges,    DWORD               dwMediaModes,    LPLINECALLPARAMS    const lpCallParams    );																		
linePark(    HCALL               hCall,    DWORD               dwParkMode,    LPCSTR              lpszDirAddress,    LPVARSTRING         lpNonDirAddress    );																		
lineParkA(    HCALL               hCall,    DWORD               dwParkMode,    LPCSTR              lpszDirAddress,    LPVARSTRING         lpNonDirAddress    );																		
lineParkW(    HCALL               hCall,    DWORD               dwParkMode,    LPCWSTR             lpszDirAddress,    LPVARSTRING         lpNonDirAddress    );																		
linePickup(    HLINE               hLine,    DWORD               dwAddressID,    LPHCALL             lphCall,    LPCSTR              lpszDestAddress,    LPCSTR              lpszGroupID    );																		
linePickupA(    HLINE               hLine,    DWORD               dwAddressID,    LPHCALL             lphCall,    LPCSTR              lpszDestAddress,    LPCSTR              lpszGroupID    );																		
linePickupW(    HLINE               hLine,    DWORD               dwAddressID,    LPHCALL             lphCall,    LPCWSTR             lpszDestAddress,    LPCWSTR             lpszGroupID    );																		
linePrepareAddToConference(    HCALL               hConfCall,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
linePrepareAddToConferenceA(    HCALL               hConfCall,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
linePrepareAddToConferenceW(    HCALL               hConfCall,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
lineProxyMessage(  HLINE hLine, HCALL hCall, DWORD dwMsg, DWORD dwParam1, DWORD dwParam2, DWORD dwParam3 );																		
lineProxyResponse(  HLINE hLine, LPLINEPROXYREQUEST  lpProxyRequest, DWORD dwResult );																		
lineRedirect( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );																		
lineRedirectA( HCALL hCall, LPCSTR lpszDestAddress, DWORD dwCountryCode );																		
lineRedirectW( HCALL hCall, LPCWSTR lpszDestAddress, DWORD dwCountryCode );																		
lineRegisterRequestRecipient( HLINEAPP hLineApp, DWORD dwRegistrationInstance, DWORD dwRequestMode, DWORD bEnable );																		
lineReleaseUserUserInfo( HCALL hCall );																		
lineRemoveFromConference( HCALL hCall );																		
lineRemoveProvider( DWORD dwPermanentProviderID, HWND hwndOwner );																		
lineSecureCall( HCALL hCall );																		
lineSendUserUserInfo( HCALL hCall, LPCSTR lpsUserUserInfo, DWORD dwSize );																		
lineSetAgentActivity( HLINE hLine, DWORD dwAddressID, DWORD dwActivityID );																		
lineSetAgentGroup( HLINE hLine, DWORD dwAddressID, LPLINEAGENTGROUPLIST lpAgentGroupList );																		
lineSetAgentMeasurementPeriod( HLINE hLine, HAGENT hAgent, DWORD dwMeasurementPeriod );																		
lineSetAgentSessionState( HLINE hLine, HAGENTSESSION hAgentSession, DWORD dwAgentSessionState, DWORD dwNextAgentSessionState );																		
lineSetAgentState( HLINE hLine, DWORD dwAddressID, DWORD dwAgentState, DWORD dwNextAgentState );																		
lineSetAgentStateEx( HLINE hLine, HAGENT hAgent, DWORD dwAgentState, DWORD dwNextAgentState );																		
lineSetAppPriority( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCSTR lpszExtensionName, DWORD dwPriority );																		
lineSetAppPriorityA( LPCSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCSTR lpszExtensionName, DWORD dwPriority );																		
lineSetAppPriorityW( LPCWSTR lpszAppFilename, DWORD dwMediaMode, LPLINEEXTENSIONID lpExtensionID, DWORD dwRequestMode, LPCWSTR lpszExtensionName, DWORD dwPriority );																		
lineSetAppSpecific( HCALL hCall, DWORD dwAppSpecific );																		
lineSetCallData( HCALL hCall, LPVOID lpCallData, DWORD dwSize );																		
lineSetCallParams( HCALL hCall, DWORD dwBearerMode, DWORD dwMinRate, DWORD dwMaxRate, LPLINEDIALPARAMS const lpDialParams );																		
lineSetCallPrivilege( HCALL hCall, DWORD dwCallPrivilege );																		
lineSetCallQualityOfService( HCALL hCall, LPVOID lpSendingFlowspec, DWORD dwSendingFlowspecSize, LPVOID lpReceivingFlowspec, DWORD dwReceivingFlowspecSize );																		
lineSetCallTreatment( HCALL hCall, DWORD dwTreatment );																		
lineSetCurrentLocation( HLINEAPP hLineApp, DWORD dwLocation );																		
lineSetDevConfig(    DWORD               dwDeviceID,    LPVOID              const lpDeviceConfig,    DWORD               dwSize,    LPCSTR              lpszDeviceClass    );																		
lineSetDevConfigA(    DWORD               dwDeviceID,    LPVOID              const lpDeviceConfig,    DWORD               dwSize,    LPCSTR              lpszDeviceClass    );																		
lineSetDevConfigW(    DWORD               dwDeviceID,    LPVOID              const lpDeviceConfig,    DWORD               dwSize,    LPCWSTR             lpszDeviceClass    );																		
lineSetLineDevStatus( HLINE hLine, DWORD dwStatusToChange, DWORD fStatus );																		
lineSetMediaControl(    HLINE                       hLine,    DWORD                       dwAddressID,    HCALL                       hCall,    DWORD                       dwSelect,    LPLINEMEDIACONTROLDIGIT     const lpDigitList,    DWORD                       dwDigitNumEntries,    LPLINEMEDIACONTROLMEDIA     const lpMediaList,    DWORD                       dwMediaNumEntries,    LPLINEMEDIACONTROLTONE      const lpToneList,    DWORD                       dwToneNumEntries,    LPLINEMEDIACONTROLCALLSTATE const lpCallStateList,    DWORD                       dwCallStateNumEntries    );																		
lineSetMediaMode( HCALL hCall, DWORD dwMediaModes );																		
lineSetNumRings( HLINE hLine, DWORD dwAddressID, DWORD dwNumRings );																		
lineSetQueueMeasurementPeriod( HLINE hLine, DWORD dwQueueID, DWORD dwMeasurementPeriod );																		
lineSetStatusMessages(    HLINE               hLine,    DWORD               dwLineStates,    DWORD               dwAddressStates    );																		
lineSetTerminal(    HLINE               hLine,    DWORD               dwAddressID,    HCALL               hCall,    DWORD               dwSelect,    DWORD               dwTerminalModes,    DWORD               dwTerminalID,    DWORD               bEnable    );																		
lineSetTollList(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    LPCSTR              lpszAddressIn,    DWORD               dwTollListOption    );																		
lineSetTollListA(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    LPCSTR              lpszAddressIn,    DWORD               dwTollListOption    );																		
lineSetTollListW(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    LPCWSTR             lpszAddressInW,    DWORD               dwTollListOption    );																		
lineSetupConference(    HCALL               hCall,    HLINE               hLine,    LPHCALL             lphConfCall,    LPHCALL             lphConsultCall,    DWORD               dwNumParties,    LPLINECALLPARAMS    const lpCallParams    );																		
lineSetupConferenceA(    HCALL               hCall,    HLINE               hLine,    LPHCALL             lphConfCall,    LPHCALL             lphConsultCall,    DWORD               dwNumParties,    LPLINECALLPARAMS    const lpCallParams    );																		
lineSetupConferenceW(    HCALL               hCall,    HLINE               hLine,    LPHCALL             lphConfCall,    LPHCALL             lphConsultCall,    DWORD               dwNumParties,    LPLINECALLPARAMS    const lpCallParams    );																		
lineSetupTransfer(    HCALL               hCall,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
lineSetupTransferA(    HCALL               hCall,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
lineSetupTransferW(    HCALL               hCall,    LPHCALL             lphConsultCall,    LPLINECALLPARAMS    const lpCallParams    );																		
lineShutdown(    HLINEAPP            hLineApp    );																		
lineSwapHold(    HCALL               hActiveCall,    HCALL               hHeldCall    );																		
LineTo( __in HDC hdc, __in int x, __in int y);																		
lineTranslateAddress(    HLINEAPP                hLineApp,    DWORD                   dwDeviceID,    DWORD                   dwAPIVersion,    LPCSTR                  lpszAddressIn,    DWORD                   dwCard,    DWORD                   dwTranslateOptions,    LPLINETRANSLATEOUTPUT   lpTranslateOutput    );																		
lineTranslateAddressA(    HLINEAPP                hLineApp,    DWORD                   dwDeviceID,    DWORD                   dwAPIVersion,    LPCSTR                  lpszAddressIn,    DWORD                   dwCard,    DWORD                   dwTranslateOptions,    LPLINETRANSLATEOUTPUT   lpTranslateOutput    );																		
lineTranslateAddressW(    HLINEAPP                hLineApp,    DWORD                   dwDeviceID,    DWORD                   dwAPIVersion,    LPCWSTR                 lpszAddressIn,    DWORD                   dwCard,    DWORD                   dwTranslateOptions,    LPLINETRANSLATEOUTPUT   lpTranslateOutput    );																		
lineTranslateDialog( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCSTR lpszAddressIn );																		
lineTranslateDialogA( HLINEAPP hLineApp, DWORD dwDeviceID, DWORD dwAPIVersion, HWND hwndOwner, LPCSTR lpszAddressIn );																		
lineTranslateDialogW(    HLINEAPP            hLineApp,    DWORD               dwDeviceID,    DWORD               dwAPIVersion,    HWND                hwndOwner,    LPCWSTR             lpszAddressIn    );																		
lineUncompleteCall(    HLINE               hLine,    DWORD               dwCompletionID    );																		
lineUnhold(    HCALL               hCall    );																		
lineUnpark(    HLINE               hLine,    DWORD               dwAddressID,    LPHCALL             lphCall,    LPCSTR              lpszDestAddress    );																		
lineUnparkA(    HLINE               hLine,    DWORD               dwAddressID,    LPHCALL             lphCall,    LPCSTR              lpszDestAddress    );																		
lineUnparkW(    HLINE               hLine,    DWORD               dwAddressID,    LPHCALL             lphCall,    LPCWSTR             lpszDestAddress    );																		
LoadAcceleratorsA(    __in_opt HINSTANCE hInstance,    __in LPCSTR lpTableName);																		
LoadAcceleratorsW(    __in_opt HINSTANCE hInstance,    __in LPCWSTR lpTableName);																		
LoadBitmapA(__in_opt HINSTANCE hInstance,__in LPCSTR lpBitmapName);																		
LoadBitmapW(__in_opt HINSTANCE hInstance,__in LPCWSTR lpBitmapName);																		
LoadCursorA(__in_opt HINSTANCE hInstance,__in LPCSTR lpCursorName);																		
LoadCursorFromFileA(__in LPCSTR lpFileName);																		
LoadCursorFromFileW(__in LPCWSTR lpFileName);																		
LoadCursorW(__in_opt HINSTANCE hInstance,__in LPCWSTR lpCursorName);																		
LoadIconA(__in_opt HINSTANCE hInstance,__in LPCSTR lpIconName);																		
LoadIconMetric(HINSTANCE hinst, PCWSTR pszName, int lims, __out HICON *phico);																		
LoadIconW(__in_opt HINSTANCE hInstance,__in LPCWSTR lpIconName);																		
LoadIconWithScaleDown(HINSTANCE hinst, PCWSTR pszName, int cx, int cy, __out HICON *phico);																		
LoadImageA(    __in_opt HINSTANCE hInst,    __in LPCSTR name,    __in UINT type,    __in int cx,    __in int cy,    __in UINT fuLoad);																		
LoadImageW(    __in_opt HINSTANCE hInst,    __in LPCWSTR name,    __in UINT type,    __in int cx,    __in int cy,    __in UINT fuLoad);																		
LoadKeyboardLayoutA(    __in LPCSTR pwszKLID,    __in UINT Flags);																		
LoadKeyboardLayoutW(    __in LPCWSTR pwszKLID,    __in UINT Flags);																		
LoadLibraryA(    __in LPCSTR lpLibFileName    );																		
LoadLibraryExA(    __in       LPCSTR lpLibFileName,    __reserved HANDLE hFile,    __in       DWORD dwFlags    );																		
LoadLibraryExW(    __in       LPCWSTR lpLibFileName,    __reserved HANDLE hFile,    __in       DWORD dwFlags    );																		
LoadLibraryW(    __in LPCWSTR lpLibFileName    );																		
LoadMenuA(    __in_opt HINSTANCE hInstance,    __in LPCSTR lpMenuName);																		
LoadMenuIndirectA(    __in CONST MENUTEMPLATEA *lpMenuTemplate);																		
LoadMenuIndirectW(    __in CONST MENUTEMPLATEW *lpMenuTemplate);																		
LoadMenuW(    __in_opt HINSTANCE hInstance,    __in LPCWSTR lpMenuName);																		
LoadModule(    __in LPCSTR lpModuleName,    __in LPVOID lpParameterBlock    );																		
LoadResource(    __in_opt HMODULE hModule,    __in HRSRC hResInfo    );																		
LoadStringA(    __in_opt HINSTANCE hInstance,    __in UINT uID,    __out_ecount_part(cchBufferMax, return + 1) LPSTR lpBuffer,    __in int cchBufferMax);																		
LoadStringW(    __in_opt HINSTANCE hInstance,    __in UINT uID,    __out_ecount_part(cchBufferMax, return + 1) LPWSTR lpBuffer,    __in int cchBufferMax);																		
LoadUserProfileA(    __in    HANDLE          hToken,    __inout LPPROFILEINFOA  lpProfileInfo);																		
LoadUserProfileW(    __in    HANDLE          hToken,    __inout LPPROFILEINFOW  lpProfileInfo);																		
LocalAlloc(    __in UINT uFlags,    __in SIZE_T uBytes    );																		
LocalCompact(    __in UINT uMinFree    );																		
LocaleNameToLCID(    __in LPCWSTR lpName,    __in DWORD dwFlags);																		
LocalFileTimeToFileTime(    __in  CONST FILETIME *lpLocalFileTime,    __out LPFILETIME lpFileTime    );																		
LocalFlags(    __in HLOCAL hMem    );																		
LocalFree(    __deref HLOCAL hMem    );																		
LocalHandle(    __in LPCVOID pMem    );																		
LocalLock(    __in HLOCAL hMem    );																		
LocalReAlloc(    __in HLOCAL hMem,    __in SIZE_T uBytes,    __in UINT uFlags    );																		
LocalShrink(    __in HLOCAL hMem,    __in UINT cbNewSize    );																		
LocalSize(    __in HLOCAL hMem    );																		
LocalUnlock(    __in HLOCAL hMem    );																		
LocateExtendedFeature(    __in PCONTEXT_EX ContextEx,    __in DWORD FeatureId,    __out_opt PDWORD Length    );																		
LocateLegacyContext(    __in PCONTEXT_EX ContextEx,    __out_opt PDWORD Length    );																		
LockFile(    __in HANDLE hFile,    __in DWORD dwFileOffsetLow,    __in DWORD dwFileOffsetHigh,    __in DWORD nNumberOfBytesToLockLow,    __in DWORD nNumberOfBytesToLockHigh    );																		
LockFileEx(    __in       HANDLE hFile,    __in       DWORD dwFlags,    __reserved DWORD dwReserved,    __in       DWORD nNumberOfBytesToLockLow,    __in       DWORD nNumberOfBytesToLockHigh,    __inout    LPOVERLAPPED lpOverlapped    );																		
LockResource(    __in HGLOBAL hResData    );																		
LockServiceDatabase(    __in            SC_HANDLE               hSCManager    );																		
LockSetForegroundWindow(    __in UINT uLockCode);																		
LockWindowUpdate(    __in_opt HWND hWndLock);																		
LockWorkStation(    VOID);																		
LogErrorA(    IN DWORD    dwMessageId,    IN DWORD    cNumberOfSubStrings,    __in_ecount(cNumberOfSubStrings) IN LPSTR   *plpwsSubStrings,    IN DWORD    dwErrorCode);																		
LogEventA(    IN DWORD   wEventType,    IN DWORD   dwMessageId,    IN DWORD   cNumberOfSubStrings,    __in_ecount(cNumberOfSubStrings) IN LPSTR  *plpwsSubStrings);																		
LogicalToPhysicalPoint(__in HWND hWnd,__inout LPPOINT lpPoint);																		
LogonUserA (    __in        LPCSTR lpszUsername,    __in_opt    LPCSTR lpszDomain,    __in        LPCSTR lpszPassword,    __in        DWORD dwLogonType,    __in        DWORD dwLogonProvider,    __deref_out PHANDLE phToken    );																		
LogonUserExA (    __in            LPCSTR lpszUsername,    __in_opt        LPCSTR lpszDomain,    __in            LPCSTR lpszPassword,    __in            DWORD dwLogonType,    __in            DWORD dwLogonProvider,    __deref_opt_out PHANDLE phToken,    __deref_opt_out PSID  *ppLogonSid,    __deref_opt_out_bcount_full(*pdwProfileLength) PVOID *ppProfileBuffer,    __out_opt       LPDWORD pdwProfileLength,    __out_opt       PQUOTA_LIMITS pQuotaLimits    );																		
LogonUserExW (    __in            LPCWSTR lpszUsername,    __in_opt        LPCWSTR lpszDomain,    __in            LPCWSTR lpszPassword,    __in            DWORD dwLogonType,    __in            DWORD dwLogonProvider,    __deref_opt_out PHANDLE phToken,    __deref_opt_out PSID  *ppLogonSid,    __deref_opt_out_bcount_full(*pdwProfileLength) PVOID *ppProfileBuffer,    __out_opt       LPDWORD pdwProfileLength,    __out_opt       PQUOTA_LIMITS pQuotaLimits    );																		
LogonUserW (    __in        LPCWSTR lpszUsername,    __in_opt    LPCWSTR lpszDomain,    __in        LPCWSTR lpszPassword,    __in        DWORD dwLogonType,    __in        DWORD dwLogonProvider,    __deref_out PHANDLE phToken    );																		
LookupAccountNameA(    __in_opt LPCSTR lpSystemName,    __in     LPCSTR lpAccountName,    __out_bcount_part_opt(*cbSid, *cbSid) PSID Sid,    __inout  LPDWORD cbSid,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPSTR ReferencedDomainName,    __inout  LPDWORD cchReferencedDomainName,    __out    PSID_NAME_USE peUse    );																		
LookupAccountNameLocalA(    __in     LPCSTR lpAccountName,    __out_bcount_part_opt(*cbSid, *cbSid) PSID Sid,    __inout  LPDWORD cbSid,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPSTR ReferencedDomainName,    __inout  LPDWORD cchReferencedDomainName,    __out    PSID_NAME_USE peUse    );																		
LookupAccountNameLocalW(    __in     LPCWSTR lpAccountName,    __out_bcount_part_opt(*cbSid, *cbSid) PSID Sid,    __inout  LPDWORD cbSid,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPWSTR ReferencedDomainName,    __inout  LPDWORD cchReferencedDomainName,    __out    PSID_NAME_USE peUse    );																		
LookupAccountNameW(    __in_opt LPCWSTR lpSystemName,    __in     LPCWSTR lpAccountName,    __out_bcount_part_opt(*cbSid, *cbSid) PSID Sid,    __inout  LPDWORD cbSid,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPWSTR ReferencedDomainName,    __inout  LPDWORD cchReferencedDomainName,    __out    PSID_NAME_USE peUse    );																		
LookupAccountSidA(    __in_opt LPCSTR lpSystemName,    __in PSID Sid,    __out_ecount_part_opt(*cchName, *cchName + 1) LPSTR Name,    __inout  LPDWORD cchName,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPSTR ReferencedDomainName,    __inout LPDWORD cchReferencedDomainName,    __out PSID_NAME_USE peUse    );																		
LookupAccountSidLocalA(    __in PSID Sid,    __out_ecount_part_opt(*cchName, *cchName + 1) LPSTR Name,    __inout  LPDWORD cchName,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPSTR ReferencedDomainName,    __inout LPDWORD cchReferencedDomainName,    __out PSID_NAME_USE peUse    );																		
LookupAccountSidLocalW(    __in PSID Sid,    __out_ecount_part_opt(*cchName, *cchName + 1) LPWSTR Name,    __inout  LPDWORD cchName,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPWSTR ReferencedDomainName,    __inout LPDWORD cchReferencedDomainName,    __out PSID_NAME_USE peUse    );																		
LookupAccountSidW(    __in_opt LPCWSTR lpSystemName,    __in PSID Sid,    __out_ecount_part_opt(*cchName, *cchName + 1) LPWSTR Name,    __inout  LPDWORD cchName,    __out_ecount_part_opt(*cchReferencedDomainName, *cchReferencedDomainName + 1) LPWSTR ReferencedDomainName,    __inout LPDWORD cchReferencedDomainName,    __out PSID_NAME_USE peUse    );																		
LookupIconIdFromDirectory(__in PBYTE presbits,__in BOOL fIcon);																		
LookupIconIdFromDirectoryEx(__in PBYTE presbits,__in BOOL fIcon,__in int cxDesired,__in int cyDesired,__in UINT Flags);																		
LookupPersistentTcpPortReservation(    __in  USHORT StartPort,    __in  USHORT NumberOfPorts,    __out PULONG64 Token    );																		
LookupPersistentUdpPortReservation(    __in  USHORT StartPort,    __in  USHORT NumberOfPorts,    __out PULONG64 Token    );																		
LookupPrivilegeDisplayNameA(    __in_opt LPCSTR lpSystemName,    __in     LPCSTR lpName,    __out_ecount_part_opt(*cchDisplayName, *cchDisplayName + 1) LPSTR lpDisplayName,    __inout  LPDWORD cchDisplayName,    __out    LPDWORD lpLanguageId    );																		
LookupPrivilegeDisplayNameW(    __in_opt LPCWSTR lpSystemName,    __in     LPCWSTR lpName,    __out_ecount_part_opt(*cchDisplayName, *cchDisplayName + 1) LPWSTR lpDisplayName,    __inout  LPDWORD cchDisplayName,    __out    LPDWORD lpLanguageId    );																		
LookupPrivilegeNameA(    __in_opt LPCSTR lpSystemName,    __in     PLUID   lpLuid,    __out_ecount_part_opt(*cchName, *cchName + 1) LPSTR lpName,    __inout  LPDWORD cchName    );																		
LookupPrivilegeNameW(    __in_opt LPCWSTR lpSystemName,    __in     PLUID   lpLuid,    __out_ecount_part_opt(*cchName, *cchName + 1) LPWSTR lpName,    __inout  LPDWORD cchName    );																		
LookupPrivilegeValueA(    __in_opt LPCSTR lpSystemName,    __in     LPCSTR lpName,    __out    PLUID   lpLuid    );																		
LookupPrivilegeValueW(    __in_opt LPCWSTR lpSystemName,    __in     LPCWSTR lpName,    __out    PLUID   lpLuid    );																		
LookupSecurityDescriptorPartsA(    __out_opt PTRUSTEE_A         * ppOwner,    __out_opt PTRUSTEE_A         * ppGroup,    __out_opt PULONG               pcCountOfAccessEntries,    __deref_out_ecount_opt(*pcCountOfAccessEntries) PEXPLICIT_ACCESS_A * ppListOfAccessEntries,    __out_opt PULONG               pcCountOfAuditEntries,    __deref_out_ecount_opt(*pcCountOfAuditEntries) PEXPLICIT_ACCESS_A * ppListOfAuditEntries,    __in  PSECURITY_DESCRIPTOR pSD    );																		
LookupSecurityDescriptorPartsW(    __out_opt PTRUSTEE_W         * ppOwner,    __out_opt PTRUSTEE_W         * ppGroup,    __out_opt PULONG               pcCountOfAccessEntries,    __deref_out_ecount_opt(*pcCountOfAccessEntries) PEXPLICIT_ACCESS_W * ppListOfAccessEntries,    __out_opt PULONG               pcCountOfAuditEntries,    __deref_out_ecount_opt(*pcCountOfAuditEntries) PEXPLICIT_ACCESS_W * ppListOfAuditEntries,    __in  PSECURITY_DESCRIPTOR pSD    );																		
LPM_AdmitRsvpMsg(    IN  RHANDLE         PcmReqHandle,        IN  RSVP_HOP        *pRecvdIntf,       IN  RSVP_MSG_OBJS   *pRsvpMsgObjs,        IN  int             RcvdRsvpMsgLength,        IN  UCHAR           *RcvdRsvpMsg,    OUT ULONG           *pulPcmActionFlags,        OUT POLICY_DECISION *pPolicyDecisions,       OUT void            *Reserved );																		
LPM_CommitResv (    IN  RSVP_SESSION    *RsvpSession,     IN  RSVP_HOP        *FlowInstalledIntf,       IN  RESV_STYLE      *RsvpStyle,       IN  int             FilterSpecCount,       IN  FILTER_SPEC     **ppFilterSpecList,       IN  IS_FLOWSPEC     *pMergedFlowSpec,       IN  ULONG           CommitDecision );																		
LPM_Deinitialize(        IN  LPM_HANDLE      LpmHandle );																		
LPM_DeleteState(    IN  RSVP_HOP        *pRcvdIfAddr,        IN  MSG_TYPE        RsvpMsgType,        IN  RSVP_SESSION    *pRsvpSession,       IN  RSVP_HOP        *pRsvpFromHop,       IN  RESV_STYLE      *pResvStyle,        IN  int             FilterSpecCount,        IN  FILTER_SPEC     **ppFilterSpecList,       IN  int             TearDownReason );																		
LPM_GetRsvpObjects (    IN  RHANDLE         PcmReqHandle,       IN  ULONG           MaxPdSize,       IN  RSVP_HOP        *SendingIntfAddr,        IN  RSVP_MSG_OBJS   *pRsvpMsgObjs,       OUT int             *pRsvpObjectsCount,    OUT RsvpObjHdr      ***pppRsvpObjects,        OUT void            *Reserved );																		
LPM_Initialize(    IN  LPM_HANDLE      LpmHandle,    IN  LPM_INIT_INFO   *pLpmInitInfo,    OUT DWORD           *pLpmVersionNumber,    OUT PETYPE          *pSupportedPeType,    OUT VOID            *Reserved );																		
LPM_IpAddressTable(    IN  ULONG       cIpAddrTable,       IN  LPMIPTABLE  *pIpAddrTable );																		
LPtoDP( __in HDC hdc, __inout_ecount(c) LPPOINT lppt, __in int c);																																			
MakeAbsoluteSD (    __in    PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,    __out_bcount_part_opt(*lpdwAbsoluteSecurityDescriptorSize, *lpdwAbsoluteSecurityDescriptorSize) PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,    __inout LPDWORD lpdwAbsoluteSecurityDescriptorSize,    __out_bcount_part_opt(*lpdwDaclSize, *lpdwDaclSize) PACL pDacl,    __inout LPDWORD lpdwDaclSize,    __out_bcount_part_opt(*lpdwSaclSize, *lpdwSaclSize) PACL pSacl,    __inout LPDWORD lpdwSaclSize,    __out_bcount_part_opt(*lpdwOwnerSize, *lpdwOwnerSize) PSID pOwner,    __inout LPDWORD lpdwOwnerSize,    __out_bcount_part_opt(*lpdwPrimaryGroupSize, *lpdwPrimaryGroupSize) PSID pPrimaryGroup,    __inout LPDWORD lpdwPrimaryGroupSize    );																		
MakeAbsoluteSD2 (    __inout_bcount_part(*lpdwBufferSize, *lpdwBufferSize) PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,    __inout LPDWORD lpdwBufferSize    );																		
MakeDragList(HWND hLB);																		
MakeSelfRelativeSD (    __in    PSECURITY_DESCRIPTOR pAbsoluteSecurityDescriptor,    __out_bcount_part_opt(*lpdwBufferLength, *lpdwBufferLength) PSECURITY_DESCRIPTOR pSelfRelativeSecurityDescriptor,    __inout LPDWORD lpdwBufferLength    );																		
MakeSureDirectoryPathExists(    __in PCSTR DirPath    );																		
MakeSureDirectoryPathExists(__in PCSTR DirPath);																		
MapAndLoad(__in PCSTR ImageName,__in_opt PCSTR DllPath,__out PLOADED_IMAGE LoadedImage,__in BOOL DotDll,__in BOOL ReadOnly);																		
MapDebugInformation(    __in_opt HANDLE FileHandle,    __in PCSTR FileName,    __in_opt PCSTR SymbolPath,    __in ULONG ImageBase    );																		
MapDebugInformation(__in_opt HANDLE FileHandle,__in PCSTR FileName,__in_opt PCSTR SymbolPath,__in ULONG ImageBase);																		
MapDialogRect(    __in HWND hDlg,    __inout LPRECT lpRect);																		
MapFileAndCheckSumA (    __in PCSTR Filename,    __out PDWORD HeaderSum,    __out PDWORD CheckSum    );																		
MapFileAndCheckSumW (    __in PCWSTR Filename,    __out PDWORD HeaderSum,    __out PDWORD CheckSum    );																		
MapGenericMask (    __inout PDWORD AccessMask,    __in    PGENERIC_MAPPING GenericMapping    );																		
MappingDoAction(    __inout PMAPPING_PROPERTY_BAG pBag,    __in    DWORD                 dwRangeIndex,    __in    LPCWSTR               pszActionId    );																		
MappingFreePropertyBag(    __in PMAPPING_PROPERTY_BAG pBag    );																		
MappingFreeServices(    __in PMAPPING_SERVICE_INFO pServiceInfo    );																		
MappingGetServices(    __in_opt  PMAPPING_ENUM_OPTIONS  pOptions,    __out     PMAPPING_SERVICE_INFO *prgServices,    __out     DWORD                 *pdwServicesCount    );																		
MappingRecognizeText(    __in                  PMAPPING_SERVICE_INFO  pServiceInfo,    __in_ecount(dwLength) LPCWSTR                pszText,    __in                  DWORD                  dwLength,    __in                  DWORD                  dwIndex,    __in_opt              PMAPPING_OPTIONS       pOptions,    __inout               PMAPPING_PROPERTY_BAG  pbag    );																		
MapUserPhysicalPages(    __in PVOID VirtualAddress,    __in ULONG_PTR NumberOfPages,    __in_ecount_opt(NumberOfPages) PULONG_PTR PageArray    );																		
MapUserPhysicalPagesScatter(    __in_ecount(NumberOfPages) PVOID *VirtualAddresses,    __in ULONG_PTR NumberOfPages,    __in_ecount_opt(NumberOfPages) PULONG_PTR PageArray    );																		
MapViewOfFile(    __in HANDLE hFileMappingObject,    __in DWORD dwDesiredAccess,    __in DWORD dwFileOffsetHigh,    __in DWORD dwFileOffsetLow,    __in SIZE_T dwNumberOfBytesToMap    );																		
MapViewOfFileEx(    __in     HANDLE hFileMappingObject,    __in     DWORD dwDesiredAccess,    __in     DWORD dwFileOffsetHigh,    __in     DWORD dwFileOffsetLow,    __in     SIZE_T dwNumberOfBytesToMap,    __in_opt LPVOID lpBaseAddress    );																		
MapViewOfFileExNuma(    __in     HANDLE hFileMappingObject,    __in     DWORD dwDesiredAccess,    __in     DWORD dwFileOffsetHigh,    __in     DWORD dwFileOffsetLow,    __in     SIZE_T dwNumberOfBytesToMap,    __in_opt LPVOID lpBaseAddress,    __in     DWORD nndPreferred    );																		
MapVirtualKeyA(    __in UINT uCode,    __in UINT uMapType);																		
MapVirtualKeyExA(    __in UINT uCode,    __in UINT uMapType,    __in_opt HKL dwhkl);																		
MapVirtualKeyExW(    __in UINT uCode,    __in UINT uMapType,    __in_opt HKL dwhkl);																		
MapVirtualKeyW(    __in UINT uCode,    __in UINT uMapType);																		
MapWindowPoints(__in_opt HWND hWndFrom,__in_opt HWND hWndTo,__inout_ecount(cPoints) LPPOINT lpPoints,__in UINT cPoints);																		
MaskBlt( __in HDC hdcDest, __in int xDest, __in int yDest, __in int width, __in int height,              __in HDC hdcSrc, __in int xSrc, __in int ySrc, __in HBITMAP hbmMask, __in int xMask, __in int yMask, __in DWORD rop);																		
McastApiCleanup(    VOID    );																		
McastApiStartup(    IN  OUT  PDWORD   Version    );																		
McastEnumerateScopes(    IN     IP_ADDR_FAMILY       AddrFamily,    IN     BOOL                 ReQuery,    IN OUT PMCAST_SCOPE_ENTRY   pScopeList,    IN OUT PDWORD               pScopeLen,    OUT    PDWORD               pScopeCount    );																		
McastGenUID(    IN OUT LPMCAST_CLIENT_UID    pRequestID    );																		
McastReleaseAddress(    IN     IP_ADDR_FAMILY          AddrFamily,    IN     LPMCAST_CLIENT_UID      pRequestID,    IN     PMCAST_LEASE_REQUEST    pReleaseRequest    );																		
McastRenewAddress(    IN     IP_ADDR_FAMILY           AddrFamily,    IN     LPMCAST_CLIENT_UID       pRequestID,    IN     PMCAST_LEASE_REQUEST     pRenewRequest,    IN OUT PMCAST_LEASE_RESPONSE    pRenewResponse    );																		
McastRequestAddress(    IN     IP_ADDR_FAMILY           AddrFamily,    IN     LPMCAST_CLIENT_UID       pRequestID,    IN     PMCAST_SCOPE_CTX         pScopeCtx,    IN     PMCAST_LEASE_REQUEST     pAddrRequest,    IN OUT PMCAST_LEASE_RESPONSE    pAddrResponse    );																		
MenuHelp(UINT uMsg, WPARAM wParam, LPARAM lParam, HMENU hMainMenu, HINSTANCE hInst, HWND hwndStatus, __in_xcount(2 + 2n && n >= 1) UINT *lpwIDs);																		
MenuItemFromPoint(    __in_opt HWND hWnd,    __in HMENU hMenu,    __in POINT ptScreen);																		
MergeVirtualDisk(    __in     HANDLE                         VirtualDiskHandle,    __in     MERGE_VIRTUAL_DISK_FLAG        Flags,    __in     PMERGE_VIRTUAL_DISK_PARAMETERS Parameters,    __in_opt LPOVERLAPPED                   Overlapped    );																		
MessageBeep(__in UINT uType);
MessageBox(__in_opt HWND hWnd,__in_opt LPCSTR lpText,__in_opt LPCSTR lpCaption,__in UINT uType);																				
MessageBoxA(__in_opt HWND hWnd,__in_opt LPCSTR lpText,__in_opt LPCSTR lpCaption,__in UINT uType);																		
MessageBoxExA(__in_opt HWND hWnd,__in_opt LPCSTR lpText,__in_opt LPCSTR lpCaption,__in UINT uType,__in WORD wLanguageId);																		
MessageBoxExW(__in_opt HWND hWnd,__in_opt LPCWSTR lpText,__in_opt LPCWSTR lpCaption,__in UINT uType,__in WORD wLanguageId);																		
MessageBoxIndirectA(__in CONST MSGBOXPARAMSA * lpmbp);																		
MessageBoxIndirectW(__in CONST MSGBOXPARAMSW * lpmbp);																		
MessageBoxW(__in_opt HWND hWnd,__in_opt LPCWSTR lpText,__in_opt LPCWSTR lpCaption,__in UINT uType);																		
MiniDumpReadDumpStream( __in PVOID BaseOfDump, __in ULONG StreamNumber, __deref_out_opt PMINIDUMP_DIRECTORY * Dir, __deref_out_opt PVOID * StreamPointer, __out_opt ULONG * StreamSize    );																		
MiniDumpReadDumpStream( __in PVOID BaseOfDump, __in ULONG StreamNumber, __deref_out_opt PMINIDUMP_DIRECTORY * Dir,    __deref_out_opt PVOID * StreamPointer, __out_opt ULONG * StreamSize    );																		
MiniDumpWriteDump( __in HANDLE hProcess, __in DWORD ProcessId, __in HANDLE hFile, __in MINIDUMP_TYPE DumpType, __in_opt PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam, __in_opt PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam, __in_opt PMINIDUMP_CALLBACK_INFORMATION CallbackParam );																		
MiniDumpWriteDump( __in HANDLE hProcess, __in DWORD ProcessId, __in HANDLE hFile, __in MINIDUMP_TYPE DumpType, __in_opt PMINIDUMP_EXCEPTION_INFORMATION ExceptionParam, __in_opt PMINIDUMP_USER_STREAM_INFORMATION UserStreamParam, __in_opt PMINIDUMP_CALLBACK_INFORMATION CallbackParam );																		
ModifyMenuA( __in HMENU hMnu, __in UINT uPosition, __in UINT uFlags, __in UINT_PTR uIDNewItem, __in_opt LPCSTR lpNewItem);																		
ModifyMenuW( __in HMENU hMnu, __in UINT uPosition, __in UINT uFlags, __in UINT_PTR uIDNewItem, __in_opt LPCWSTR lpNewItem);																		
ModifyWorldTransform( __in HDC hdc, __in_opt CONST XFORM * lpxf, __in DWORD mode);																		
Module32First( HANDLE hSnapshot, LPMODULEENTRY32 lpme );																		
Module32FirstW( HANDLE hSnapshot, LPMODULEENTRY32W lpme );																		
Module32Next( HANDLE hSnapshot, LPMODULEENTRY32 lpme );																		
Module32NextW( HANDLE hSnapshot, LPMODULEENTRY32W lpme );																		
MonitorFromPoint( __in POINT pt, __in DWORD dwFlags);																		
MonitorFromRect( __in LPCRECT lprc, __in DWORD dwFlags);																		
MonitorFromWindow( __in HWND hwnd, __in DWORD dwFlags);																		
mouse_event( __in DWORD dwFlags, __in DWORD dx, __in DWORD dy, __in DWORD dwData, __in ULONG_PTR dwExtraInfo);																		
MoveClusterGroup( __in HGROUP hGroup, __in_opt HNODE hDestinationNode );																		
MoveFileA( __in LPCSTR lpExistingFileName, __in LPCSTR lpNewFileName );																		
MoveFileExA( __in LPCSTR lpExistingFileName, __in_opt LPCSTR lpNewFileName, __in DWORD dwFlags );																		
MoveFileExW( __in LPCWSTR lpExistingFileName, __in_opt LPCWSTR lpNewFileName, __in DWORD dwFlags );																		
MoveFileTransactedA(    __in     LPCSTR lpExistingFileName,    __in_opt LPCSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in     DWORD dwFlags,    __in     HANDLE hTransaction    );																		
MoveFileTransactedW(    __in     LPCWSTR lpExistingFileName,    __in_opt LPCWSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in     DWORD dwFlags,    __in     HANDLE hTransaction    );																		
MoveFileW(    __in LPCWSTR lpExistingFileName,    __in LPCWSTR lpNewFileName    );																		
MoveFileWithProgressA(    __in     LPCSTR lpExistingFileName,    __in_opt LPCSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in     DWORD dwFlags    );																		
MoveFileWithProgressW(    __in     LPCWSTR lpExistingFileName,    __in_opt LPCWSTR lpNewFileName,    __in_opt LPPROGRESS_ROUTINE lpProgressRoutine,    __in_opt LPVOID lpData,    __in     DWORD dwFlags    );																		
MoveToEx( __in HDC hdc, __in int x, __in int y, __out_opt LPPOINT lppt);																		
MoveWindow(    __in HWND hWnd,    __in int X,    __in int Y,    __in int nWidth,    __in int nHeight,    __in BOOL bRepaint);																		
MQADsPathToFormatName(    __in LPCWSTR lpwcsADsPath,    __out_ecount(*lpdwFormatNameLength) LPWSTR lpwcsFormatName,    __inout LPDWORD lpdwFormatNameLength    );																		
MQBeginTransaction(    __out ITransaction **ppTransaction    );																		
MQCloseCursor(    __in HANDLE hCursor    );																		
MQCloseQueue(    __in QUEUEHANDLE hQueue    );																		
MQCreateCursor(    __in QUEUEHANDLE hQueue,    __out PHANDLE phCursor    );																		
MQCreateQueue(    __in_opt PSECURITY_DESCRIPTOR pSecurityDescriptor,    __inout MQQUEUEPROPS* pQueueProps,    __out_ecount_opt(*lpdwFormatNameLength)LPWSTR lpwcsFormatName,    __inout LPDWORD lpdwFormatNameLength    );																		
MQDeleteQueue(    __in LPCWSTR lpwcsFormatName    );																		
MQFreeMemory(    __in PVOID pvMemory    );																		
MQFreeSecurityContext( __in HANDLE hSecurityContext );																		
MQGetMachineProperties( __in_opt LPCWSTR lpwcsMachineName, __in_opt const GUID* pguidMachineId, __inout MQQMPROPS* pQMProps );																		
MQGetOverlappedResult( __in LPOVERLAPPED lpOverlapped );																		
MQGetPrivateComputerInformation(    __in_opt LPCWSTR lpwcsComputerName,    __inout MQPRIVATEPROPS* pPrivateProps    );																		
MQGetQueueProperties(    __in LPCWSTR lpwcsFormatName,    __inout MQQUEUEPROPS* pQueueProps    );																		
MQGetQueueSecurity(    __in LPCWSTR lpwcsFormatName,    __in SECURITY_INFORMATION RequestedInformation,    __out_bcount(nLength)  PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in DWORD nLength,    __out LPDWORD lpnLengthNeeded    );																		
MQGetSecurityContext(    __in_bcount_opt(dwCertBufferLength) PVOID lpCertBuffer,    __in DWORD dwCertBufferLength,    __out HANDLE* phSecurityContext    );																		
MQGetSecurityContextEx(    __in_bcount_opt(dwCertBufferLength) PVOID lpCertBuffer,    __in DWORD dwCertBufferLength,    __out HANDLE* phSecurityContext    );																		
MQHandleToFormatName(    __in QUEUEHANDLE hQueue,    __out_ecount(*lpdwFormatNameLength) LPWSTR lpwcsFormatName,    __inout LPDWORD lpdwFormatNameLength    );																		
MQInstanceToFormatName(    __in GUID* pGuid,    __out_ecount(*lpdwFormatNameLength)  LPWSTR lpwcsFormatName,    __inout LPDWORD lpdwFormatNameLength    );																		
MQLocateBegin(    __in_opt LPCWSTR lpwcsContext,    __in_opt MQRESTRICTION* pRestriction,    __in MQCOLUMNSET* pColumns,    __in MQSORTSET* pSort,    __out PHANDLE phEnum    );																		
MQLocateEnd(    __in HANDLE hEnum    );																		
MQLocateNext(    __in HANDLE hEnum,    __inout DWORD* pcProps,    __out MQPROPVARIANT aPropVar[]    );																		
MQMarkMessageRejected(    __in HANDLE hQueue,    __in ULONGLONG ullLookupId    );																		
MQMgmtAction(    __in_opt LPCWSTR pComputerName,    __in LPCWSTR pObjectName,    __in LPCWSTR pAction    );																		
MQMgmtGetInfo(    __in_opt LPCWSTR pComputerName,    __in LPCWSTR pObjectName,    __inout MQMGMTPROPS* pMgmtProps    );																		
MQMoveMessage(    __in QUEUEHANDLE hSourceQueue,    __in QUEUEHANDLE hDestinationQueue,    __in ULONGLONG ullLookupId,    __in_opt ITransaction *pTransaction    );																		
MQOpenQueue(    __in LPCWSTR lpwcsFormatName,    __in DWORD dwAccess,    __in DWORD dwShareMode,    __out QUEUEHANDLE* phQueue    );																		
MQPathNameToFormatName(    __in LPCWSTR lpwcsPathName,    __out_ecount(*lpdwFormatNameLength)  LPWSTR lpwcsFormatName,    __inout LPDWORD lpdwFormatNameLength    );																		
MQPurgeQueue(    __in QUEUEHANDLE hQueue    );																		
MQReceiveMessage(    __in QUEUEHANDLE hSource,    __in DWORD dwTimeout,    __in DWORD dwAction,    __inout_opt MQMSGPROPS* pMessageProps,    __inout_opt LPOVERLAPPED lpOverlapped,    __in_opt PMQRECEIVECALLBACK fnReceiveCallback,    __in_opt HANDLE hCursor,    __in_opt ITransaction* pTransaction    );																		
MQReceiveMessageByLookupId(    __in QUEUEHANDLE hSource,    __in ULONGLONG ullLookupId,    __in DWORD dwLookupAction,    __inout_opt MQMSGPROPS* pMessageProps,    __inout_opt LPOVERLAPPED lpOverlapped,    __in_opt PMQRECEIVECALLBACK fnReceiveCallback,    __in_opt ITransaction *pTransaction    );																		
MQRegisterCertificate(    __in DWORD dwFlags,    __in PVOID lpCertBuffer,    __in DWORD dwCertBufferLength    );																		
MQSendMessage(    __in QUEUEHANDLE hDestinationQueue,    __in MQMSGPROPS* pMessageProps,    __in_opt ITransaction *pTransaction    );																		
MQSetQueueProperties(    __in LPCWSTR lpwcsFormatName,    __inout MQQUEUEPROPS* pQueueProps    );																		
MQSetQueueSecurity(    __in LPCWSTR lpwcsFormatName,    __in SECURITY_INFORMATION SecurityInformation,    __in_opt PSECURITY_DESCRIPTOR pSecurityDescriptor    );																		
MsgWaitForMultipleObjects(    __in DWORD nCount,    __in_ecount_opt(nCount) CONST HANDLE *pHandles,    __in BOOL fWaitAll,    __in DWORD dwMilliseconds,    __in DWORD dwWakeMask);																		
MsgWaitForMultipleObjectsEx(    __in DWORD nCount,    __in_ecount_opt(nCount) CONST HANDLE *pHandles,    __in DWORD dwMilliseconds,    __in DWORD dwWakeMask,    __in DWORD dwFlags);																		
MulDiv(    __in int nNumber,    __in int nNumerator,    __in int nDenominator    );																		
MultiByteToWideChar(    __in UINT     CodePage,    __in DWORD    dwFlags,    __in_bcount(cbMultiByte) LPCSTR   lpMultiByteStr,    __in int      cbMultiByte,    __out_ecount_opt(cchWideChar) __transfer(lpMultiByteStr) LPWSTR  lpWideCharStr,    __in int      cchWideChar);																		
MxdcGetPDEVAdjustment(__in HANDLE hPrinter,ULONG cbDevMode,__in_bcount(cbDevMode) const DEVMODE *pDevMode,ULONG cbIn,__in_bcount_opt(cbIn) const VOID *pvIn,ULONG cbPrintPropertiesCollection,__inout_bcount(cbPrintPropertiesCollection) PrintPropertiesCollection *pPrintPropertiesCollection);																		
NCryptCreatePersistedKey(    __in    NCRYPT_PROV_HANDLE hProvider,    __out   NCRYPT_KEY_HANDLE *phKey,    __in    LPCWSTR pszAlgId,    __in_opt LPCWSTR pszKeyName,    __in    DWORD   dwLegacyKeySpec,    __in    DWORD   dwFlags);																		
NCryptDecrypt(    __in    NCRYPT_KEY_HANDLE hKey,    __in_bcount_opt(cbInput) PBYTE pbInput,    __in    DWORD   cbInput,    __in_opt    VOID *pPaddingInfo,    __out_bcount_part_opt(cbOutput, *pcbResult) PBYTE pbOutput,    __in    DWORD   cbOutput,    __out   DWORD * pcbResult,    __in    DWORD   dwFlags);																		
NCryptDeleteKey(    __in    NCRYPT_KEY_HANDLE hKey,    __in    DWORD   dwFlags);																		
NCryptDeriveKey(    __in        NCRYPT_SECRET_HANDLE hSharedSecret,    __in        LPCWSTR              pwszKDF,    __in_opt    NCryptBufferDesc     *pParameterList,    __out_bcount_part_opt(cbDerivedKey, *pcbResult) PBYTE pbDerivedKey,    __in        DWORD                cbDerivedKey,    __out       DWORD                *pcbResult,    __in        ULONG                dwFlags);																		
NCryptEncrypt(    __in    NCRYPT_KEY_HANDLE hKey,    __in_bcount_opt(cbInput) PBYTE pbInput,    __in    DWORD   cbInput,    __in_opt    VOID *pPaddingInfo,    __out_bcount_part_opt(cbOutput, *pcbResult) PBYTE pbOutput,    __in    DWORD   cbOutput,    __out   DWORD * pcbResult,    __in    DWORD   dwFlags);																		
NCryptEnumAlgorithms(    __in    NCRYPT_PROV_HANDLE hProvider,    __in    DWORD   dwAlgOperations,    __out   DWORD * pdwAlgCount,    __deref_out_ecount(*pdwAlgCount) NCryptAlgorithmName **ppAlgList,    __in    DWORD   dwFlags);																		
NCryptEnumKeys(    __in    NCRYPT_PROV_HANDLE hProvider,    __in_opt LPCWSTR pszScope,    __deref_out NCryptKeyName **ppKeyName,    __inout PVOID * ppEnumState,    __in    DWORD   dwFlags);																		
NCryptEnumStorageProviders(    __out   DWORD * pdwProviderCount,    __deref_out_ecount(*pdwProviderCount) NCryptProviderName **ppProviderList,    __in    DWORD   dwFlags);																		
NCryptExportKey(    __in    NCRYPT_KEY_HANDLE hKey,    __in_opt NCRYPT_KEY_HANDLE hExportKey,    __in    LPCWSTR pszBlobType,    __in_opt NCryptBufferDesc *pParameterList,    __out_bcount_part_opt(cbOutput, *pcbResult) PBYTE pbOutput,    __in    DWORD   cbOutput,    __out   DWORD * pcbResult,    __in    DWORD   dwFlags);																		
NCryptFinalizeKey(    __in    NCRYPT_KEY_HANDLE hKey,    __in    DWORD   dwFlags);																		
NCryptFreeBuffer(    __deref PVOID   pvInput);																		
NCryptFreeObject(    __in    NCRYPT_HANDLE hObject);																		
NCryptGetProperty(    __in    NCRYPT_HANDLE hObject,    __in    LPCWSTR pszProperty,    __out_bcount_part_opt(cbOutput, *pcbResult) PBYTE pbOutput,    __in    DWORD   cbOutput,    __out   DWORD * pcbResult,    __in    DWORD   dwFlags);																		
NCryptImportKey(    __in    NCRYPT_PROV_HANDLE hProvider,    __in_opt NCRYPT_KEY_HANDLE hImportKey,    __in    LPCWSTR pszBlobType,    __in_opt NCryptBufferDesc *pParameterList,    __out   NCRYPT_KEY_HANDLE *phKey,    __in_bcount(cbData) PBYTE pbData,    __in    DWORD   cbData,    __in    DWORD   dwFlags);																		
NCryptIsAlgSupported(    __in    NCRYPT_PROV_HANDLE hProvider,    __in    LPCWSTR pszAlgId,    __in    DWORD   dwFlags);																		
NCryptIsKeyHandle(    __in    NCRYPT_KEY_HANDLE hKey);																		
NCryptNotifyChangeKey(    __in    NCRYPT_PROV_HANDLE hProvider,    __inout HANDLE *phEvent,    __in    DWORD   dwFlags);																		
NCryptOpenKey(    __inout NCRYPT_PROV_HANDLE hProvider,    __out   NCRYPT_KEY_HANDLE *phKey,    __in    LPCWSTR pszKeyName,    __in_opt DWORD  dwLegacyKeySpec,    __in    DWORD   dwFlags);																		
NCryptOpenStorageProvider(    __out   NCRYPT_PROV_HANDLE *phProvider,    __in_opt LPCWSTR pszProviderName,    __in    DWORD   dwFlags);																		
NCryptSecretAgreement(    __in    NCRYPT_KEY_HANDLE hPrivKey,    __in    NCRYPT_KEY_HANDLE hPubKey,    __out   NCRYPT_SECRET_HANDLE *phAgreedSecret,    __in    DWORD   dwFlags);																		
NCryptSetProperty(    __in    NCRYPT_HANDLE hObject,    __in    LPCWSTR pszProperty,    __in_bcount(cbInput) PBYTE pbInput,    __in    DWORD   cbInput,    __in    DWORD   dwFlags);																		
NCryptSignHash(    __in    NCRYPT_KEY_HANDLE hKey,    __in_opt    VOID *pPaddingInfo,    __in_bcount(cbHashValue) PBYTE pbHashValue,    __in    DWORD   cbHashValue,    __out_bcount_part_opt(cbSignature, *pcbResult) PBYTE pbSignature,    __in    DWORD   cbSignature,    __out   DWORD * pcbResult,    __in    DWORD   dwFlags);																		
NCryptTranslateHandle(    __out_opt NCRYPT_PROV_HANDLE *phProvider,    __out   NCRYPT_KEY_HANDLE *phKey,    __in    HCRYPTPROV hLegacyProv,    __in_opt HCRYPTKEY hLegacyKey,    __in_opt DWORD  dwLegacyKeySpec,    __in    DWORD   dwFlags);																		
NCryptVerifySignature(    __in    NCRYPT_KEY_HANDLE hKey,    __in_opt    VOID *pPaddingInfo,    __in_bcount(cbHashValue) PBYTE pbHashValue,    __in    DWORD   cbHashValue,    __in_bcount(cbSignature) PBYTE pbSignature,    __in    DWORD   cbSignature,    __in    DWORD   dwFlags);																		
NdfCreateGroupingIncident(__in_opt LPCWSTR CloudName,__in_opt LPCWSTR GroupName,__in_opt LPCWSTR Identity, __in_opt LPCWSTR Invitation,__in_opt SOCKET_ADDRESS_LIST * Addresses,__in_opt LPCWSTR appId,	__deref_out NDFHANDLE *handle);																	
NeedCurrentDirectoryForExePathA(    __in LPCSTR ExeName    );																		
NeedCurrentDirectoryForExePathW(    __in LPCWSTR ExeName    );																		
Netbios(    PNCB pncb    );																		
NhpAllocateAndGetInterfaceInfoFromStack(    __deref_out IP_INTERFACE_NAME_INFO  **ppTable,    __out       PDWORD                  pdwCount,    __in        BOOL                    bOrder,    __in        HANDLE                  hHeap,    __in        DWORD                   dwFlags    );																		
NormalizeFileForPatchSignature( __inout_bcount( FileSize ) PVOID FileBuffer,ULONG FileSize, __in ULONG OptionFlags, __in_opt PATCH_OPTION_DATA* OptionData, __in ULONG NewFileCoffBase, __in ULONG NewFileCoffTime, __in ULONG IgnoreRangeCount, __in_ecount_opt( IgnoreRangeCount ) PPATCH_IGNORE_RANGE IgnoreRangeArray, __in ULONG RetainRangeCount, __in_ecount_opt( RetainRangeCount ) PPATCH_RETAIN_RANGE RetainRangeArray );																		
NotifyAddrChange(    __out PHANDLE      Handle,    __in  LPOVERLAPPED overlapped    );																		
NotifyBootConfigStatus(    __in            BOOL                    BootAcceptable    );																		
NotifyChangeEventLog(    __in HANDLE  hEventLog,    __in HANDLE  hEvent    );																		
NotifyRouteChange(    __out PHANDLE      Handle,    __in  LPOVERLAPPED overlapped    );																		
NotifyServiceStatusChangeA (    __in        SC_HANDLE               hService,    __in        DWORD                   dwNotifyMask,    __in        PSERVICE_NOTIFYA        pNotifyBuffer    );																		
NotifyServiceStatusChangeW (    __in        SC_HANDLE               hService,    __in        DWORD                   dwNotifyMask,    __in        PSERVICE_NOTIFYW        pNotifyBuffer    );																		
NotifyUILanguageChange(    __in        DWORD dwFlags,    __in_opt        PCWSTR pcwstrNewLanguage,    __in_opt    PCWSTR pcwstrPreviousLanguage,    __in        DWORD dwReserved,    __out_opt   PDWORD pdwStatusRtrn);																		
NotifyWinEvent(    __in DWORD event,    __in HWND  hwnd,    __in LONG  idObject,    __in LONG  idChild);																		
NtGdiStretchDIBitsInternal(    __in HDC hdc,    __in int xDst,    __in int yDst,    __in int cxDst,    __in int cyDst,    __in int xSrc,    __in int ySrc,    __in int cxSrc,    __in int cySrc,    __in_bcount_opt(cjMaxBits) LPBYTE pjInit,    __in LPBITMAPINFO pbmi,    __in DWORD dwUsage,    __in DWORD dwRop4,    __in UINT cjMaxInfo,    __in UINT cjMaxBits,    __in HANDLE hcmXform    );																		
ObjectCloseAuditAlarmA (    __in LPCSTR SubsystemName,    __in LPVOID HandleId,    __in BOOL GenerateOnClose    );																		
ObjectCloseAuditAlarmW (    __in LPCWSTR SubsystemName,    __in LPVOID HandleId,    __in BOOL GenerateOnClose    );																		
ObjectDeleteAuditAlarmA (    __in LPCSTR SubsystemName,    __in LPVOID HandleId,    __in BOOL GenerateOnClose    );																		
ObjectDeleteAuditAlarmW (    __in LPCWSTR SubsystemName,    __in LPVOID HandleId,    __in BOOL GenerateOnClose    );																		
ObjectOpenAuditAlarmA (    __in     LPCSTR SubsystemName,    __in     LPVOID HandleId,    __in     LPSTR ObjectTypeName,    __in_opt LPSTR ObjectName,    __in     PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in     HANDLE ClientToken,    __in     DWORD DesiredAccess,    __in     DWORD GrantedAccess,    __in_opt PPRIVILEGE_SET Privileges,    __in     BOOL ObjectCreation,    __in     BOOL AccessGranted,    __out    LPBOOL GenerateOnClose    );																		
ObjectOpenAuditAlarmW (    __in     LPCWSTR SubsystemName,    __in     LPVOID HandleId,    __in     LPWSTR ObjectTypeName,    __in_opt LPWSTR ObjectName,    __in     PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in     HANDLE ClientToken,    __in     DWORD DesiredAccess,    __in     DWORD GrantedAccess,    __in_opt PPRIVILEGE_SET Privileges,    __in     BOOL ObjectCreation,    __in     BOOL AccessGranted,    __out    LPBOOL GenerateOnClose    );																		
ObjectPrivilegeAuditAlarmA (    __in LPCSTR SubsystemName,    __in LPVOID HandleId,    __in HANDLE ClientToken,    __in DWORD DesiredAccess,    __in PPRIVILEGE_SET Privileges,    __in BOOL AccessGranted    );																		
ObjectPrivilegeAuditAlarmW (    __in LPCWSTR SubsystemName,    __in LPVOID HandleId,    __in HANDLE ClientToken,    __in DWORD DesiredAccess,    __in PPRIVILEGE_SET Privileges,    __in BOOL AccessGranted    );																		
OemKeyScan(    __in WORD wOemChar);																		
OemToCharA(    __in_xcount(strlen(pSrc) + 1) LPCSTR pSrc,    __out_xcount(strlen(pSrc) + 1) LPSTR pDst);																		
OemToCharBuffA(    __in LPCSTR lpszSrc,    __out_ecount(cchDstLength) LPSTR lpszDst,    __in DWORD cchDstLength);																		
OemToCharBuffW(    __in LPCSTR lpszSrc,    __out_ecount(cchDstLength) LPWSTR lpszDst,    __in DWORD cchDstLength);																		
OemToCharW(    __in_xcount(strlen(pSrc) + 1) LPCSTR pSrc,    __out_xcount(strlen(pSrc) + 1) LPWSTR pDst);																		
OfflineClusterGroup(    __in HGROUP hGroup    );																		
OfflineClusterResource(    __in HRESOURCE hResource    );																		
OffsetClipRgn(__in HDC hdc, __in int x, __in int y);																		
OffsetRect(__inout LPRECT lprc,__in int dx,__in int dy);																		
OffsetRgn(__in HRGN hrgn, __in int x, __in int y);																		
OffsetViewportOrgEx( __in HDC hdc, __in int x, __in int y, __out_opt LPPOINT lppt);																		
OffsetWindowOrgEx( __in HDC hdc, __in int x, __in int y, __out_opt LPPOINT lppt);																		
OnlineClusterGroup(    __in HGROUP hGroup,    __in_opt HNODE hDestinationNode    );																		
OnlineClusterResource(    __in HRESOURCE hResource    );																		
OpenBackupEventLogA (    __in_opt LPCSTR lpUNCServerName,    __in     LPCSTR lpFileName    );																		
OpenBackupEventLogW (    __in_opt LPCWSTR lpUNCServerName,    __in     LPCWSTR lpFileName    );																		
OpenClipboard(    __in_opt HWND hWndNewOwner);																		
OpenCluster(    __in_opt LPCWSTR lpszClusterName    );																		
OpenClusterEx(    __in_opt LPCWSTR lpszClusterName,    __in DWORD DesiredAccess,    __out_opt DWORD* GrantedAccess    );																		
OpenClusterGroup(    __in HCLUSTER hCluster,    __in LPCWSTR lpszGroupName    );																		
OpenClusterGroupEx(    __in      HCLUSTER hCluster,    __in_opt  LPCWSTR lpszGroupName,    __in      DWORD dwDesiredAccess,    __out_opt DWORD* lpdwGrantedAccess    );																		
OpenClusterNetInterface(    __in HCLUSTER hCluster,    __in LPCWSTR lpszInterfaceName    );																		
OpenClusterNetInterfaceEx(    __in      HCLUSTER hCluster,    __in_opt  LPCWSTR lpszInterfaceName,    __in      DWORD dwDesiredAccess,    __out_opt DWORD* lpdwGrantedAccess    );																		
OpenClusterNetwork(    __in HCLUSTER hCluster,    __in LPCWSTR lpszNetworkName    );																		
OpenClusterNetworkEx(    __in      HCLUSTER hCluster,    __in_opt  LPCWSTR lpszNetworkName,    __in      DWORD dwDesiredAccess,    __out_opt DWORD* lpdwGrantedAccess    );																		
OpenClusterNode(    __in HCLUSTER hCluster,    __in LPCWSTR lpszNodeName    );																		
OpenClusterNodeEx(    __in      HCLUSTER hCluster,    __in_opt  LPCWSTR lpszNodeName,    __in      DWORD dwDesiredAccess,    __out_opt DWORD* lpdwGrantedAccess    );																		
OpenClusterResource(    __in HCLUSTER hCluster,    __in LPCWSTR lpszResourceName    );																		
OpenClusterResourceEx(    __in      HCLUSTER hCluster,    __in_opt  LPCWSTR lpszResourceName,    __in      DWORD dwDesiredAccess,    __out_opt DWORD* lpdwGrantedAccess    );																		
OpenDesktopA(    __in LPCSTR lpszDesktop,    __in DWORD dwFlags,    __in BOOL fInherit,    __in ACCESS_MASK dwDesiredAccess);																		
OpenDesktopW(    __in LPCWSTR lpszDesktop,    __in DWORD dwFlags,    __in BOOL fInherit,    __in ACCESS_MASK dwDesiredAccess);																		
OpenEncryptedFileRawA(    __in        LPCSTR lpFileName,    __in        ULONG    ulFlags,    __deref_out PVOID   *pvContext    );																		
OpenEncryptedFileRawW(    __in        LPCWSTR lpFileName,    __in        ULONG    ulFlags,    __deref_out PVOID   *pvContext    );																		
OpenEnlistment (    IN DWORD              dwDesiredAccess,    IN HANDLE             ResourceManagerHandle,    IN LPGUID             EnlistmentId    );																		
OpenEventA(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCSTR lpName    );																		
OpenEventLogA (    __in_opt LPCSTR lpUNCServerName,    __in     LPCSTR lpSourceName    );																		
OpenEventLogW (    __in_opt LPCWSTR lpUNCServerName,    __in     LPCWSTR lpSourceName    );																		
OpenEventW(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCWSTR lpName    );																		
OpenFile(    __in    LPCSTR lpFileName,    __inout LPOFSTRUCT lpReOpenBuff,    __in    UINT uStyle    );																		
OpenFileById (    __in     HANDLE hVolumeHint,    __in     LPFILE_ID_DESCRIPTOR lpFileId,    __in     DWORD dwDesiredAccess,    __in     DWORD dwShareMode,    __in_opt LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in     DWORD dwFlagsAndAttributes    );																		
OpenFileMappingA(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCSTR lpName    );																		
OpenFileMappingW(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCWSTR lpName    );																		
OpenIcon(    __in  HWND hWnd);																		
OpenInputDesktop(    __in DWORD dwFlags,    __in BOOL fInherit,    __in ACCESS_MASK dwDesiredAccess);																		
OpenJobObjectA(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCSTR lpName    );																		
OpenJobObjectW(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCWSTR lpName    );																		
OpenMutexA(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCSTR lpName    );																		
OpenMutexW(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCWSTR lpName    );																		
OpenPersonalTrustDBDialog(    __in_opt HWND hwndParent    );																		
OpenPersonalTrustDBDialogEx(    __in_opt HWND hwndParent,    __in DWORD dwFlags,    __inout_opt PVOID *pvReserved    );																		
OpenPrinterA(__in_opt    LPSTR             pPrinterName,__out       LPHANDLE            phPrinter,__in_opt    LPPRINTER_DEFAULTSA pDefault);																		
OpenPrinterW(__in_opt    LPWSTR             pPrinterName,__out       LPHANDLE            phPrinter,__in_opt    LPPRINTER_DEFAULTSW pDefault);																		
OpenPrivateNamespaceA(    __in     LPVOID lpBoundaryDescriptor,    __in     LPCSTR lpAliasPrefix    );																		
OpenPrivateNamespaceW(    __in     LPVOID lpBoundaryDescriptor,    __in     LPCWSTR lpAliasPrefix    );																		
OpenProcess(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in DWORD dwProcessId    );																		
OpenProcessToken (    __in        HANDLE ProcessHandle,    __in        DWORD DesiredAccess,    __deref_out PHANDLE TokenHandle    );																		
OpenResourceManager (    IN DWORD dwDesiredAccess,    IN HANDLE TmHandle,    IN LPGUID ResourceManagerId    );																		
OpenSCManagerA(    __in_opt        LPCSTR                lpMachineName,    __in_opt        LPCSTR                lpDatabaseName,    __in            DWORD                   dwDesiredAccess    );																		
OpenSCManagerW(    __in_opt        LPCWSTR                lpMachineName,    __in_opt        LPCWSTR                lpDatabaseName,    __in            DWORD                   dwDesiredAccess    );																		
OpenSemaphoreA(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCSTR lpName    );																		
OpenSemaphoreW(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCWSTR lpName    );																		
OpenServiceA(    __in            SC_HANDLE               hSCManager,    __in            LPCSTR                lpServiceName,    __in            DWORD                   dwDesiredAccess    );																		
OpenServiceW(    __in            SC_HANDLE               hSCManager,    __in            LPCWSTR                lpServiceName,    __in            DWORD                   dwDesiredAccess    );																		
OpenThread(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in DWORD dwThreadId    );																		
OpenThreadToken (    __in        HANDLE ThreadHandle,    __in        DWORD DesiredAccess,    __in        BOOL OpenAsSelf,    __deref_out PHANDLE TokenHandle    );																		
OpenTransaction (    IN DWORD dwDesiredAccess,    IN LPGUID TransactionId    );																		
OpenTransactionManager (    __in LPWSTR LogFileName,    IN ACCESS_MASK DesiredAccess,    IN ULONG OpenOptions OPTIONAL    );																		
OpenTransactionManagerById (    __in LPGUID TransactionManagerId,    IN ACCESS_MASK DesiredAccess,    IN ULONG OpenOptions OPTIONAL    );																		
OpenVirtualDisk(    __in     PVIRTUAL_STORAGE_TYPE         VirtualStorageType,    __in     PCWSTR                        Path,    __in     VIRTUAL_DISK_ACCESS_MASK      VirtualDiskAccessMask,    __in     OPEN_VIRTUAL_DISK_FLAG        Flags,    __in_opt POPEN_VIRTUAL_DISK_PARAMETERS Parameters,    __out    PHANDLE                       Handle    );																		
OpenWaitableTimerA(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCSTR lpTimerName    );																		
OpenWaitableTimerW(    __in DWORD dwDesiredAccess,    __in BOOL bInheritHandle,    __in LPCWSTR lpTimerName    );																		
OpenWindowStationA(    __in LPCSTR lpszWinSta,    __in BOOL fInherit,    __in ACCESS_MASK dwDesiredAccess);																		
OpenWindowStationW(    __in LPCWSTR lpszWinSta,    __in BOOL fInherit,    __in ACCESS_MASK dwDesiredAccess);																		
OutputDebugStringA(    __in_opt LPCSTR lpOutputString    );																		
OutputDebugStringW(    __in_opt LPCWSTR lpOutputString    );																		
PaintDesktop(    __in HDC hdc);																		
PaintRgn(__in HDC hdc, __in HRGN hrgn);																		
ParseNetworkString(   __in      CONST WCHAR* NetworkString,   __in      DWORD Types,   __out_opt PNET_ADDRESS_INFO AddressInfo,   __out_opt USHORT* PortNumber,   __out_opt BYTE* PrefixLength   );																		
PatBlt(__in HDC hdc, __in int x, __in int y, __in int w, __in int h, __in DWORD rop);																		
PathToRegion(__in HDC hdc);																		
PauseClusterNode(    __in HNODE hNode    );																		
PeekConsoleInputA(    __in HANDLE hConsoleInput,    __out_ecount(nLength) PINPUT_RECORD lpBuffer,    __in DWORD nLength,    __out LPDWORD lpNumberOfEventsRead    );																		
PeekConsoleInputW(    __in HANDLE hConsoleInput,    __out_ecount(nLength) PINPUT_RECORD lpBuffer,    __in DWORD nLength,    __out LPDWORD lpNumberOfEventsRead    );																		
PeekMessageA(    __out LPMSG lpMsg,    __in_opt HWND hWnd,    __in UINT wMsgFilterMin,    __in UINT wMsgFilterMax,    __in UINT wRemoveMsg);																		
PeekMessageW(    __out LPMSG lpMsg,    __in_opt HWND hWnd,    __in UINT wMsgFilterMin,    __in UINT wMsgFilterMax,    __in UINT wRemoveMsg);																		
PeekNamedPipe(    __in      HANDLE hNamedPipe,    __out_bcount_part_opt(nBufferSize, *lpBytesRead) LPVOID lpBuffer,    __in      DWORD nBufferSize,    __out_opt LPDWORD lpBytesRead,    __out_opt LPDWORD lpTotalBytesAvail,    __out_opt LPDWORD lpBytesLeftThisMessage    );																		
PerfDecrementULongCounterValue(    __in HANDLE Provider,    __inout PPERF_COUNTERSET_INSTANCE Instance,    __in ULONG CounterId,    __in ULONG Value    );																		
PerfDecrementULongCounterValue(__in HANDLE Provider,__inout PPERF_COUNTERSET_INSTANCE Instance,__in ULONG CounterId,__in ULONG Value);																		
PerfDecrementULongLongCounterValue(    __in HANDLE Provider,    __inout PPERF_COUNTERSET_INSTANCE Instance,    __in ULONG CounterId,    __in ULONGLONG Value    );																		
PerfDecrementULongLongCounterValue(__in HANDLE Provider,__inout PPERF_COUNTERSET_INSTANCE Instance,__in ULONG CounterId,__in ULONGLONG Value);																		
PerfDeleteInstance(    __in HANDLE Provider,    __in PPERF_COUNTERSET_INSTANCE InstanceBlock    );																		
PerfDeleteInstance(__in HANDLE Provider,__in PPERF_COUNTERSET_INSTANCE InstanceBlock);																		
PerfIncrementULongCounterValue(    __in HANDLE Provider,    __inout PPERF_COUNTERSET_INSTANCE Instance,    __in ULONG CounterId,    __in ULONG Value    );																		
PerfIncrementULongCounterValue(__in HANDLE Provider,__inout PPERF_COUNTERSET_INSTANCE Instance,__in ULONG CounterId,__in ULONG Value);																		
PerfIncrementULongLongCounterValue(    __in HANDLE Provider,    __inout PPERF_COUNTERSET_INSTANCE Instance,    __in ULONG CounterId,    __in ULONGLONG Value    );																		
PerfIncrementULongLongCounterValue(__in HANDLE Provider,__inout PPERF_COUNTERSET_INSTANCE Instance,__in ULONG CounterId,__in ULONGLONG Value);																		
PerfSetCounterRefValue(    __in HANDLE Provider,    __inout PPERF_COUNTERSET_INSTANCE Instance,    __in ULONG CounterId,    __in PVOID Address    );																		
PerfSetCounterRefValue(__in HANDLE Provider,__inout PPERF_COUNTERSET_INSTANCE Instance,__in ULONG CounterId,__in PVOID Address);																		
PerfSetCounterSetInfo(    __in HANDLE ProviderHandle,    __inout_bcount(TemplateSize) PPERF_COUNTERSET_INFO Template,    __in ULONG TemplateSize    );																		
PerfSetCounterSetInfo(__in HANDLE ProviderHandle,__inout_bcount(TemplateSize) PPERF_COUNTERSET_INFO Template,__in ULONG TemplateSize);																		
PerfSetULongCounterValue(    __in HANDLE Provider,    __inout PPERF_COUNTERSET_INSTANCE Instance,    __in ULONG CounterId,    __in ULONG Value    );																		
PerfSetULongCounterValue(__in HANDLE Provider,__inout PPERF_COUNTERSET_INSTANCE Instance,__in ULONG CounterId,__in ULONG Value);																		
PerfSetULongLongCounterValue(    __in HANDLE Provider,    __inout PPERF_COUNTERSET_INSTANCE Instance,    __in ULONG CounterId,    __in ULONGLONG Value    );																		
PerfSetULongLongCounterValue(__in HANDLE Provider,__inout PPERF_COUNTERSET_INSTANCE Instance,__in ULONG CounterId,__in ULONGLONG Value);																		
PerfStartProvider(    __in LPGUID ProviderGuid,    __in_opt PERFLIBREQUEST ControlCallback,    __out PHANDLE Provider    );																		
PerfStartProvider(__in LPGUID ProviderGuid,__in_opt PERFLIBREQUEST ControlCallback,__out PHANDLE Provider);																		
PerfStartProviderEx(    __in LPGUID ProviderGuid,    __in_opt PPERF_PROVIDER_CONTEXT ProviderContext,    __out PHANDLE Provider    );																		
PerfStartProviderEx(__in LPGUID ProviderGuid,__in_opt PPERF_PROVIDER_CONTEXT ProviderContext,__out PHANDLE Provider);																		
PerfStopProvider(    __in HANDLE ProviderHandle    );																		
PerfStopProvider(__in HANDLE ProviderHandle);																		
PfAddFiltersToInterface(    INTERFACE_HANDLE      ih,    DWORD                 cInFilters,    PPF_FILTER_DESCRIPTOR pfiltIn,    DWORD                 cOutFilters,    PPF_FILTER_DESCRIPTOR pfiltOut,    PFILTER_HANDLE        pfHandle    );																		
PfAddGlobalFilterToInterface(    INTERFACE_HANDLE   pInterface,    GLOBAL_FILTER      gfFilter    );																		
PfBindInterfaceToIndex(    INTERFACE_HANDLE    pInterface,    DWORD               dwIndex,    PFADDRESSTYPE       pfatLinkType,    PBYTE               LinkIPAddress    );																		
PfBindInterfaceToIPAddress(    INTERFACE_HANDLE    pInterface,    PFADDRESSTYPE       pfatType,    PBYTE               IPAddress    );																		
PfCreateInterface(    DWORD            dwName,    PFFORWARD_ACTION inAction,    PFFORWARD_ACTION outAction,    BOOL             bUseLog,    BOOL             bMustBeUnique,    INTERFACE_HANDLE *ppInterface    );																		
PfDeleteInterface(    INTERFACE_HANDLE pInterface    );																		
PfDeleteLog(    VOID    );																		
PfGetInterfaceStatistics(    INTERFACE_HANDLE    pInterface,    PPF_INTERFACE_STATS ppfStats,    PDWORD              pdwBufferSize,    BOOL                fResetCounters    );																		
PfMakeLog(    HANDLE  hEvent    );																		
PfRebindFilters(    INTERFACE_HANDLE    pInterface,    PPF_LATEBIND_INFO   pLateBindInfo    );																		
PfRemoveFilterHandles(    INTERFACE_HANDLE   pInterface,    DWORD              cFilters,    PFILTER_HANDLE     pvHandles    );																		
PfRemoveFiltersFromInterface(    INTERFACE_HANDLE      ih,    DWORD                 cInFilters,    PPF_FILTER_DESCRIPTOR pfiltIn,    DWORD                 cOutFilters,    PPF_FILTER_DESCRIPTOR pfiltOut    );																		
PfRemoveGlobalFilterFromInterface(    INTERFACE_HANDLE   pInterface,    GLOBAL_FILTER      gfFilter    );																		
PfSetLogBuffer(    PBYTE   pbBuffer,    DWORD   dwSize,    DWORD   dwThreshold,    DWORD   dwEntries,    PDWORD  pdwLoggedEntries,    PDWORD  pdwLostEntries,    PDWORD  pdwSizeUsed    );																		
PfTestPacket(    INTERFACE_HANDLE   pInInterface  OPTIONAL,    INTERFACE_HANDLE   pOutInterface OPTIONAL,    DWORD              cBytes,    PBYTE              pbPacket,    PPFFORWARD_ACTION  ppAction    );																		
PfUnBindInterface(    INTERFACE_HANDLE   pInterface    );																		
PFXExportCertStore(    __in HCERTSTORE hStore,    __inout CRYPT_DATA_BLOB* pPFX,    __in LPCWSTR szPassword,    __in DWORD dwFlags);																		
PFXExportCertStoreEx(    __in HCERTSTORE hStore,    __inout CRYPT_DATA_BLOB* pPFX,    __in LPCWSTR szPassword,    __reserved void* pvReserved,    __in DWORD dwFlags);																		
PFXImportCertStore(    __in CRYPT_DATA_BLOB* pPFX,    __in LPCWSTR szPassword,    __in DWORD   dwFlags);																		
PFXIsPFXBlob(    __in CRYPT_DATA_BLOB* pPFX);																		
PFXVerifyPassword(    __in CRYPT_DATA_BLOB* pPFX,    __in LPCWSTR szPassword,    __in DWORD dwFlags);																		
phoneClose(    HPHONE              hPhone    );																		
phoneConfigDialog(    DWORD               dwDeviceID,    HWND                hwndOwner,    LPCSTR              lpszDeviceClass    );																		
phoneConfigDialogA(    DWORD               dwDeviceID,    HWND                hwndOwner,    LPCSTR              lpszDeviceClass    );																		
phoneConfigDialogW(    DWORD               dwDeviceID,    HWND                hwndOwner,    LPCWSTR             lpszDeviceClass    );																		
phoneDevSpecific(    HPHONE              hPhone,    LPVOID              lpParams,    DWORD               dwSize    );																		
phoneGetButtonInfo(    HPHONE              hPhone,    DWORD               dwButtonLampID,    LPPHONEBUTTONINFO   lpButtonInfo    );																		
phoneGetButtonInfoA(    HPHONE              hPhone,    DWORD               dwButtonLampID,    LPPHONEBUTTONINFO   lpButtonInfo    );																		
phoneGetButtonInfoW(    HPHONE              hPhone,    DWORD               dwButtonLampID,    LPPHONEBUTTONINFO   lpButtonInfo    );																		
phoneGetData(    HPHONE              hPhone,    DWORD               dwDataID,    LPVOID              lpData,    DWORD               dwSize    );																		
phoneGetDevCaps(    HPHONEAPP           hPhoneApp,    DWORD               dwDeviceID,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    LPPHONECAPS         lpPhoneCaps    );																		
phoneGetDevCapsA(    HPHONEAPP           hPhoneApp,    DWORD               dwDeviceID,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    LPPHONECAPS         lpPhoneCaps    );																		
phoneGetDevCapsW(    HPHONEAPP           hPhoneApp,    DWORD               dwDeviceID,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    LPPHONECAPS         lpPhoneCaps    );																		
phoneGetDisplay(    HPHONE              hPhone,    LPVARSTRING         lpDisplay    );																		
phoneGetGain(    HPHONE              hPhone,    DWORD               dwHookSwitchDev,    LPDWORD             lpdwGain    );																		
phoneGetHookSwitch(    HPHONE              hPhone,    LPDWORD             lpdwHookSwitchDevs    );																		
phoneGetIcon(    DWORD               dwDeviceID,    LPCSTR              lpszDeviceClass,    LPHICON             lphIcon    );																		
phoneGetIconA(    DWORD               dwDeviceID,    LPCSTR              lpszDeviceClass,    LPHICON             lphIcon    );																		
phoneGetIconW(    DWORD               dwDeviceID,    LPCWSTR             lpszDeviceClass,    LPHICON             lphIcon    );																		
phoneGetID(    HPHONE              hPhone,    LPVARSTRING         lpDeviceID,    LPCSTR              lpszDeviceClass    );																		
phoneGetIDA(    HPHONE              hPhone,    LPVARSTRING         lpDeviceID,    LPCSTR              lpszDeviceClass    );																		
phoneGetIDW(    HPHONE              hPhone,    LPVARSTRING         lpDeviceID,    LPCWSTR             lpszDeviceClass    );																		
phoneGetLamp(    HPHONE              hPhone,    DWORD               dwButtonLampID,    LPDWORD             lpdwLampMode    );																		
phoneGetMessage( HPHONEAPP hPhoneApp, LPPHONEMESSAGE lpMessage, DWORD dwTimeout );																		
phoneGetRing(    HPHONE              hPhone,    LPDWORD             lpdwRingMode,    LPDWORD             lpdwVolume    );																		
phoneGetStatus(    HPHONE              hPhone,    LPPHONESTATUS       lpPhoneStatus    );																		
phoneGetStatusA(    HPHONE              hPhone,    LPPHONESTATUS       lpPhoneStatus    );																		
phoneGetStatusMessages(    HPHONE              hPhone,    LPDWORD             lpdwPhoneStates,    LPDWORD             lpdwButtonModes,    LPDWORD             lpdwButtonStates    );																		
phoneGetStatusW(    HPHONE              hPhone,    LPPHONESTATUS       lpPhoneStatus    );																		
phoneGetVolume(    HPHONE              hPhone,    DWORD               dwHookSwitchDev,    LPDWORD             lpdwVolume    );																		
phoneInitialize(    LPHPHONEAPP         lphPhoneApp,    HINSTANCE           hInstance,    PHONECALLBACK       lpfnCallback,    LPCSTR              lpszAppName,    LPDWORD             lpdwNumDevs    );																		
phoneInitializeExA( LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams );																		
phoneInitializeExW( LPHPHONEAPP lphPhoneApp, HINSTANCE hInstance, PHONECALLBACK lpfnCallback, LPCWSTR lpszFriendlyAppName, LPDWORD lpdwNumDevs, LPDWORD lpdwAPIVersion, LPPHONEINITIALIZEEXPARAMS lpPhoneInitializeExParams );																		
phoneNegotiateAPIVersion(    HPHONEAPP           hPhoneApp,    DWORD               dwDeviceID,    DWORD               dwAPILowVersion,    DWORD               dwAPIHighVersion,    LPDWORD             lpdwAPIVersion,    LPPHONEEXTENSIONID  lpExtensionID    );																		
phoneNegotiateExtVersion(    HPHONEAPP           hPhoneApp,    DWORD               dwDeviceID,    DWORD               dwAPIVersion,    DWORD               dwExtLowVersion,    DWORD               dwExtHighVersion,    LPDWORD             lpdwExtVersion    );																		
phoneOpen(    HPHONEAPP           hPhoneApp,    DWORD               dwDeviceID,    LPHPHONE            lphPhone,    DWORD               dwAPIVersion,    DWORD               dwExtVersion,    DWORD_PTR           dwCallbackInstance,    DWORD               dwPrivilege    );																		
phoneSetButtonInfo(    HPHONE              hPhone,    DWORD               dwButtonLampID,    LPPHONEBUTTONINFO   const lpButtonInfo    );																		
phoneSetButtonInfoA(    HPHONE              hPhone,    DWORD               dwButtonLampID,    LPPHONEBUTTONINFO   const lpButtonInfo    );																		
phoneSetButtonInfoW(    HPHONE              hPhone,    DWORD               dwButtonLampID,    LPPHONEBUTTONINFO   const lpButtonInfo    );																		
phoneSetData(    HPHONE              hPhone,    DWORD               dwDataID,    LPVOID              const lpData,    DWORD               dwSize    );																		
phoneSetDisplay(    HPHONE              hPhone,    DWORD               dwRow,    DWORD               dwColumn,    LPCSTR              lpsDisplay,    DWORD               dwSize    );																		
phoneSetGain(    HPHONE              hPhone,    DWORD               dwHookSwitchDev,    DWORD               dwGain    );																		
phoneSetHookSwitch(    HPHONE              hPhone,    DWORD               dwHookSwitchDevs,    DWORD               dwHookSwitchMode    );																		
phoneSetLamp(    HPHONE              hPhone,    DWORD               dwButtonLampID,    DWORD               dwLampMode    );																		
phoneSetRing(    HPHONE              hPhone,    DWORD               dwRingMode,    DWORD               dwVolume    );																		
phoneSetStatusMessages(    HPHONE              hPhone,    DWORD               dwPhoneStates,    DWORD               dwButtonModes,    DWORD               dwButtonStates    );																		
phoneSetVolume(    HPHONE              hPhone,    DWORD               dwHookSwitchDev,    DWORD               dwVolume    );																		
phoneShutdown(    HPHONEAPP           hPhoneApp    );																		
PhysicalToLogicalPoint(__in HWND hWnd,__inout LPPOINT lpPoint);																		
Pie(__in HDC hdc, __in int left, __in int top, __in int right, __in int bottom, __in int xr1, __in int yr1, __in int xr2, __in int yr2);																		
PlayEnhMetaFile( __in HDC hdc, __in HENHMETAFILE hmf, __in CONST RECT * lprect);																		
PlayEnhMetaFileRecord(   __in HDC hdc,                      __in_ecount(cht) LPHANDLETABLE pht,                      __in CONST ENHMETARECORD *pmr,                      __in UINT cht);																		
PlayMetaFile(__in HDC hdc, __in HMETAFILE hmf);																		
PlayMetaFileRecord(  __in HDC hdc,                   __in_ecount(noObjs) LPHANDLETABLE lpHandleTable,                   __in LPMETARECORD lpMR,                   __in UINT noObjs);																		
PlgBlt( __in HDC hdcDest, __in_ecount(3) CONST POINT * lpPoint, __in HDC hdcSrc, __in int xSrc, __in int ySrc, __in int width,                     __in int height, __in_opt HBITMAP hbmMask, __in int xMask, __in int yMask);																		
PolyBezier(__in HDC hdc, __in_ecount(cpt) CONST POINT * apt, __in DWORD cpt);																		
PolyBezierTo(__in HDC hdc, __in_ecount(cpt) CONST POINT * apt, __in DWORD cpt);																		
PolyDraw(__in HDC hdc, __in_ecount(cpt) CONST POINT * apt, __in_ecount(cpt) CONST BYTE * aj, __in int cpt);																		
Polygon(__in HDC hdc, __in_ecount(cpt) CONST POINT *apt, __in int cpt);																		
Polyline(__in HDC hdc, __in_ecount(cpt) CONST POINT *apt, __in int cpt);																		
PolylineTo(__in HDC hdc, __in_ecount(cpt) CONST POINT * apt, __in DWORD cpt);																		
PolyPolygon(__in HDC hdc,  __in CONST POINT *apt,  __in_ecount(csz) CONST INT *asz,  __in int csz);																		
PolyPolyline(__in HDC hdc, __in CONST POINT *apt, __in_ecount(csz) CONST DWORD *asz, __in DWORD csz);																		
PolyTextOutA(__in HDC hdc, __in_ecount(nstrings) CONST POLYTEXTA * ppt, __in int nstrings);																		
PolyTextOutW(__in HDC hdc, __in_ecount(nstrings) CONST POLYTEXTW * ppt, __in int nstrings);																		
PostMessageA(    __in_opt HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
PostMessageW(    __in_opt HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
PostQueuedCompletionStatus(    __in     HANDLE CompletionPort,    __in     DWORD dwNumberOfBytesTransferred,    __in     ULONG_PTR dwCompletionKey,    __in_opt LPOVERLAPPED lpOverlapped    );																		
PostQuitMessage(    __in int nExitCode);																		
PostThreadMessageA(    __in DWORD idThread,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
PostThreadMessageW(    __in DWORD idThread,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
PowerClearRequest (    __in HANDLE PowerRequest,    __in POWER_REQUEST_TYPE RequestType    );																		
PowerCreateRequest (    __in PREASON_CONTEXT Context    );																		
PowerSetRequest (    __in HANDLE PowerRequest,    __in POWER_REQUEST_TYPE RequestType    );																		
PrepareComplete (    IN  HANDLE            EnlistmentHandle,    IN  PLARGE_INTEGER    TmVirtualClock    );																		
PrepareEnlistment (    IN HANDLE EnlistmentHandle,    IN PLARGE_INTEGER TmVirtualClock    );																		
PrepareTape(    __in HANDLE hDevice,    __in DWORD dwOperation,    __in BOOL bImmediate    );																		
PrePrepareComplete (    IN  HANDLE            EnlistmentHandle,    IN  PLARGE_INTEGER    TmVirtualClock    );																		
PrePrepareEnlistment (    IN HANDLE EnlistmentHandle,    IN PLARGE_INTEGER TmVirtualClock    );																		
PrinterMessageBoxA(__in   HANDLE    hPrinter,       DWORD     Error,__in   HWND      hWnd,__in   LPSTR   pText,__in   LPSTR   pCaption,       DWORD     dwType);																		
PrinterMessageBoxW(__in   HANDLE    hPrinter,       DWORD     Error,__in   HWND      hWnd,__in   LPWSTR   pText,__in   LPWSTR   pCaption,       DWORD     dwType);																		
PrinterProperties(__in    HWND    hWnd,__in    HANDLE  hPrinter);																		
PrintWindow(    __in HWND hwnd,    __in HDC hdcBlt,    __in UINT nFlags);																		
PrivacyGetZonePreferenceW(    __in DWORD dwZone,    __in DWORD dwType,    __out_opt LPDWORD pdwTemplate,    __out_ecount_opt(*pdwBufferLength) LPWSTR pszBuffer,    __inout_opt LPDWORD pdwBufferLength    );																		
PrivacyGetZonePreferenceW(    __in DWORD dwZone,    __in DWORD dwType,    __out_opt LPDWORD pdwTemplate,    __out_ecount_opt(*pdwBufferLength) LPWSTR pszBuffer,    __inout_opt LPDWORD pdwBufferLength    );																		
PrivacySetZonePreferenceW(    __in DWORD       dwZone,    __in DWORD       dwType,    __in DWORD       dwTemplate,    __in_opt LPCWSTR     pszPreference    );																		
PrivacySetZonePreferenceW(    __in DWORD       dwZone,    __in DWORD       dwType,    __in DWORD       dwTemplate,    __in_opt LPCWSTR     pszPreference    );																		
PrivateExtractIconsA(__in LPCSTR szFileName,__in int nIconIndex,__in int cxIcon,__in int cyIcon,__out_ecount_part_opt(nIcons, return) HICON *phicon,__out_ecount_part_opt(nIcons, return) UINT *piconid,__in UINT nIcons,__in UINT flags);																		
PrivateExtractIconsW(__in LPCWSTR szFileName,__in int nIconIndex,__in int cxIcon,__in int cyIcon,__out_ecount_part_opt(nIcons, return) HICON *phicon,__out_ecount_part_opt(nIcons, return) UINT *piconid,__in UINT nIcons,__in UINT flags);																		
PrivilegeCheck (    __in    HANDLE ClientToken,    __inout PPRIVILEGE_SET RequiredPrivileges,    __out   LPBOOL pfResult    );																		
PrivilegedServiceAuditAlarmA (    __in LPCSTR SubsystemName,    __in LPCSTR ServiceName,    __in HANDLE ClientToken,    __in PPRIVILEGE_SET Privileges,    __in BOOL AccessGranted    );																		
PrivilegedServiceAuditAlarmW (    __in LPCWSTR SubsystemName,    __in LPCWSTR ServiceName,    __in HANDLE ClientToken,    __in PPRIVILEGE_SET Privileges,    __in BOOL AccessGranted    );																		
Process32First(    HANDLE hSnapshot,    LPPROCESSENTRY32 lppe    );																		
Process32FirstW(    HANDLE hSnapshot,    LPPROCESSENTRY32W lppe    );																		
Process32Next(    HANDLE hSnapshot,    LPPROCESSENTRY32 lppe    );																		
Process32NextW(    HANDLE hSnapshot,    LPPROCESSENTRY32W lppe    );																		
ProcessGroupPolicyCompleted(    __in REFGPEXTENSIONID extensionId,    __in ASYNCCOMPLETIONHANDLE pAsyncHandle,    __in DWORD dwStatus);																		
ProcessGroupPolicyCompletedEx(    __in REFGPEXTENSIONID extensionId,    __in ASYNCCOMPLETIONHANDLE pAsyncHandle,    __in DWORD dwStatus,    __in HRESULT RsopStatus);																		
ProcessIdToSessionId(    __in  DWORD dwProcessId,    __out DWORD *pSessionId    );																		
PropVariantToAdsType(VARIANT * pVariant,DWORD dwNumVariant,PADSVALUE *ppAdsValues,PDWORD pdwNumValues);																		
PTCloseProvider(__in  HPTPROVIDER hProvider);																		
PTConvertDevModeToPrintTicket( __in  HPTPROVIDER hProvider,ULONG cbDevmode,__in PDEVMODE pDevmode,__in EPrintTicketScope scope,__inout IStream  *pPrintTicket);																		
PTConvertPrintTicketToDevMode( __in HPTPROVIDER hProvider,__in IStream *pPrintTicket,EDefaultDevmodeType baseDevmodeType,__in EPrintTicketScope scope,__out ULONG *pcbDevmode,__deref_out_bcount(*pcbDevmode) OUT PDEVMODE *ppDevmode,__out_opt  BSTR *pbstrErrorMessage );																		
PTGetPrintCapabilities( __in HPTPROVIDER hProvider,__in_opt IStream *pPrintTicket,__inout IStream  *pCapabilities,__out_opt  BSTR  *pbstrErrorMessage);																		
PtInRect(__in CONST RECT *lprc,__in POINT pt);																		
PtInRegion(__in HRGN hrgn, __in int x, __in int y);																		
PTMergeAndValidatePrintTicket(__in  HPTPROVIDER hProvider,__in IStream *pBaseTicket,__in_opt IStream *pDeltaTicket,__in  EPrintTicketScope scope,__inout IStream *pResultTicket,  __out_opt BSTR *pbstrErrorMessage );																		
PTOpenProvider( __in PCWSTR pszPrinterName,DWORD dwVersion,__out HPTPROVIDER *phProvider);																		
PTOpenProviderEx( __in  PCWSTR pszPrinterName, DWORD dwMaxVersion,DWORD dwPrefVersion,__out HPTPROVIDER *phProvider,__out DWORD *pUsedVersion);																		
PTQuerySchemaVersionSupport(__in PCWSTR pszPrinterName,__out DWORD *pMaxVersion);																		
PTReleaseMemory( __in PVOID pBuffer);																		
PtVisible(__in HDC hdc, __in int x, __in int y);																		
PulseEvent(    __in HANDLE hEvent    );																		
PurgeComm(    __in HANDLE hFile,    __in DWORD dwFlags    );																		
QOSAddSocketToFlow(    __in        HANDLE              QOSHandle,              __in        SOCKET              Socket,    __in_opt    PSOCKADDR           DestAddr,    __in        QOS_TRAFFIC_TYPE    TrafficType,    __in_opt    DWORD               Flags,    __inout     PQOS_FLOWID         FlowId);																		
QOSCancel(    __in    HANDLE          QOSHandle,              __in    LPOVERLAPPED    Overlapped);																		
QOSCloseHandle(    __in    HANDLE         QOSHandle);																		
QOSCreateHandle(    __in    PQOS_VERSION    Version,    __out   PHANDLE         QOSHandle);																		
QOSEnumerateFlows(    __in                HANDLE      QOSHandle,    __inout             PULONG      Size,    __out_bcount(*Size) PVOID       Buffer);																		
QOSNotifyFlow(    __in                        HANDLE          QOSHandle,    __in                        QOS_FLOWID      FlowId,    __in                        QOS_NOTIFY_FLOW Operation,    __inout_opt                 PULONG          Size,    __inout_bcount_opt(*Size)   PVOID           Buffer,    __reserved                  DWORD           Flags,    __out_opt                   LPOVERLAPPED    Overlapped);																		
QOSQueryFlow(    __in                HANDLE              QOSHandle,    __in                QOS_FLOWID          FlowId,    __in                QOS_QUERY_FLOW      Operation,    __inout             PULONG              Size,    __out_bcount(*Size) PVOID               Buffer,      __in_opt            DWORD               Flags,    __out_opt           LPOVERLAPPED        Overlapped);																		
QOSRemoveSocketFromFlow(    __in        HANDLE              QOSHandle,    __in_opt    SOCKET              Socket,    __in        QOS_FLOWID          FlowId,    __reserved  DWORD               Flags);																		
QOSSetFlow(    __in                HANDLE          QOSHandle,              __in                QOS_FLOWID      FlowId,                 __in                QOS_SET_FLOW    Operation,    __in                ULONG           Size,    __in_bcount(Size)   PVOID           Buffer,      __reserved          DWORD           Flags,    __out_opt           LPOVERLAPPED    Overlapped);																		
QOSStartTrackingClient(    __in        HANDLE          QOSHandle,    __in        PSOCKADDR       DestAddr,    __reserved  DWORD           Flags);																		
QOSStopTrackingClient(    __in        HANDLE          QOSHandle,    __in        PSOCKADDR       DestAddr,    __reserved  DWORD           Flags);																		
QueryActCtxSettingsW(    __in_opt      DWORD dwFlags,    __in_opt      HANDLE hActCtx,    __in_opt      PCWSTR settingsNameSpace,    __in          PCWSTR settingName,    __out_bcount_part_opt(dwBuffer, *pdwWrittenOrRequired) PWSTR pvBuffer,    __in      SIZE_T dwBuffer,    __out_opt SIZE_T *pdwWrittenOrRequired    );																		
QueryActCtxW(    __in      DWORD dwFlags,    __in      HANDLE hActCtx,    __in_opt  PVOID pvSubInstance,    __in      ULONG ulInfoClass,    __out_bcount_part_opt(cbBuffer, *pcbWrittenOrRequired) PVOID pvBuffer,    __in      SIZE_T cbBuffer,    __out_opt SIZE_T *pcbWrittenOrRequired    );																		
QueryDepthSList (    __in PSLIST_HEADER ListHead    );																		
QueryDisplayConfig(    __in UINT32 flags,    __inout UINT32* numPathArrayElements,    __out_ecount_part(*numPathArrayElements, *numPathArrayElements) DISPLAYCONFIG_PATH_INFO* pathArray,    __inout UINT32* numModeInfoArrayElements,    __out_ecount_part(*numModeInfoArrayElements, *numModeInfoArrayElements) DISPLAYCONFIG_MODE_INFO* modeInfoArray,    __out DISPLAYCONFIG_TOPOLOGY_ID* currentTopologyId);																		
QueryDosDeviceA(    __in_opt LPCSTR lpDeviceName,    __out_ecount_part_opt(ucchMax, return) LPSTR lpTargetPath,    __in     DWORD ucchMax    );																		
QueryDosDeviceW(    __in_opt LPCWSTR lpDeviceName,    __out_ecount_part_opt(ucchMax, return) LPWSTR lpTargetPath,    __in     DWORD ucchMax    );																		
QueryFullProcessImageNameA(    __in HANDLE hProcess,    __in DWORD dwFlags,    __out_ecount_part(*lpdwSize, *lpdwSize) LPSTR lpExeName,    __inout PDWORD lpdwSize    );																		
QueryFullProcessImageNameW(    __in HANDLE hProcess,    __in DWORD dwFlags,    __out_ecount_part(*lpdwSize, *lpdwSize) LPWSTR lpExeName,    __inout PDWORD lpdwSize    );																		
QueryIdleProcessorCycleTime (    __inout PULONG BufferLength,    __out_bcount_opt(*BufferLength) PULONG64 ProcessorIdleCycleTime    );																		
QueryIdleProcessorCycleTimeEx (    __in USHORT Group,    __inout PULONG BufferLength,    __out_bcount_opt(*BufferLength) PULONG64 ProcessorIdleCycleTime    );																		
QueryInformationJobObject(    __in_opt  HANDLE hJob,    __in      JOBOBJECTINFOCLASS JobObjectInformationClass,    __out_bcount_part(cbJobObjectInformationLength, *lpReturnLength) LPVOID lpJobObjectInformation,    __in      DWORD cbJobObjectInformationLength,    __out_opt LPDWORD lpReturnLength    );																		
QueryMemoryResourceNotification(    __in  HANDLE ResourceNotificationHandle,    __out PBOOL  ResourceState    );																		
QueryPerformanceCounter(    __out LARGE_INTEGER *lpPerformanceCount    );																		
QueryPerformanceFrequency(    __out LARGE_INTEGER *lpFrequency    );																		
QueryProcessAffinityUpdateMode(    __in HANDLE hProcess,    __out_opt LPDWORD lpdwFlags    );																		
QueryProcessCycleTime (    __in HANDLE ProcessHandle,    __out PULONG64 CycleTime    );																		
QueryRecoveryAgentsOnEncryptedFile(    __in            LPCWSTR                                 lpFileName,    __deref_out     PENCRYPTION_CERTIFICATE_HASH_LIST      *pRecoveryAgents    );																		
QuerySecurityAccessMask(    __in SECURITY_INFORMATION SecurityInformation,    __out LPDWORD DesiredAccess    );																		
QueryServiceConfig2A(    __in            SC_HANDLE               hService,    __in            DWORD                   dwInfoLevel,    __out_bcount_opt(cbBufSize)                    LPBYTE                  lpBuffer,    __in            DWORD                   cbBufSize,    __out           LPDWORD                 pcbBytesNeeded    );																		
QueryServiceConfig2W(    __in            SC_HANDLE               hService,    __in            DWORD                   dwInfoLevel,    __out_bcount_opt(cbBufSize)                    LPBYTE                  lpBuffer,    __in            DWORD                   cbBufSize,    __out           LPDWORD                 pcbBytesNeeded    );																		
QueryServiceConfigA(    __in            SC_HANDLE               hService,    __out_bcount_opt(cbBufSize)                    LPQUERY_SERVICE_CONFIGA lpServiceConfig,    __in            DWORD                   cbBufSize,    __out           LPDWORD                 pcbBytesNeeded    );																		
QueryServiceConfigW(    __in            SC_HANDLE               hService,    __out_bcount_opt(cbBufSize)                    LPQUERY_SERVICE_CONFIGW lpServiceConfig,    __in            DWORD                   cbBufSize,    __out           LPDWORD                 pcbBytesNeeded    );																		
QueryServiceLockStatusA(    __in            SC_HANDLE                       hSCManager,    __out_bcount_opt(cbBufSize)                    LPQUERY_SERVICE_LOCK_STATUSA    lpLockStatus,    __in            DWORD                           cbBufSize,    __out           LPDWORD                         pcbBytesNeeded    );																		
QueryServiceLockStatusW(    __in            SC_HANDLE                       hSCManager,    __out_bcount_opt(cbBufSize)                    LPQUERY_SERVICE_LOCK_STATUSW    lpLockStatus,    __in            DWORD                           cbBufSize,    __out           LPDWORD                         pcbBytesNeeded    );																		
QueryServiceObjectSecurity(    __in            SC_HANDLE               hService,    __in            SECURITY_INFORMATION    dwSecurityInformation,    __out_bcount_opt(cbBufSize)                    PSECURITY_DESCRIPTOR    lpSecurityDescriptor,    __in            DWORD                   cbBufSize,    __out           LPDWORD                 pcbBytesNeeded    );																		
QueryServiceStatus(    __in            SC_HANDLE           hService,    __out           LPSERVICE_STATUS    lpServiceStatus    );																		
QueryServiceStatusEx(    __in            SC_HANDLE           hService,    __in            SC_STATUS_TYPE      InfoLevel,    __out_bcount_opt(cbBufSize)                    LPBYTE              lpBuffer,    __in            DWORD               cbBufSize,    __out           LPDWORD             pcbBytesNeeded    );																		
QueryThreadCycleTime (    __in HANDLE ThreadHandle,    __out PULONG64 CycleTime    );																		
QueryThreadpoolStackInformation(    __in    PTP_POOL           ptpp,    __out   PTP_POOL_STACK_INFORMATION ptpsi    );																		
QueryThreadProfiling(    __in HANDLE ThreadHandle,    __out PBOOLEAN Enabled    );																		
QueryUmsThreadInformation(    __in PUMS_CONTEXT UmsThread,    __in UMS_THREAD_INFO_CLASS UmsThreadInfoClass,    __out_bcount_part(UmsThreadInformationLength, *ReturnLength) PVOID UmsThreadInformation,    __in ULONG UmsThreadInformationLength,    __out_opt PULONG ReturnLength    );																		
QueryUnbiasedInterruptTime (    __out PULONGLONG UnbiasedTime    );																		
QueryUsersOnEncryptedFile(    __in            LPCWSTR                                 lpFileName,    __deref_out     PENCRYPTION_CERTIFICATE_HASH_LIST      *pUsers    );																		
QueryWorkingSet(    __in HANDLE hProcess,    __out_bcount(cb) PVOID pv,    __in DWORD cb    );																		
QueryWorkingSetEx(    __in HANDLE hProcess,    __out_bcount(cb) PVOID pv,    __in DWORD cb    );																		
QueueUserAPC(    __in PAPCFUNC pfnAPC,    __in HANDLE hThread,    __in ULONG_PTR dwData    );																		
QueueUserWorkItem(    __in     LPTHREAD_START_ROUTINE Function,    __in_opt PVOID Context,    __in     ULONG Flags    );																		
RaiseException(    __in DWORD dwExceptionCode,    __in DWORD dwExceptionFlags,    __in DWORD nNumberOfArguments,    __in_ecount_opt(nNumberOfArguments) CONST ULONG_PTR *lpArguments    );																		
RaiseFailFastException(    __in_opt PEXCEPTION_RECORD pExceptionRecord,    __in PCONTEXT pContextRecord,    __in DWORD dwFlags    );																		
RasSecurityDialogComplete(    IN SECURITY_MESSAGE * pSecMsg       	);																	
ReadConsoleA(    __in HANDLE hConsoleInput,    __out_ecount_part(nNumberOfCharsToRead, *lpNumberOfCharsRead)       LPVOID lpBuffer,    __in DWORD nNumberOfCharsToRead,    __out LPDWORD lpNumberOfCharsRead,    __in_opt PCONSOLE_READCONSOLE_CONTROL pInputControl    );																		
ReadConsoleInputA(    __in HANDLE hConsoleInput,    __out_ecount(nLength) PINPUT_RECORD lpBuffer,    __in DWORD nLength,    __out LPDWORD lpNumberOfEventsRead    );																		
ReadConsoleInputW(    __in HANDLE hConsoleInput,    __out_ecount(nLength) PINPUT_RECORD lpBuffer,    __in DWORD nLength,    __out LPDWORD lpNumberOfEventsRead    );																		
ReadConsoleOutputA(    __in HANDLE hConsoleOutput,    __out_ecount(dwBufferSize.X * dwBufferSize.Y) PCHAR_INFO lpBuffer,    __in COORD dwBufferSize,    __in COORD dwBufferCoord,    __inout PSMALL_RECT lpReadRegion    );																		
ReadConsoleOutputAttribute(    __in HANDLE hConsoleOutput,    __out_ecount(nLength) LPWORD lpAttribute,    __in DWORD nLength,    __in COORD dwReadCoord,    __out LPDWORD lpNumberOfAttrsRead    );																		
ReadConsoleOutputCharacterA(    __in HANDLE hConsoleOutput,    __out_ecount(nLength) LPSTR lpCharacter,    __in DWORD nLength,    __in COORD dwReadCoord,    __out LPDWORD lpNumberOfCharsRead    );																		
ReadConsoleOutputCharacterW(    __in HANDLE hConsoleOutput,    __out_ecount(nLength) LPWSTR lpCharacter,    __in DWORD nLength,    __in COORD dwReadCoord,    __out LPDWORD lpNumberOfCharsRead    );																		
ReadConsoleOutputW(    __in HANDLE hConsoleOutput,    __out_ecount(dwBufferSize.X * dwBufferSize.Y) PCHAR_INFO lpBuffer,    __in COORD dwBufferSize,    __in COORD dwBufferCoord,    __inout PSMALL_RECT lpReadRegion    );																		
ReadConsoleW(    __in HANDLE hConsoleInput,    __out_ecount_part(nNumberOfCharsToRead, *lpNumberOfCharsRead)       LPVOID lpBuffer,    __in DWORD nNumberOfCharsToRead,    __out LPDWORD lpNumberOfCharsRead,    __in_opt PCONSOLE_READCONSOLE_CONTROL pInputControl    );																		
ReadDirectoryChangesW(    __in        HANDLE hDirectory,    __out_bcount_part(nBufferLength, *lpBytesReturned) LPVOID lpBuffer,    __in        DWORD nBufferLength,    __in        BOOL bWatchSubtree,    __in        DWORD dwNotifyFilter,    __out_opt   LPDWORD lpBytesReturned,    __inout_opt LPOVERLAPPED lpOverlapped,    __in_opt    LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine    );																		
ReadEncryptedFileRaw(    __in     PFE_EXPORT_FUNC pfExportCallback,    __in_opt PVOID           pvCallbackContext,    __in     PVOID           pvContext    );																		
ReadEventLogA (    __in  HANDLE     hEventLog,    __in  DWORD      dwReadFlags,    __in  DWORD      dwRecordOffset,    __out_bcount_part(nNumberOfBytesToRead, *pnBytesRead) LPVOID     lpBuffer,    __in  DWORD      nNumberOfBytesToRead,    __out DWORD      *pnBytesRead,    __out DWORD      *pnMinNumberOfBytesNeeded    );																		
ReadEventLogW (    __in  HANDLE     hEventLog,    __in  DWORD      dwReadFlags,    __in  DWORD      dwRecordOffset,    __out_bcount_part(nNumberOfBytesToRead, *pnBytesRead) LPVOID     lpBuffer,    __in  DWORD      nNumberOfBytesToRead,    __out DWORD      *pnBytesRead,    __out DWORD      *pnMinNumberOfBytesNeeded    );																		
ReadFile(    __in        HANDLE hFile,    __out_bcount_part_opt(nNumberOfBytesToRead, *lpNumberOfBytesRead) __out_data_source(FILE) LPVOID lpBuffer,    __in        DWORD nNumberOfBytesToRead,    __out_opt   LPDWORD lpNumberOfBytesRead,    __inout_opt LPOVERLAPPED lpOverlapped    );																		
ReadFileEx(    __in     HANDLE hFile,    __out_bcount_opt(nNumberOfBytesToRead) __out_data_source(FILE) LPVOID lpBuffer,    __in     DWORD nNumberOfBytesToRead,    __inout  LPOVERLAPPED lpOverlapped,    __in_opt LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine    );																		
ReadFileScatter(    __in       HANDLE hFile,    __in       FILE_SEGMENT_ELEMENT aSegmentArray[],    __in       DWORD nNumberOfBytesToRead,    __reserved LPDWORD lpReserved,    __inout    LPOVERLAPPED lpOverlapped    );																		
ReadGuidsForConnectedNetworks(    __out_opt DWORD *pcNetworks,    __out_opt PWSTR **pppwszNetworkGuids,    __out_opt BSTR  **pppbstrNetworkNames,    __out_opt PWSTR **pppwszGWMacs,    __out_opt DWORD *pcGatewayMacs,    __out_opt DWORD *pdwFlags    );																		
ReadOnlyEnlistment (    IN  HANDLE            EnlistmentHandle,    IN  PLARGE_INTEGER    TmVirtualClock    );																		
ReadPrinter(__in    HANDLE  hPrinter,__out_bcount(cbBuf)        LPVOID  pBuf,        DWORD   cbBuf,__out   LPDWORD pNoBytesRead);																		
ReadProcessMemory(    __in      HANDLE hProcess,    __in      LPCVOID lpBaseAddress,    __out_bcount_part(nSize, *lpNumberOfBytesRead) LPVOID lpBuffer,    __in      SIZE_T nSize,    __out_opt SIZE_T * lpNumberOfBytesRead    );																		
ReadThreadProfilingData(    __in HANDLE PerformanceDataHandle,    __in DWORD Flags,    __out PPERFORMANCE_DATA PerformanceData    );																		
ReadUrlCacheEntryStream(    __in HANDLE hUrlCacheStream,    __in DWORD dwLocation,    __out_bcount(*lpdwLen) __out_data_source(NETWORK) LPVOID lpBuffer,    __inout LPDWORD lpdwLen,    __reserved DWORD Reserved    );																		
ReadUrlCacheEntryStreamEx(    __in HANDLE hUrlCacheStream,    __in DWORDLONG qwLocation,    __out_bcount(*lpdwLen) __out_data_source(NETWORK) LPVOID lpBuffer,    __inout LPDWORD lpdwLen    );																		
RealChildWindowFromPoint(    __in HWND hwndParent,    __in POINT ptParentClientCoords);																		
RealGetWindowClassA(    __in HWND hwnd,    __out_ecount_part(cchClassNameMax, return) LPSTR ptszClassName,    __in UINT cchClassNameMax);																		
RealGetWindowClassW(    __in HWND hwnd,    __out_ecount_part(cchClassNameMax, return) LPWSTR ptszClassName,    __in UINT cchClassNameMax);																		
RealizePalette(__in HDC hdc);																		
ReBaseImage( __in PCSTR CurrentImageName, __in PCSTR SymbolPath, __in BOOL  fReBase,  __in BOOL  fRebaseSysfileOk, __in BOOL  fGoingDown, __in ULONG CheckImageSize, __out ULONG *OldImageSize, __out ULONG_PTR *OldImageBase, __out ULONG *NewImageSize, __inout ULONG_PTR *NewImageBase, __in ULONG TimeStamp);																		
ReBaseImage64( __in PCSTR CurrentImageName, __in PCSTR SymbolPath, __in BOOL  fReBase, __in BOOL  fRebaseSysfileOk, __in BOOL  fGoingDown, __in ULONG CheckImageSize, __out ULONG *OldImageSize, __out ULONG64 *OldImageBase, __out ULONG *NewImageSize);	
RecoverResourceManager (    IN HANDLE ResourceManagerHandle    );																		
RecoverTransactionManager (    IN HANDLE TransactionManagerHandle    );																		
Rectangle(__in HDC hdc, __in int left, __in int top, __in int right, __in int bottom);																		
RectInRegion(__in HRGN hrgn, __in CONST RECT * lprect);																		
RectVisible(__in HDC hdc, __in CONST RECT * lprect);																		
RedrawWindow(    __in_opt HWND hWnd,    __in_opt CONST RECT *lprcUpdate,    __in_opt HRGN hrgnUpdate,    __in UINT flags);																		
RefreshPolicy(    __in        BOOL bMachine);																		
RefreshPolicyEx(    __in        BOOL    bMachine,     __in        DWORD   dwOptions);																		
RegCloseKey (    __in HKEY hKey    );																		
RegConnectRegistryA (    __in_opt LPCSTR lpMachineName,    __in HKEY hKey,    __out PHKEY phkResult    );																		
RegConnectRegistryExA (    __in_opt LPCSTR lpMachineName,    __in HKEY hKey,    __in ULONG Flags,    __out PHKEY phkResult    );																		
RegConnectRegistryExW (    __in_opt LPCWSTR lpMachineName,    __in HKEY hKey,    __in ULONG Flags,    __out PHKEY phkResult    );																		
RegConnectRegistryW (    __in_opt LPCWSTR lpMachineName,    __in HKEY hKey,    __out PHKEY phkResult    );																		
RegCopyTreeA (    __in        HKEY     hKeySrc,    __in_opt    LPCSTR  lpSubKey,    __in        HKEY     hKeyDest    );																		
RegCopyTreeW (    __in        HKEY     hKeySrc,    __in_opt    LPCWSTR  lpSubKey,    __in        HKEY     hKeyDest    );																		
RegCreateKeyA (    __in HKEY hKey,    __in_opt LPCSTR lpSubKey,    __out PHKEY phkResult    );																		
RegCreateKeyExA (    __in HKEY hKey,    __in LPCSTR lpSubKey,    __reserved DWORD Reserved,    __in_opt LPSTR lpClass,    __in DWORD dwOptions,    __in REGSAM samDesired,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __out PHKEY phkResult,    __out_opt LPDWORD lpdwDisposition    );																		
RegCreateKeyExW (    __in HKEY hKey,    __in LPCWSTR lpSubKey,    __reserved DWORD Reserved,    __in_opt LPWSTR lpClass,    __in DWORD dwOptions,    __in REGSAM samDesired,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __out PHKEY phkResult,    __out_opt LPDWORD lpdwDisposition    );																		
RegCreateKeyTransactedA (    __in HKEY hKey,    __in LPCSTR lpSubKey,    __reserved DWORD Reserved,    __in_opt LPSTR lpClass,    __in DWORD dwOptions,    __in REGSAM samDesired,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __out PHKEY phkResult,    __out_opt LPDWORD lpdwDisposition,    __in        HANDLE hTransaction,    __reserved PVOID  pExtendedParemeter    );																		
RegCreateKeyTransactedW (    __in HKEY hKey,    __in LPCWSTR lpSubKey,    __reserved DWORD Reserved,    __in_opt LPWSTR lpClass,    __in DWORD dwOptions,    __in REGSAM samDesired,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __out PHKEY phkResult,    __out_opt LPDWORD lpdwDisposition,    __in        HANDLE hTransaction,    __reserved PVOID  pExtendedParemeter    );																		
RegCreateKeyW (    __in HKEY hKey,    __in_opt LPCWSTR lpSubKey,    __out PHKEY phkResult    );																		
RegDeleteKeyA (    __in HKEY hKey,    __in LPCSTR lpSubKey    );																		
RegDeleteKeyExA (    __in HKEY hKey,    __in LPCSTR lpSubKey,    __in REGSAM samDesired,    __reserved DWORD Reserved    );																		
RegDeleteKeyExW (    __in HKEY hKey,    __in LPCWSTR lpSubKey,    __in REGSAM samDesired,    __reserved DWORD Reserved    );																		
RegDeleteKeyTransactedA (    __in HKEY hKey,    __in LPCSTR lpSubKey,    __in REGSAM samDesired,    __reserved DWORD Reserved,    __in        HANDLE hTransaction,    __reserved PVOID  pExtendedParameter    );																		
RegDeleteKeyTransactedW (    __in HKEY hKey,    __in LPCWSTR lpSubKey,    __in REGSAM samDesired,    __reserved DWORD Reserved,    __in        HANDLE hTransaction,    __reserved PVOID  pExtendedParameter    );																		
RegDeleteKeyValueA (    __in      HKEY     hKey,    __in_opt  LPCSTR lpSubKey,    __in_opt  LPCSTR lpValueName    );																		
RegDeleteKeyValueW (    __in      HKEY     hKey,    __in_opt  LPCWSTR lpSubKey,    __in_opt  LPCWSTR lpValueName    );																		
RegDeleteKeyW (    __in HKEY hKey,    __in LPCWSTR lpSubKey    );																		
RegDeleteTreeA (    __in        HKEY     hKey,    __in_opt    LPCSTR  lpSubKey    );																		
RegDeleteTreeW (    __in        HKEY     hKey,    __in_opt    LPCWSTR  lpSubKey    );																		
RegDeleteValueA (    __in HKEY hKey,    __in_opt LPCSTR lpValueName    );																		
RegDeleteValueW (    __in HKEY hKey,    __in_opt LPCWSTR lpValueName    );																		
RegDisablePredefinedCache(    VOID    );																		
RegDisablePredefinedCacheEx(    VOID    );																		
RegDisableReflectionKey (    __in HKEY hBase    );    																		
RegEnableReflectionKey (    __in HKEY hBase    );    																		
RegEnumKeyA (    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part_opt(cchName,cchName + 1) LPSTR lpName,    __in DWORD cchName    );																		
RegEnumKeyExA (    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part_opt(*lpcchName, *lpcchName + 1) LPSTR lpName,    __inout LPDWORD lpcchName,    __reserved LPDWORD lpReserved,    __out_ecount_part_opt(*lpcchClass,*lpcchClass + 1) LPSTR lpClass,    __inout_opt LPDWORD lpcchClass,    __out_opt PFILETIME lpftLastWriteTime    );																		
RegEnumKeyExW (    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part_opt(*lpcchName, *lpcchName + 1) LPWSTR lpName,    __inout LPDWORD lpcchName,    __reserved LPDWORD lpReserved,    __out_ecount_part_opt(*lpcchClass,*lpcchClass + 1) LPWSTR lpClass,    __inout_opt LPDWORD lpcchClass,    __out_opt PFILETIME lpftLastWriteTime    );																		
RegEnumKeyW (    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part_opt(cchName,cchName + 1) LPWSTR lpName,    __in DWORD cchName    );																		
RegEnumValueA (    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part_opt(*lpcchValueName, *lpcchValueName + 1) LPSTR lpValueName,    __inout LPDWORD lpcchValueName,    __reserved LPDWORD lpReserved,    __out_opt LPDWORD lpType,    __out_bcount_part_opt(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPBYTE lpData,    __inout_opt LPDWORD lpcbData    );																		
RegEnumValueW (    __in HKEY hKey,    __in DWORD dwIndex,    __out_ecount_part_opt(*lpcchValueName, *lpcchValueName + 1) LPWSTR lpValueName,    __inout LPDWORD lpcchValueName,    __reserved LPDWORD lpReserved,    __out_opt LPDWORD lpType,    __out_bcount_part_opt(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPBYTE lpData,    __inout_opt LPDWORD lpcbData    );																		
RegFlushKey (    __in HKEY hKey    );																		
RegGetKeySecurity (    __in HKEY hKey,    __in SECURITY_INFORMATION SecurityInformation,    __out_bcount_opt(*lpcbSecurityDescriptor) PSECURITY_DESCRIPTOR pSecurityDescriptor,    __inout LPDWORD lpcbSecurityDescriptor    );																		
RegGetValueA (    __in HKEY    hkey,    __in_opt LPCSTR  lpSubKey,    __in_opt LPCSTR  lpValue,    __in_opt DWORD    dwFlags,    __out_opt LPDWORD pdwType,    __out_bcount_part_opt(*pcbData,*pcbData) PVOID   pvData,    __inout_opt LPDWORD pcbData    );																		
RegGetValueW (    __in HKEY    hkey,    __in_opt LPCWSTR  lpSubKey,    __in_opt LPCWSTR  lpValue,    __in_opt DWORD    dwFlags,    __out_opt LPDWORD pdwType,    __out_bcount_part_opt(*pcbData,*pcbData) PVOID   pvData,    __inout_opt LPDWORD pcbData    );																		
RegisterApplicationRecoveryCallback(    __in  APPLICATION_RECOVERY_CALLBACK pRecoveyCallback,    __in_opt  PVOID pvParameter,    __in DWORD dwPingInterval,    __in DWORD dwFlags    );																		
RegisterApplicationRestart(    __in_opt PCWSTR pwzCommandline,    __in DWORD dwFlags    );																		
RegisterClassA(    __in CONST WNDCLASSA *lpWndClass);																		
RegisterClassExA(    __in CONST WNDCLASSEXA *);																		
RegisterClassExW(    __in CONST WNDCLASSEXW *);																		
RegisterClassW(    __in CONST WNDCLASSW *lpWndClass);																		
RegisterClipboardFormatA(    __in LPCSTR lpszFormat);																		
RegisterClipboardFormatW(    __in LPCWSTR lpszFormat);																		
RegisterClusterNotify(    __in HCHANGE hChange,    __in DWORD dwFilterType,    __in HANDLE hObject,    __in DWORD_PTR dwNotifyKey    );																		
RegisterDeviceNotificationA(    __in HANDLE hRecipient,    __in LPVOID NotificationFilter,    __in DWORD Flags);																		
RegisterDeviceNotificationW(    __in HANDLE hRecipient,    __in LPVOID NotificationFilter,    __in DWORD Flags);																		
RegisterEventSourceA (    __in_opt LPCSTR lpUNCServerName,    __in     LPCSTR lpSourceName    );																		
RegisterEventSourceW (    __in_opt LPCWSTR lpUNCServerName,    __in     LPCWSTR lpSourceName    );																		
RegisterForPrintAsyncNotifications(    __in_opt PCWSTR                            pszName,    __in     PrintAsyncNotificationType*       pNotificationType,             PrintAsyncNotifyUserFilter        eUserFilter,             PrintAsyncNotifyConversationStyle eConversationStyle,    __in     IPrintAsyncNotifyCallback*        pCallback,    __out    HANDLE*                           phNotify    );																		
RegisterGPNotification(    __in        HANDLE  hEvent,    __in        BOOL    bMachine);																		
RegisterHotKey(    __in_opt HWND hWnd,    __in int id,    __in UINT fsModifiers,    __in UINT vk);																		
RegisterPowerSettingNotification(    IN HANDLE hRecipient,    IN LPCGUID PowerSettingGuid,    IN DWORD Flags    );																		
RegisterRawInputDevices(    __in_ecount(uiNumDevices) PCRAWINPUTDEVICE pRawInputDevices,    __in UINT uiNumDevices,    __in UINT cbSize);																		
RegisterServiceCtrlHandlerA(    __in    LPCSTR                    lpServiceName,    __in    __callback            LPHANDLER_FUNCTION          lpHandlerProc    );																		
RegisterServiceCtrlHandlerExA(    __in    LPCSTR                    lpServiceName,    __in    __callback            LPHANDLER_FUNCTION_EX       lpHandlerProc,    __in_opt LPVOID                     lpContext    );																		
RegisterServiceCtrlHandlerExW(    __in    LPCWSTR                    lpServiceName,    __in    __callback            LPHANDLER_FUNCTION_EX       lpHandlerProc,    __in_opt LPVOID                     lpContext    );																		
RegisterServiceCtrlHandlerW(    __in    LPCWSTR                    lpServiceName,    __in    __callback            LPHANDLER_FUNCTION          lpHandlerProc    );																		
RegisterShellHookWindow(__in HWND hwnd);																		
RegisterTouchWindow(    __in HWND hwnd,    __in ULONG ulFlags);																		
RegisterUrlCacheNotification(    __in_opt HWND    hWnd,    __in       UINT    uMsg,    __in       GROUPID gid,    __in       DWORD   dwOpsFilter,    __in       DWORD   dwReserved    );																		
RegisterWaitChainCOMCallback (    __in PCOGETCALLSTATE CallStateCallback,    __in PCOGETACTIVATIONSTATE ActivationStateCallback    );																		
RegisterWaitForSingleObject(    __deref_out PHANDLE phNewWaitObject,    __in        HANDLE hObject,    __in        WAITORTIMERCALLBACK Callback,    __in_opt    PVOID Context,    __in        ULONG dwMilliseconds,    __in        ULONG dwFlags    );																		
RegisterWaitForSingleObjectEx(    __in     HANDLE hObject,    __in     WAITORTIMERCALLBACK Callback,    __in_opt PVOID Context,    __in     ULONG dwMilliseconds,    __in     ULONG dwFlags    );																		
RegisterWindowMessageA(    __in LPCSTR lpString);																		
RegisterWindowMessageW(    __in LPCWSTR lpString);																		
RegLoadAppKeyA (        __in        LPCSTR    lpFile,        __out       PHKEY       phkResult,        __in        REGSAM      samDesired,         __in        DWORD       dwOptions,        __reserved  DWORD       Reserved    );																		
RegLoadAppKeyW (        __in        LPCWSTR    lpFile,        __out       PHKEY       phkResult,        __in        REGSAM      samDesired,         __in        DWORD       dwOptions,        __reserved  DWORD       Reserved    );																		
RegLoadKeyA (    __in HKEY    hKey,    __in_opt LPCSTR  lpSubKey,    __in LPCSTR  lpFile    );																		
RegLoadKeyW (    __in HKEY    hKey,    __in_opt LPCWSTR  lpSubKey,    __in LPCWSTR  lpFile    );																		
RegLoadMUIStringA (                    __in                    HKEY        hKey,                    __in_opt                LPCSTR    pszValue,                    __out_bcount_opt(cbOutBuf)  LPSTR     pszOutBuf,                    __in                    DWORD       cbOutBuf,                    __out_opt               LPDWORD     pcbData,                    __in                    DWORD       Flags,                       __in_opt                LPCSTR    pszDirectory                    );																		
RegLoadMUIStringW (                    __in                    HKEY        hKey,                    __in_opt                LPCWSTR    pszValue,                    __out_bcount_opt(cbOutBuf)  LPWSTR     pszOutBuf,                    __in                    DWORD       cbOutBuf,                    __out_opt               LPDWORD     pcbData,                    __in                    DWORD       Flags,                       __in_opt                LPCWSTR    pszDirectory                    );																		
RegNotifyChangeKeyValue (    __in HKEY hKey,    __in BOOL bWatchSubtree,    __in DWORD dwNotifyFilter,    __in_opt HANDLE hEvent,    __in BOOL fAsynchronous    );																		
RegOpenCurrentUser(    __in REGSAM samDesired,    __out PHKEY phkResult    );																		
RegOpenKeyA (    __in HKEY hKey,    __in_opt LPCSTR lpSubKey,    __out PHKEY phkResult    );																		
RegOpenKeyExA (    __in HKEY hKey,    __in_opt LPCSTR lpSubKey,    __in_opt DWORD ulOptions,    __in REGSAM samDesired,    __out PHKEY phkResult    );																		
RegOpenKeyExW (    __in HKEY hKey,    __in_opt LPCWSTR lpSubKey,    __in_opt DWORD ulOptions,    __in REGSAM samDesired,    __out PHKEY phkResult    );																		
RegOpenKeyTransactedA (    __in HKEY hKey,    __in_opt LPCSTR lpSubKey,    __in_opt DWORD ulOptions,    __in REGSAM samDesired,    __out PHKEY phkResult,    __in        HANDLE hTransaction,    __reserved PVOID  pExtendedParemeter    );																		
RegOpenKeyTransactedW (    __in HKEY hKey,    __in_opt LPCWSTR lpSubKey,    __in_opt DWORD ulOptions,    __in REGSAM samDesired,    __out PHKEY phkResult,    __in        HANDLE hTransaction,    __reserved PVOID  pExtendedParemeter    );																		
RegOpenKeyW (    __in HKEY hKey,    __in_opt LPCWSTR lpSubKey,    __out PHKEY phkResult    );																		
RegOpenUserClassesRoot(    __in HANDLE hToken,    __reserved DWORD dwOptions,    __in REGSAM samDesired,    __out PHKEY  phkResult    );																		
RegOverridePredefKey (    __in HKEY hKey,    __in_opt HKEY hNewHKey    );																		
RegQueryInfoKeyA (    __in HKEY hKey,    __out_ecount_part_opt(*lpcchClass, *lpcchClass + 1) LPSTR lpClass,    __inout_opt LPDWORD lpcchClass,    __reserved LPDWORD lpReserved,    __out_opt LPDWORD lpcSubKeys,    __out_opt LPDWORD lpcbMaxSubKeyLen,    __out_opt LPDWORD lpcbMaxClassLen,    __out_opt LPDWORD lpcValues,    __out_opt LPDWORD lpcbMaxValueNameLen,    __out_opt LPDWORD lpcbMaxValueLen,    __out_opt LPDWORD lpcbSecurityDescriptor,    __out_opt PFILETIME lpftLastWriteTime    );																		
RegQueryInfoKeyW (    __in HKEY hKey,    __out_ecount_part_opt(*lpcchClass, *lpcchClass + 1) LPWSTR lpClass,    __inout_opt LPDWORD lpcchClass,    __reserved LPDWORD lpReserved,    __out_opt LPDWORD lpcSubKeys,    __out_opt LPDWORD lpcbMaxSubKeyLen,    __out_opt LPDWORD lpcbMaxClassLen,    __out_opt LPDWORD lpcValues,    __out_opt LPDWORD lpcbMaxValueNameLen,    __out_opt LPDWORD lpcbMaxValueLen,    __out_opt LPDWORD lpcbSecurityDescriptor,    __out_opt PFILETIME lpftLastWriteTime    );																		
RegQueryMultipleValuesA (    __in HKEY hKey,    __out_ecount(num_vals) PVALENTA val_list,    __in DWORD num_vals,    __out_bcount_part_opt(*ldwTotsize, *ldwTotsize) __out_data_source(REGISTRY) LPSTR lpValueBuf,    __inout_opt LPDWORD ldwTotsize    );																		
RegQueryMultipleValuesW (    __in HKEY hKey,    __out_ecount(num_vals) PVALENTW val_list,    __in DWORD num_vals,    __out_bcount_part_opt(*ldwTotsize, *ldwTotsize) __out_data_source(REGISTRY) LPWSTR lpValueBuf,    __inout_opt LPDWORD ldwTotsize    );																		
RegQueryReflectionKey (    __in HKEY hBase,    __out BOOL *bIsReflectionDisabled    );    																		
RegQueryValueA (    __in HKEY hKey,    __in_opt LPCSTR lpSubKey,    __out_bcount_part_opt(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPSTR lpData,    __inout_opt PLONG lpcbData    );																		
RegQueryValueExA (    __in HKEY hKey,    __in_opt LPCSTR lpValueName,    __reserved LPDWORD lpReserved,    __out_opt LPDWORD lpType,    __out_bcount_part_opt(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPBYTE lpData,    __inout_opt LPDWORD lpcbData    );																		
RegQueryValueExW (    __in HKEY hKey,    __in_opt LPCWSTR lpValueName,    __reserved LPDWORD lpReserved,    __out_opt LPDWORD lpType,    __out_bcount_part_opt(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPBYTE lpData,    __inout_opt LPDWORD lpcbData    );																		
RegQueryValueW (    __in HKEY hKey,    __in_opt LPCWSTR lpSubKey,    __out_bcount_part_opt(*lpcbData, *lpcbData) __out_data_source(REGISTRY) LPWSTR lpData,    __inout_opt PLONG lpcbData    );																		
RegRenameKey(    __in HKEY hKey,    __in_opt LPCWSTR lpSubKeyName,    __in LPCWSTR lpNewKeyName    );																		
RegReplaceKeyA (    __in HKEY hKey,    __in_opt LPCSTR lpSubKey,    __in LPCSTR lpNewFile,    __in LPCSTR lpOldFile    );																		
RegReplaceKeyW (    __in HKEY hKey,    __in_opt LPCWSTR lpSubKey,    __in LPCWSTR lpNewFile,    __in LPCWSTR lpOldFile    );																		
RegRestoreKeyA (    __in HKEY hKey,    __in LPCSTR lpFile,    __in DWORD dwFlags    );																		
RegRestoreKeyW (    __in HKEY hKey,    __in LPCWSTR lpFile,    __in DWORD dwFlags    );																		
RegSaveKeyA (    __in HKEY hKey,    __in LPCSTR lpFile,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
RegSaveKeyExA (    __in HKEY hKey,    __in LPCSTR lpFile,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in DWORD Flags    );																		
RegSaveKeyExW (    __in HKEY hKey,    __in LPCWSTR lpFile,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes,    __in DWORD Flags    );																		
RegSaveKeyW (    __in HKEY hKey,    __in LPCWSTR lpFile,    __in_opt CONST LPSECURITY_ATTRIBUTES lpSecurityAttributes    );																		
RegSetKeySecurity (    __in HKEY hKey,    __in SECURITY_INFORMATION SecurityInformation,    __in PSECURITY_DESCRIPTOR pSecurityDescriptor    );																		
RegSetKeyValueA (    __in        HKEY     hKey,    __in_opt    LPCSTR  lpSubKey,    __in_opt    LPCSTR  lpValueName,    __in        DWORD    dwType,    __in_bcount_opt(cbData) LPCVOID  lpData,    __in        DWORD    cbData    );																		
RegSetKeyValueW (    __in        HKEY     hKey,    __in_opt    LPCWSTR  lpSubKey,    __in_opt    LPCWSTR  lpValueName,    __in        DWORD    dwType,    __in_bcount_opt(cbData) LPCVOID  lpData,    __in        DWORD    cbData    );																		
RegSetValueA (    __in HKEY hKey,    __in_opt LPCSTR lpSubKey,    __in DWORD dwType,    __in_bcount_opt(cbData) LPCSTR lpData,    __in DWORD cbData    );																		
RegSetValueExA (    __in HKEY hKey,    __in_opt LPCSTR lpValueName,    __reserved DWORD Reserved,    __in DWORD dwType,    __in_bcount_opt(cbData) CONST BYTE* lpData,    __in DWORD cbData    );																		
RegSetValueExW (    __in HKEY hKey,    __in_opt LPCWSTR lpValueName,    __reserved DWORD Reserved,    __in DWORD dwType,    __in_bcount_opt(cbData) CONST BYTE* lpData,    __in DWORD cbData    );																		
RegSetValueW (    __in HKEY hKey,    __in_opt LPCWSTR lpSubKey,    __in DWORD dwType,    __in_bcount_opt(cbData) LPCWSTR lpData,    __in DWORD cbData    );																		
RegUnLoadKeyA (    __in HKEY    hKey,    __in_opt LPCSTR lpSubKey    );																		
RegUnLoadKeyW (    __in HKEY    hKey,    __in_opt LPCWSTR lpSubKey    );																		
ReleaseActCtx(    __inout HANDLE hActCtx    );																		
ReleaseCapture(    VOID);																		
ReleaseDC(    __in_opt HWND hWnd,    __in HDC hDC);																		
ReleaseMutex(    __in HANDLE hMutex    );																		
ReleaseMutexWhenCallbackReturns(    __inout PTP_CALLBACK_INSTANCE pci,    __in    HANDLE                mut    );																		
ReleaseSemaphore(    __in      HANDLE hSemaphore,    __in      LONG lReleaseCount,    __out_opt LPLONG lpPreviousCount    );																		
ReleaseSemaphoreWhenCallbackReturns(    __inout PTP_CALLBACK_INSTANCE pci,    __in    HANDLE                sem,    __in    DWORD                 crel    );																		
ReleaseSRWLockExclusive (     __inout PSRWLOCK SRWLock     );																		
ReleaseSRWLockShared (     __inout PSRWLOCK SRWLock     );																		
RemoveClipboardFormatListener(    __in HWND hwnd);																		
RemoveClusterResourceDependency(    __in HRESOURCE hResource,    __in HRESOURCE hDependsOn    );																		
RemoveClusterResourceNode(    __in HRESOURCE hResource,    __in HNODE hNode    );																		
RemoveDirectoryA(    __in LPCSTR lpPathName    );																		
RemoveDirectoryTransactedA(    __in LPCSTR lpPathName,    __in     HANDLE hTransaction    );																		
RemoveDirectoryTransactedW(    __in LPCWSTR lpPathName,    __in     HANDLE hTransaction    );																		
RemoveDirectoryW(    __in LPCWSTR lpPathName    );																		
RemoveFontResourceA(__in LPCSTR lpFileName);																		
RemoveFontResourceW(__in LPCWSTR lpFileName);																		
RemovePropA(    __in HWND hWnd,    __in LPCSTR lpString);																		
RemovePropW(    __in HWND hWnd,    __in LPCWSTR lpString);																		
RemoveResourceFromClusterSharedVolumes(    __in HRESOURCE hResource    );																		
RemoveSecureMemoryCacheCallback(    __in __callback PSECURE_MEMORY_CACHE_CALLBACK pfnCallBack    );																		
RemoveUsersFromEncryptedFile(    __in    LPCWSTR                             lpFileName,    __in    PENCRYPTION_CERTIFICATE_HASH_LIST   pHashes    );																		
RemoveVectoredContinueHandler (    __in PVOID Handle    );																		
RemoveVectoredExceptionHandler (    __in PVOID Handle    );																		
RemoveWindowSubclass(__in HWND hWnd, __in SUBCLASSPROC pfnSubclass,__in UINT_PTR uIdSubclass);																		
RenameTransactionManager (    __in LPWSTR LogFileName,    IN LPGUID ExistingTransactionManagerGuid    );																		
ReOpenFile(    __in HANDLE  hOriginalFile,    __in DWORD   dwDesiredAccess,    __in DWORD   dwShareMode,    __in DWORD   dwFlagsAndAttributes    );																		
ReplaceFileA(    __in       LPCSTR lpReplacedFileName,    __in       LPCSTR lpReplacementFileName,    __in_opt   LPCSTR lpBackupFileName,    __in       DWORD    dwReplaceFlags,    __reserved LPVOID   lpExclude,    __reserved LPVOID  lpReserved    );																		
ReplaceFileW(    __in       LPCWSTR lpReplacedFileName,    __in       LPCWSTR lpReplacementFileName,    __in_opt   LPCWSTR lpBackupFileName,    __in       DWORD    dwReplaceFlags,    __reserved LPVOID   lpExclude,    __reserved LPVOID  lpReserved    );																		
ReplacePartitionUnit (    __in PWSTR TargetPartition,    __in PWSTR SparePartition,    __in ULONG Flags    );																		
ReplyMessage(    __in LRESULT lResult);																		
ReportEventA (    __in     HANDLE     hEventLog,    __in     WORD       wType,    __in     WORD       wCategory,    __in     DWORD      dwEventID,    __in_opt PSID       lpUserSid,    __in     WORD       wNumStrings,    __in     DWORD      dwDataSize,    __in_ecount_opt(wNumStrings) LPCSTR *lpStrings,    __in_bcount_opt(dwDataSize) LPVOID lpRawData    );																		
ReportEventW (    __in     HANDLE     hEventLog,    __in     WORD       wType,    __in     WORD       wCategory,    __in     DWORD      dwEventID,    __in_opt PSID       lpUserSid,    __in     WORD       wNumStrings,    __in     DWORD      dwDataSize,    __in_ecount_opt(wNumStrings) LPCWSTR *lpStrings,    __in_bcount_opt(dwDataSize) LPVOID lpRawData    );																		
RequestDeviceWakeup(    __in HANDLE hDevice    );																		
RequestWakeupLatency(    __in LATENCY_TIME latency    );																		
ResetCompression(    IN OUT PVOID context);																		
ResetDCA(__in HDC hdc, __in CONST DEVMODEA * lpdm);																		
ResetDCW(__in HDC hdc, __in CONST DEVMODEW * lpdm);																		
ResetEvent(    __in HANDLE hEvent    );																		
ResetPrinterA(__in        HANDLE                hPrinter,__in_opt    LPPRINTER_DEFAULTSA   pDefault);																		
ResetPrinterW(__in        HANDLE                hPrinter,__in_opt    LPPRINTER_DEFAULTSW   pDefault);																		
ResetWriteWatch(    __in LPVOID lpBaseAddress,    __in SIZE_T dwRegionSize    );																		
ResizePalette(__in HPALETTE hpal, __in UINT n);																		
ResolveLocaleName(    __in_opt                        LPCWSTR lpNameToResolve,    __out_ecount_opt(cchLocaleName) LPWSTR  lpLocaleName,    __in                            int     cchLocaleName);																		
ResolveNeighbor(    __in    SOCKADDR *NetworkAddress,    __out_bcount(*PhysicalAddressLength) PVOID PhysicalAddress,    __inout PULONG PhysicalAddressLength    );																		
RestoreClusterDatabase(    __in LPCWSTR  lpszPathName,    __in BOOL     bForce,    __in_opt LPCWSTR  lpszQuorumDriveLetter    );																		
RestoreDC(__in HDC hdc, __in int nSavedDC);																		
RestoreLastError(    __in DWORD dwErrCode    );																		
RestoreMediaSense(    __in      OVERLAPPED* pOverlapped,    __out_opt LPDWORD lpdwEnableCount    );																		
ResumeClusterNode(    __in HNODE hNode    );																		
ResumeSuspendedDownload(    __in HINTERNET hRequest,    __in DWORD dwResultCode    );																		
ResumeThread(    __in HANDLE hThread    );																		
ResUtilAddUnknownProperties(    IN HKEY hkeyClusterKey,    IN const PRESUTIL_PROPERTY_ITEM pPropertyTable,    IN OUT PVOID pOutPropertyList,    IN DWORD pcbOutPropertyListSize,    IN OUT LPDWORD pcbBytesReturned,    IN OUT LPDWORD pcbRequired    );																		
ResUtilCreateDirectoryTree(    IN LPCWSTR pszPath    );																		
ResUtilDupParameterBlock(    OUT LPBYTE pOutParams,    IN const LPBYTE pInParams,    IN const PRESUTIL_PROPERTY_ITEM pPropertyTable    );																		
ResUtilDupString(    IN LPCWSTR pszInString    );																		
ResUtilEnumPrivateProperties(    __in HKEY hkeyClusterKey,    __out_bcount_part(cbOutPropertiesSize, *pcbBytesReturned) LPWSTR pszOutProperties,    __in DWORD cbOutPropertiesSize,    __out LPDWORD pcbBytesReturned,    __out LPDWORD pcbRequired    );																		
ResUtilEnumProperties(    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __out_bcount_part(cbOutPropertiesSize, *pcbBytesReturned) LPWSTR pszOutProperties,    __in DWORD cbOutPropertiesSize,    __out LPDWORD pcbBytesReturned,    __out LPDWORD pcbRequired    );																		
ResUtilEnumResources(    IN HRESOURCE            hSelf,    IN LPCWSTR              lpszResTypeName,    IN LPRESOURCE_CALLBACK  pResCallBack,    IN PVOID                pParameter    );																		
ResUtilEnumResourcesEx(    IN HCLUSTER                 hCluster,    IN HRESOURCE                hSelf,    IN LPCWSTR                  lpszResTypeName,    IN LPRESOURCE_CALLBACK_EX   pResCallBack,    IN PVOID                    pParameter    );																		
ResUtilExpandEnvironmentStrings(    IN LPCWSTR pszSrc    );																		
ResUtilFindBinaryProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __deref_opt_out_bcount_full(*pcbPropertyValueSize) LPBYTE *pbPropertyValue,    __out_opt LPDWORD pcbPropertyValueSize    );																		
ResUtilFindDependentDiskResourceDriveLetter( __in HCLUSTER hCluster, __in HRESOURCE hResource, __out_ecount_part(*pcchDriveLetter, *pcchDriveLetter) LPWSTR pszDriveLetter, __inout DWORD * pcchDriveLetter );																		
ResUtilFindDwordProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __out LPDWORD pdwPropertyValue    );																		
ResUtilFindExpandedSzProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __deref_opt_out LPWSTR *pszPropertyValue    );																		
ResUtilFindExpandSzProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __deref_opt_out LPWSTR *pszPropertyValue    );																		
ResUtilFindFileTimeProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __out LPFILETIME pftPropertyValue    );																		
ResUtilFindLongProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __out LPLONG plPropertyValue    );																		
ResUtilFindMultiSzProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __deref_out_bcount_full(*pcbPropertyValueSize) LPWSTR *pszPropertyValue,    __out LPDWORD pcbPropertyValueSize    );																		
ResUtilFindSzProperty(    __in_bcount(cbPropertyListSize) const PVOID pPropertyList,    __in DWORD cbPropertyListSize,    __in LPCWSTR pszPropertyName,    __deref_opt_out LPWSTR *pszPropertyValue    );																		
ResUtilFreeEnvironment(    IN LPVOID lpEnvironment    );																		
ResUtilFreeParameterBlock(    IN OUT LPBYTE pOutParams,    IN const LPBYTE pInParams,    IN const PRESUTIL_PROPERTY_ITEM pPropertyTable    );																		
ResUtilGetAllProperties(    __in HKEY hkeyClusterKey,    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __out_bcount_part(cbOutPropertyListSize, *pcbBytesReturned) PVOID pOutPropertyList,    __in DWORD cbOutPropertyListSize,    __out LPDWORD pcbBytesReturned,    __out LPDWORD pcbRequired    );																		
ResUtilGetBinaryProperty(    __deref_out_bcount(*pcbOutValueSize) LPBYTE *ppbOutValue,    __out LPDWORD pcbOutValueSize,    __in const PCLUSPROP_BINARY pValueStruct,    __in_bcount_opt( cbOldValueSize ) const LPBYTE pbOldValue,    __in DWORD cbOldValueSize,    __deref_inout_bcount(*pcbPropertyListSize) LPBYTE *ppPropertyList,    __inout LPDWORD pcbPropertyListSize    );																		
ResUtilGetBinaryValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __deref_out_bcount_full_opt(*pcbOutValueSize) LPBYTE *ppbOutValue,    __out LPDWORD pcbOutValueSize    );																		
ResUtilGetClusterRoleState(    __in HCLUSTER       hCluster,    __in CLUSTER_ROLE   eClusterRole    );																		
ResUtilGetCoreClusterResources(    __in HCLUSTER hCluster,    __out HRESOURCE *phClusterNameResource,    __out HRESOURCE *phClusterIPAddressResource,    __out HRESOURCE *phClusterQuorumResource    );																		
ResUtilGetDwordProperty(    OUT LPDWORD pdwOutValue,    IN const PCLUSPROP_DWORD pValueStruct,    IN DWORD dwOldValue,    IN DWORD dwMinimum,    IN DWORD dwMaximum,    OUT LPBYTE * ppPropertyList,    OUT LPDWORD pcbPropertyListSize    );																		
ResUtilGetDwordValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __out LPDWORD pdwOutValue,    __in DWORD dwDefaultValue    );																		
ResUtilGetEnvironmentWithNetName(    __in HRESOURCE hResource    );																		
ResUtilGetExpandSzValue(    IN HKEY hkeyClusterKey,    IN LPCWSTR pszValueName,    IN BOOL bExpand    );																		
ResUtilGetFileTimeProperty(    OUT LPFILETIME pftOutValue,    IN const PCLUSPROP_FILETIME pValueStruct,    IN FILETIME ftOldValue,    IN FILETIME ftMinimum,    IN FILETIME ftMaximum,    OUT LPBYTE * ppPropertyList,    OUT LPDWORD pcbPropertyListSize    );																		
ResUtilGetLongProperty(    OUT LPLONG plOutValue,    IN const PCLUSPROP_LONG pValueStruct,    IN LONG lOldValue,    IN LONG lMinimum,    IN LONG lMaximum,    OUT LPBYTE * ppPropertyList,    OUT LPDWORD pcbPropertyListSize    );																		
ResUtilGetMultiSzProperty(    __deref_out_bcount(*pcbOutValueSize) LPWSTR *ppszOutValue,    __out LPDWORD pcbOutValueSize,    __in const PCLUSPROP_SZ pValueStruct,    __in_bcount_opt(cbOldValueSize) LPCWSTR pszOldValue,    __in DWORD cbOldValueSize,    __deref_inout_bcount(*pcbPropertyListSize) LPBYTE *ppPropertyList,    __inout LPDWORD pcbPropertyListSize    );																		
ResUtilGetPrivateProperties(    __in HKEY hkeyClusterKey,    __out_bcount_part(cbOutPropertyListSize, *pcbBytesReturned) PVOID pOutPropertyList,    __in DWORD cbOutPropertyListSize,    __out LPDWORD pcbBytesReturned,    __out LPDWORD pcbRequired    );																		
ResUtilGetProperties(    __in HKEY hkeyClusterKey,    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __out_bcount_part(cbOutPropertyListSize, *pcbBytesReturned) PVOID pOutPropertyList,    __in DWORD cbOutPropertyListSize,    __out LPDWORD pcbBytesReturned,    __out LPDWORD pcbRequired    );																		
ResUtilGetPropertiesToParameterBlock(    __in HKEY hkeyClusterKey,    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __out LPBYTE pOutParams,    __in BOOL bCheckForRequiredProperties,    __deref_out_opt LPWSTR * pszNameOfPropInError    );																		
ResUtilGetProperty(    __in HKEY hkeyClusterKey,    __in const PRESUTIL_PROPERTY_ITEM pPropertyTableItem,    __deref_inout_bcount_part(*pcbOutPropertyItemSize, *pcbOutPropertyItemSize) PVOID *pOutPropertyItem,    __inout LPDWORD pcbOutPropertyItemSize    );																		
ResUtilGetPropertyFormats(    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __out_bcount_part(cbPropertyFormatListSize, *pcbBytesReturned) PVOID pOutPropertyFormatList,    __in DWORD cbPropertyFormatListSize,    __out LPDWORD pcbBytesReturned,    __out LPDWORD pcbRequired    );																		
ResUtilGetPropertySize(    IN HKEY hkeyClusterKey,    IN const PRESUTIL_PROPERTY_ITEM pPropertyTableItem,    IN OUT LPDWORD pcbOutPropertyListSize,    IN OUT LPDWORD pnPropertyCount    );																		
ResUtilGetQwordValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __out PULONGLONG pqwOutValue,    __in ULONGLONG qwDefaultValue    );																		
ResUtilGetResourceDependency(    IN HANDLE       hSelf,    IN LPCWSTR      lpszResourceType    );																		
ResUtilGetResourceDependencyByClass(    IN HCLUSTER                     hCluster,    IN HANDLE                       hSelf,    IN PCLUS_RESOURCE_CLASS_INFO    prci,    IN BOOL                         bRecurse    );																		
ResUtilGetResourceDependencyByName(    IN HCLUSTER hCluster,    IN HANDLE   hSelf,    IN LPCWSTR  lpszResourceType,    IN BOOL     bRecurse    );																		
ResUtilGetResourceDependentIPAddressProps(    __in HRESOURCE hResource,    __out_ecount_part(*pcchAddress, *pcchAddress) LPWSTR pszAddress,    __inout DWORD *pcchAddress,    __out_ecount_part(*pcchSubnetMask, *pcchSubnetMask) LPWSTR pszSubnetMask,    __inout DWORD *pcchSubnetMask,    __out_ecount_part(*pcchNetwork, *pcchNetwork) LPWSTR pszNetwork,    __inout DWORD *pcch_Network    );																		
ResUtilGetResourceName(    __in HRESOURCE hResource,    __out_ecount_part(*pcchResourceNameInOut, *pcchResourceNameInOut) PWSTR pszResourceName,    __inout DWORD *pcchResourceNameInOut    );																		
ResUtilGetResourceNameDependency(    IN LPCWSTR      lpszResourceName,    IN LPCWSTR      lpszResourceType    );																		
ResUtilGetSzProperty(    __deref_out LPWSTR *ppszOutValue,    __in const PCLUSPROP_SZ pValueStruct,    __in_opt LPCWSTR pszOldValue,    __deref_inout_bcount(*pcbPropertyListSize) LPBYTE *ppPropertyList,    __inout LPDWORD pcbPropertyListSize    );																		
ResUtilGetSzValue(    IN HKEY hkeyClusterKey,    IN LPCWSTR pszValueName    );																		
ResUtilIsPathValid(    IN LPCWSTR pszPath    );																		
ResUtilIsResourceClassEqual(    IN PCLUS_RESOURCE_CLASS_INFO    prci,    IN HRESOURCE                    hResource    );																		
ResUtilPropertyListFromParameterBlock(    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __out_bcount_part_opt(*pcbOutPropertyListSize, *pcbBytesReturned ) PVOID  pOutPropertyList,    __inout LPDWORD pcbOutPropertyListSize,    __in const LPBYTE pInParams,    __out LPDWORD pcbBytesReturned,    __out LPDWORD pcbRequired    );																		
ResUtilRemoveResourceServiceEnvironment(    IN  LPCWSTR             pszServiceName,    IN  PLOG_EVENT_ROUTINE  pfnLogEvent,    IN  RESOURCE_HANDLE     hResourceHandle    );																		
ResUtilResourcesEqual(    IN HRESOURCE    hSelf,    IN HRESOURCE    hResource    );																		
ResUtilResourceTypesEqual(    IN LPCWSTR      lpszResourceTypeName,    IN HRESOURCE    hResource    );																		
ResUtilSetBinaryValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __in_bcount(cbNewValueSize) const LPBYTE pbNewValue,    __in DWORD cbNewValueSize,    __deref_opt_inout_bcount_full(*pcbOutValueSize) LPBYTE *ppbOutValue,    __inout LPDWORD pcbOutValueSize    );																		
ResUtilSetDwordValue(    IN HKEY hkeyClusterKey,    IN LPCWSTR pszValueName,    IN DWORD dwNewValue,    IN OUT LPDWORD pdwOutValue    );																		
ResUtilSetExpandSzValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __in LPCWSTR pszNewValue,    __inout_opt LPWSTR *ppszOutString    );																		
ResUtilSetMultiSzValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __in_bcount(cbNewValueSize) LPCWSTR pszNewValue,    __in DWORD cbNewValueSize,    __deref_opt_out_bcount_full(*pcbOutValueSize) LPWSTR *ppszOutValue,    __inout_opt LPDWORD pcbOutValueSize    );																		
ResUtilSetPrivatePropertyList(    __in HKEY hkeyClusterKey,    __in_bcount(cbInPropertyListSize) const PVOID pInPropertyList,    __in DWORD cbInPropertyListSize    );																		
ResUtilSetPropertyParameterBlock(    IN HKEY hkeyClusterKey,    IN const PRESUTIL_PROPERTY_ITEM pPropertyTable,    IN PVOID Reserved,    IN const LPBYTE pInParams,    IN const PVOID pInPropertyList,    IN DWORD cbInPropertyListSize,    OUT OPTIONAL LPBYTE pOutParams    );																		
ResUtilSetPropertyParameterBlockEx(    IN HKEY hkeyClusterKey,    IN const PRESUTIL_PROPERTY_ITEM pPropertyTable,    IN PVOID Reserved,    IN const LPBYTE pInParams,    IN const PVOID pInPropertyList,    IN DWORD cbInPropertyListSize,    IN BOOL bForceWrite,    OUT OPTIONAL LPBYTE pOutParams    );																		
ResUtilSetPropertyTable(    __in HKEY hkeyClusterKey,    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __reserved PVOID Reserved,    __in BOOL bAllowUnknownProperties,    __in_bcount(cbInPropertyListSize) const PVOID pInPropertyList,    __in DWORD cbInPropertyListSize,    __out_opt LPBYTE pOutParams    );																		
ResUtilSetPropertyTableEx(    IN HKEY hkeyClusterKey,    IN const PRESUTIL_PROPERTY_ITEM pPropertyTable,    IN PVOID Reserved,    IN BOOL bAllowUnknownProperties,    IN const PVOID pInPropertyList,    IN DWORD cbInPropertyListSize,    IN BOOL bForceWrite,    OUT OPTIONAL LPBYTE pOutParams    );																		
ResUtilSetQwordValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __in ULONGLONG qwNewValue,    __inout_opt PULONGLONG pqwOutValue    );																		
ResUtilSetResourceServiceEnvironment(    IN LPCWSTR pszServiceName,    IN HRESOURCE hResource,    IN PLOG_EVENT_ROUTINE pfnLogEvent,    IN RESOURCE_HANDLE hResourceHandle    );																		
ResUtilSetResourceServiceStartParameters(    IN LPCWSTR pszServiceName,    IN SC_HANDLE schSCMHandle,    IN OUT LPSC_HANDLE phService,    IN PLOG_EVENT_ROUTINE pfnLogEvent,    IN RESOURCE_HANDLE hResourceHandle    );																		
ResUtilSetSzValue(    __in HKEY hkeyClusterKey,    __in LPCWSTR pszValueName,    __in LPCWSTR pszNewValue,    __deref_opt_inout LPWSTR *ppszOutString    );																		
ResUtilSetUnknownProperties(    __in HKEY hkeyClusterKey,    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __in_bcount(cbInPropertyListSize) const PVOID pInPropertyList,    __in DWORD cbInPropertyListSize    );																		
ResUtilStartResourceService(    IN LPCWSTR pszServiceName,    OUT LPSC_HANDLE phServiceHandle    );																		
ResUtilStopResourceService(    IN LPCWSTR pszServiceName    );																		
ResUtilStopService(    IN SC_HANDLE hServiceHandle    );																		
ResUtilTerminateServiceProcessFromResDll(    __in DWORD dwServicePid,    __in BOOL bOffline,    __out PDWORD pdwResourceState,    __in PLOG_EVENT_ROUTINE pfnLogEvent,    __in RESOURCE_HANDLE hResourceHandle    );																		
ResUtilVerifyPrivatePropertyList(    __in_bcount(cbInPropertyListSize) const PVOID pInPropertyList,    __in DWORD cbInPropertyListSize    );																		
ResUtilVerifyPropertyTable(    __in const PRESUTIL_PROPERTY_ITEM pPropertyTable,    __reserved PVOID Reserved,    __in BOOL bAllowUnknownProperties,    __in_bcount(cbInPropertyListSize) const PVOID pInPropertyList,    __in DWORD cbInPropertyListSize,    __out_opt LPBYTE pOutParams    );																		
ResUtilVerifyResourceService(    IN LPCWSTR pszServiceName    );																		
ResUtilVerifyService(    IN SC_HANDLE hServiceHandle    );																		
RetrieveUrlCacheEntryFileA(    __in LPCSTR lpszUrlName,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo,    __reserved DWORD dwReserved    );																		
RetrieveUrlCacheEntryFileW(    __in LPCWSTR lpszUrlName,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo,    __reserved DWORD dwReserved    );																		
RetrieveUrlCacheEntryStreamA(    __in LPCSTR  lpszUrlName,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo,    __in BOOL fRandomRead,    __reserved DWORD dwReserved    );																		
RetrieveUrlCacheEntryStreamW(    __in LPCWSTR  lpszUrlName,    __inout_bcount_opt(*lpcbCacheEntryInfo) LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,    __inout LPDWORD lpcbCacheEntryInfo,    __in BOOL fRandomRead,    __reserved DWORD dwReserved    );																		
RevertToSelf (    VOID    );																		
RollbackComplete (    IN  HANDLE            EnlistmentHandle,    IN  PLARGE_INTEGER    TmVirtualClock    );																		
RollbackEnlistment (    IN HANDLE EnlistmentHandle,    IN PLARGE_INTEGER TmVirtualClock    );																		
RollbackTransaction (    IN HANDLE TransactionHandle    );																		
RollbackTransactionAsync (    IN HANDLE TransactionHandle    );																		
RollforwardTransactionManager (    IN HANDLE TransactionManagerHandle,    IN PLARGE_INTEGER TmVirtualClock    );																		
RoundRect(__in HDC hdc, __in int left, __in int top, __in int right, __in int bottom, __in int width, __in int height);																		
RsopAccessCheckByType(      __in       PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in_opt   PSID pPrincipalSelfSid,    __in       PRSOPTOKEN pRsopToken,    __in       DWORD dwDesiredAccessMask,    __in_ecount_opt(ObjectTypeListLength)   POBJECT_TYPE_LIST pObjectTypeList,    __in       DWORD ObjectTypeListLength,    __in       PGENERIC_MAPPING pGenericMapping,    __in_bcount_opt(*pdwPrivilegeSetLength) PPRIVILEGE_SET pPrivilegeSet,    __in_opt   LPDWORD pdwPrivilegeSetLength,    __out LPDWORD pdwGrantedAccessMask,    __out LPBOOL pbAccessStatus);																		
RsopFileAccessCheck(    __in  LPWSTR pszFileName,    __in  PRSOPTOKEN pRsopToken,    __in  DWORD dwDesiredAccessMask,    __out LPDWORD pdwGrantedAccessMask,    __out LPBOOL pbAccessStatus);																		
RsopResetPolicySettingStatus( __in DWORD               dwFlags,                              __in IWbemServices*      pServices,                              __in IWbemClassObject*   pSettingInstance );																		
RsopSetPolicySettingStatus( __in DWORD                       dwFlags,                            __in IWbemServices*              pServices,                            __in IWbemClassObject*           pSettingInstance,                            __in DWORD                       nInfo,                            __in_ecount(nInfo) POLICYSETTINGSTATUSINFO*    pStatus );																		
RtmAddNextHop (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      PRTM_NEXTHOP_INFO               NextHopInfo,    IN OUT  PRTM_NEXTHOP_HANDLE             NextHopHandle OPTIONAL,    OUT     PRTM_NEXTHOP_CHANGE_FLAGS       ChangeFlags    );																		
RtmAddRouteToDest (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN OUT  PRTM_ROUTE_HANDLE               RouteHandle     OPTIONAL,    IN      PRTM_NET_ADDRESS                DestAddress,    IN      PRTM_ROUTE_INFO                 RouteInfo,    IN      ULONG                           TimeToLive,    IN      RTM_ROUTE_LIST_HANDLE           RouteListHandle OPTIONAL,    IN      RTM_NOTIFY_FLAGS                NotifyType,    IN      RTM_NOTIFY_HANDLE               NotifyHandle    OPTIONAL,    IN OUT  PRTM_ROUTE_CHANGE_FLAGS         ChangeFlags    );																		
RtmBlockMethods (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      HANDLE                          TargetHandle OPTIONAL,    IN      UCHAR                           TargetType   OPTIONAL,    IN      DWORD                           BlockingFlag    );																		
RtmCreateDestEnum (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_VIEW_SET                    TargetViews,    IN      RTM_ENUM_FLAGS                  EnumFlags,    IN      PRTM_NET_ADDRESS                NetAddress,    IN      ULONG                           ProtocolId,    OUT     PRTM_ENUM_HANDLE                RtmEnumHandle    );																		
RtmCreateNextHopEnum (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENUM_FLAGS                  EnumFlags,    IN      PRTM_NET_ADDRESS                NetAddress,    OUT     PRTM_ENUM_HANDLE                RtmEnumHandle    );																		
RtmCreateRouteEnum (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_DEST_HANDLE                 DestHandle        OPTIONAL,    IN      RTM_VIEW_SET                    TargetViews,    IN      RTM_ENUM_FLAGS                  EnumFlags,    IN      PRTM_NET_ADDRESS                StartDest         OPTIONAL,    IN      RTM_MATCH_FLAGS                 MatchingFlags,    IN      PRTM_ROUTE_INFO                 CriteriaRoute     OPTIONAL,    IN      ULONG                           CriteriaInterface OPTIONAL,    OUT     PRTM_ENUM_HANDLE                RtmEnumHandle    );																		
RtmCreateRouteList (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    OUT     PRTM_ROUTE_LIST_HANDLE          RouteListHandle    );																		
RtmCreateRouteListEnum (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_LIST_HANDLE           RouteListHandle,    OUT     PRTM_ENUM_HANDLE                RtmEnumHandle    );																		
RtmDeleteEnumHandle (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENUM_HANDLE                 EnumHandle    );																		
RtmDeleteNextHop (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NEXTHOP_HANDLE              NextHopHandle  OPTIONAL,    IN      PRTM_NEXTHOP_INFO               NextHopInfo    );																		
RtmDeleteRouteList (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_LIST_HANDLE           RouteListHandle    );																		
RtmDeleteRouteToDest (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_HANDLE                RouteHandle,    OUT     PRTM_ROUTE_CHANGE_FLAGS         ChangeFlags    );																		
RtmDeregisterEntity (    IN      RTM_ENTITY_HANDLE               RtmRegHandle    );																		
RtmDeregisterFromChangeNotification (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NOTIFY_HANDLE               NotifyHandle    );																		
RtmFindNextHop (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      PRTM_NEXTHOP_INFO               NextHopInfo,    OUT     PRTM_NEXTHOP_HANDLE             NextHopHandle,    OUT     PRTM_NEXTHOP_INFO              *NextHopPointer OPTIONAL    );																		
RtmGetChangedDests (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NOTIFY_HANDLE               NotifyHandle,    IN OUT  PUINT                           NumDests,    OUT     PRTM_DEST_INFO                  ChangedDests    );																		
RtmGetChangeStatus (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NOTIFY_HANDLE               NotifyHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    OUT     PBOOL                           ChangeStatus    );																		
RtmGetDestInfo (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    IN      ULONG                           ProtocolId,    IN      RTM_VIEW_SET                    TargetViews,    OUT     PRTM_DEST_INFO                  DestInfo    );																		
RtmGetEntityInfo (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENTITY_HANDLE               EntityHandle,    OUT     PRTM_ENTITY_INFO                EntityInfo    );																		
RtmGetEntityMethods (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENTITY_HANDLE               EntityHandle,    IN OUT  PUINT                           NumMethods,    OUT     PRTM_ENTITY_EXPORT_METHOD       ExptMethods    );																		
RtmGetEnumDests (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENUM_HANDLE                 EnumHandle,    IN OUT  PUINT                           NumDests,    OUT     PRTM_DEST_INFO                  DestInfos    );																		
RtmGetEnumNextHops (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENUM_HANDLE                 EnumHandle,    IN OUT  PUINT                           NumNextHops,    OUT     PRTM_NEXTHOP_HANDLE             NextHopHandles    );																		
RtmGetEnumRoutes (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENUM_HANDLE                 EnumHandle,    IN OUT  PUINT                           NumRoutes,    OUT     PRTM_ROUTE_HANDLE               RouteHandles    );																		
RtmGetExactMatchDestination (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      PRTM_NET_ADDRESS                DestAddress,    IN      ULONG                           ProtocolId,    IN      RTM_VIEW_SET                    TargetViews,    OUT     PRTM_DEST_INFO                  DestInfo    );																		
RtmGetExactMatchRoute (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      PRTM_NET_ADDRESS                DestAddress,    IN      RTM_MATCH_FLAGS                 MatchingFlags,    IN OUT  PRTM_ROUTE_INFO                 RouteInfo,    IN      ULONG                           InterfaceIndex,    IN      RTM_VIEW_SET                    TargetViews,    OUT     PRTM_ROUTE_HANDLE               RouteHandle    );																		
RtmGetLessSpecificDestination (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    IN      ULONG                           ProtocolId,    IN      RTM_VIEW_SET                    TargetViews,    OUT     PRTM_DEST_INFO                  DestInfo    );																		
RtmGetListEnumRoutes (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENUM_HANDLE                 EnumHandle,    IN OUT  PUINT                           NumRoutes,    __out_ecount(*NumRoutes) OUT     PRTM_ROUTE_HANDLE               RouteHandles    );																		
RtmGetMostSpecificDestination (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      PRTM_NET_ADDRESS                DestAddress,    IN      ULONG                           ProtocolId,    IN      RTM_VIEW_SET                    TargetViews,    OUT     PRTM_DEST_INFO                  DestInfo    );																		
RtmGetNextHopInfo (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NEXTHOP_HANDLE              NextHopHandle,    OUT     PRTM_NEXTHOP_INFO               NextHopInfo    );																		
RtmGetNextHopPointer (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NEXTHOP_HANDLE              NextHopHandle,    OUT     PRTM_NEXTHOP_INFO              *NextHopPointer    );																		
RtmGetOpaqueInformationPointer (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    OUT     PVOID                          *OpaqueInfoPointer    );																		
RtmGetRegisteredEntities (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN OUT  PUINT                           NumEntities,    OUT     PRTM_ENTITY_HANDLE              EntityHandles,    OUT     PRTM_ENTITY_INFO                EntityInfos OPTIONAL    );																		
RtmGetRouteInfo (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_HANDLE                RouteHandle,    OUT     PRTM_ROUTE_INFO                 RouteInfo   OPTIONAL,    OUT     PRTM_NET_ADDRESS                DestAddress OPTIONAL    );																		
RtmGetRoutePointer (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_HANDLE                RouteHandle,    OUT     PRTM_ROUTE_INFO                *RoutePointer    );																		
RtmHoldDestination (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    IN      RTM_VIEW_SET                    TargetViews,    IN      ULONG                           HoldTime    );																		
RtmIgnoreChangedDests (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NOTIFY_HANDLE               NotifyHandle,    IN      UINT                            NumDests,    IN      PRTM_DEST_HANDLE                ChangedDests    );																		
RtmInsertInRouteList (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_LIST_HANDLE           RouteListHandle OPTIONAL,    IN      UINT                            NumRoutes,    IN      PRTM_ROUTE_HANDLE               RouteHandles    );																		
RtmInvokeMethod (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ENTITY_HANDLE               EntityHandle,    IN      PRTM_ENTITY_METHOD_INPUT        Input,    IN OUT  PUINT                           OutputSize,    OUT     PRTM_ENTITY_METHOD_OUTPUT       Output    );																		
RtmIsBestRoute (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_HANDLE                RouteHandle,    OUT     PRTM_VIEW_SET                   BestInViews    );																		
RtmIsMarkedForChangeNotification (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NOTIFY_HANDLE               NotifyHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    OUT     PBOOL                           DestMarked    );																		
RtmLockDestination(    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    IN      BOOL                            Exclusive,    IN      BOOL                            LockDest    );																		
RtmLockNextHop(    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NEXTHOP_HANDLE              NextHopHandle,    IN      BOOL                            Exclusive,    IN      BOOL                            LockNextHop,    OUT     PRTM_NEXTHOP_INFO              *NextHopPointer OPTIONAL    );																		
RtmLockRoute(    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_HANDLE                RouteHandle,    IN      BOOL                            Exclusive,    IN      BOOL                            LockRoute,    OUT     PRTM_ROUTE_INFO                *RoutePointer OPTIONAL    );																		
RtmMarkDestForChangeNotification (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NOTIFY_HANDLE               NotifyHandle,    IN      RTM_DEST_HANDLE                 DestHandle,    IN      BOOL                            MarkDest    );																		
RtmReferenceHandles (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      UINT                            NumHandles,    IN      HANDLE                         *RtmHandles    );																		
RtmRegisterEntity (    IN      PRTM_ENTITY_INFO                RtmEntityInfo,    IN      PRTM_ENTITY_EXPORT_METHODS      ExportMethods OPTIONAL,    IN      RTM_EVENT_CALLBACK              EventCallback,    IN      BOOL                            ReserveOpaquePointer,    OUT     PRTM_REGN_PROFILE               RtmRegProfile,    OUT     PRTM_ENTITY_HANDLE              RtmRegHandle    );																		
RtmRegisterForChangeNotification (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_VIEW_SET                    TargetViews,    IN      RTM_NOTIFY_FLAGS                NotifyFlags,    IN      PVOID                           NotifyContext,    OUT     PRTM_NOTIFY_HANDLE              NotifyHandle    );																		
RtmReleaseChangedDests (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_NOTIFY_HANDLE               NotifyHandle,    IN      UINT                            NumDests,    IN      PRTM_DEST_INFO                  ChangedDests    );																		
RtmReleaseDestInfo (    IN      RTM_ENTITY_HANDLE              RtmRegHandle,    IN      PRTM_DEST_INFO                 DestInfo    );																		
RtmReleaseDests (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      UINT                            NumDests,    IN      PRTM_DEST_INFO                  DestInfos    );																		
RtmReleaseEntities (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      UINT                            NumEntities,    IN      PRTM_ENTITY_HANDLE              EntityHandles    );																		
RtmReleaseEntityInfo (    IN      RTM_ENTITY_HANDLE              RtmRegHandle,    IN      PRTM_ENTITY_INFO               EntityInfo    );																		
RtmReleaseNextHopInfo (    IN      RTM_ENTITY_HANDLE              RtmRegHandle,    IN      PRTM_NEXTHOP_INFO              NextHopInfo    );																		
RtmReleaseNextHops (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      UINT                            NumNextHops,    IN      PRTM_NEXTHOP_HANDLE             NextHopHandles    );																		
RtmReleaseRouteInfo (    IN      RTM_ENTITY_HANDLE              RtmRegHandle,    IN      PRTM_ROUTE_INFO                RouteInfo    );																		
RtmReleaseRoutes (    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      UINT                            NumRoutes,    IN      PRTM_ROUTE_HANDLE               RouteHandles    );																		
RtmUpdateAndUnlockRoute(    IN      RTM_ENTITY_HANDLE               RtmRegHandle,    IN      RTM_ROUTE_HANDLE                RouteHandle,    IN      ULONG                           TimeToLive,    IN      RTM_ROUTE_LIST_HANDLE           RouteListHandle OPTIONAL,    IN      RTM_NOTIFY_FLAGS                NotifyType,    IN      RTM_NOTIFY_HANDLE               NotifyHandle    OPTIONAL,    OUT     PRTM_ROUTE_CHANGE_FLAGS         ChangeFlags    );																		
SaveDC(__in HDC hdc);																		
ScaleViewportExtEx( __in HDC hdc, __in int xn, __in int dx, __in int yn, __in int yd, __out_opt LPSIZE lpsz);																		
ScaleWindowExtEx( __in HDC hdc, __in int xn, __in int xd, __in int yn, __in int yd, __out_opt LPSIZE lpsz);																		
SCardAddReaderToGroupA(    __in SCARDCONTEXT hContext,    __in LPCSTR szReaderName,    __in LPCSTR szGroupName);																		
SCardAddReaderToGroupW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szReaderName,    __in LPCWSTR szGroupName);																		
SCardBeginTransaction(    __in    SCARDHANDLE hCard);																		
SCardCancel(    __in    SCARDCONTEXT hContext);																		
SCardCancelTransaction(    __in    SCARDHANDLE hCard);																		
SCardConnectA(    __in    SCARDCONTEXT hContext,    __in    LPCSTR szReader,    __in    DWORD dwShareMode,    __in    DWORD dwPreferredProtocols,    __out   LPSCARDHANDLE phCard,    __out   LPDWORD pdwActiveProtocol);																		
SCardConnectW(    __in    SCARDCONTEXT hContext,    __in    LPCWSTR szReader,    __in    DWORD dwShareMode,    __in    DWORD dwPreferredProtocols,    __out   LPSCARDHANDLE phCard,    __out   LPDWORD pdwActiveProtocol);																		
SCardControl(    __in    SCARDHANDLE hCard,    __in    DWORD dwControlCode,    __in_bcount(cbInBufferSize) LPCVOID lpInBuffer,    __in    DWORD cbInBufferSize,    __out_bcount(cbOutBufferSize) LPVOID lpOutBuffer,    __in    DWORD cbOutBufferSize,    __out   LPDWORD lpBytesReturned);																		
SCardDisconnect(    __in    SCARDHANDLE hCard,    __in    DWORD dwDisposition);																		
SCardDlgExtendedError (void);																		
SCardEndTransaction(    __in    SCARDHANDLE hCard,    __in    DWORD dwDisposition);																		
SCardEstablishContext(__in  DWORD dwScope,__reserved  LPCVOID pvReserved1,__reserved  LPCVOID pvReserved2,__out LPSCARDCONTEXT phContext);																		
SCardForgetCardTypeA(    __in SCARDCONTEXT hContext,    __in LPCSTR szCardName);																		
SCardForgetCardTypeW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szCardName);																		
SCardForgetReaderA(    __in SCARDCONTEXT hContext,    __in LPCSTR szReaderName);																		
SCardForgetReaderGroupA(    __in SCARDCONTEXT hContext,    __in LPCSTR szGroupName);																		
SCardForgetReaderGroupW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szGroupName);																		
SCardForgetReaderW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szReaderName);																		
SCardFreeMemory(    __in SCARDCONTEXT hContext,    __in LPCVOID pvMem);																		
SCardGetAttrib(    __in    SCARDHANDLE hCard,    __in    DWORD dwAttrId,    __out_bcount_opt(*pcbAttrLen) LPBYTE pbAttr,    __inout LPDWORD pcbAttrLen);																		
SCardGetCardTypeProviderNameA(__in      SCARDCONTEXT hContext,__in      LPCSTR szCardName,__in      DWORD dwProviderId,__out_ecount_opt(*pcchProvider) LPSTR szProvider,__inout   LPDWORD pcchProvider);																		
SCardGetCardTypeProviderNameW(    __in      SCARDCONTEXT hContext,    __in      LPCWSTR szCardName,    __in      DWORD dwProviderId,    __out_ecount_opt(*pcchProvider) LPWSTR szProvider,    __inout   LPDWORD pcchProvider);																		
SCardGetProviderIdA(__in     SCARDCONTEXT hContext,__in     LPCSTR szCard,__out    LPGUID pguidProviderId);																		
SCardGetProviderIdW(__in     SCARDCONTEXT hContext,__in     LPCWSTR szCard,__out    LPGUID pguidProviderId);																		
SCardGetStatusChangeA(    __in    SCARDCONTEXT hContext,    __in    DWORD dwTimeout,    __inout LPSCARD_READERSTATEA rgReaderStates,    __in    DWORD cReaders);																		
SCardGetStatusChangeW(    __in    SCARDCONTEXT hContext,    __in    DWORD dwTimeout,    __inout LPSCARD_READERSTATEW rgReaderStates,    __in    DWORD cReaders);																		
SCardGetTransmitCount(    __in SCARDHANDLE hCard,    __out LPDWORD pcTransmitCount);																		
SCardIntroduceCardTypeA(    __in     SCARDCONTEXT hContext,    __in     LPCSTR szCardName,    __in_opt LPCGUID pguidPrimaryProvider,    __in_opt LPCGUID rgguidInterfaces,    __in     DWORD dwInterfaceCount,    __in     LPCBYTE pbAtr,    __in     LPCBYTE pbAtrMask,    __in     DWORD cbAtrLen);																		
SCardIntroduceCardTypeW(    __in     SCARDCONTEXT hContext,    __in     LPCWSTR szCardName,    __in_opt LPCGUID pguidPrimaryProvider,    __in_opt LPCGUID rgguidInterfaces,    __in     DWORD dwInterfaceCount,    __in     LPCBYTE pbAtr,    __in     LPCBYTE pbAtrMask,    __in     DWORD cbAtrLen);																		
SCardIntroduceReaderA(    __in SCARDCONTEXT hContext,    __in LPCSTR szReaderName,    __in LPCSTR szDeviceName);																		
SCardIntroduceReaderGroupA(    __in SCARDCONTEXT hContext,    __in LPCSTR szGroupName);																		
SCardIntroduceReaderGroupW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szGroupName);																		
SCardIntroduceReaderW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szReaderName,    __in LPCWSTR szDeviceName);																		
SCardIsValidContext(__in SCARDCONTEXT hContext);																		
SCardListCardsA(__in      SCARDCONTEXT hContext,__in_opt  LPCBYTE pbAtr,__in_ecount_opt(cguidInterfaceCount)  LPCGUID rgquidInterfaces,__in      DWORD cguidInterfaceCount,__nullnullterminated __out_ecount_opt(*pcchCards) LPSTR mszCards,__inout   LPDWORD pcchCards);																		
SCardListCardsW(__in      SCARDCONTEXT hContext,__in_opt  LPCBYTE pbAtr,__in_ecount_opt(cguidInterfaceCount)  LPCGUID rgquidInterfaces,__in      DWORD cguidInterfaceCount,__nullnullterminated __out_ecount_opt(*pcchCards) LPWSTR mszCards,__inout   LPDWORD pcchCards);																		
SCardListInterfacesA(__in     SCARDCONTEXT hContext,__in     LPCSTR szCard,__out    LPGUID pguidInterfaces,__inout  LPDWORD pcguidInterfaces);																		
SCardListInterfacesW(__in     SCARDCONTEXT hContext,__in     LPCWSTR szCard,__out    LPGUID pguidInterfaces,__inout  LPDWORD pcguidInterfaces);																		
SCardListReaderGroupsA(__in SCARDCONTEXT hContext,__nullnullterminated __out_ecount_opt(*pcchGroups)   LPSTR mszGroups,__inout LPDWORD pcchGroups);																		
SCardListReaderGroupsW(__in SCARDCONTEXT hContext,__nullnullterminated __out_ecount_opt(*pcchGroups)   LPWSTR mszGroups,__inout LPDWORD pcchGroups);																		
SCardListReadersA(__in     SCARDCONTEXT hContext,__in_opt LPCSTR mszGroups,__nullnullterminated __out_ecount_opt(*pcchReaders) LPSTR mszReaders,__inout  LPDWORD pcchReaders);																		
SCardListReadersW(__in     SCARDCONTEXT hContext,__in_opt LPCWSTR mszGroups,__nullnullterminated __out_ecount_opt(*pcchReaders) LPWSTR mszReaders,__inout  LPDWORD pcchReaders);																		
SCardLocateCardsA(    __in    SCARDCONTEXT hContext,    __in    LPCSTR mszCards,    __inout LPSCARD_READERSTATEA rgReaderStates,    __in    DWORD cReaders);																		
SCardLocateCardsByATRA(    __in    SCARDCONTEXT hContext,    __in    LPSCARD_ATRMASK rgAtrMasks,    __in    DWORD cAtrs,    __inout LPSCARD_READERSTATEA rgReaderStates,    __in    DWORD cReaders);																		
SCardLocateCardsByATRW(    __in    SCARDCONTEXT hContext,    __in    LPSCARD_ATRMASK rgAtrMasks,    __in    DWORD cAtrs,    __inout LPSCARD_READERSTATEW rgReaderStates,    __in    DWORD cReaders);																		
SCardLocateCardsW(    __in    SCARDCONTEXT hContext,    __in    LPCWSTR mszCards,    __inout LPSCARD_READERSTATEW rgReaderStates,    __in    DWORD cReaders);																		
SCardReadCacheA(    __in  SCARDCONTEXT hContext,    __in  UUID *CardIdentifier,    __in  DWORD FreshnessCounter,    __in  LPSTR LookupName,    __out_bcount(*DataLen) PBYTE Data,    __out DWORD *DataLen);																		
SCardReadCacheW(    __in  SCARDCONTEXT hContext,    __in  UUID *CardIdentifier,    __in  DWORD FreshnessCounter,    __in  LPWSTR LookupName,    __out_bcount(*DataLen) PBYTE Data,    __out DWORD *DataLen);																		
SCardReconnect(    __in      SCARDHANDLE hCard,    __in      DWORD dwShareMode,    __in      DWORD dwPreferredProtocols,    __in      DWORD dwInitialization,    __out_opt LPDWORD pdwActiveProtocol);																		
SCardReleaseContext(__in SCARDCONTEXT hContext);																		
SCardRemoveReaderFromGroupA(    __in SCARDCONTEXT hContext,    __in LPCSTR szReaderName,    __in LPCSTR szGroupName);																		
SCardRemoveReaderFromGroupW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szReaderName,    __in LPCWSTR szGroupName);																		
SCardSetAttrib(    __in SCARDHANDLE hCard,    __in DWORD dwAttrId,    __in_bcount(cbAttrLen) LPCBYTE pbAttr,    __in DWORD cbAttrLen);																		
SCardSetCardTypeProviderNameA(    __in SCARDCONTEXT hContext,    __in LPCSTR szCardName,    __in DWORD dwProviderId,    __in LPCSTR szProvider);																		
SCardSetCardTypeProviderNameW(    __in SCARDCONTEXT hContext,    __in LPCWSTR szCardName,    __in DWORD dwProviderId,    __in LPCWSTR szProvider);																		
SCardState(    __in    SCARDHANDLE hCard,    __out   LPDWORD pdwState,    __out   LPDWORD pdwProtocol,    __out_bcount(*pcbAtrLen)   LPBYTE pbAtr,    __inout LPDWORD pcbAtrLen);																		
SCardStatusA(    __in        SCARDHANDLE hCard,    __nullnullterminated __out_ecount_opt(*pcchReaderLen) LPSTR mszReaderNames,    __inout_opt LPDWORD pcchReaderLen,    __out_opt   LPDWORD pdwState,    __out_opt   LPDWORD pdwProtocol,    __out_ecount_opt(*pcbAtrLen) LPBYTE pbAtr,    __inout_opt LPDWORD pcbAtrLen);																		
SCardStatusW(    __in        SCARDHANDLE hCard,    __nullnullterminated __out_ecount_opt(*pcchReaderLen) LPWSTR mszReaderNames,    __inout_opt LPDWORD pcchReaderLen,    __out_opt   LPDWORD pdwState,    __out_opt   LPDWORD pdwProtocol,    __out_ecount_opt(*pcbAtrLen) LPBYTE pbAtr,    __inout_opt LPDWORD pcbAtrLen);																		
SCardTransmit(    __in        SCARDHANDLE hCard,    __in        LPCSCARD_IO_REQUEST pioSendPci,    __in_bcount(cbSendLength) LPCBYTE pbSendBuffer,    __in        DWORD cbSendLength,    __inout_opt LPSCARD_IO_REQUEST pioRecvPci,    __out_bcount(*pcbRecvLength) LPBYTE pbRecvBuffer,    __inout     LPDWORD pcbRecvLength);																		
SCardUIDlgSelectCardA(    LPOPENCARDNAMEA_EX);																		
SCardUIDlgSelectCardW(    LPOPENCARDNAMEW_EX);																		
SCardWriteCacheA(    __in SCARDCONTEXT hContext,    __in UUID *CardIdentifier,    __in DWORD FreshnessCounter,    __in LPSTR LookupName,    __in_bcount(DataLen) PBYTE Data,    __in DWORD DataLen);																		
SCardWriteCacheW(    __in SCARDCONTEXT hContext,    __in UUID *CardIdentifier,    __in DWORD FreshnessCounter,    __in LPWSTR LookupName,    __in_bcount(DataLen) PBYTE Data,    __in DWORD DataLen);																		
ScheduleJob(__in    HANDLE  hPrinter,        DWORD   JobId);																		
ScreenToClient(__in HWND hWnd,__inout LPPOINT lpPoint);																		
ScrollConsoleScreenBufferA(    __in HANDLE hConsoleOutput,    __in CONST SMALL_RECT *lpScrollRectangle,    __in_opt CONST SMALL_RECT *lpClipRectangle,    __in COORD dwDestinationOrigin,    __in CONST CHAR_INFO *lpFill    );																		
ScrollConsoleScreenBufferW(    __in HANDLE hConsoleOutput,    __in CONST SMALL_RECT *lpScrollRectangle,    __in_opt CONST SMALL_RECT *lpClipRectangle,    __in COORD dwDestinationOrigin,    __in CONST CHAR_INFO *lpFill    );																		
ScrollDC(    __in HDC hDC,    __in int dx,    __in int dy,    __in_opt CONST RECT *lprcScroll,    __in_opt CONST RECT *lprcClip,    __in_opt HRGN hrgnUpdate,    __out_opt LPRECT lprcUpdate);																		
ScrollWindow(    __in HWND hWnd,    __in int XAmount,    __in int YAmount,    __in_opt CONST RECT *lpRect,    __in_opt CONST RECT *lpClipRect);																		
ScrollWindowEx(    __in HWND hWnd,    __in int dx,    __in int dy,    __in_opt CONST RECT *prcScroll,    __in_opt CONST RECT *prcClip,    __in_opt HRGN hrgnUpdate,    __out_opt LPRECT prcUpdate,    __in UINT flags);																		
SearchPathA(    __in_opt  LPCSTR lpPath,    __in      LPCSTR lpFileName,    __in_opt  LPCSTR lpExtension,    __in      DWORD nBufferLength,    __out_ecount_part_opt(nBufferLength, return + 1) LPSTR lpBuffer,    __out_opt LPSTR *lpFilePart    );																		
SearchPathW(    __in_opt  LPCWSTR lpPath,    __in      LPCWSTR lpFileName,    __in_opt  LPCWSTR lpExtension,    __in      DWORD nBufferLength,    __out_ecount_part_opt(nBufferLength, return + 1) LPWSTR lpBuffer,    __out_opt LPWSTR *lpFilePart    );																		
SearchTreeForFile(    __in PCSTR RootPath,    __in PCSTR InputPathName,    __out_ecount(MAX_PATH + 1) PSTR OutputPathBuffer    );																		
SearchTreeForFile(__in PCSTR RootPath,__in PCSTR InputPathName,__out_ecount(MAX_PATH + 1) PSTR OutputPathBuffer);																		
SearchTreeForFileW(    __in PCWSTR RootPath,    __in PCWSTR InputPathName,    __out_ecount(MAX_PATH + 1) PWSTR OutputPathBuffer    );																		
SearchTreeForFileW(__in PCWSTR RootPath,__in PCWSTR InputPathName,__out_ecount(MAX_PATH + 1) PWSTR OutputPathBuffer);																		
SecurityDescriptorToBinarySD(VARIANT vVarSecDes,PSECURITY_DESCRIPTOR * ppSecurityDescriptor,PDWORD pdwSDLength,LPCWSTR pszServerName,LPCWSTR userName,LPCWSTR passWord,DWORD dwFlags);																		
SelectClipPath(__in HDC hdc, __in int mode);																		
SelectClipRgn(__in HDC hdc, __in_opt HRGN hrgn);																		
SelectObject(__in HDC hdc, __in HGDIOBJ h);																		
SelectPalette(__in HDC hdc, __in HPALETTE hPal, __in BOOL bForceBkgd);																		
SendARP(    __in IPAddr DestIP,    __in IPAddr SrcIP,    __out_bcount(*PhyAddrLen) PVOID pMacAddr,    __inout PULONG  PhyAddrLen    );																		
SendDlgItemMessageA(    __in HWND hDlg,    __in int nIDDlgItem,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
SendDlgItemMessageW(    __in HWND hDlg,    __in int nIDDlgItem,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
SendInput( __in UINT cInputs, __in_ecount(cInputs) LPINPUT pInputs, __in int cbSize); 	
SendMessage(__in HWND hWnd,__in UINT Msg,__in WPARAM wParam,__in LPARAM lParam);																
SendMessageA(__in HWND hWnd,__in UINT Msg,__in WPARAM wParam,__in LPARAM lParam);																		
SendMessageCallbackA(    __in HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam,    __in SENDASYNCPROC lpResultCallBack,    __in ULONG_PTR dwData);																		
SendMessageCallbackW(    __in HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam,    __in SENDASYNCPROC lpResultCallBack,    __in ULONG_PTR dwData);																		
SendMessageTimeoutA(    __in HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam,    __in UINT fuFlags,    __in UINT uTimeout,    __out_opt PDWORD_PTR lpdwResult);																		
SendMessageTimeoutW(    __in HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam,    __in UINT fuFlags,    __in UINT uTimeout,    __out_opt PDWORD_PTR lpdwResult);																		
SendMessageW(__in HWND hWnd,__in UINT Msg,__in WPARAM wParam,__in LPARAM lParam);																		
SendNotifyMessageA(    __in HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
SendNotifyMessageW(    __in HWND hWnd,    __in UINT Msg,    __in WPARAM wParam,    __in LPARAM lParam);																		
SendSAS(__in BOOL AsUser);																		
SetAbortProc(__in HDC hdc, __in ABORTPROC proc);																		
SetAclInformation (__inout PACL pAcl,__in_bcount(nAclInformationLength) LPVOID pAclInformation,    __in    DWORD nAclInformationLength,    __in    ACL_INFORMATION_CLASS dwAclInformationClass    );																		
SetActiveWindow(__in HWND hWnd);																		
SetArcDirection(__in HDC hdc, __in int dir);																		
SetBitmapBits(__in HBITMAP hbm,__in DWORD cb,__in_bcount(cb) CONST VOID *pvBits);																		
SetBitmapBits(__in HBITMAP hbm,__in DWORD cb,__in_bcount(cb) CONST VOID *pvBits);																		
SetBitmapDimensionEx( __in HBITMAP hbm, __in int w, __in int h, __out_opt LPSIZE lpsz);																		
SetBkColor(__in HDC hdc, __in COLORREF color);																		
SetBkMode(__in HDC hdc, __in int mode);																		
SetBoundsRect(__in HDC hdc, __in_opt CONST RECT * lprect, __in UINT flags);																		
SetBrushOrgEx( __in HDC hdc, __in int x, __in int y, __out_opt LPPOINT lppt);																		
SetCalendarInfoA(    __in LCID     Locale,    __in CALID    Calendar,    __in CALTYPE  CalType,    __in LPCSTR  lpCalData);																		
SetCalendarInfoW(    __in LCID     Locale,    __in CALID    Calendar,    __in CALTYPE  CalType,    __in LPCWSTR  lpCalData);																		
SetCapture(    __in HWND hWnd);																		
SetCaretBlinkTime(__in UINT uMSeconds);																		
SetCaretPos(__in int X,__in int Y);																		
SetClassLongA(__in HWND hWnd,__in int nIndex,__in LONG dwNewLong);																		
SetClassLongPtrA(__in HWND hWnd,__in int nIndex,__in LONG_PTR dwNewLong);																		
SetClassLongPtrW(__in HWND hWnd,__in int nIndex,__in LONG_PTR dwNewLong);																		
SetClassLongW(__in HWND hWnd,__in int nIndex,__in LONG dwNewLong);																		
SetClassWord(__in HWND hWnd,__in int nIndex,__in WORD wNewWord);																		
SetClipboardData(    __in UINT uFormat,    __in_opt HANDLE hMem);																		
SetClipboardViewer(    __in HWND hWndNewViewer);																		
SetClusterGroupName(    __in HGROUP hGroup,    __in LPCWSTR lpszGroupName    );																		
SetClusterGroupNodeList(    __in HGROUP hGroup,    __in DWORD NodeCount,    __in_ecount( NodeCount ) HNODE NodeList[]    );																		
SetClusterName(    __in HCLUSTER hCluster,    __in LPCWSTR lpszNewClusterName    );																		
SetClusterNetworkName(    __in HNETWORK hNetwork,    __in LPCWSTR lpszName    );																		
SetClusterNetworkPriorityOrder(    __in HCLUSTER hCluster,    __in DWORD NetworkCount,    __in_ecount( NetworkCount ) HNETWORK NetworkList[]    );																		
SetClusterQuorumResource(    __in     HRESOURCE hResource,    __in_opt LPCWSTR   lpszDeviceName,    __in     DWORD     dwMaxQuoLogSize    );																		
SetClusterResourceDependencyExpression(    __in HRESOURCE hResource,    __in LPCWSTR lpszDependencyExpression    );																		
SetClusterResourceName(    __in HRESOURCE hResource,    __in LPCWSTR lpszResourceName    );																		
SetClusterServiceAccountPassword(    __in LPCWSTR lpszClusterName,    __in LPCWSTR lpszNewPassword,    __in DWORD dwFlags,    __out_bcount_part_opt(*lpcbReturnStatusBufferSize, *lpcbReturnStatusBufferSize) PCLUSTER_SET_PASSWORD_STATUS lpReturnStatusBuffer,    __inout LPDWORD lpcbReturnStatusBufferSize    );																		
SetColorAdjustment( __in HDC hdc, __in CONST COLORADJUSTMENT *lpca);																		
SetColorSpace( __in HDC hdc, __in HCOLORSPACE hcs);																		
SetCommBreak(    __in HANDLE hFile    );																		
SetCommConfig(    __in HANDLE hCommDev,    __in_bcount(dwSize) LPCOMMCONFIG lpCC,    __in DWORD dwSize    );																		
SetCommMask(    __in HANDLE hFile,    __in DWORD dwEvtMask    );																		
SetCommState(    __in HANDLE hFile,    __in LPDCB lpDCB    );																		
SetCommTimeouts(    __in HANDLE hFile,    __in LPCOMMTIMEOUTS lpCommTimeouts    );																		
SetComputerNameA (    __in LPCSTR lpComputerName    );																		
SetComputerNameExA (    __in COMPUTER_NAME_FORMAT NameType,    __in LPCSTR lpBuffer    );																		
SetComputerNameExW (    __in COMPUTER_NAME_FORMAT NameType,    __in LPCWSTR lpBuffer    );																		
SetComputerNameW (    __in LPCWSTR lpComputerName    );																		
SetConsoleActiveScreenBuffer(    __in HANDLE hConsoleOutput    );																		
SetConsoleCP(    __in UINT wCodePageID    );																		
SetConsoleCtrlHandler(    __in_opt PHANDLER_ROUTINE HandlerRoutine,    __in BOOL Add);																		
SetConsoleCursorInfo(    __in HANDLE hConsoleOutput,    __in CONST CONSOLE_CURSOR_INFO *lpConsoleCursorInfo    );																		
SetConsoleCursorPosition(    __in HANDLE hConsoleOutput,    __in COORD dwCursorPosition    );																		
SetConsoleDisplayMode(    __in HANDLE hConsoleOutput,    __in DWORD dwFlags,    __out_opt PCOORD lpNewScreenBufferDimensions);																		
SetConsoleHistoryInfo(    __in PCONSOLE_HISTORY_INFO lpConsoleHistoryInfo);																		
SetConsoleMode(    __in HANDLE hConsoleHandle,    __in DWORD dwMode    );																		
SetConsoleOutputCP(    __in UINT wCodePageID    );																		
SetConsoleScreenBufferInfoEx(    __in HANDLE hConsoleOutput,    __in PCONSOLE_SCREEN_BUFFER_INFOEX lpConsoleScreenBufferInfoEx);																		
SetConsoleScreenBufferSize(    __in HANDLE hConsoleOutput,    __in COORD dwSize    );																		
SetConsoleTextAttribute(    __in HANDLE hConsoleOutput,    __in WORD wAttributes    );																		
SetConsoleTitleA(    __in LPCSTR lpConsoleTitle    );																		
SetConsoleTitleW(    __in LPCWSTR lpConsoleTitle    );																		
SetConsoleWindowInfo(    __in HANDLE hConsoleOutput,    __in BOOL bAbsolute,    __in CONST SMALL_RECT *lpConsoleWindow    );																		
SetCriticalSectionSpinCount(    __inout LPCRITICAL_SECTION lpCriticalSection,    __in    DWORD dwSpinCount    );																		
SetCurrentConsoleFontEx(    __in HANDLE hConsoleOutput,    __in BOOL bMaximumWindow,    __in PCONSOLE_FONT_INFOEX lpConsoleCurrentFontEx);																		
SetCurrentDirectoryA(    __in LPCSTR lpPathName    );																		
SetCurrentDirectoryW(    __in LPCWSTR lpPathName    );																		
SetCursor(__in_opt HCURSOR hCursor);																		
SetCursorPos(__in int X,__in int Y);																		
SetDCBrushColor(__in HDC hdc, __in COLORREF color);																		
SetDCPenColor(__in HDC hdc, __in COLORREF color);																		
SetDebugErrorLevel(    __in DWORD dwLevel);																		
SetDefaultCommConfigA(    __in LPCSTR lpszName,    __in_bcount(dwSize) LPCOMMCONFIG lpCC,    __in DWORD dwSize    );																		
SetDefaultCommConfigW(    __in LPCWSTR lpszName,    __in_bcount(dwSize) LPCOMMCONFIG lpCC,    __in DWORD dwSize    );																		
SetDefaultPrinterA(__in    LPCSTR pszPrinter    );																		
SetDefaultPrinterW(__in    LPCWSTR pszPrinter    );																		
SetDeviceGammaRamp( __in HDC hdc, __in_bcount(3*256*2)  LPVOID lpRamp);																		
SetDIBColorTable( __in HDC  hdc,__in UINT iStart,__in UINT cEntries,__in_ecount(cEntries) CONST RGBQUAD *prgbq);																		
SetDIBits(__in_opt HDC hdc, __in HBITMAP hbm, __in UINT start, __in UINT cLines, __in CONST VOID *lpBits, __in CONST BITMAPINFO * lpbmi, __in UINT ColorUse);																		
SetDIBitsToDevice(__in HDC hdc, __in int xDest, __in int yDest, __in DWORD w, __in DWORD h, __in int xSrc,        __in int ySrc, __in UINT StartScan, __in UINT cLines, __in CONST VOID * lpvBits, __in CONST BITMAPINFO * lpbmi, __in UINT ColorUse);																		
SetDisplayConfig(    __in UINT32 numPathArrayElements,    __in_ecount_opt(numPathArrayElements) DISPLAYCONFIG_PATH_INFO* pathArray,    __in UINT32 numModeInfoArrayElements,    __in_ecount_opt(numModeInfoArrayElements) DISPLAYCONFIG_MODE_INFO* modeInfoArray,    __in UINT32 flags);																		
SetDlgItemInt(    __in HWND hDlg,    __in int nIDDlgItem,    __in UINT uValue,    __in BOOL bSigned);																		
SetDlgItemTextA(    __in HWND hDlg,    __in int nIDDlgItem,    __in LPCSTR lpString);																		
SetDlgItemTextW(    __in HWND hDlg,    __in int nIDDlgItem,    __in LPCWSTR lpString);																		
SetDllDirectoryA(    __in_opt LPCSTR lpPathName    );																		
SetDllDirectoryW(    __in_opt LPCWSTR lpPathName    );																		
SetDoubleClickTime(    __in UINT);																		
SetDynamicTimeZoneInformation(    __in CONST DYNAMIC_TIME_ZONE_INFORMATION *lpTimeZoneInformation    );																		
SetEncryptedFileMetadata(    __in        LPCWSTR                             lpFileName,    __in_opt    PBYTE                               pbOldMetadata,    __in        PBYTE                               pbNewMetadata,    __in        PENCRYPTION_CERTIFICATE_HASH        pOwnerHash,                DWORD                               dwOperation,    __in_opt    PENCRYPTION_CERTIFICATE_HASH_LIST   pCertificatesAdded    ); 																		
SetEndOfFile(    __in HANDLE hFile    );																		
SetEnhMetaFileBits(  __in UINT nSize,                   __in_bcount(nSize) CONST BYTE * pb);																		
SetEnlistmentRecoveryInformation (    IN HANDLE EnlistmentHandle,    IN ULONG  BufferSize,    IN PVOID  Buffer    );																		
SetEntriesInAclA(__in ULONG	cCountOfExplicitEntries,__in_ecount_opt(cCountOfExplicitEntries)  PEXPLICIT_ACCESS_A  pListOfExplicitEntries,__in_opt  PACL	OldAcl,__out PACL	* NewAcl);															
SetEntriesInAclW(__in ULONG cCountOfExplicitEntries,__in_ecount_opt(cCountOfExplicitEntries)  PEXPLICIT_ACCESS_W  pListOfExplicitEntries,__in_opt  PACL OldAcl,__out PACL * NewAcl);																		
SetEnvironmentStringsA(    __in __nullnullterminated LPCH NewEnvironment    );																		
SetEnvironmentStringsW(    __in __nullnullterminated LPWCH NewEnvironment    );																		
SetEnvironmentVariableA(    __in     LPCSTR lpName,    __in_opt LPCSTR lpValue    );																		
SetEnvironmentVariableW(    __in     LPCWSTR lpName,    __in_opt LPCWSTR lpValue    );																		
SetErrorMode(    __in UINT uMode    );																		
SetEvent(    __in HANDLE hEvent    );																		
SetEventWhenCallbackReturns(    __inout PTP_CALLBACK_INSTANCE pci,    __in    HANDLE                evt    );																		
SetExtendedFeaturesMask(    __out PCONTEXT_EX ContextEx,    __in DWORD64 FeatureMask    );																		
SetFileApisToANSI( VOID );																		
SetFileApisToOEM( VOID );																		
SetFileAttributesA(    __in LPCSTR lpFileName,    __in DWORD dwFileAttributes    );																		
SetFileAttributesTransactedA(    __in     LPCSTR lpFileName,    __in     DWORD dwFileAttributes,    __in     HANDLE hTransaction    );																		
SetFileAttributesTransactedW(    __in     LPCWSTR lpFileName,    __in     DWORD dwFileAttributes,    __in     HANDLE hTransaction    );																		
SetFileAttributesW(    __in LPCWSTR lpFileName,    __in DWORD dwFileAttributes    );																		
SetFileBandwidthReservation(    __in  HANDLE  hFile,    __in  DWORD   nPeriodMilliseconds,    __in  DWORD   nBytesPerPeriod,    __in  BOOL    bDiscardable,    __out LPDWORD lpTransferSize,    __out LPDWORD lpNumOutstandingRequests    );																		
SetFileCompletionNotificationModes(    __in HANDLE FileHandle,    __in UCHAR Flags    );																		
SetFileInformationByHandle(    __in  HANDLE hFile,    __in  FILE_INFO_BY_HANDLE_CLASS FileInformationClass,    __in_bcount(dwBufferSize)  LPVOID lpFileInformation,    __in  DWORD dwBufferSize);																		
SetFileIoOverlappedRange(    __in HANDLE FileHandle,    __in PUCHAR OverlappedRangeStart,    __in ULONG Length    );																		
SetFilePointer(    __in        HANDLE hFile,    __in        LONG lDistanceToMove,    __inout_opt PLONG lpDistanceToMoveHigh,    __in        DWORD dwMoveMethod    );																		
SetFilePointerEx(    __in      HANDLE hFile,    __in      LARGE_INTEGER liDistanceToMove,    __out_opt PLARGE_INTEGER lpNewFilePointer,    __in      DWORD dwMoveMethod    );																		
SetFileSecurityA (    __in LPCSTR lpFileName,    __in SECURITY_INFORMATION SecurityInformation,    __in PSECURITY_DESCRIPTOR pSecurityDescriptor    );																		
SetFileSecurityW (    __in LPCWSTR lpFileName,    __in SECURITY_INFORMATION SecurityInformation,    __in PSECURITY_DESCRIPTOR pSecurityDescriptor    );																		
SetFileShortNameA(    __in HANDLE hFile,    __in LPCSTR lpShortName    );																		
SetFileShortNameW(    __in HANDLE hFile,    __in LPCWSTR lpShortName    );																		
SetFileTime(    __in     HANDLE hFile,    __in_opt CONST FILETIME *lpCreationTime,    __in_opt CONST FILETIME *lpLastAccessTime,    __in_opt CONST FILETIME *lpLastWriteTime    );																		
SetFileValidData(    __in HANDLE hFile,    __in LONGLONG ValidDataLength    );																		
SetFirmwareEnvironmentVariableA(    __in LPCSTR lpName,    __in LPCSTR lpGuid,    __in_bcount_opt(nSize) PVOID pValue,    __in DWORD    nSize    );																		
SetFirmwareEnvironmentVariableW(    __in LPCWSTR lpName,    __in LPCWSTR lpGuid,    __in_bcount_opt(nSize) PVOID pValue,    __in DWORD    nSize    );																		
SetFocus(__in_opt HWND hWnd);																		
SetForegroundWindow(__in HWND hWnd);																		
SetFormA(__in HANDLE  hPrinter,__in LPSTR pFormName, DWORD Level,__in LPBYTE  pForm);																		
SetFormW(__in HANDLE  hPrinter,__in LPWSTR pFormName, DWORD Level,__in LPBYTE  pForm);																		
SetGestureConfig( __in HWND hwnd, __in DWORD dwReserved, __in UINT cIDs, __in_ecount(cIDs) PGESTURECONFIG pGestureConfig, __in UINT cbSize); 														
SetGraphicsMode(__in HDC hdc, __in int iMode);																		
SetHandleCount(    __in UINT uNumber    );																		
SetHandleInformation(    __in HANDLE hObject,    __in DWORD dwMask,    __in DWORD dwFlags    );																		
SetICMMode( __in HDC hdc, __in int mode);																		
SetICMProfileA( __in HDC hdc, __in LPSTR lpFileName);																		
SetICMProfileW( __in HDC hdc, __in LPWSTR lpFileName);																		
SetIfEntry(    __in PMIB_IFROW pIfRow    );																		
SetImageConfigInformation(    __inout PLOADED_IMAGE LoadedImage,    __in PIMAGE_LOAD_CONFIG_DIRECTORY ImageConfigInformation    );																		
SetInformationJobObject(    __in HANDLE hJob,    __in JOBOBJECTINFOCLASS JobObjectInformationClass,    __in_bcount(cbJobObjectInformationLength) LPVOID lpJobObjectInformation,    __in DWORD cbJobObjectInformationLength    );																		
SetIpForwardEntry(    __in PMIB_IPFORWARDROW pRoute    );																		
SetIpNetEntry(    __in PMIB_IPNETROW    pArpEntry    );																		
SetIpStatistics(    __in PMIB_IPSTATS pIpStats    );																		
SetIpStatisticsEx(    __in PMIB_IPSTATS Statistics,    __in ULONG Family    );																		
SetIpTTL(    __in UINT nTTL    );																		
SetJobA(__in        HANDLE  hPrinter,            DWORD   JobId,            DWORD   Level,__in_opt    LPBYTE  pJob,            DWORD   Command);																		
SetJobW(__in        HANDLE  hPrinter,            DWORD   JobId,            DWORD   Level,__in_opt    LPBYTE  pJob,            DWORD   Command);																		
SetKernelObjectSecurity (    __in HANDLE Handle,    __in SECURITY_INFORMATION SecurityInformation,    __in PSECURITY_DESCRIPTOR SecurityDescriptor    );																		
SetKeyboardState(    __in_ecount(256) LPBYTE lpKeyState);																		
SetLastError(    __in DWORD dwErrCode    );																		
SetLastErrorEx(    __in DWORD dwErrCode,    __in DWORD dwType);																		
SetLayeredWindowAttributes(    __in HWND hwnd,    __in COLORREF crKey,    __in BYTE bAlpha,    __in DWORD dwFlags);																		
SetLayout(__in HDC hdc, __in DWORD l);																		
SetLocaleInfoA(    __in LCID     Locale,    __in LCTYPE   LCType,    __in LPCSTR  lpLCData);																		
SetLocaleInfoW(    __in LCID     Locale,    __in LCTYPE   LCType,    __in LPCWSTR  lpLCData);																		
SetLocalTime(    __in CONST SYSTEMTIME *lpSystemTime    );																		
SetMailslotInfo(    __in HANDLE hMailslot,    __in DWORD lReadTimeout    );																		
SetMapMode(__in HDC hdc, __in int iMode);																		
SetMapperFlags(__in HDC hdc, __in DWORD flags);																		
SetMenu(    __in HWND hWnd,    __in_opt HMENU hMenu);																		
SetMenuContextHelpId(__in HMENU,__in DWORD);																		
SetMenuDefaultItem(    __in HMENU hMenu,    __in UINT uItem,    __in UINT fByPos);																		
SetMenuInfo(    __in HMENU,    __in LPCMENUINFO);																		
SetMenuItemBitmaps(    __in HMENU hMenu,    __in UINT uPosition,    __in UINT uFlags,    __in_opt HBITMAP hBitmapUnchecked,    __in_opt HBITMAP hBitmapChecked);																		
SetMenuItemInfoA(    __in HMENU hmenu,    __in UINT item,    __in BOOL fByPositon,    __in LPCMENUITEMINFOA lpmii);																		
SetMenuItemInfoW(    __in HMENU hmenu,    __in UINT item,    __in BOOL fByPositon,    __in LPCMENUITEMINFOW lpmii);																		
SetMessageExtraInfo(    __in LPARAM lParam);																		
SetMessageQueue(    __in int cMessagesMax);																		
SetMessageWaitingIndicator(    __in HANDLE hMsgIndicator,    __in ULONG ulMsgCount    );																		
SetMetaFileBitsEx(__in UINT cbBuffer, __in_bcount(cbBuffer) CONST BYTE *lpData);																		
SetMetaRgn(__in HDC hdc);																		
SetMiterLimit(__in HDC hdc, __in FLOAT limit, __out_opt PFLOAT old);																		
SetNamedPipeAttribute(    __in HANDLE Pipe,    __in PIPE_ATTRIBUTE_TYPE AttributeType,    __in PSTR AttributeName,    __in PVOID AttributeValue,    __in SIZE_T AttributeValueLength    );																		
SetNamedPipeHandleState(    __in     HANDLE hNamedPipe,    __in_opt LPDWORD lpMode,    __in_opt LPDWORD lpMaxCollectionCount,    __in_opt LPDWORD lpCollectDataTimeout    );																		
SetNamedSecurityInfoA(__in LPSTR pObjectName,__in SE_OBJECT_TYPE ObjectType,__in SECURITY_INFORMATION SecurityInfo,__in_opt PSID psidOwner,__in_opt PSID psidGroup,__in_opt PACL pDacl,__in_opt PACL pSacl);																		
SetNamedSecurityInfoW(__in LPWSTR pObjectName,__in SE_OBJECT_TYPE ObjectType,__in SECURITY_INFORMATION  SecurityInfo,__in_opt PSID psidOwner,__in_opt PSID psidGroup,__in_opt PACL pDacl,__in_opt PACL pSacl);																		
SetPaletteEntries(   __in HPALETTE hpal,                  __in UINT iStart,                  __in UINT cEntries,                  __in_ecount(cEntries) CONST PALETTEENTRY *pPalEntries);																		
SetParent(__in HWND hWndChild,__in_opt HWND hWndNewParent);																		
SetPerTcp6ConnectionEStats(    __in PMIB_TCP6ROW Row,    __in TCP_ESTATS_TYPE EstatsType,    __in_bcount(RwSize) PUCHAR Rw,    __in ULONG RwVersion,    __in ULONG RwSize,    __in ULONG Offset    );																		
SetPerTcpConnectionEStats(    __in PMIB_TCPROW Row,    __in TCP_ESTATS_TYPE EstatsType,    __in_bcount(RwSize) PUCHAR Rw,    __in ULONG RwVersion,    __in ULONG RwSize,    __in ULONG Offset    );																		
SetPhysicalCursorPos(__in int X,__in int Y);																		
SetPixel(__in HDC hdc, __in int x, __in int y, __in COLORREF color);																		
SetPixelFormat(__in HDC hdc, __in int format, __in CONST PIXELFORMATDESCRIPTOR * ppfd);																		
SetPixelV(__in HDC hdc, __in int x, __in int y, __in COLORREF color);																		
SetPolyFillMode(__in HDC hdc, __in int mode);																		
SetPortA(__in_opt    LPSTR     pName,__in        LPSTR     pPortName,            DWORD       dwLevel,__in        LPBYTE      pPortInfo);																		
SetPortW(__in_opt    LPWSTR     pName,__in        LPWSTR     pPortName,            DWORD       dwLevel,__in        LPBYTE      pPortInfo);																		
SetPrinterA(__in     HANDLE  hPrinter,         DWORD   Level,__in_opt LPBYTE  pPrinter,         DWORD   Command);																		
SetPrinterDataA(__in    HANDLE  hPrinter,__in    LPSTR pValueName,        DWORD   Type,__in_bcount(cbData)        LPBYTE  pData,        DWORD   cbData);																		
SetPrinterDataExA(__in    HANDLE   hPrinter,__in    LPCSTR pKeyName,__in    LPCSTR pValueName,        DWORD    Type,__in_bcount(cbData)        LPBYTE   pData,        DWORD    cbData);																		
SetPrinterDataExW(__in    HANDLE   hPrinter,__in    LPCWSTR pKeyName,__in    LPCWSTR pValueName,        DWORD    Type,__in_bcount(cbData)        LPBYTE   pData,        DWORD    cbData);																		
SetPrinterDataW(__in    HANDLE  hPrinter,__in    LPWSTR pValueName,        DWORD   Type,__in_bcount(cbData)        LPBYTE  pData,        DWORD   cbData);																		
SetPrinterW(__in     HANDLE  hPrinter,         DWORD   Level,__in_opt LPBYTE  pPrinter,         DWORD   Command);																		
SetPriorityClass(    __in HANDLE hProcess,    __in DWORD dwPriorityClass    );																		
SetPrivateObjectSecurity (    __in          SECURITY_INFORMATION SecurityInformation,    __in          PSECURITY_DESCRIPTOR ModificationDescriptor,    __deref_inout PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,    __in          PGENERIC_MAPPING GenericMapping,    __in_opt      HANDLE Token    );																		
SetPrivateObjectSecurityEx (    __in          SECURITY_INFORMATION SecurityInformation,    __in          PSECURITY_DESCRIPTOR ModificationDescriptor,    __deref_inout PSECURITY_DESCRIPTOR *ObjectsSecurityDescriptor,    __in          ULONG AutoInheritFlags,    __in          PGENERIC_MAPPING GenericMapping,    __in_opt      HANDLE Token    );																		
SetProcessAffinityMask(    __in HANDLE hProcess,    __in DWORD_PTR dwProcessAffinityMask    );																		
SetProcessAffinityUpdateMode(    __in HANDLE hProcess,    __in DWORD dwFlags    );																		
SetProcessDefaultLayout(__in DWORD dwDefaultLayout);																		
SetProcessDEPPolicy(    __in DWORD dwFlags    );																		
SetProcessDPIAware(    VOID);																		
SetProcessPreferredUILanguages(    __in        DWORD dwFlags,    __in_opt    PCZZWSTR pwszLanguagesBuffer,    __out_opt   PULONG pulNumLanguages);																		
SetProcessPriorityBoost(    __in HANDLE hProcess,    __in BOOL bDisablePriorityBoost    );																		
SetProcessShutdownParameters(    __in DWORD dwLevel,    __in DWORD dwFlags    );																		
SetProcessWindowStation(    __in HWINSTA hWinSta);																		
SetProcessWorkingSetSize(    __in HANDLE hProcess,    __in SIZE_T dwMinimumWorkingSetSize,    __in SIZE_T dwMaximumWorkingSetSize    );																		
SetProcessWorkingSetSizeEx(    __in HANDLE hProcess,    __in SIZE_T dwMinimumWorkingSetSize,    __in SIZE_T dwMaximumWorkingSetSize,    __in DWORD Flags    );																		
SetPropA(    __in HWND hWnd,    __in LPCSTR lpString,    __in_opt HANDLE hData);																		
SetPropW(    __in HWND hWnd,    __in LPCWSTR lpString,    __in_opt HANDLE hData);																		
SetRect(__out LPRECT lprc,__in int xLeft,__in int yTop,__in int xRight,__in int yBottom);																		
SetRectEmpty(__out LPRECT lprc);																		
SetRectRgn(__in HRGN hrgn, __in int left, __in int top, __in int right, __in int bottom);																		
SetResourceManagerCompletionPort(    IN HANDLE    ResourceManagerHandle,    IN HANDLE    IoCompletionPortHandle,    IN ULONG_PTR CompletionKey    );																		
SetROP2(__in HDC hdc, __in int rop2);																		
SetScrollInfo(    __in HWND hwnd,    __in int nBar,    __in LPCSCROLLINFO lpsi,    __in BOOL redraw);																		
SetScrollPos(    __in HWND hWnd,    __in int nBar,    __in int nPos,    __in BOOL bRedraw);																		
SetScrollRange(    __in HWND hWnd,    __in int nBar,    __in int nMinPos,    __in int nMaxPos,    __in BOOL bRedraw);																		
SetSearchPathMode (    __in DWORD Flags    );																		
SetSecurityAccessMask(    __in SECURITY_INFORMATION SecurityInformation,    __out LPDWORD DesiredAccess    );																		
SetSecurityDescriptorControl (    __in PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in SECURITY_DESCRIPTOR_CONTROL ControlBitsOfInterest,    __in SECURITY_DESCRIPTOR_CONTROL ControlBitsToSet    );																		
SetSecurityDescriptorDacl (    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in     BOOL bDaclPresent,    __in_opt PACL pDacl,    __in     BOOL bDaclDefaulted    );																		
SetSecurityDescriptorGroup (    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in_opt PSID pGroup,    __in     BOOL bGroupDefaulted    );																		
SetSecurityDescriptorOwner (    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in_opt PSID pOwner,    __in     BOOL bOwnerDefaulted    );																		
SetSecurityDescriptorRMControl(    __inout  PSECURITY_DESCRIPTOR SecurityDescriptor,    __in_opt PUCHAR RMControl    );																		
SetSecurityDescriptorSacl (    __inout  PSECURITY_DESCRIPTOR pSecurityDescriptor,    __in     BOOL bSaclPresent,    __in_opt PACL pSacl,    __in     BOOL bSaclDefaulted    );																		
SetSecurityInfo(__in HANDLE handle, __in SE_OBJECT_TYPE ObjectType,__in SECURITY_INFORMATION  SecurityInfo,__in_opt PSID psidOwner,__in_opt PSID psidGroup,__in_opt PACL pDacl, __in_opt PACL pSacl);																		
SetServiceA (    __in     DWORD                dwNameSpace,    __in     DWORD                dwOperation,    __in     DWORD                dwFlags,    __in     LPSERVICE_INFOA      lpServiceInfo,    __in_opt LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,    __out    LPDWORD              lpdwStatusFlags    );																		
SetServiceObjectSecurity(    __in        SC_HANDLE               hService,    __in        SECURITY_INFORMATION    dwSecurityInformation,    __in        PSECURITY_DESCRIPTOR    lpSecurityDescriptor    );																		
SetServiceStatus(    __in        SERVICE_STATUS_HANDLE   hServiceStatus,    __in        LPSERVICE_STATUS        lpServiceStatus    );																		
SetServiceW (    __in     DWORD                dwNameSpace,    __in     DWORD                dwOperation,    __in     DWORD                dwFlags,    __in     LPSERVICE_INFOW      lpServiceInfo,    __in_opt LPSERVICE_ASYNC_INFO lpServiceAsyncInfo,    __out    LPDWORD              lpdwStatusFlags    );																		
SetShellNext(    __in PSTR szShellNext    );																		
SetStdHandle(    __in DWORD nStdHandle,    __in HANDLE hHandle    );																		
SetStdHandleEx(    __in      DWORD nStdHandle,    __in      HANDLE hHandle,    __out_opt PHANDLE phPrevValue    );																		
SetStretchBltMode(__in HDC hdc, __in int mode);																		
SetSysColors(__in int cElements,__in_ecount(cElements) CONST INT * lpaElements,__in_ecount(cElements) CONST COLORREF * lpaRgbValues);																		
SetSystemCursor(__in HCURSOR hcur,__in DWORD id);																		
SetSystemFileCacheSize (    __in SIZE_T MinimumFileCacheSize,    __in SIZE_T MaximumFileCacheSize,    __in DWORD Flags    );																		
SetSystemPaletteUse(__in HDC hdc, __in UINT use);																		
SetSystemPowerState(    __in BOOL fSuspend,    __in BOOL fForce    );																		
SetSystemTime(    __in CONST SYSTEMTIME *lpSystemTime    );																		
SetSystemTimeAdjustment(    __in DWORD dwTimeAdjustment,    __in BOOL  bTimeAdjustmentDisabled    );																		
SetTapeParameters(    __in HANDLE hDevice,    __in DWORD dwOperation,    __in LPVOID lpTapeInformation    );																		
SetTapePosition(    __in HANDLE hDevice,    __in DWORD dwPositionMethod,    __in DWORD dwPartition,    __in DWORD dwOffsetLow,    __in DWORD dwOffsetHigh,    __in BOOL bImmediate    );																		
SetTcpEntry(    __in PMIB_TCPROW pTcpRow    );																		
SetTextAlign(__in HDC hdc, __in UINT align);																		
SetTextCharacterExtra(__in HDC hdc, __in int extra);																		
SetTextColor(__in HDC hdc, __in COLORREF color);																		
SetTextJustification(__in HDC hdc, __in int extra, __in int count);																		
SetThreadAffinityMask(    __in HANDLE hThread,    __in DWORD_PTR dwThreadAffinityMask    );																		
SetThreadContext(    __in HANDLE hThread,    __in CONST CONTEXT *lpContext    );																		
SetThreadDesktop(     __in HDESK hDesktop);																		
SetThreadErrorMode(    __in DWORD dwNewMode,    __in_opt LPDWORD lpOldMode    );																		
SetThreadExecutionState(    __in EXECUTION_STATE esFlags    );																		
SetThreadGroupAffinity(    __in HANDLE hThread,    __in CONST GROUP_AFFINITY *GroupAffinity,    __out_opt PGROUP_AFFINITY PreviousGroupAffinity    );																		
SetThreadIdealProcessor(    __in HANDLE hThread,    __in DWORD dwIdealProcessor    );																		
SetThreadIdealProcessorEx (    __in HANDLE hThread,    __in PPROCESSOR_NUMBER lpIdealProcessor,    __out_opt PPROCESSOR_NUMBER lpPreviousIdealProcessor    );																		
SetThreadLocale(    __in LCID  Locale    );																		
SetThreadpoolStackInformation(    __inout PTP_POOL           ptpp,    __in    PTP_POOL_STACK_INFORMATION ptpsi    );																		
SetThreadpoolThreadMaximum(    __inout PTP_POOL ptpp,    __in    DWORD    cthrdMost    );																		
SetThreadpoolThreadMinimum(    __inout PTP_POOL ptpp,    __in    DWORD    cthrdMic    );																		
SetThreadpoolTimer(    __inout  PTP_TIMER pti,    __in_opt PFILETIME pftDueTime,    __in     DWORD     msPeriod,    __in_opt DWORD     msWindowLength    );																		
SetThreadpoolWait(    __inout  PTP_WAIT  pwa,    __in_opt HANDLE    h,    __in_opt PFILETIME pftTimeout    );																		
SetThreadPreferredUILanguages(    __in        DWORD dwFlags,    __in_opt    PCZZWSTR pwszLanguagesBuffer,    __out_opt   PULONG pulNumLanguages);																		
SetThreadPriority(    __in HANDLE hThread,    __in int nPriority    );																		
SetThreadPriorityBoost(    __in HANDLE hThread,    __in BOOL bDisablePriorityBoost    );																		
SetThreadStackGuarantee (    __inout PULONG StackSizeInBytes    );																		
SetThreadToken (    __in_opt PHANDLE Thread,    __in_opt HANDLE Token    );																		
SetThreadUILanguage(__in LANGID LangId);																		
SetTimer(    __in_opt HWND hWnd,    __in UINT_PTR nIDEvent,    __in UINT uElapse,    __in_opt TIMERPROC lpTimerFunc);																		
SetTimerQueueTimer(    __in_opt HANDLE TimerQueue,    __in     WAITORTIMERCALLBACK Callback,    __in_opt PVOID Parameter,    __in     DWORD DueTime,    __in     DWORD Period,    __in     BOOL PreferIo    );																		
SetTimeZoneInformation(    __in CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation    );																		
SetTokenInformation (    __in HANDLE TokenHandle,    __in TOKEN_INFORMATION_CLASS TokenInformationClass,    __in_bcount(TokenInformationLength) LPVOID TokenInformation,    __in DWORD TokenInformationLength    );																		
SetTransactionInformation (    IN HANDLE TransactionHandle,    IN DWORD IsolationLevel OPTIONAL,    IN DWORD IsolationFlags OPTIONAL,    IN DWORD Timeout OPTIONAL,    __in_opt LPWSTR Description    );																		
SetUmsThreadInformation(    __in PUMS_CONTEXT UmsThread,    __in UMS_THREAD_INFO_CLASS UmsThreadInfoClass,    __in PVOID UmsThreadInformation,    __in ULONG UmsThreadInformationLength    );																		
SetUnhandledExceptionFilter(    __in_opt LPTOP_LEVEL_EXCEPTION_FILTER lpTopLevelExceptionFilter    );																		
SetupAddInstallSectionToDiskSpaceListA(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF LayoutInfHandle,    __in PCSTR SectionName,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupAddInstallSectionToDiskSpaceListW(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF LayoutInfHandle,    __in PCWSTR SectionName,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupAddSectionToDiskSpaceListA(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCSTR SectionName,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupAddSectionToDiskSpaceListW(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCWSTR SectionName,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupAddToDiskSpaceListA(    __in HDSKSPC DiskSpace,    __in PCSTR TargetFilespec,    __in LONGLONG FileSize,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupAddToDiskSpaceListW(    __in HDSKSPC DiskSpace,    __in PCWSTR TargetFilespec,    __in LONGLONG FileSize,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupAddToSourceListA(    __in DWORD Flags,    __in PCSTR Source    );																		
SetupAddToSourceListW(    __in DWORD Flags,    __in PCWSTR Source    );																		
SetupAdjustDiskSpaceListA(    __in HDSKSPC DiskSpace,    __in LPCSTR DriveRoot,    __in LONGLONG Amount,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupAdjustDiskSpaceListW(    __in HDSKSPC DiskSpace,    __in LPCWSTR DriveRoot,    __in LONGLONG Amount,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupBackupErrorA(    __in HWND hwndParent,    __in_opt PCSTR DialogTitle,    __in PCSTR SourceFile,    __in_opt PCSTR TargetFile,    __in UINT Win32ErrorCode,    __in DWORD Style    );																		
SetupBackupErrorW(    __in HWND hwndParent,    __in_opt PCWSTR DialogTitle,    __in PCWSTR SourceFile,    __in_opt PCWSTR TargetFile,    __in UINT Win32ErrorCode,    __in DWORD Style    );																		
SetupCancelTemporarySourceList(    VOID    );																		
SetupCloseFileQueue(    __in HSPFILEQ QueueHandle    );																		
SetupCloseInfFile(    __in HINF InfHandle    );																		
SetupCloseLog (    VOID    );																		
SetupComm(    __in HANDLE hFile,    __in DWORD dwInQueue,    __in DWORD dwOutQueue    );																		
SetupCommitFileQueueA(    __in_opt HWND Owner,    __in HSPFILEQ QueueHandle,    __in PSP_FILE_CALLBACK_A MsgHandler,    __in PVOID Context    );																		
SetupCommitFileQueueW(    __in_opt HWND Owner,    __in HSPFILEQ QueueHandle,    __in PSP_FILE_CALLBACK_W MsgHandler,    __in PVOID Context    );																		
SetupConfigureWmiFromInfSectionA(    __in HINF InfHandle,    __in PCSTR SectionName,    __in DWORD Flags    );																		
SetupConfigureWmiFromInfSectionW(    __in HINF InfHandle,    __in PCWSTR SectionName,    __in DWORD Flags    );																		
SetupCopyErrorA(    __in HWND hwndParent,    __in_opt PCSTR DialogTitle,    __in_opt PCSTR DiskName,    __in PCSTR PathToSource,    __in PCSTR SourceFile,    __in_opt PCSTR TargetPathFile,    __in UINT Win32ErrorCode,    __in DWORD Style,    __out_ecount_opt(PathBufferSize) PSTR PathBuffer,    __in DWORD PathBufferSize,    __out_opt PDWORD PathRequiredSize    );																		
SetupCopyErrorW(    __in HWND hwndParent,    __in_opt PCWSTR DialogTitle,    __in_opt PCWSTR DiskName,    __in PCWSTR PathToSource,    __in PCWSTR SourceFile,    __in_opt PCWSTR TargetPathFile,    __in UINT Win32ErrorCode,    __in DWORD Style,    __out_ecount_opt(PathBufferSize) PWSTR PathBuffer,    __in DWORD PathBufferSize,    __out_opt PDWORD PathRequiredSize    );																		
SetupCopyOEMInfA(    __in PCSTR SourceInfFileName,    __in_opt PCSTR OEMSourceMediaLocation,    __in DWORD OEMSourceMediaType,    __in DWORD CopyStyle,    __out_ecount_opt(DestinationInfFileNameSize) PSTR DestinationInfFileName,    __in DWORD DestinationInfFileNameSize,    __out_opt PDWORD RequiredSize,    __out_opt PSTR *DestinationInfFileNameComponent    );																		
SetupCopyOEMInfW(    __in PCWSTR SourceInfFileName,    __in_opt PCWSTR OEMSourceMediaLocation,    __in DWORD OEMSourceMediaType,    __in DWORD CopyStyle,    __out_ecount_opt(DestinationInfFileNameSize) PWSTR DestinationInfFileName,    __in DWORD DestinationInfFileNameSize,    __out_opt PDWORD RequiredSize,    __out_opt PWSTR  *DestinationInfFileNameComponent    );																		
SetupCreateDiskSpaceListA(    __reserved PVOID Reserved1,    __reserved DWORD Reserved2,    __in UINT Flags    );																		
SetupCreateDiskSpaceListW(    __reserved PVOID Reserved1,    __reserved DWORD Reserved2,    __in UINT Flags    );																		
SetupDecompressOrCopyFileA(    __in PCSTR SourceFileName,    __in PCSTR TargetFileName,    __in_opt PUINT CompressionType    );																		
SetupDecompressOrCopyFileW(    __in PCWSTR SourceFileName,    __in PCWSTR TargetFileName,    __in_opt PUINT CompressionType    );																		
SetupDefaultQueueCallbackA(    __in PVOID Context,    __in UINT Notification,    __in UINT_PTR Param1,    __in UINT_PTR Param2    );																		
SetupDefaultQueueCallbackW(    __in PVOID Context,    __in UINT Notification,    __in UINT_PTR Param1,    __in UINT_PTR Param2    );																		
SetupDeleteErrorA(    __in HWND hwndParent,    __in_opt PCSTR DialogTitle,    __in PCSTR File,    __in UINT Win32ErrorCode,    __in DWORD Style    );																		
SetupDeleteErrorW(    __in HWND hwndParent,    __in_opt PCWSTR DialogTitle,    __in PCWSTR File,    __in UINT Win32ErrorCode,    __in DWORD Style    );																		
SetupDestroyDiskSpaceList(    __inout HDSKSPC DiskSpace    );																		
SetupDiAskForOEMDisk(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiBuildClassInfoList(    __in DWORD Flags,    __out_ecount_opt(ClassGuidListSize) LPGUID ClassGuidList,    __in DWORD ClassGuidListSize,    __out PDWORD RequiredSize    );																		
SetupDiBuildClassInfoListExA(    __in DWORD Flags,    __out_ecount_opt(ClassGuidListSize) LPGUID ClassGuidList,    __in DWORD ClassGuidListSize,    __out PDWORD RequiredSize,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiBuildClassInfoListExW(    __in DWORD Flags,    __out_ecount_opt(ClassGuidListSize) LPGUID ClassGuidList,    __in DWORD ClassGuidListSize,    __out PDWORD RequiredSize,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiBuildDriverInfoList(    __in HDEVINFO DeviceInfoSet,    __inout_opt PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD DriverType    );																		
SetupDiCallClassInstaller(    __in DI_FUNCTION InstallFunction,    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiCancelDriverInfoSearch(    __in HDEVINFO DeviceInfoSet    );																		
SetupDiChangeState(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiClassGuidsFromNameA(    __in PCSTR ClassName,    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,    __in DWORD ClassGuidListSize,    __out PDWORD RequiredSize    );																		
SetupDiClassGuidsFromNameExA(    __in PCSTR ClassName,    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,    __in DWORD ClassGuidListSize,    __out PDWORD RequiredSize,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiClassGuidsFromNameExW(    __in PCWSTR ClassName,    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,    __in DWORD ClassGuidListSize,    __out PDWORD RequiredSize,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiClassGuidsFromNameW(    __in PCWSTR ClassName,    __out_ecount(ClassGuidListSize) LPGUID ClassGuidList,    __in DWORD ClassGuidListSize,    __out PDWORD RequiredSize    );																		
SetupDiClassNameFromGuidA(    __in CONST GUID *ClassGuid,    __out_ecount(ClassNameSize) PSTR ClassName,    __in DWORD ClassNameSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiClassNameFromGuidExA(    __in CONST GUID *ClassGuid,    __out_ecount(ClassNameSize) PSTR ClassName,    __in DWORD ClassNameSize,    __out_opt PDWORD RequiredSize,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiClassNameFromGuidExW(    __in CONST GUID *ClassGuid,    __out_ecount(ClassNameSize) PWSTR ClassName,    __in DWORD ClassNameSize,    __out_opt PDWORD RequiredSize,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiClassNameFromGuidW(    __in CONST GUID *ClassGuid,    __out_ecount(ClassNameSize) PWSTR ClassName,    __in DWORD ClassNameSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiCreateDeviceInfoA(    __in HDEVINFO DeviceInfoSet,    __in PCSTR DeviceName,    __in CONST GUID *ClassGuid,    __in_opt PCSTR DeviceDescription,    __in_opt HWND hwndParent,    __in DWORD CreationFlags,    __out_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiCreateDeviceInfoList(    __in_opt CONST GUID *ClassGuid,    __in_opt HWND hwndParent    );																		
SetupDiCreateDeviceInfoListExA(    __in_opt CONST GUID *ClassGuid,    __in_opt HWND hwndParent,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiCreateDeviceInfoListExW(    __in_opt CONST GUID *ClassGuid,    __in_opt HWND hwndParent,     __in_opt PCWSTR MachineName,     __reserved PVOID Reserved    );																		
SetupDiCreateDeviceInfoW(    __in HDEVINFO DeviceInfoSet,    __in PCWSTR DeviceName,    __in CONST GUID *ClassGuid,    __in_opt PCWSTR DeviceDescription,    __in_opt HWND hwndParent,    __in DWORD CreationFlags,    __out_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiCreateDeviceInterfaceA(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in CONST GUID *InterfaceClassGuid,    __in_opt PCSTR ReferenceString,    __in DWORD CreationFlags,    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData    );																		
SetupDiCreateDeviceInterfaceRegKeyA(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __reserved DWORD Reserved,    __in REGSAM samDesired,    __in_opt HINF InfHandle,    __in_opt PCSTR InfSectionName    );																		
SetupDiCreateDeviceInterfaceRegKeyW(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __reserved DWORD Reserved,    __in REGSAM samDesired,    __in_opt HINF InfHandle,    __in_opt PCWSTR InfSectionName    );																		
SetupDiCreateDeviceInterfaceW(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in CONST GUID *InterfaceClassGuid,    __in_opt PCWSTR ReferenceString,    __in DWORD CreationFlags,    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData     );																		
SetupDiCreateDevRegKeyA(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Scope,    __in DWORD HwProfile,    __in DWORD KeyType,    __in_opt HINF InfHandle,    __in_opt PCSTR InfSectionName    );																		
SetupDiCreateDevRegKeyW(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Scope,    __in DWORD HwProfile,    __in DWORD KeyType,    __in_opt HINF InfHandle,    __in_opt PCWSTR InfSectionName    );																		
SetupDiDeleteDeviceInfo(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiDeleteDeviceInterfaceData(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData    );																		
SetupDiDeleteDeviceInterfaceRegKey(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __reserved DWORD Reserved    );																		
SetupDiDeleteDevRegKey(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Scope,    __in DWORD HwProfile,    __in DWORD KeyType    );																		
SetupDiDestroyClassImageList(    __in PSP_CLASSIMAGELIST_DATA ClassImageListData    );																		
SetupDiDestroyDeviceInfoList(    __in HDEVINFO DeviceInfoSet    );																		
SetupDiDestroyDriverInfoList(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD DriverType    );																		
SetupDiDrawMiniIcon(    __in HDC hdc,    __in RECT rc,    __in INT MiniIconIndex,    __in DWORD Flags    );																		
SetupDiEnumDeviceInfo(    __in HDEVINFO DeviceInfoSet,    __in DWORD MemberIndex,    __out PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiEnumDeviceInterfaces(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in CONST GUID *InterfaceClassGuid,    __in DWORD MemberIndex,    __out PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData    );																		
SetupDiEnumDriverInfoA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD DriverType,    __in DWORD MemberIndex,    __out PSP_DRVINFO_DATA_A DriverInfoData    );																		
SetupDiEnumDriverInfoW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD DriverType,    __in DWORD MemberIndex,    __out PSP_DRVINFO_DATA_W DriverInfoData    );																		
SetupDiFinishInstallAction(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiGetActualModelsSectionA(    __in PINFCONTEXT Context,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __out_ecount_opt(InfSectionWithExtSize) PSTR InfSectionWithExt,    __in DWORD InfSectionWithExtSize,    __out_opt PDWORD RequiredSize,    __reserved PVOID Reserved    );																		
SetupDiGetActualModelsSectionW(    __in PINFCONTEXT Context,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __out_ecount_opt(InfSectionWithExtSize) PWSTR InfSectionWithExt,    __in DWORD InfSectionWithExtSize,    __out_opt PDWORD RequiredSize,    __reserved PVOID Reserved    );																		
SetupDiGetActualSectionToInstallA(    __in HINF InfHandle,    __in PCSTR InfSectionName,    __out_ecount_opt(InfSectionWithExtSize) PSTR InfSectionWithExt,    __in DWORD InfSectionWithExtSize,    __out_opt PDWORD RequiredSize,    __out_opt PSTR *Extension    );																		
SetupDiGetActualSectionToInstallExA(    __in HINF InfHandle,    __in PCSTR InfSectionName,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __out_ecount_opt(InfSectionWithExtSize) PSTR InfSectionWithExt,    __in DWORD InfSectionWithExtSize,    __out_opt PDWORD RequiredSize,    __out_opt PSTR *Extension,    __reserved PVOID Reserved    );																		
SetupDiGetActualSectionToInstallExW(    __in HINF InfHandle,    __in PCWSTR InfSectionName,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __out_ecount_opt(InfSectionWithExtSize) PWSTR InfSectionWithExt,    __in DWORD InfSectionWithExtSize,    __out_opt PDWORD RequiredSize,    __out_opt PWSTR *Extension,    __reserved PVOID Reserved    );																		
SetupDiGetActualSectionToInstallW(    __in HINF InfHandle,    __in PCWSTR InfSectionName,    __out_ecount_opt(InfSectionWithExtSize) PWSTR InfSectionWithExt,    __in DWORD InfSectionWithExtSize,    __out_opt PDWORD RequiredSize,    __out_opt PWSTR *Extension    );																		
SetupDiGetClassBitmapIndex(    __in_opt CONST GUID *ClassGuid,    __out PINT MiniIconIndex    );																		
SetupDiGetClassDescriptionA(    __in CONST GUID *ClassGuid,    __out_ecount(ClassDescriptionSize) PSTR ClassDescription,    __in DWORD ClassDescriptionSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetClassDescriptionExA(    __in CONST GUID *ClassGuid,    __out_ecount(ClassDescriptionSize) PSTR ClassDescription,    __in DWORD ClassDescriptionSize,    __out_opt PDWORD RequiredSize,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetClassDescriptionExW(    __in CONST GUID *ClassGuid,    __out_ecount(ClassDescriptionSize) PWSTR ClassDescription,    __in DWORD ClassDescriptionSize,    __out_opt PDWORD RequiredSize,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetClassDescriptionW(    __in CONST GUID *ClassGuid,    __out_ecount(ClassDescriptionSize) PWSTR ClassDescription,    __in DWORD ClassDescriptionSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetClassDevPropertySheetsA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in LPPROPSHEETHEADERA PropertySheetHeader,    __in DWORD PropertySheetHeaderPageListSize,    __out_opt PDWORD RequiredSize,    __in DWORD PropertySheetType    );																		
SetupDiGetClassDevPropertySheetsW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in LPPROPSHEETHEADERW PropertySheetHeader,    __in DWORD PropertySheetHeaderPageListSize,    __out_opt PDWORD RequiredSize,    __in DWORD PropertySheetType    );																		
SetupDiGetClassDevsA(    __in_opt CONST GUID *ClassGuid,    __in_opt PCSTR Enumerator,    __in_opt HWND hwndParent,    __in DWORD Flags    );																		
SetupDiGetClassDevsExA(    __in_opt CONST GUID *ClassGuid,    __in_opt PCSTR Enumerator,    __in_opt HWND hwndParent,    __in DWORD Flags,    __in_opt HDEVINFO DeviceInfoSet,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetClassDevsExW(    __in_opt CONST GUID *ClassGuid,    __in_opt PCWSTR Enumerator,    __in_opt HWND hwndParent,    __in DWORD Flags,    __in_opt HDEVINFO DeviceInfoSet,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetClassDevsW(    __in_opt CONST GUID *ClassGuid,    __in_opt PCWSTR Enumerator,    __in_opt HWND hwndParent,    __in DWORD Flags    );																		
SetupDiGetClassImageIndex(    __in PSP_CLASSIMAGELIST_DATA ClassImageListData,    __in CONST GUID *ClassGuid,    __out PINT ImageIndex    );																		
SetupDiGetClassImageList(    __out PSP_CLASSIMAGELIST_DATA ClassImageListData    );																		
SetupDiGetClassImageListExA(    __out PSP_CLASSIMAGELIST_DATA ClassImageListData,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetClassImageListExW(    __out PSP_CLASSIMAGELIST_DATA ClassImageListData,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetClassInstallParamsA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,     __out_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,    __in DWORD ClassInstallParamsSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetClassInstallParamsW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __out_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,    __in DWORD ClassInstallParamsSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetClassPropertyExW(    __in   CONST GUID            *ClassGuid,    __in   CONST DEVPROPKEY      *PropertyKey,    __out        DEVPROPTYPE     *PropertyType,    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __out_opt    PDWORD           RequiredSize,    __in         DWORD            Flags,    __in_opt     PCWSTR           MachineName,    __reserved   PVOID            Reserved    );																		
SetupDiGetClassPropertyKeys(    __in   CONST GUID            *ClassGuid,    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,    __in         DWORD            PropertyKeyCount,    __out_opt    PDWORD           RequiredPropertyKeyCount,    __in         DWORD            Flags    );																		
SetupDiGetClassPropertyKeysExW(    __in   CONST GUID            *ClassGuid,    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,    __in         DWORD            PropertyKeyCount,    __out_opt    PDWORD           RequiredPropertyKeyCount,    __in         DWORD            Flags,    __in_opt     PCWSTR           MachineName,    __reserved   PVOID            Reserved    );																		
SetupDiGetClassPropertyW(    __in   CONST GUID            *ClassGuid,    __in   CONST DEVPROPKEY      *PropertyKey,    __out        DEVPROPTYPE     *PropertyType,    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __out_opt    PDWORD           RequiredSize,    __in         DWORD            Flags    );																		
SetupDiGetClassRegistryPropertyA(    __in CONST GUID *ClassGuid,    __in DWORD Property,    __out_opt PDWORD PropertyRegDataType,    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,    __in DWORD PropertyBufferSize,    __out_opt PDWORD RequiredSize,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetClassRegistryPropertyW(    __in CONST GUID *ClassGuid,    __in DWORD Property,    __out_opt PDWORD PropertyRegDataType,    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,    __in DWORD PropertyBufferSize,    __out_opt PDWORD RequiredSize,    __in_opt PCWSTR MachineName,     __reserved PVOID Reserved    );																		
SetupDiGetCustomDevicePropertyA(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in PCSTR CustomPropertyName,    __in DWORD Flags,    __out_opt PDWORD PropertyRegDataType,    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,    __in DWORD PropertyBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetCustomDevicePropertyW(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in PCWSTR CustomPropertyName,    __in DWORD Flags,    __out_opt PDWORD PropertyRegDataType,    __out_bcount(PropertyBufferSize) PBYTE PropertyBuffer,    __in DWORD PropertyBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetDeviceInfoListClass(    __in HDEVINFO DeviceInfoSet,    __out LPGUID ClassGuid    );																		
SetupDiGetDeviceInfoListDetailA(    __in HDEVINFO DeviceInfoSet,    __out PSP_DEVINFO_LIST_DETAIL_DATA_A DeviceInfoSetDetailData    );																		
SetupDiGetDeviceInfoListDetailW(    __in HDEVINFO DeviceInfoSet,    __out PSP_DEVINFO_LIST_DETAIL_DATA_W DeviceInfoSetDetailData    );																		
SetupDiGetDeviceInstallParamsA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __out PSP_DEVINSTALL_PARAMS_A DeviceInstallParams    );																		
SetupDiGetDeviceInstallParamsW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __out PSP_DEVINSTALL_PARAMS_W DeviceInstallParams    );																		
SetupDiGetDeviceInstanceIdA(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __out_ecount_opt(DeviceInstanceIdSize) PSTR DeviceInstanceId,    __in DWORD DeviceInstanceIdSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetDeviceInstanceIdW(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __out_ecount_opt(DeviceInstanceIdSize) PWSTR DeviceInstanceId,    __in DWORD DeviceInstanceIdSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetDeviceInterfaceAlias(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __in CONST GUID *AliasInterfaceClassGuid,    __out PSP_DEVICE_INTERFACE_DATA AliasDeviceInterfaceData    );																		
SetupDiGetDeviceInterfaceDetailA(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __inout_bcount_opt(DeviceInterfaceDetailDataSize) PSP_DEVICE_INTERFACE_DETAIL_DATA_A DeviceInterfaceDetailData,     __in DWORD DeviceInterfaceDetailDataSize,    __out_opt PDWORD RequiredSize,    __out_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiGetDeviceInterfaceDetailW(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __out_bcount_opt(DeviceInterfaceDetailDataSize) PSP_DEVICE_INTERFACE_DETAIL_DATA_W DeviceInterfaceDetailData,    __in DWORD DeviceInterfaceDetailDataSize,    __out_opt PDWORD RequiredSize,     __out_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiGetDeviceInterfacePropertyKeys(    __in         HDEVINFO         DeviceInfoSet,    __in         PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,    __in         DWORD            PropertyKeyCount,    __out_opt    PDWORD           RequiredPropertyKeyCount,    __in         DWORD            Flags    );																		
SetupDiGetDeviceInterfacePropertyW(    __in         HDEVINFO         DeviceInfoSet,    __in         PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __in   CONST DEVPROPKEY      *PropertyKey,    __out        DEVPROPTYPE     *PropertyType,    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __out_opt    PDWORD           RequiredSize,    __in         DWORD            Flags    );																		
SetupDiGetDevicePropertyKeys(    __in         HDEVINFO         DeviceInfoSet,    __in         PSP_DEVINFO_DATA DeviceInfoData,    __out_ecount_opt(PropertyKeyCount) DEVPROPKEY *PropertyKeyArray,    __in         DWORD            PropertyKeyCount,    __out_opt    PDWORD           RequiredPropertyKeyCount,    __in         DWORD            Flags    );																		
SetupDiGetDevicePropertyW(    __in         HDEVINFO         DeviceInfoSet,    __in         PSP_DEVINFO_DATA DeviceInfoData,    __in   CONST DEVPROPKEY      *PropertyKey,    __out        DEVPROPTYPE     *PropertyType,    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __out_opt    PDWORD           RequiredSize,    __in         DWORD            Flags    );																		
SetupDiGetDeviceRegistryPropertyA(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Property,    __out_opt PDWORD PropertyRegDataType,     __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,    __in DWORD PropertyBufferSize,    __out_opt PDWORD RequiredSize     );																		
SetupDiGetDeviceRegistryPropertyW(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Property,    __out_opt PDWORD PropertyRegDataType,    __out_bcount_opt(PropertyBufferSize) PBYTE PropertyBuffer,    __in DWORD PropertyBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetDriverInfoDetailA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DRVINFO_DATA_A DriverInfoData,    __inout_bcount_opt(DriverInfoDetailDataSize) PSP_DRVINFO_DETAIL_DATA_A DriverInfoDetailData,     __in DWORD DriverInfoDetailDataSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetDriverInfoDetailW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DRVINFO_DATA_W DriverInfoData,    __inout_bcount_opt(DriverInfoDetailDataSize) PSP_DRVINFO_DETAIL_DATA_W DriverInfoDetailData,    __in DWORD DriverInfoDetailDataSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetDriverInstallParamsA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DRVINFO_DATA_A DriverInfoData,    __out PSP_DRVINSTALL_PARAMS DriverInstallParams    );																		
SetupDiGetDriverInstallParamsW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DRVINFO_DATA_W DriverInfoData,    __out PSP_DRVINSTALL_PARAMS DriverInstallParams    );																		
SetupDiGetHwProfileFriendlyNameA(    __in DWORD HwProfile,    __out_ecount(FriendlyNameSize) PSTR FriendlyName,    __in DWORD FriendlyNameSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetHwProfileFriendlyNameExA(    __in DWORD HwProfile,    __out_ecount(FriendlyNameSize) PSTR FriendlyName,    __in DWORD FriendlyNameSize,    __out_opt PDWORD RequiredSize,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetHwProfileFriendlyNameExW(    __in DWORD HwProfile,    __out_ecount(FriendlyNameSize) PWSTR FriendlyName,    __in DWORD FriendlyNameSize,    __out_opt PDWORD RequiredSize,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetHwProfileFriendlyNameW(    __in DWORD HwProfile,    __out_ecount(FriendlyNameSize) PWSTR FriendlyName,    __in DWORD FriendlyNameSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetHwProfileList(    __out_ecount(HwProfileListSize) PDWORD HwProfileList,    __in DWORD HwProfileListSize,    __out PDWORD RequiredSize,    __out_opt PDWORD CurrentlyActiveIndex    );																		
SetupDiGetHwProfileListExA(    __out_ecount(HwProfileListSize) PDWORD HwProfileList,    __in DWORD HwProfileListSize,    __out PDWORD RequiredSize,    __out_opt PDWORD CurrentlyActiveIndex,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetHwProfileListExW(    __out_ecount(HwProfileListSize) PDWORD HwProfileList,    __in DWORD HwProfileListSize,    __out PDWORD RequiredSize,    __out_opt PDWORD CurrentlyActiveIndex,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiGetINFClassA(    __in PCSTR InfName,    __out LPGUID ClassGuid,    __out_ecount(ClassNameSize) PSTR ClassName,    __in DWORD ClassNameSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetINFClassW(    __in PCWSTR InfName,    __out LPGUID ClassGuid,    __out_ecount(ClassNameSize) PWSTR ClassName,    __in DWORD ClassNameSize,    __out_opt PDWORD RequiredSize    );																		
SetupDiGetSelectedDevice(    __in HDEVINFO DeviceInfoSet,    __out PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiGetSelectedDriverA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __out PSP_DRVINFO_DATA_A DriverInfoData    );																		
SetupDiGetSelectedDriverW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __out PSP_DRVINFO_DATA_W DriverInfoData    );																		
SetupDiGetWizardPage(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_INSTALLWIZARD_DATA InstallWizardData,    __in DWORD PageType,    __in DWORD Flags    );																		
SetupDiInstallClassA(    __in_opt HWND hwndParent,    __in PCSTR InfFileName,    __in DWORD Flags,    __in_opt HSPFILEQ FileQueue    );																		
SetupDiInstallClassExA(    __in_opt HWND hwndParent,    __in_opt PCSTR InfFileName,    __in DWORD Flags,    __in_opt HSPFILEQ FileQueue,    __in_opt CONST GUID *InterfaceClassGuid,    __reserved PVOID Reserved1,    __reserved PVOID Reserved2    );																		
SetupDiInstallClassExW(    __in_opt HWND hwndParent,    __in_opt PCWSTR InfFileName,    __in DWORD Flags,    __in_opt HSPFILEQ FileQueue,    __in_opt CONST GUID *InterfaceClassGuid,    __reserved PVOID Reserved1,    __reserved PVOID Reserved2    );																		
SetupDiInstallClassW(    __in_opt HWND hwndParent,    __in PCWSTR InfFileName,    __in DWORD Flags,    __in_opt HSPFILEQ FileQueue    );																		
SetupDiInstallDevice(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiInstallDeviceInterfaces(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiInstallDriverFiles(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiLoadClassIcon(    __in CONST GUID *ClassGuid,    __out_opt HICON *LargeIcon,    __out_opt PINT MiniIconIndex     );																		
SetupDiLoadDeviceIcon(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in UINT cxIcon,    __in UINT cyIcon,    __in DWORD Flags,    __out HICON *hIcon    );																		
SetupDiOpenClassRegKey(    __in_opt CONST GUID *ClassGuid,    __in REGSAM samDesired    );																		
SetupDiOpenClassRegKeyExA(    __in_opt CONST GUID *ClassGuid,    __in REGSAM samDesired,    __in DWORD Flags,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiOpenClassRegKeyExW(    __in_opt CONST GUID *ClassGuid,    __in REGSAM samDesired,    __in DWORD Flags,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiOpenDeviceInfoA(    __in HDEVINFO DeviceInfoSet,    __in PCSTR DeviceInstanceId,    __in_opt HWND hwndParent,    __in DWORD OpenFlags,    __out_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiOpenDeviceInfoW(    __in HDEVINFO DeviceInfoSet,    __in PCWSTR DeviceInstanceId,    __in_opt HWND hwndParent,    __in DWORD OpenFlags,    __out_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiOpenDeviceInterfaceA(    __in HDEVINFO DeviceInfoSet,    __in PCSTR DevicePath,    __in DWORD OpenFlags,    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData    );																		
SetupDiOpenDeviceInterfaceRegKey(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __reserved DWORD Reserved,    __in REGSAM samDesired    );																		
SetupDiOpenDeviceInterfaceW(    __in HDEVINFO DeviceInfoSet,    __in PCWSTR DevicePath,    __in DWORD OpenFlags,    __out_opt PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData    );																		
SetupDiOpenDevRegKey(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Scope,    __in DWORD HwProfile,    __in DWORD KeyType,    __in REGSAM samDesired    );																		
SetupDiRegisterCoDeviceInstallers(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiRegisterDeviceInfo(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Flags,    __in_opt PSP_DETSIG_CMPPROC CompareProc,    __in_opt PVOID CompareContext,    __out_opt PSP_DEVINFO_DATA DupDeviceInfoData    );																		
SetupDiRemoveDevice(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiRemoveDeviceInterface(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData    );																		
SetupDiRestartDevices(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiSelectBestCompatDrv(    __in HDEVINFO DeviceInfoSet,    __inout_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiSelectDevice(    __in HDEVINFO DeviceInfoSet,    __inout_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiSelectOEMDrv(    __in_opt HWND hwndParent,    __in HDEVINFO DeviceInfoSet,    __inout_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiSetClassInstallParamsA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,    __in DWORD ClassInstallParamsSize    );																		
SetupDiSetClassInstallParamsW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in_bcount_opt(ClassInstallParamsSize) PSP_CLASSINSTALL_HEADER ClassInstallParams,    __in DWORD ClassInstallParamsSize    );																		
SetupDiSetClassPropertyExW(    __in   CONST GUID            *ClassGuid,    __in   CONST DEVPROPKEY      *PropertyKey,    __in         DEVPROPTYPE      PropertyType,    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __in         DWORD            Flags,    __in_opt     PCWSTR           MachineName,    __reserved   PVOID            Reserved    );																		
SetupDiSetClassPropertyW(    __in   CONST GUID            *ClassGuid,    __in   CONST DEVPROPKEY      *PropertyKey,    __in         DEVPROPTYPE      PropertyType,    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __in         DWORD            Flags    );																		
SetupDiSetClassRegistryPropertyA(    __in CONST GUID *ClassGuid,    __in DWORD Property,    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer,     __in DWORD PropertyBufferSize,    __in_opt PCSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiSetClassRegistryPropertyW(    __in CONST GUID *ClassGuid,    __in DWORD Property,    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer,    __in DWORD PropertyBufferSize,    __in_opt PCWSTR MachineName,    __reserved PVOID Reserved    );																		
SetupDiSetDeviceInstallParamsA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DEVINSTALL_PARAMS_A DeviceInstallParams    );																		
SetupDiSetDeviceInstallParamsW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DEVINSTALL_PARAMS_W DeviceInstallParams    );																		
SetupDiSetDeviceInterfaceDefault(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __in DWORD Flags,    __reserved PVOID Reserved    );																		
SetupDiSetDeviceInterfacePropertyW(    __in         HDEVINFO         DeviceInfoSet,    __in         PSP_DEVICE_INTERFACE_DATA DeviceInterfaceData,    __in   CONST DEVPROPKEY      *PropertyKey,    __in         DEVPROPTYPE      PropertyType,    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __in         DWORD            Flags    );																		
SetupDiSetDevicePropertyW(    __in         HDEVINFO         DeviceInfoSet,    __in         PSP_DEVINFO_DATA DeviceInfoData,    __in   CONST DEVPROPKEY      *PropertyKey,    __in         DEVPROPTYPE      PropertyType,    __in_bcount_opt(PropertyBufferSize) CONST PBYTE PropertyBuffer,    __in         DWORD            PropertyBufferSize,    __in         DWORD            Flags    );																		
SetupDiSetDeviceRegistryPropertyA(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Property,    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer,    __in DWORD PropertyBufferSize    );																		
SetupDiSetDeviceRegistryPropertyW(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData,    __in DWORD Property,    __in_bcount_opt(PropertyBufferSize) CONST BYTE *PropertyBuffer,    __in DWORD PropertyBufferSize    );																		
SetupDiSetDriverInstallParamsA(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DRVINFO_DATA_A DriverInfoData,    __in PSP_DRVINSTALL_PARAMS DriverInstallParams    );																		
SetupDiSetDriverInstallParamsW(    __in HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __in PSP_DRVINFO_DATA_W DriverInfoData,    __in PSP_DRVINSTALL_PARAMS DriverInstallParams    );																		
SetupDiSetSelectedDevice(    __in HDEVINFO DeviceInfoSet,    __in PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDiSetSelectedDriverA(    __in HDEVINFO DeviceInfoSet,    __inout_opt PSP_DEVINFO_DATA DeviceInfoData,    __inout_opt PSP_DRVINFO_DATA_A DriverInfoData    );																		
SetupDiSetSelectedDriverW(    __in HDEVINFO DeviceInfoSet,    __inout_opt PSP_DEVINFO_DATA DeviceInfoData,    __inout_opt PSP_DRVINFO_DATA_W DriverInfoData    );																		
SetupDiUnremoveDevice(    __in HDEVINFO DeviceInfoSet,    __inout PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupDuplicateDiskSpaceListA(    __in HDSKSPC DiskSpace,    __reserved PVOID Reserved1,    __reserved DWORD Reserved2,    __in UINT Flags    );																		
SetupDuplicateDiskSpaceListW(    __in HDSKSPC DiskSpace,    __reserved PVOID Reserved1,    __reserved DWORD Reserved2,    __in UINT Flags    );																		
SetupEnumInfSectionsA (    __in HINF InfHandle,    __in UINT Index,    __out_ecount_opt(Size) PSTR Buffer,     __in UINT Size,    __out_opt UINT *SizeNeeded    );																		
SetupEnumInfSectionsW (    __in HINF InfHandle,    __in UINT Index,    __out_ecount_opt(Size) PWSTR Buffer,     __in UINT Size,    __out_opt UINT *SizeNeeded    );																		
SetupFindFirstLineA(    __in HINF InfHandle,    __in PCSTR Section,    __in_opt PCSTR Key,    __out PINFCONTEXT Context    );																		
SetupFindFirstLineW(    __in HINF InfHandle,    __in PCWSTR Section,    __in_opt PCWSTR Key,    __out PINFCONTEXT Context    );																		
SetupFindNextLine(    __in PINFCONTEXT ContextIn,    __out PINFCONTEXT ContextOut    );																		
SetupFindNextMatchLineA(    __in PINFCONTEXT ContextIn,    __in_opt PCSTR Key,    __out PINFCONTEXT ContextOut    );																		
SetupFindNextMatchLineW(    __in PINFCONTEXT ContextIn,    __in_opt PCWSTR Key,    __out PINFCONTEXT ContextOut    );																		
SetupFreeSourceListA(    __deref_inout_ecount(Count) PCSTR **List,    __in UINT Count    );																		
SetupFreeSourceListW(    __deref_inout_ecount(Count) PCWSTR **List,    __in UINT Count    );																		
SetupGetBackupInformationA(    __in HSPFILEQ QueueHandle,    __inout PSP_BACKUP_QUEUE_PARAMS_A BackupParams    );																		
SetupGetBackupInformationW(    __in HSPFILEQ QueueHandle,    __inout PSP_BACKUP_QUEUE_PARAMS_W BackupParams    );																		
SetupGetBinaryField(    __in PINFCONTEXT Context,    __in DWORD FieldIndex,    __out_bcount_opt(ReturnBufferSize) PBYTE ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt LPDWORD RequiredSize     );																		
SetupGetFieldCount(    __in PINFCONTEXT Context    );																		
SetupGetFileCompressionInfoA(    __in PCSTR SourceFileName,    __out PSTR *ActualSourceFileName,    __out PDWORD SourceFileSize,    __out PDWORD TargetFileSize,    __out PUINT CompressionType    );																		
SetupGetFileCompressionInfoExA(    __in PCSTR SourceFileName,    __in_ecount_opt(ActualSourceFileNameBufferLen) PSTR ActualSourceFileNameBuffer,    __in DWORD ActualSourceFileNameBufferLen,    __out_opt PDWORD RequiredBufferLen,     __out PDWORD SourceFileSize,    __out PDWORD TargetFileSize,    __out PUINT CompressionType    );																		
SetupGetFileCompressionInfoExW(    __in PCWSTR SourceFileName,    __in_ecount_opt(ActualSourceFileNameBufferLen) PWSTR ActualSourceFileNameBuffer,    __in DWORD ActualSourceFileNameBufferLen,    __out_opt PDWORD RequiredBufferLen,    __out PDWORD SourceFileSize,    __out PDWORD TargetFileSize,    __out PUINT CompressionType    );																		
SetupGetFileCompressionInfoW(    __in PCWSTR SourceFileName,    __out PWSTR *ActualSourceFileName,    __out PDWORD SourceFileSize,    __out PDWORD TargetFileSize,    __out PUINT CompressionType    );																		
SetupGetFileQueueCount(    __in HSPFILEQ FileQueue,    __in UINT SubQueueFileOp,    __out PUINT NumOperations    );																		
SetupGetFileQueueFlags(    __in HSPFILEQ FileQueue,    __out PDWORD Flags    );																		
SetupGetInfDriverStoreLocationA(    __in PCSTR FileName,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __in_opt PCSTR LocaleName,    __out_ecount(ReturnBufferSize) PSTR ReturnBuffer,     __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetInfDriverStoreLocationW(    __in PCWSTR FileName,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,        __in_opt PCWSTR LocaleName,    __out_ecount(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetInfFileListA(    __in_opt PCSTR DirectoryPath,    __in DWORD InfStyle,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,     __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetInfFileListW(    __in_opt PCWSTR DirectoryPath,    __in DWORD InfStyle,    __out_ecount(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetInfInformationA(    __in LPCVOID InfSpec,    __in DWORD SearchControl,    __out_bcount_opt(ReturnBufferSize) PSP_INF_INFORMATION ReturnBuffer,     __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetInfInformationW(    __in LPCVOID InfSpec,    __in DWORD SearchControl,    __out_bcount_opt(ReturnBufferSize) PSP_INF_INFORMATION ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetInfPublishedNameA(    __in PCSTR DriverStoreLocation,    __out_ecount(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetInfPublishedNameW(    __in PCWSTR DriverStoreLocation,    __out_ecount(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetIntField(    __in PINFCONTEXT Context,    __in DWORD FieldIndex,    __out PINT IntegerValue    );																		
SetupGetLineByIndexA(    __in HINF InfHandle,    __in PCSTR Section,    __in DWORD Index,    __out PINFCONTEXT Context    );																		
SetupGetLineByIndexW(    __in HINF InfHandle,    __in PCWSTR Section,    __in DWORD Index,    __out PINFCONTEXT Context    );																		
SetupGetLineCountA(    __in HINF InfHandle,    __in PCSTR Section    );																		
SetupGetLineCountW(    __in HINF InfHandle,    __in PCWSTR Section    );																		
SetupGetLineTextA(    __in_opt PINFCONTEXT Context,    __in_opt HINF InfHandle,    __in_opt PCSTR Section,    __in_opt PCSTR Key,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetLineTextW(    __in_opt PINFCONTEXT Context,    __in_opt HINF InfHandle,    __in_opt PCWSTR Section,    __in_opt PCWSTR Key,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetMultiSzFieldA(    __in PINFCONTEXT Context,    __in DWORD FieldIndex,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt LPDWORD RequiredSize     );																		
SetupGetMultiSzFieldW(    __in PINFCONTEXT Context,    __in DWORD FieldIndex,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt LPDWORD RequiredSize     );																		
SetupGetNonInteractiveMode(    VOID    );																		
SetupGetSourceFileLocationA(    __in HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCSTR FileName,    __out PUINT SourceId,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetSourceFileLocationW(    __in HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCWSTR FileName,    __out PUINT SourceId,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetSourceFileSizeA(    __in HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCSTR FileName,    __in_opt PCSTR Section,    __out PDWORD FileSize,    __in UINT RoundingFactor    );																		
SetupGetSourceFileSizeW(    __in HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCWSTR FileName,    __in_opt PCWSTR Section,    __out PDWORD FileSize,    __in UINT RoundingFactor    );																		
SetupGetSourceInfoA(    __in HINF InfHandle,    __in UINT SourceId,    __in UINT InfoDesired,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetSourceInfoW(    __in HINF InfHandle,    __in UINT SourceId,    __in UINT InfoDesired,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetStringFieldA(    __in PINFCONTEXT Context,    __in DWORD FieldIndex,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetStringFieldW(    __in PINFCONTEXT Context,    __in DWORD FieldIndex,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetTargetPathA(    __in HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCSTR Section,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetTargetPathW(    __in HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCWSTR Section,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupGetThreadLogToken(    VOID    );																		
SetupInitDefaultQueueCallback(    __in_opt HWND OwnerWindow    );																		
SetupInitDefaultQueueCallbackEx(    __in_opt HWND OwnerWindow,    __in_opt HWND AlternateProgressWindow,    __in UINT ProgressMessage,    __reserved DWORD Reserved1,    __reserved PVOID Reserved2    );																		
SetupInitializeFileLogA(    __in_opt PCSTR LogFileName,    __in DWORD Flags    );																		
SetupInitializeFileLogW(    __in_opt PCWSTR LogFileName,    __in DWORD Flags    );																		
SetupInstallFileA(    __in_opt HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCSTR SourceFile,    __in_opt PCSTR SourcePathRoot,    __in_opt PCSTR DestinationName,    __in DWORD CopyStyle,    __in_opt PSP_FILE_CALLBACK_A CopyMsgHandler,    __in_opt PVOID Context    );																		
SetupInstallFileExA(    __in_opt HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCSTR SourceFile,    __in_opt PCSTR SourcePathRoot,    __in_opt PCSTR DestinationName,    __in DWORD CopyStyle,    __in_opt PSP_FILE_CALLBACK_A CopyMsgHandler,    __in_opt PVOID Context,    __out PBOOL FileWasInUse    );																		
SetupInstallFileExW(    __in_opt HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCWSTR SourceFile,    __in_opt PCWSTR SourcePathRoot,    __in_opt PCWSTR DestinationName,    __in DWORD CopyStyle,    __in_opt PSP_FILE_CALLBACK_W CopyMsgHandler,    __in_opt PVOID Context,    __out PBOOL FileWasInUse    );																		
SetupInstallFilesFromInfSectionA(    __in HINF InfHandle,    __in_opt HINF LayoutInfHandle,    __in HSPFILEQ FileQueue,    __in PCSTR SectionName,    __in_opt PCSTR SourceRootPath,    __in UINT CopyFlags    );																		
SetupInstallFilesFromInfSectionW(    __in HINF InfHandle,    __in_opt HINF LayoutInfHandle,    __in HSPFILEQ FileQueue,    __in PCWSTR SectionName,    __in_opt PCWSTR SourceRootPath,    __in UINT CopyFlags    );																		
SetupInstallFileW(    __in_opt HINF InfHandle,    __in_opt PINFCONTEXT InfContext,    __in_opt PCWSTR SourceFile,    __in_opt PCWSTR SourcePathRoot,    __in_opt PCWSTR DestinationName,    __in DWORD CopyStyle,    __in_opt PSP_FILE_CALLBACK_W CopyMsgHandler,    __in_opt PVOID Context    );																		
SetupInstallFromInfSectionA(    __in_opt HWND Owner,    __in HINF InfHandle,    __in PCSTR SectionName,    __in UINT Flags,    __in_opt HKEY RelativeKeyRoot,    __in_opt PCSTR SourceRootPath,    __in UINT CopyFlags,    __in_opt PSP_FILE_CALLBACK_A MsgHandler,    __in_opt PVOID Context,    __in_opt HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupInstallFromInfSectionW(    __in_opt HWND Owner,    __in HINF InfHandle,    __in PCWSTR SectionName,    __in UINT Flags,    __in_opt HKEY RelativeKeyRoot,    __in_opt PCWSTR SourceRootPath,    __in UINT CopyFlags,    __in_opt PSP_FILE_CALLBACK_W MsgHandler,    __in_opt PVOID Context,    __in_opt HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData    );																		
SetupInstallServicesFromInfSectionA(    __in HINF InfHandle,    __in PCSTR SectionName,    __in DWORD Flags    );																		
SetupInstallServicesFromInfSectionExA(    __in HINF InfHandle,    __in PCSTR SectionName,    __in DWORD Flags,    __in_opt HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __reserved PVOID Reserved1,    __reserved PVOID Reserved2    );																		
SetupInstallServicesFromInfSectionExW(    __in HINF InfHandle,    __in PCWSTR SectionName,    __in DWORD Flags,    __in_opt HDEVINFO DeviceInfoSet,    __in_opt PSP_DEVINFO_DATA DeviceInfoData,    __reserved PVOID Reserved1,    __reserved PVOID Reserved2    );																		
SetupInstallServicesFromInfSectionW(    __in HINF InfHandle,    __in PCWSTR SectionName,    __in DWORD Flags    );																		
SetupIterateCabinetA(    __in PCSTR CabinetFile,    __reserved DWORD Reserved,    __in PSP_FILE_CALLBACK_A MsgHandler,    __in PVOID Context    );																		
SetupIterateCabinetW(    __in PCWSTR CabinetFile,    __reserved DWORD Reserved,    __in PSP_FILE_CALLBACK_W MsgHandler,    __in PVOID Context    );																		
SetupLogErrorA (    __in LPCSTR MessageString,    __in LogSeverity Severity    );																		
SetupLogErrorW (    __in LPCWSTR MessageString,    __in LogSeverity Severity    );																		
SetupLogFileA(    __in HSPFILELOG FileLogHandle,    __in_opt PCSTR LogSectionName,    __in PCSTR SourceFilename,    __in PCSTR TargetFilename,    __in DWORD Checksum,    __in_opt PCSTR DiskTagfile,    __in_opt PCSTR DiskDescription,    __in_opt PCSTR OtherInfo,    __in DWORD Flags    );																		
SetupLogFileW(    __in HSPFILELOG FileLogHandle,    __in_opt PCWSTR LogSectionName,    __in PCWSTR SourceFilename,    __in PCWSTR TargetFilename,    __in DWORD Checksum,    __in_opt PCWSTR DiskTagfile,    __in_opt PCWSTR DiskDescription,    __in_opt PCWSTR OtherInfo,    __in DWORD Flags    );																		
SetupOpenAppendInfFileA(    __in_opt PCSTR FileName,    __in HINF InfHandle,    __out_opt PUINT ErrorLine    );																		
SetupOpenAppendInfFileW(    __in_opt PCWSTR FileName,    __in HINF InfHandle,    __out_opt PUINT ErrorLine    );																		
SetupOpenFileQueue(    VOID    );																		
SetupOpenInfFileA(    __in PCSTR FileName,    __in_opt PCSTR InfClass,    __in DWORD InfStyle,    __out_opt PUINT ErrorLine    );																		
SetupOpenInfFileW(    __in PCWSTR FileName,    __in_opt PCWSTR InfClass,    __in DWORD InfStyle,    __out_opt PUINT ErrorLine    );																		
SetupOpenLog (    __in BOOL Erase    );																		
SetupOpenMasterInf(    VOID    );																		
SetupPrepareQueueForRestoreA(    __in HSPFILEQ QueueHandle,    __in PCSTR BackupPath,    __in DWORD RestoreFlags    );																		
SetupPrepareQueueForRestoreW(    __in HSPFILEQ QueueHandle,    __in PCWSTR BackupPath,    __in DWORD RestoreFlags    );																		
SetupPromptForDiskA(    __in HWND hwndParent,    __in_opt PCSTR DialogTitle,    __in_opt PCSTR DiskName,    __in_opt PCSTR PathToSource,    __in PCSTR FileSought,    __in_opt PCSTR TagFile,    __in DWORD DiskPromptStyle,    __out_ecount_opt(PathBufferSize) PSTR PathBuffer,    __in DWORD PathBufferSize,    __out_opt PDWORD PathRequiredSize    );																		
SetupPromptForDiskW(    __in HWND hwndParent,    __in_opt PCWSTR DialogTitle,    __in_opt PCWSTR DiskName,    __in_opt PCWSTR PathToSource,    __in PCWSTR FileSought,    __in_opt PCWSTR TagFile,    __in DWORD DiskPromptStyle,    __out_ecount_opt(PathBufferSize) PWSTR PathBuffer,    __in DWORD PathBufferSize,    __out_opt PDWORD PathRequiredSize    );																		
SetupPromptReboot(    __in_opt HSPFILEQ FileQueue,    __in_opt HWND Owner,    __in BOOL ScanOnly    );																		
SetupQueryDrivesInDiskSpaceListA(    __in HDSKSPC DiskSpace,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupQueryDrivesInDiskSpaceListW(    __in HDSKSPC DiskSpace,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupQueryFileLogA(    __in HSPFILELOG FileLogHandle,    __in_opt PCSTR LogSectionName,    __in PCSTR TargetFilename,    __in SetupFileLogInfo DesiredInfo,    __out_ecount_opt(ReturnBufferSize) PSTR DataOut,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupQueryFileLogW(    __in HSPFILELOG FileLogHandle,    __in_opt PCWSTR LogSectionName,     __in PCWSTR TargetFilename,    __in SetupFileLogInfo DesiredInfo,    __out_ecount_opt(ReturnBufferSize) PWSTR DataOut,     __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupQueryInfFileInformationA(    __in PSP_INF_INFORMATION InfInformation,    __in UINT InfIndex,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize     );																		
SetupQueryInfFileInformationW(    __in PSP_INF_INFORMATION InfInformation,    __in UINT InfIndex,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupQueryInfOriginalFileInformationA(    __in PSP_INF_INFORMATION InfInformation,    __in UINT InfIndex,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __out PSP_ORIGINAL_FILE_INFO_A OriginalFileInfo    );																		
SetupQueryInfOriginalFileInformationW(    __in PSP_INF_INFORMATION InfInformation,    __in UINT InfIndex,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __out PSP_ORIGINAL_FILE_INFO_W OriginalFileInfo    );																		
SetupQueryInfVersionInformationA(    __in PSP_INF_INFORMATION InfInformation,    __in UINT InfIndex,    __in_opt PCSTR Key,    __out_ecount_opt(ReturnBufferSize) PSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupQueryInfVersionInformationW(    __in PSP_INF_INFORMATION InfInformation,    __in UINT InfIndex,    __in_opt PCWSTR Key,    __out_ecount_opt(ReturnBufferSize) PWSTR ReturnBuffer,    __in DWORD ReturnBufferSize,    __out_opt PDWORD RequiredSize    );																		
SetupQuerySourceListA(    __in DWORD Flags,    __deref_out_ecount(*Count) PCSTR **List,    __out PUINT Count    );																		
SetupQuerySourceListW(    __in DWORD Flags,    __deref_out_ecount(*Count) PCWSTR **List,    __out PUINT Count    );																		
SetupQuerySpaceRequiredOnDriveA(    __in HDSKSPC DiskSpace,    __in PCSTR DriveSpec,    __out LONGLONG *SpaceRequired,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupQuerySpaceRequiredOnDriveW(    __in HDSKSPC DiskSpace,    __in PCWSTR DriveSpec,    __out LONGLONG *SpaceRequired,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupQueueCopyA(    __in HSPFILEQ QueueHandle,    __in_opt PCSTR SourceRootPath,     __in_opt PCSTR SourcePath,     __in PCSTR SourceFilename,    __in_opt PCSTR SourceDescription,     __in_opt PCSTR SourceTagfile,     __in PCSTR TargetDirectory,    __in_opt PCSTR TargetFilename,     __in DWORD CopyStyle    );																		
SetupQueueCopyIndirectA(    __in PSP_FILE_COPY_PARAMS_A CopyParams    );																		
SetupQueueCopyIndirectW(    __in PSP_FILE_COPY_PARAMS_W CopyParams    );																		
SetupQueueCopySectionA(    __in HSPFILEQ QueueHandle,    __in_opt PCSTR SourceRootPath,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCSTR Section,    __in DWORD CopyStyle    );																		
SetupQueueCopySectionW(    __in HSPFILEQ QueueHandle,    __in_opt PCWSTR SourceRootPath,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCWSTR Section,    __in DWORD CopyStyle    );																		
SetupQueueCopyW(    __in HSPFILEQ QueueHandle,    __in_opt PCWSTR SourceRootPath,     __in_opt PCWSTR SourcePath,     __in PCWSTR SourceFilename,    __in_opt PCWSTR SourceDescription,     __in_opt PCWSTR SourceTagfile,     __in PCWSTR TargetDirectory,    __in_opt PCWSTR TargetFilename,     __in DWORD CopyStyle    );																		
SetupQueueDefaultCopyA(    __in HSPFILEQ QueueHandle,    __in HINF InfHandle,    __in_opt PCSTR SourceRootPath,    __in PCSTR SourceFilename,    __in_opt PCSTR TargetFilename,    __in DWORD CopyStyle    );																		
SetupQueueDefaultCopyW(    __in HSPFILEQ QueueHandle,    __in HINF InfHandle,    __in_opt PCWSTR SourceRootPath,    __in PCWSTR SourceFilename,    __in_opt PCWSTR TargetFilename,    __in DWORD CopyStyle    );																		
SetupQueueDeleteA(    __in HSPFILEQ QueueHandle,    __in PCSTR PathPart1,    __in_opt PCSTR PathPart2    );																		
SetupQueueDeleteSectionA(    __in HSPFILEQ QueueHandle,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCSTR Section    );																		
SetupQueueDeleteSectionW(    __in HSPFILEQ QueueHandle,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCWSTR Section    );																		
SetupQueueDeleteW(    __in HSPFILEQ QueueHandle,    __in PCWSTR PathPart1,    __in_opt PCWSTR PathPart2    );																		
SetupQueueRenameA(    __in HSPFILEQ QueueHandle,    __in PCSTR SourcePath,    __in_opt PCSTR SourceFilename,    __in_opt PCSTR TargetPath,    __in PCSTR TargetFilename    );																		
SetupQueueRenameSectionA(    __in HSPFILEQ QueueHandle,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCSTR Section    );																		
SetupQueueRenameSectionW(    __in HSPFILEQ QueueHandle,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCWSTR Section    );																		
SetupQueueRenameW(    __in HSPFILEQ QueueHandle,    __in PCWSTR SourcePath,    __in_opt PCWSTR SourceFilename,     __in_opt PCWSTR TargetPath,    __in PCWSTR TargetFilename    );																		
SetupRemoveFileLogEntryA(    __in HSPFILELOG FileLogHandle,    __in_opt PCSTR LogSectionName,    __in_opt PCSTR TargetFilename    );																		
SetupRemoveFileLogEntryW(    __in HSPFILELOG FileLogHandle,    __in_opt PCWSTR LogSectionName,    __in_opt PCWSTR TargetFilename    );																		
SetupRemoveFromDiskSpaceListA(    __in HDSKSPC DiskSpace,    __in PCSTR TargetFilespec,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupRemoveFromDiskSpaceListW(    __in HDSKSPC DiskSpace,    __in PCWSTR TargetFilespec,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupRemoveFromSourceListA(    __in DWORD Flags,    __in PCSTR Source    );																		
SetupRemoveFromSourceListW(    __in DWORD Flags,    __in PCWSTR Source    );																		
SetupRemoveInstallSectionFromDiskSpaceListA(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF LayoutInfHandle,    __in PCSTR SectionName,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupRemoveInstallSectionFromDiskSpaceListW(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF LayoutInfHandle,    __in PCWSTR SectionName,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupRemoveSectionFromDiskSpaceListA(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCSTR SectionName,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupRemoveSectionFromDiskSpaceListW(    __in HDSKSPC DiskSpace,    __in HINF InfHandle,    __in_opt HINF ListInfHandle,    __in PCWSTR SectionName,    __in UINT Operation,    __reserved PVOID Reserved1,    __reserved UINT Reserved2    );																		
SetupRenameErrorA(    __in HWND hwndParent,    __in_opt PCSTR DialogTitle,    __in PCSTR SourceFile,    __in PCSTR TargetFile,    __in UINT Win32ErrorCode,    __in DWORD Style    );																		
SetupRenameErrorW(    __in HWND hwndParent,    __in_opt PCWSTR DialogTitle,    __in PCWSTR SourceFile,    __in PCWSTR TargetFile,    __in UINT Win32ErrorCode,    __in DWORD Style    );																		
SetupScanFileQueueA(    __in HSPFILEQ FileQueue,    __in DWORD Flags,    __in_opt HWND Window,    __in_opt PSP_FILE_CALLBACK_A CallbackRoutine,    __in_opt PVOID CallbackContext,    __out PDWORD Result    );																		
SetupScanFileQueueW(    __in HSPFILEQ FileQueue,    __in DWORD Flags,    __in_opt HWND Window,    __in_opt PSP_FILE_CALLBACK_W CallbackRoutine,    __in_opt PVOID CallbackContext,    __out PDWORD Result    );																		
SetupSetDirectoryIdA(    __in HINF InfHandle,    __in DWORD Id,     __in_opt PCSTR Directory     );																		
SetupSetDirectoryIdExA(    __in HINF InfHandle,    __in DWORD Id,     __in_opt PCSTR Directory,     __in DWORD Flags,    __reserved DWORD Reserved1,    __reserved PVOID Reserved2    );																		
SetupSetDirectoryIdExW(    __in HINF InfHandle,    __in DWORD Id,     __in_opt PCWSTR Directory,    __in DWORD Flags,    __reserved DWORD Reserved1,    __reserved PVOID Reserved2    );																		
SetupSetDirectoryIdW(    __in HINF InfHandle,    __in DWORD Id,     __in_opt PCWSTR Directory     );																		
SetupSetFileQueueAlternatePlatformA(    __in HSPFILEQ QueueHandle,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __in_opt PCSTR AlternateDefaultCatalogFile    );																		
SetupSetFileQueueAlternatePlatformW(    __in HSPFILEQ QueueHandle,    __in_opt PSP_ALTPLATFORM_INFO AlternatePlatformInfo,    __in_opt PCWSTR AlternateDefaultCatalogFile    );																		
SetupSetFileQueueFlags(    __in HSPFILEQ FileQueue,    __in DWORD FlagMask,    __in DWORD Flags    );																		
SetupSetNonInteractiveMode(    __in BOOL NonInteractiveFlag    );																		
SetupSetPlatformPathOverrideA(    __in_opt PCSTR Override    );																		
SetupSetPlatformPathOverrideW(    __in_opt PCWSTR Override    );																		
SetupSetSourceListA(    __in DWORD Flags,    __in_ecount(SourceCount) PCSTR *SourceList,    __in UINT SourceCount    );																		
SetupSetSourceListW(    __in DWORD Flags,    __in_ecount(SourceCount) PCWSTR *SourceList,    __in UINT SourceCount    );																		
SetupSetThreadLogToken(    __in SP_LOG_TOKEN LogToken    );																		
SetupTermDefaultQueueCallback(    __in PVOID Context    );																		
SetupTerminateFileLog(    __in HSPFILELOG FileLogHandle    );																		
SetupUninstallNewlyCopiedInfs(    __in HSPFILEQ FileQueue,    __in DWORD Flags,    __reserved PVOID Reserved    );																		
SetupUninstallOEMInfA(    __in PCSTR InfFileName,    __in DWORD Flags,    __reserved PVOID Reserved    );																		
SetupUninstallOEMInfW(    __in PCWSTR InfFileName,    __in DWORD Flags,    __reserved PVOID Reserved    );																		
SetupVerifyInfFileA(    __in PCSTR InfName,    __in_opt PSP_ALTPLATFORM_INFO AltPlatformInfo,    __inout PSP_INF_SIGNER_INFO_A InfSignerInfo    );																		
SetupVerifyInfFileW(    __in PCWSTR InfName,    __in_opt PSP_ALTPLATFORM_INFO AltPlatformInfo,    __inout PSP_INF_SIGNER_INFO_W InfSignerInfo    );																		
SetupWriteTextLog(    __in SP_LOG_TOKEN LogToken,    __in DWORD Category,    __in DWORD Flags,    __in PCSTR MessageStr,    ...    );																		
SetupWriteTextLogError(    __in SP_LOG_TOKEN LogToken,    __in DWORD Category,    __in DWORD LogFlags,    __in DWORD Error,    __in PCSTR MessageStr,    ...    );																		
SetupWriteTextLogInfLine(    __in SP_LOG_TOKEN LogToken,    __in DWORD Flags,    __in HINF InfHandle,    __in PINFCONTEXT Context    );																		
SetUrlCacheEntryGroup(    __in   LPCSTR   lpszUrlName,    __in   DWORD    dwFlags,    __in   GROUPID  GroupId,    __reserved LPBYTE   pbGroupAttributes,    __reserved DWORD    cbGroupAttributes,    __reserved LPVOID   lpReserved    );																		
SetUrlCacheEntryGroupA(    __in   LPCSTR   lpszUrlName,    __in   DWORD    dwFlags,    __in   GROUPID  GroupId,    __reserved LPBYTE   pbGroupAttributes,    __reserved DWORD    cbGroupAttributes,    __reserved LPVOID   lpReserved    );																		
SetUrlCacheEntryGroupW(    __in   LPCWSTR  lpszUrlName,    __in   DWORD    dwFlags,    __in   GROUPID  GroupId,    __reserved LPBYTE   pbGroupAttributes,    __reserved DWORD    cbGroupAttributes,    __reserved LPVOID   lpReserved    );																		
SetUrlCacheEntryInfoA(    __in LPCSTR lpszUrlName,    __in LPINTERNET_CACHE_ENTRY_INFOA lpCacheEntryInfo,    __in DWORD dwFieldControl    );																		
SetUrlCacheEntryInfoW(    __in LPCWSTR lpszUrlName,    __in LPINTERNET_CACHE_ENTRY_INFOW lpCacheEntryInfo,    __in DWORD dwFieldControl    );																		
SetUrlCacheGroupAttributeA(    __in    GROUPID                         gid,    __reserved  DWORD                           dwFlags,    __in    DWORD                           dwAttributes,    __in    LPINTERNET_CACHE_GROUP_INFOA    lpGroupInfo,    __reserved  LPVOID                          lpReserved    );																		
SetUrlCacheGroupAttributeW(    __in    GROUPID                         gid,    __reserved  DWORD                           dwFlags,    __in    DWORD                           dwAttributes,    __in    LPINTERNET_CACHE_GROUP_INFOW    lpGroupInfo,    __reserved  LPVOID                          lpReserved    );																		
SetUserFileEncryptionKey(    __in    PENCRYPTION_CERTIFICATE     pEncryptionCertificate    );																		
SetUserFileEncryptionKey(    __in_opt    PENCRYPTION_CERTIFICATE     pEncryptionCertificate    );																		
SetUserFileEncryptionKeyEx(    __in_opt        PENCRYPTION_CERTIFICATE     pEncryptionCertificate,                    DWORD                       dwCapabilities,                     DWORD                       dwFlags,    __reserved      LPVOID                      pvReserved    );																		
SetUserGeoID(    __in GEOID       GeoId);																		
SetUserObjectInformationA(    __in HANDLE hObj,    __in int nIndex,    __in_bcount(nLength) PVOID pvInfo,    __in DWORD nLength);																		
SetUserObjectInformationW(    __in HANDLE hObj,    __in int nIndex,    __in_bcount(nLength) PVOID pvInfo,    __in DWORD nLength);																		
SetUserObjectSecurity(    __in HANDLE hObj,    __in PSECURITY_INFORMATION pSIRequested,    __in PSECURITY_DESCRIPTOR pSID);																		
SetViewportExtEx( __in HDC hdc, __in int x, __in int y, __out_opt LPSIZE lpsz);																		
SetViewportOrgEx( __in HDC hdc, __in int x, __in int y, __out_opt LPPOINT lppt);																		
SetVirtualDiskInformation(    __in HANDLE                 VirtualDiskHandle,    __in PSET_VIRTUAL_DISK_INFO VirtualDiskInfo);																		
SetVolumeLabelA(    __in_opt LPCSTR lpRootPathName,    __in_opt LPCSTR lpVolumeName    );																		
SetVolumeLabelW(    __in_opt LPCWSTR lpRootPathName,    __in_opt LPCWSTR lpVolumeName    );																		
SetVolumeMountPointA(    __in LPCSTR lpszVolumeMountPoint,    __in LPCSTR lpszVolumeName    );																		
SetVolumeMountPointW(    __in LPCWSTR lpszVolumeMountPoint,    __in LPCWSTR lpszVolumeName    );																		
SetWaitableTimer(    __in     HANDLE hTimer,    __in     const LARGE_INTEGER *lpDueTime,    __in     LONG lPeriod,    __in_opt PTIMERAPCROUTINE pfnCompletionRoutine,    __in_opt LPVOID lpArgToCompletionRoutine,    __in     BOOL fResume    );																		
SetWaitableTimerEx(    __in     HANDLE hTimer,    __in     const LARGE_INTEGER *lpDueTime,    __in     LONG lPeriod,    __in_opt PTIMERAPCROUTINE pfnCompletionRoutine,    __in_opt LPVOID lpArgToCompletionRoutine,    __in_opt PREASON_CONTEXT WakeContext,    __in     ULONG TolerableDelay    );																		
SetWindowContextHelpId(__in HWND,__in DWORD);																		
SetWindowDisplayAffinity(    __in HWND hWnd,    __in DWORD dwAffinity);																		
SetWindowExtEx( __in HDC hdc, __in int x, __in int y, __out_opt LPSIZE lpsz);																		
SetWindowLongA(__in HWND hWnd,__in int nIndex,__in LONG dwNewLong);																		
SetWindowLongPtrA(__in HWND hWnd,__in int nIndex,__in LONG_PTR dwNewLong);																		
SetWindowLongPtrW(__in HWND hWnd,__in int nIndex,__in LONG_PTR dwNewLong);																		
SetWindowLongW(__in HWND hWnd,__in int nIndex,__in LONG dwNewLong);																		
SetWindowOrgEx( __in HDC hdc, __in int x, __in int y, __out_opt LPPOINT lppt);																		
SetWindowPlacement(    __in HWND hWnd,    __in CONST WINDOWPLACEMENT *lpwndpl);																		
SetWindowPos(    __in HWND hWnd,    __in_opt HWND hWndInsertAfter,    __in int X,    __in int Y,    __in int cx,    __in int cy,    __in UINT uFlags);																		
SetWindowRgn(    __in HWND hWnd,    __in_opt HRGN hRgn,    __in BOOL bRedraw);																		
SetWindowsHookA(__in int nFilterType,__in HOOKPROC pfnFilterProc);																		
SetWindowsHookA(__in int nFilterType,__in HOOKPROC pfnFilterProc);																		
SetWindowsHookExA(__in int idHook,__in HOOKPROC lpfn,__in_opt HINSTANCE hmod,__in DWORD dwThreadId);																		
SetWindowsHookExW(__in int idHook,__in HOOKPROC lpfn,__in_opt HINSTANCE hmod,__in DWORD dwThreadId);																		
SetWindowsHookW(__in int nFilterType,__in HOOKPROC pfnFilterProc);																		
SetWindowsHookW(__in int nFilterType,__in HOOKPROC pfnFilterProc);																		
SetWindowSubclass(__in HWND hWnd, __in SUBCLASSPROC pfnSubclass, __in UINT_PTR uIdSubclass,__in DWORD_PTR dwRefData);																		
SetWindowTextA(    __in HWND hWnd,    __in_opt LPCSTR lpString);																		
SetWindowTextW(    __in HWND hWnd,    __in_opt LPCWSTR lpString);																		
SetWindowWord(__in HWND hWnd,__in int nIndex,__in WORD wNewWord);																		
SetWinEventHook(    __in DWORD eventMin,    __in DWORD eventMax,    __in_opt HMODULE hmodWinEventProc,    __in WINEVENTPROC pfnWinEventProc,    __in DWORD idProcess,    __in DWORD idThread,    __in DWORD dwFlags);																		
SetWinMetaFileBits(  __in UINT nSize,                   __in_bcount(nSize) CONST BYTE *lpMeta16Data,                   __in_opt HDC hdcRef,                   __in_opt CONST METAFILEPICT *lpMFP);																		
SetWorldTransform( __in HDC hdc, __in CONST XFORM * lpxf);																		
SfcGetNextProtectedFile( IN HANDLE RpcHandle, IN PPROTECTED_FILE_DATA ProtFileData );																		
SfcIsFileProtected( IN HANDLE RpcHandle, IN LPCWSTR ProtFileName );																		
SfcIsKeyProtected(    IN HKEY KeyHandle,    IN LPCWSTR SubKeyName OPTIONAL,    IN REGSAM KeySam     ); 																		
SfpVerifyFile(    __in LPCSTR pszFileName,    __in_ecount(dwErrSize) LPSTR  pszError,    __in DWORD   dwErrSize    );    																		
ShowCaret(__in_opt HWND hWnd);																		
ShowCursor(__in BOOL bShow);																		
ShowHideMenuCtl(__in HWND hWnd, __in UINT_PTR uFlags, __in __nullterminated LPINT lpInfo);																		
ShowOwnedPopups( __in  HWND hWnd, __in  BOOL fShow);																		
ShowScrollBar( __in HWND hWnd, __in int wBar, __in BOOL bShow);																		
ShowWindow( __in HWND hWnd, __in int nCmdShow);																		
ShowWindowAsync( __in  HWND hWnd, __in  int nCmdShow);																		
ShutdownBlockReasonCreate( __in HWND hWnd, __in LPCWSTR pwszReason);																		
ShutdownBlockReasonDestroy( __in HWND hWnd);																		
ShutdownBlockReasonQuery( __in HWND hWnd, __out_ecount_opt(*pcchBuff) LPWSTR pwszBuff, __inout DWORD *pcchBuff);																		
SignalObjectAndWait( __in HANDLE hObjectToSignal, __in HANDLE hObjectToWaitOn, __in DWORD dwMilliseconds, __in BOOL bAlertable );																		
SinglePhaseReject( IN  HANDLE EnlistmentHandle, IN  PLARGE_INTEGER TmVirtualClock );																		
SizeofResource( __in_opt HMODULE hModule, __in HRSRC hResInfo );																		
SLAcquireGenuineTicket( __deref_out_bcount(*pcbTicketBlob) VOID** ppTicketBlob, __out UINT* pcbTicketBlob, __in PCWSTR pwszTemplateId, __in PCWSTR pwszServerUrl, __in_opt PCWSTR pwszClientToken );																		
Sleep( __in DWORD dwMilliseconds );																		
SleepConditionVariableCS ( __inout PCONDITION_VARIABLE ConditionVariable, __inout PCRITICAL_SECTION CriticalSection, __in DWORD dwMilliseconds );																		
SleepConditionVariableSRW ( __inout PCONDITION_VARIABLE ConditionVariable, __inout PSRWLOCK SRWLock, __in DWORD dwMilliseconds, __in ULONG Flags );																		
SleepEx(    __in DWORD dwMilliseconds,    __in BOOL bAlertable    );																		
SLGetGenuineInformation(    __in                        CONST SLID*                 pAppId,    __in                        PCWSTR                      pwszValueName,    __out_opt                   SLDATATYPE*                 peDataType,    __out                       UINT*                       pcbValue,    __deref_out_bcount(*pcbValue) BYTE**                    ppbValue    );																		
SLGetWindowsInformation(    __in                        PCWSTR                      pwszValueName,    __out_opt                   SLDATATYPE*                 peDataType,    __out                       UINT*                       pcbValue,    __deref_out_bcount(*pcbValue) PBYTE*                    ppbValue    );																		
SLGetWindowsInformationDWORD(    __in PCWSTR pwszValueName,    __out DWORD* pdwValue    );																		
SLIsGenuineLocal(    __in                        CONST SLID*                 pAppId,    __out                       SL_GENUINE_STATE*           pGenuineState,     __inout_opt                 SL_NONGENUINE_UI_OPTIONS*   pUIOptions    );																		
SLIsGenuineLocalEx(    __in                        CONST SLID*                 pAppId,    __in_opt                    CONST SLID*                 pSkuId,    __out                       SL_GENUINE_STATE*           pGenuineState    );																		
SLSetGenuineInformation(    __in                        CONST SLID*                 pAppId,    __in                        PCWSTR                      pwszValueName,    __in                        SLDATATYPE                  eDataType,    __in_opt                    UINT                        cbValue,    __in_bcount_opt(cbValue)    CONST BYTE*                 pbValue    );																		
SoundSentry(VOID);																		
SplitSymbols (__inout PSTR ImageName,__in PCSTR SymbolsPath,__inout PSTR SymbolFilePath,__in ULONG Flags);																		
SslCrackCertificate(    PUCHAR              pbCertificate,    DWORD               cbCertificate,    DWORD               dwFlags,    PX509Certificate *  ppCertificate    );																		
SslEmptyCacheA(__in LPSTR  pszTargetName,               __in DWORD  dwFlags);																		
SslEmptyCacheW(__in LPWSTR pszTargetName,               __in DWORD  dwFlags);																		
SslFreeCertificate(    PX509Certificate    pCertificate    );																		
SslGenerateKeyPair(    PSSL_CREDENTIAL_CERTIFICATE pCerts,    __in PSTR pszDN,    __in PSTR pszPassword,    DWORD Bits );																		
SslGenerateRandomBits(    PUCHAR      pRandomData,    LONG        cRandomData    );																		
SslGetDefaultIssuers(    PBYTE pbIssuers,    DWORD *pcbIssuers);																		
SslGetMaximumKeySize(    DWORD   Reserved );																		
StackWalk(    DWORD MachineType,    __in HANDLE hProcess,    __in HANDLE hThread,    __inout LPSTACKFRAME StackFrame,    __inout PVOID ContextRecord,    __in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,    __in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,    __in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress    );																		
StackWalk(DWORD MachineType,__in HANDLE hProcess,__in HANDLE hThread,__inout LPSTACKFRAME StackFrame,__inout PVOID ContextRecord,__in_opt PREAD_PROCESS_MEMORY_ROUTINE ReadMemoryRoutine,__in_opt PFUNCTION_TABLE_ACCESS_ROUTINE FunctionTableAccessRoutine,__in_opt PGET_MODULE_BASE_ROUTINE GetModuleBaseRoutine,__in_opt PTRANSLATE_ADDRESS_ROUTINE TranslateAddress);																		
StackWalk64(    __in DWORD MachineType,    __in HANDLE hProcess,    __in HANDLE hThread,    __inout LPSTACKFRAME64 StackFrame,    __inout PVOID ContextRecord,    __in_opt PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine,    __in_opt PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine,    __in_opt PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine,    __in_opt PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress    );																		
StackWalk64(__in DWORD MachineType,__in HANDLE hProcess,__in HANDLE hThread,__inout LPSTACKFRAME64 StackFrame,__inout PVOID ContextRecord,__in_opt PREAD_PROCESS_MEMORY_ROUTINE64 ReadMemoryRoutine,__in_opt PFUNCTION_TABLE_ACCESS_ROUTINE64 FunctionTableAccessRoutine,__in_opt PGET_MODULE_BASE_ROUTINE64 GetModuleBaseRoutine, __in_opt PTRANSLATE_ADDRESS_ROUTINE64 TranslateAddress);																		
StartDocPrinterA(__in    HANDLE  hPrinter,        DWORD   Level,__in    LPBYTE  pDocInfo);																		
StartDocPrinterW(__in    HANDLE  hPrinter,        DWORD   Level,__in    LPBYTE  pDocInfo);																		
StartPage(__in HDC hdc);																		
StartPagePrinter(__in    HANDLE  hPrinter);																		
StartServiceA(    __in            SC_HANDLE            hService,    __in            DWORD                dwNumServiceArgs,    __in_ecount_opt(dwNumServiceArgs)                    LPCSTR             *lpServiceArgVectors    );																		
StartServiceCtrlDispatcherA(    __in CONST  SERVICE_TABLE_ENTRYA    *lpServiceStartTable    );																		
StartServiceCtrlDispatcherW(    __in CONST  SERVICE_TABLE_ENTRYW    *lpServiceStartTable    );																		
StartServiceW(    __in            SC_HANDLE            hService,    __in            DWORD                dwNumServiceArgs,    __in_ecount_opt(dwNumServiceArgs)                    LPCWSTR             *lpServiceArgVectors    );																		
StartThreadpoolIo(    __inout PTP_IO pio    );																		
Str_SetPtrW(__deref_inout_opt LPWSTR * ppsz, __in_opt LPCWSTR psz);																		
StretchBlt(__in HDC hdcDest, __in int xDest, __in int yDest, __in int wDest, __in int hDest, __in_opt HDC hdcSrc, __in int xSrc, __in int ySrc, __in int wSrc, __in int hSrc, __in DWORD rop);																		
StretchDIBits(__in HDC hdc, __in int xDest, __in int yDest, __in int DestWidth, __in int DestHeight, __in int xSrc, __in int ySrc, __in int SrcWidth, __in int SrcHeight,        __in_opt CONST VOID * lpBits, __in CONST BITMAPINFO * lpbmi, __in UINT iUsage, __in DWORD rop);																		
StrokeAndFillPath(__in HDC hdc);																		
StrokePath(__in HDC hdc);																		
SubmitThreadpoolWork(    __inout PTP_WORK pwk    );																		
SubtractRect(__out LPRECT lprcDst,__in CONST RECT *lprcSrc1,__in CONST RECT *lprcSrc2);																		
SuspendThread(    __in HANDLE hThread    );																		
SwapMouseButton(    __in BOOL fSwap);																		
SwitchDesktop(    __in HDESK hDesktop);																		
SwitchToFiber(    __in LPVOID lpFiber    );																		
SwitchToThisWindow(    __in HWND hwnd,    __in BOOL fUnknown);																		
SwitchToThread(    VOID    );																		
SymAddSourceStream(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCSTR StreamFile,    __in_bcount_opt(Size) PBYTE Buffer,    __in size_t Size    );																		
SymAddSourceStream(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCSTR StreamFile,__in_bcount_opt(Size) PBYTE Buffer,__in size_t Size);																		
SymAddSourceStreamA(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCSTR StreamFile,    __in_bcount_opt(Size) PBYTE Buffer,    __in size_t Size    );																		
SymAddSourceStreamA(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCSTR StreamFile,__in_bcount_opt(Size) PBYTE Buffer,__in size_t Size);																		
SymAddSourceStreamW(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCWSTR FileSpec,    __in_bcount_opt(Size) PBYTE Buffer,    __in size_t Size    );																		
SymAddSourceStreamW(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCWSTR FileSpec,__in_bcount_opt(Size) PBYTE Buffer,__in size_t Size);																		
SymAddSymbol(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PCSTR Name,    __in DWORD64 Address,    __in DWORD Size,    __in DWORD Flags    );																		
SymAddSymbol(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PCSTR Name,__in DWORD64 Address,__in DWORD Size,__in DWORD Flags);																		
SymAddSymbolW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PCWSTR Name,    __in DWORD64 Address,    __in DWORD Size,    __in DWORD Flags    );																		
SymAddSymbolW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PCWSTR Name,__in DWORD64 Address,__in DWORD Size,__in DWORD Flags);																		
SymCleanup(    __in HANDLE hProcess    );																		
SymCleanup(__in HANDLE hProcess);																		
SymDeleteSymbol(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt PCSTR Name,    __in DWORD64 Address,    __in DWORD Flags    );																		
SymDeleteSymbol(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt PCSTR Name,__in DWORD64 Address,__in DWORD Flags);																		
SymDeleteSymbolW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt PCWSTR Name,    __in DWORD64 Address,    __in DWORD Flags    );																		
SymDeleteSymbolW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt PCWSTR Name,__in DWORD64 Address,__in DWORD Flags);																		
SymEnumerateModules(    __in HANDLE hProcess,    __in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,    __in_opt PVOID UserContext    );																		
SymEnumerateModules(__in HANDLE hProcess,__in PSYM_ENUMMODULES_CALLBACK EnumModulesCallback,__in_opt PVOID UserContext);																		
SymEnumerateModules64(    __in HANDLE hProcess,    __in PSYM_ENUMMODULES_CALLBACK64 EnumModulesCallback,    __in_opt PVOID UserContext    );																		
SymEnumerateModules64(__in HANDLE hProcess,__in PSYM_ENUMMODULES_CALLBACK64 EnumModulesCallback,__in_opt PVOID UserContext);																		
SymEnumerateModulesW64(    __in HANDLE hProcess,    __in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,    __in_opt PVOID UserContext    );																		
SymEnumerateModulesW64(__in HANDLE hProcess,__in PSYM_ENUMMODULES_CALLBACKW64 EnumModulesCallback,__in_opt PVOID UserContext);																		
SymEnumerateSymbols(    __in HANDLE hProcess,    __in ULONG BaseOfDll,    __in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumerateSymbols(__in HANDLE hProcess,__in ULONG BaseOfDll,__in PSYM_ENUMSYMBOLS_CALLBACK EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumerateSymbols64(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PSYM_ENUMSYMBOLS_CALLBACK64 EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumerateSymbols64(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PSYM_ENUMSYMBOLS_CALLBACK64 EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumerateSymbolsW(    __in HANDLE hProcess,    __in ULONG BaseOfDll,    __in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumerateSymbolsW(__in HANDLE hProcess,__in ULONG BaseOfDll,__in PSYM_ENUMSYMBOLS_CALLBACKW EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumerateSymbolsW64(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumerateSymbolsW64(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PSYM_ENUMSYMBOLS_CALLBACK64W EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumLines(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCSTR Obj,    __in_opt PCSTR File,    __in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,    __in_opt PVOID UserContext    );																		
SymEnumLines(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCSTR Obj,__in_opt PCSTR File,__in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,__in_opt PVOID UserContext);																		
SymEnumLinesW(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCWSTR Obj,    __in_opt PCWSTR File,    __in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,    __in_opt PVOID UserContext    );																		
SymEnumLinesW(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCWSTR Obj,__in_opt PCWSTR File,__in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,__in_opt PVOID UserContext);																		
SymEnumProcesses(    __in PSYM_ENUMPROCESSES_CALLBACK EnumProcessesCallback,    __in PVOID UserContext    );																		
SymEnumProcesses(__in PSYM_ENUMPROCESSES_CALLBACK EnumProcessesCallback,__in PVOID UserContext);																		
SymEnumSourceFiles(    __in HANDLE hProcess,    __in ULONG64 ModBase,    __in_opt PCSTR Mask,    __in PSYM_ENUMSOURCEFILES_CALLBACK cbSrcFiles,    __in_opt PVOID UserContext    );																		
SymEnumSourceFiles(__in HANDLE hProcess,__in ULONG64 ModBase,__in_opt PCSTR Mask,__in PSYM_ENUMSOURCEFILES_CALLBACK cbSrcFiles,__in_opt PVOID UserContext);																		
SymEnumSourceFilesW(    __in HANDLE hProcess,    __in ULONG64 ModBase,    __in_opt PCWSTR Mask,    __in PSYM_ENUMSOURCEFILES_CALLBACKW cbSrcFiles,    __in_opt PVOID UserContext    );																		
SymEnumSourceFilesW(__in HANDLE hProcess,__in ULONG64 ModBase,__in_opt PCWSTR Mask,__in PSYM_ENUMSOURCEFILES_CALLBACKW cbSrcFiles,__in_opt PVOID UserContext);																		
SymEnumSourceFileTokens(    __in HANDLE hProcess,    __in ULONG64 Base,    __in PENUMSOURCEFILETOKENSCALLBACK Callback    );																		
SymEnumSourceFileTokens(__in HANDLE hProcess,__in ULONG64 Base,__in PENUMSOURCEFILETOKENSCALLBACK Callback);																		
SymEnumSourceLines(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCSTR Obj,    __in_opt PCSTR File,    __in_opt DWORD Line,    __in DWORD Flags,    __in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,    __in_opt PVOID UserContext    );																		
SymEnumSourceLines(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCSTR Obj,__in_opt PCSTR File,__in_opt DWORD Line,__in DWORD Flags,__in PSYM_ENUMLINES_CALLBACK EnumLinesCallback,__in_opt PVOID UserContext);																		
SymEnumSourceLinesW(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCWSTR Obj,    __in_opt PCWSTR File,    __in_opt DWORD Line,    __in DWORD Flags,    __in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,    __in_opt PVOID UserContext    );																		
SymEnumSourceLinesW(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCWSTR Obj,__in_opt PCWSTR File,__in_opt DWORD Line,__in DWORD Flags,__in PSYM_ENUMLINES_CALLBACKW EnumLinesCallback,__in_opt PVOID UserContext);																		
SymEnumSym(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumSym(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumSymbols(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt PCSTR Mask,    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumSymbols(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt PCSTR Mask,__in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumSymbolsForAddr(    __in HANDLE hProcess,    __in DWORD64 Address,    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumSymbolsForAddr(__in HANDLE hProcess,__in DWORD64 Address,__in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumSymbolsForAddrW(    __in HANDLE hProcess,    __in DWORD64 Address,    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumSymbolsForAddrW(__in HANDLE hProcess,__in DWORD64 Address,__in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumSymbolsW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt PCWSTR Mask,    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumSymbolsW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt PCWSTR Mask,__in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumTypes(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumTypes(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumTypesByName(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt PCSTR mask,    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumTypesByName(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt PCSTR mask,__in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumTypesByNameW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt PCWSTR mask,    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumTypesByNameW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt PCWSTR mask,__in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymEnumTypesW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,    __in_opt PVOID UserContext    );																		
SymEnumTypesW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,__in_opt PVOID UserContext);																		
SymFindDebugInfoFile(    __in HANDLE hProcess,    __in PCSTR FileName,    __out_ecount(MAX_PATH + 1) PSTR DebugFilePath,    __in_opt PFIND_DEBUG_FILE_CALLBACK Callback,    __in_opt PVOID CallerData    );																		
SymFindDebugInfoFile( __in HANDLE hProcess,__in PCSTR FileName,__out_ecount(MAX_PATH + 1) PSTR DebugFilePath,__in_opt PFIND_DEBUG_FILE_CALLBACK Callback,__in_opt PVOID CallerData);																		
SymFindDebugInfoFileW(    __in HANDLE hProcess,    __in PCWSTR FileName,    __out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,    __in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,    __in_opt PVOID CallerData    );																		
SymFindDebugInfoFileW(__in HANDLE hProcess,__in PCWSTR FileName,__out_ecount(MAX_PATH + 1) PWSTR DebugFilePath,__in_opt PFIND_DEBUG_FILE_CALLBACKW Callback,__in_opt PVOID CallerData);																		
SymFindExecutableImage(    __in HANDLE hProcess,    __in PCSTR FileName,    __out_ecount(MAX_PATH + 1) PSTR ImageFilePath,    __in PFIND_EXE_FILE_CALLBACK Callback,    __in PVOID CallerData    );																		
SymFindExecutableImage(__in HANDLE hProcess,__in PCSTR FileName,__out_ecount(MAX_PATH + 1) PSTR ImageFilePath,__in PFIND_EXE_FILE_CALLBACK Callback,__in PVOID CallerData);																		
SymFindExecutableImageW(    __in HANDLE hProcess,    __in PCWSTR FileName,    __out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,    __in PFIND_EXE_FILE_CALLBACKW Callback,    __in PVOID CallerData    );																		
SymFindExecutableImageW( __in HANDLE hProcess,__in PCWSTR FileName,__out_ecount(MAX_PATH + 1) PWSTR ImageFilePath,__in PFIND_EXE_FILE_CALLBACKW Callback,__in PVOID CallerData);																		
SymFindFileInPath(    __in HANDLE hprocess,    __in_opt PCSTR SearchPath,    __in PCSTR FileName,    __in_opt PVOID id,    __in DWORD two,    __in DWORD three,    __in DWORD flags,    __out_ecount(MAX_PATH + 1) PSTR FoundFile,    __in_opt PFINDFILEINPATHCALLBACK callback,    __in_opt PVOID context    );																		
SymFindFileInPath(__in HANDLE hprocess,__in_opt PCSTR SearchPath,__in PCSTR FileName,__in_opt PVOID id,__in DWORD two,__in DWORD three,__in DWORD flags,__out_ecount(MAX_PATH + 1) PSTR FoundFile,__in_opt PFINDFILEINPATHCALLBACK callback,__in_opt PVOID context);																		
SymFindFileInPathW(    __in HANDLE hprocess,    __in_opt PCWSTR SearchPath,    __in PCWSTR FileName,    __in_opt PVOID id,    __in DWORD two,    __in DWORD three,    __in DWORD flags,    __out_ecount(MAX_PATH + 1) PWSTR FoundFile,    __in_opt PFINDFILEINPATHCALLBACKW callback,    __in_opt PVOID context    );																		
SymFindFileInPathW(__in HANDLE hprocess,__in_opt PCWSTR SearchPath,__in PCWSTR FileName,__in_opt PVOID id,__in DWORD two,__in DWORD three,__in DWORD flags,__out_ecount(MAX_PATH + 1) PWSTR FoundFile,__in_opt PFINDFILEINPATHCALLBACKW callback,__in_opt PVOID context);																		
SymFromAddr(    __in HANDLE hProcess,    __in DWORD64 Address,    __out_opt PDWORD64 Displacement,    __inout PSYMBOL_INFO Symbol    );																		
SymFromAddr(__in HANDLE hProcess,__in DWORD64 Address,__out_opt PDWORD64 Displacement,__inout PSYMBOL_INFO Symbol);																		
SymFromAddrW(    __in HANDLE hProcess,    __in DWORD64 Address,    __out_opt PDWORD64 Displacement,    __inout PSYMBOL_INFOW Symbol    );																		
SymFromAddrW(__in HANDLE hProcess,__in DWORD64 Address,__out_opt PDWORD64 Displacement,__inout PSYMBOL_INFOW Symbol);																		
SymFromIndex(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in DWORD Index,    __inout PSYMBOL_INFO Symbol    );																		
SymFromIndex(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in DWORD Index,__inout PSYMBOL_INFO Symbol);																		
SymFromIndexW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in DWORD Index,    __inout PSYMBOL_INFOW Symbol    );																		
SymFromIndexW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in DWORD Index,__inout PSYMBOL_INFOW Symbol);																		
SymFromName(    __in HANDLE hProcess,    __in PCSTR Name,    __inout PSYMBOL_INFO Symbol    );																		
SymFromName(__in HANDLE hProcess,__in PCSTR Name,__inout PSYMBOL_INFO Symbol);																		
SymFromNameW(    __in HANDLE hProcess,    __in PCWSTR Name,    __inout PSYMBOL_INFOW Symbol    );																		
SymFromNameW(__in HANDLE hProcess,__in PCWSTR Name,__inout PSYMBOL_INFOW Symbol);																		
SymFromToken(    __in HANDLE hProcess,    __in DWORD64 Base,    __in DWORD Token,    __inout PSYMBOL_INFO Symbol    );																		
SymFromToken(__in HANDLE hProcess,__in DWORD64 Base,__in DWORD Token,__inout PSYMBOL_INFO Symbol);																		
SymFromTokenW(    __in HANDLE hProcess,    __in DWORD64 Base,    __in DWORD Token,    __inout PSYMBOL_INFOW Symbol    );																		
SymFromTokenW(__in HANDLE hProcess,__in DWORD64 Base,__in DWORD Token,__inout PSYMBOL_INFOW Symbol);																		
SymFunctionTableAccess(    __in HANDLE hProcess,    __in DWORD AddrBase    );																		
SymFunctionTableAccess(__in HANDLE hProcess,__in DWORD AddrBase);																		
SymFunctionTableAccess64(    __in HANDLE hProcess,    __in DWORD64 AddrBase    );																		
SymFunctionTableAccess64(__in HANDLE hProcess,__in DWORD64 AddrBase);																		
SymGetFileLineOffsets64(    __in HANDLE hProcess,    __in_opt PCSTR ModuleName,    __in PCSTR FileName,    __out_ecount(BufferLines) PDWORD64 Buffer,    __in ULONG BufferLines    );																		
SymGetFileLineOffsets64(__in HANDLE hProcess,__in_opt PCSTR ModuleName,__in PCSTR FileName,__out_ecount(BufferLines) PDWORD64 Buffer,__in ULONG BufferLines);																		
SymGetHomeDirectory(    __in DWORD type,    __out_ecount(size) PSTR dir,    __in size_t size    );																		
SymGetHomeDirectory(__in DWORD type,__out_ecount(size) PSTR dir,__in size_t size);																		
SymGetHomeDirectoryW(    __in DWORD type,    __out_ecount(size) PWSTR dir,    __in size_t size    );																		
SymGetHomeDirectoryW(__in DWORD type,__out_ecount(size) PWSTR dir,__in size_t size);																		
SymGetLineFromAddr(    __in HANDLE hProcess,    __in DWORD dwAddr,    __out PDWORD pdwDisplacement,    __out PIMAGEHLP_LINE Line    );																		
SymGetLineFromAddr(__in HANDLE hProcess,__in DWORD dwAddr,__out PDWORD pdwDisplacement,__out PIMAGEHLP_LINE Line);																		
SymGetLineFromAddr64(    __in HANDLE hProcess,    __in DWORD64 qwAddr,    __out PDWORD pdwDisplacement,    __out PIMAGEHLP_LINE64 Line64    );																		
SymGetLineFromAddr64(__in HANDLE hProcess,__in DWORD64 qwAddr,__out PDWORD pdwDisplacement,__out PIMAGEHLP_LINE64 Line64);																		
SymGetLineFromAddrW(    __in HANDLE hProcess,    __in DWORD dwAddr,    __out PDWORD pdwDisplacement,    __out PIMAGEHLP_LINEW Line    );																		
SymGetLineFromAddrW(__in HANDLE hProcess,__in DWORD dwAddr,__out PDWORD pdwDisplacement,__out PIMAGEHLP_LINEW Line);																		
SymGetLineFromAddrW64(    __in HANDLE hProcess,    __in DWORD64 dwAddr,    __out PDWORD pdwDisplacement,    __out PIMAGEHLP_LINEW64 Line    );																		
SymGetLineFromAddrW64(__in HANDLE hProcess,__in DWORD64 dwAddr,__out PDWORD pdwDisplacement,__out PIMAGEHLP_LINEW64 Line);																		
SymGetLineFromName(    __in HANDLE hProcess,    __in_opt PCSTR ModuleName,    __in_opt PCSTR FileName,    __in DWORD dwLineNumber,    __out PLONG plDisplacement,    __inout PIMAGEHLP_LINE Line    );																		
SymGetLineFromName(__in HANDLE hProcess,__in_opt PCSTR ModuleName,__in_opt PCSTR FileName,__in DWORD dwLineNumber,__out PLONG plDisplacement,__inout PIMAGEHLP_LINE Line);																		
SymGetLineFromName64(    __in HANDLE hProcess,    __in_opt PCSTR ModuleName,    __in_opt PCSTR FileName,    __in DWORD dwLineNumber,    __out PLONG plDisplacement,    __inout PIMAGEHLP_LINE64 Line    );																		
SymGetLineFromName64(__in HANDLE hProcess,__in_opt PCSTR ModuleName,__in_opt PCSTR FileName,__in DWORD dwLineNumber,__out PLONG plDisplacement,__inout PIMAGEHLP_LINE64 Line);																		
SymGetLineFromNameW64(    __in HANDLE hProcess,    __in_opt PCWSTR ModuleName,    __in_opt PCWSTR FileName,    __in DWORD dwLineNumber,    __out PLONG plDisplacement,    __inout PIMAGEHLP_LINEW64 Line    );																		
SymGetLineFromNameW64(__in HANDLE hProcess,__in_opt PCWSTR ModuleName,__in_opt PCWSTR FileName,__in DWORD dwLineNumber,__out PLONG plDisplacement,__inout PIMAGEHLP_LINEW64 Line);																		
SymGetLineNext(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINE Line    );																		
SymGetLineNext(__in HANDLE hProcess,__inout PIMAGEHLP_LINE Line);																		
SymGetLineNext64(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINE64 Line    );																		
SymGetLineNext64(__in HANDLE hProcess,__inout PIMAGEHLP_LINE64 Line);																		
SymGetLineNextW(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINEW Line    );																		
SymGetLineNextW(__in HANDLE hProcess,__inout PIMAGEHLP_LINEW Line);																		
SymGetLineNextW64(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINEW64 Line    );																		
SymGetLineNextW64(__in HANDLE hProcess,__inout PIMAGEHLP_LINEW64 Line);																		
SymGetLinePrev(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINE Line    );																		
SymGetLinePrev(__in HANDLE hProcess,__inout PIMAGEHLP_LINE Line);																		
SymGetLinePrev64(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINE64 Line    );																		
SymGetLinePrev64(__in HANDLE hProcess,__inout PIMAGEHLP_LINE64 Line);																		
SymGetLinePrevW(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINEW Line    );																		
SymGetLinePrevW(__in HANDLE hProcess,__inout PIMAGEHLP_LINEW Line);																		
SymGetLinePrevW64(    __in HANDLE hProcess,    __inout PIMAGEHLP_LINEW64 Line    );																		
SymGetLinePrevW64(__in HANDLE hProcess,__inout PIMAGEHLP_LINEW64 Line);																		
SymGetModuleBase(    __in HANDLE hProcess,    __in DWORD dwAddr    );																		
SymGetModuleBase(__in HANDLE hProcess,__in DWORD dwAddr);																		
SymGetModuleBase64(    __in HANDLE hProcess,    __in DWORD64 qwAddr    );																		
SymGetModuleBase64(__in HANDLE hProcess,__in DWORD64 qwAddr);																		
SymGetModuleInfo(    __in HANDLE hProcess,    __in DWORD dwAddr,    __out PIMAGEHLP_MODULE ModuleInfo    );																		
SymGetModuleInfo(__in HANDLE hProcess,__in DWORD dwAddr,__out PIMAGEHLP_MODULE ModuleInfo);																		
SymGetModuleInfo64(    __in HANDLE hProcess,    __in DWORD64 qwAddr,    __out PIMAGEHLP_MODULE64 ModuleInfo    );																		
SymGetModuleInfo64(__in HANDLE hProcess,__in DWORD64 qwAddr,__out PIMAGEHLP_MODULE64 ModuleInfo);																		
SymGetModuleInfoW(    __in HANDLE hProcess,    __in DWORD dwAddr,    __out PIMAGEHLP_MODULEW ModuleInfo    );																		
SymGetModuleInfoW(__in HANDLE hProcess,__in DWORD dwAddr,__out PIMAGEHLP_MODULEW ModuleInfo);																		
SymGetModuleInfoW64(    __in HANDLE hProcess,    __in DWORD64 qwAddr,    __out PIMAGEHLP_MODULEW64 ModuleInfo    );																		
SymGetModuleInfoW64(__in HANDLE hProcess,__in DWORD64 qwAddr,__out PIMAGEHLP_MODULEW64 ModuleInfo);																		
SymGetOmaps(    __in HANDLE hProcess,    __in DWORD64 BaseOfDll,    __out POMAP *OmapTo,    __out PDWORD64 cOmapTo,    __out POMAP *OmapFrom,    __out PDWORD64 cOmapFrom    );																		
SymGetOmaps(__in HANDLE hProcess,__in DWORD64 BaseOfDll,__out POMAP *OmapTo,__out PDWORD64 cOmapTo,__out POMAP *OmapFrom,__out PDWORD64 cOmapFrom);																		
SymGetOptions(    VOID    );																		
SymGetOptions(VOID);																		
SymGetScope(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in DWORD Index,    __inout PSYMBOL_INFO Symbol    );																		
SymGetScope(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in DWORD Index,__inout PSYMBOL_INFO Symbol);																		
SymGetScopeW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in DWORD Index,    __inout PSYMBOL_INFOW Symbol    );																		
SymGetScopeW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in DWORD Index,__inout PSYMBOL_INFOW Symbol);																		
SymGetSearchPath(    __in HANDLE hProcess,    __out_ecount(SearchPathLength) PSTR SearchPath,    __in DWORD SearchPathLength    );																		
SymGetSearchPath(__in HANDLE hProcess,__out_ecount(SearchPathLength) PSTR SearchPath,__in DWORD SearchPathLength);																		
SymGetSearchPathW(    __in HANDLE hProcess,    __out_ecount(SearchPathLength) PWSTR SearchPath,    __in DWORD SearchPathLength    );																		
SymGetSearchPathW(__in HANDLE hProcess,__out_ecount(SearchPathLength) PWSTR SearchPath,__in DWORD SearchPathLength);																		
SymGetSourceFile(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCSTR Params,    __in PCSTR FileSpec,    __out_ecount(Size) PSTR FilePath,    __in DWORD Size    );																		
SymGetSourceFile(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCSTR Params,__in PCSTR FileSpec,__out_ecount(Size) PSTR FilePath,__in DWORD Size);																		
SymGetSourceFileFromToken(    __in HANDLE hProcess,    __in PVOID Token,    __in_opt PCSTR Params,    __out_ecount(Size) PSTR FilePath,    __in DWORD Size    );																		
SymGetSourceFileFromToken(__in HANDLE hProcess,__in PVOID Token,__in_opt PCSTR Params,__out_ecount(Size) PSTR FilePath,__in DWORD Size);																		
SymGetSourceFileFromTokenW(    __in HANDLE hProcess,    __in PVOID Token,    __in_opt PCWSTR Params,    __out_ecount(Size) PWSTR FilePath,    __in DWORD Size    );																		
SymGetSourceFileFromTokenW(__in HANDLE hProcess,__in PVOID Token,__in_opt PCWSTR Params,__out_ecount(Size) PWSTR FilePath,__in DWORD Size);																		
SymGetSourceFileToken(    __in HANDLE hProcess,    __in ULONG64 Base,    __in PCSTR FileSpec,    __deref_out PVOID *Token,    __out DWORD *Size    );																		
SymGetSourceFileToken(__in HANDLE hProcess,__in ULONG64 Base,__in PCSTR FileSpec,__deref_out PVOID *Token,__out DWORD *Size);																		
SymGetSourceFileTokenW(    __in HANDLE hProcess,    __in ULONG64 Base,    __in PCWSTR FileSpec,    __deref_out PVOID *Token,    __out DWORD *Size    );																		
SymGetSourceFileTokenW(__in HANDLE hProcess,__in ULONG64 Base,__in PCWSTR FileSpec,__deref_out PVOID *Token,__out DWORD *Size);																		
SymGetSourceFileW(    __in HANDLE hProcess,    __in ULONG64 Base,    __in_opt PCWSTR Params,    __in PCWSTR FileSpec,    __out_ecount(Size) PWSTR FilePath,    __in DWORD Size    );																		
SymGetSourceFileW(__in HANDLE hProcess,__in ULONG64 Base,__in_opt PCWSTR Params,__in PCWSTR FileSpec,__out_ecount(Size) PWSTR FilePath,__in DWORD Size);																		
SymGetSourceVarFromToken(    __in HANDLE hProcess,    __in PVOID Token,    __in_opt PCSTR Params,    __in PCSTR VarName,    __out_ecount(Size) PSTR Value,    __in DWORD Size    );																		
SymGetSourceVarFromToken(__in HANDLE hProcess,__in PVOID Token,__in_opt PCSTR Params,__in PCSTR VarName,__out_ecount(Size) PSTR Value,__in DWORD Size);																		
SymGetSourceVarFromTokenW(    __in HANDLE hProcess,    __in PVOID Token,    __in_opt PCWSTR Params,    __in PCWSTR VarName,    __out_ecount(Size) PWSTR Value,    __in DWORD Size    );																		
SymGetSourceVarFromTokenW(__in HANDLE hProcess,__in PVOID Token,__in_opt PCWSTR Params,__in PCWSTR VarName,__out_ecount(Size) PWSTR Value,__in DWORD Size);																		
SymGetSymbolFile(    __in_opt HANDLE hProcess,    __in_opt PCSTR SymPath,    __in PCSTR ImageFile,    __in DWORD Type,    __out_ecount(cSymbolFile) PSTR SymbolFile,    __in size_t cSymbolFile,    __out_ecount(cDbgFile) PSTR DbgFile,    __in size_t cDbgFile    );																		
SymGetSymbolFile(__in_opt HANDLE hProcess,__in_opt PCSTR SymPath,__in PCSTR ImageFile,__in DWORD Type,__out_ecount(cSymbolFile) PSTR SymbolFile,__in size_t cSymbolFile,__out_ecount(cDbgFile) PSTR DbgFile,__in size_t cDbgFile);																		
SymGetSymbolFileW(    __in_opt HANDLE hProcess,    __in_opt PCWSTR SymPath,    __in PCWSTR ImageFile,    __in DWORD Type,    __out_ecount(cSymbolFile) PWSTR SymbolFile,    __in size_t cSymbolFile,    __out_ecount(cDbgFile) PWSTR DbgFile,    __in size_t cDbgFile    );																		
SymGetSymbolFileW(__in_opt HANDLE hProcess,__in_opt PCWSTR SymPath,__in PCWSTR ImageFile,__in DWORD Type,__out_ecount(cSymbolFile) PWSTR SymbolFile,__in size_t cSymbolFile,__out_ecount(cDbgFile) PWSTR DbgFile,__in size_t cDbgFile);																		
SymGetSymFromAddr(    __in HANDLE hProcess,    __in DWORD dwAddr,    __out_opt PDWORD pdwDisplacement,    __inout PIMAGEHLP_SYMBOL Symbol    );																		
SymGetSymFromAddr(__in HANDLE hProcess,__in DWORD dwAddr,__out_opt PDWORD pdwDisplacement,__inout PIMAGEHLP_SYMBOL Symbol);																		
SymGetSymFromAddr64(    __in HANDLE hProcess,    __in DWORD64 qwAddr,    __out_opt PDWORD64 pdwDisplacement,    __inout PIMAGEHLP_SYMBOL64  Symbol    );																		
SymGetSymFromAddr64(__in HANDLE hProcess,__in DWORD64 qwAddr,__out_opt PDWORD64 pdwDisplacement,__inout PIMAGEHLP_SYMBOL64  Symbol);																		
SymGetSymFromName(    __in HANDLE hProcess,    __in PCSTR Name,    __inout PIMAGEHLP_SYMBOL Symbol    );																		
SymGetSymFromName(__in HANDLE hProcess,__in PCSTR Name,__inout PIMAGEHLP_SYMBOL Symbol);																		
SymGetSymFromName64(    __in HANDLE hProcess,    __in PCSTR Name,    __inout PIMAGEHLP_SYMBOL64 Symbol    );																		
SymGetSymFromName64(__in HANDLE hProcess,__in PCSTR Name,__inout PIMAGEHLP_SYMBOL64 Symbol);																		
SymGetSymNext(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOL Symbol    );																		
SymGetSymNext(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOL Symbol);																		
SymGetSymNext64(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOL64 Symbol    );																		
SymGetSymNext64(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOL64 Symbol);																		
SymGetSymNextW(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOLW Symbol    );																		
SymGetSymNextW(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOLW Symbol);																		
SymGetSymNextW64(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOLW64 Symbol    );																		
SymGetSymNextW64(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOLW64 Symbol);																		
SymGetSymPrev(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOL Symbol    );																		
SymGetSymPrev(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOL Symbol);																		
SymGetSymPrev64(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOL64 Symbol    );																		
SymGetSymPrev64(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOL64 Symbol);																		
SymGetSymPrevW(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOLW Symbol    );																		
SymGetSymPrevW(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOLW Symbol);																		
SymGetSymPrevW64(    __in HANDLE hProcess,    __inout PIMAGEHLP_SYMBOLW64 Symbol    );																		
SymGetSymPrevW64(__in HANDLE hProcess,__inout PIMAGEHLP_SYMBOLW64 Symbol);																		
SymGetTypeFromName(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PCSTR Name,    __inout PSYMBOL_INFO Symbol    );																		
SymGetTypeFromName(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PCSTR Name,__inout PSYMBOL_INFO Symbol);																		
SymGetTypeFromNameW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in PCWSTR Name,    __inout PSYMBOL_INFOW Symbol    );																		
SymGetTypeFromNameW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in PCWSTR Name,__inout PSYMBOL_INFOW Symbol);																		
SymGetTypeInfo(    __in HANDLE hProcess,    __in DWORD64 ModBase,    __in ULONG TypeId,    __in IMAGEHLP_SYMBOL_TYPE_INFO GetType,    __out PVOID pInfo    );																		
SymGetTypeInfo(__in HANDLE hProcess,__in DWORD64 ModBase,__in ULONG TypeId,__in IMAGEHLP_SYMBOL_TYPE_INFO GetType,__out PVOID pInfo);																		
SymGetTypeInfoEx(    __in HANDLE hProcess,    __in DWORD64 ModBase,    __inout PIMAGEHLP_GET_TYPE_INFO_PARAMS Params    );																		
SymGetTypeInfoEx(__in HANDLE hProcess,__in DWORD64 ModBase,__inout PIMAGEHLP_GET_TYPE_INFO_PARAMS Params);																		
SymGetUnwindInfo(    __in HANDLE hProcess,    __in DWORD64 Address,    __out_bcount_opt(*Size) PVOID Buffer,    __inout PULONG Size    );																		
SymGetUnwindInfo(__in HANDLE hProcess,__in DWORD64 Address,__out_bcount_opt(*Size) PVOID Buffer,__inout PULONG Size);																		
SymInitialize(    __in HANDLE hProcess,    __in_opt PCSTR UserSearchPath,    __in BOOL fInvadeProcess    );																		
SymInitialize(__in HANDLE hProcess,__in_opt PCSTR UserSearchPath,__in BOOL fInvadeProcess);																		
SymInitializeW(    __in HANDLE hProcess,    __in_opt PCWSTR UserSearchPath,    __in BOOL fInvadeProcess    );																		
SymInitializeW(__in HANDLE hProcess,__in_opt PCWSTR UserSearchPath,__in BOOL fInvadeProcess);																		
SymLoadModule(    __in HANDLE hProcess,    __in_opt HANDLE hFile,    __in_opt PCSTR ImageName,    __in_opt PCSTR ModuleName,    __in DWORD BaseOfDll,    __in DWORD SizeOfDll    );																		
SymLoadModule(__in HANDLE hProcess,__in_opt HANDLE hFile,__in_opt PCSTR ImageName,__in_opt PCSTR ModuleName,__in DWORD BaseOfDll,__in DWORD SizeOfDll);																		
SymLoadModule64(    __in HANDLE hProcess,    __in_opt HANDLE hFile,    __in_opt PCSTR ImageName,    __in_opt PCSTR ModuleName,    __in DWORD64 BaseOfDll,    __in DWORD SizeOfDll    );																		
SymLoadModule64(__in HANDLE hProcess,__in_opt HANDLE hFile,__in_opt PCSTR ImageName,__in_opt PCSTR ModuleName,__in DWORD64 BaseOfDll,__in DWORD SizeOfDll);																		
SymLoadModuleEx(    __in HANDLE hProcess,    __in_opt HANDLE hFile,    __in_opt PCSTR ImageName,    __in_opt PCSTR ModuleName,    __in DWORD64 BaseOfDll,    __in DWORD DllSize,    __in_opt PMODLOAD_DATA Data,    __in_opt DWORD Flags    );																		
SymLoadModuleEx(__in HANDLE hProcess,__in_opt HANDLE hFile,__in_opt PCSTR ImageName,__in_opt PCSTR ModuleName,__in DWORD64 BaseOfDll,__in DWORD DllSize,__in_opt PMODLOAD_DATA Data,__in_opt DWORD Flags);																		
SymLoadModuleExW(    __in HANDLE hProcess,    __in_opt HANDLE hFile,    __in_opt PCWSTR ImageName,    __in_opt PCWSTR ModuleName,    __in DWORD64 BaseOfDll,    __in DWORD DllSize,    __in_opt PMODLOAD_DATA Data,    __in_opt DWORD Flags    );																		
SymLoadModuleExW(__in HANDLE hProcess,__in_opt HANDLE hFile,__in_opt PCWSTR ImageName,__in_opt PCWSTR ModuleName,__in DWORD64 BaseOfDll,__in DWORD DllSize,__in_opt PMODLOAD_DATA Data,__in_opt DWORD Flags);																		
SymMatchFileName(    __in PCSTR FileName,    __in PCSTR Match,    __deref_opt_out PSTR *FileNameStop,    __deref_opt_out PSTR *MatchStop    );																		
SymMatchFileName(__in PCSTR FileName,__in PCSTR Match,__deref_opt_out PSTR *FileNameStop,__deref_opt_out PSTR *MatchStop);																		
SymMatchFileNameW(    __in PCWSTR FileName,    __in PCWSTR Match,    __deref_opt_out PWSTR *FileNameStop,    __deref_opt_out PWSTR *MatchStop    );																		
SymMatchFileNameW(__in PCWSTR FileName,__in PCWSTR Match,__deref_opt_out PWSTR *FileNameStop,__deref_opt_out PWSTR *MatchStop);																		
SymMatchString(    __in PCSTR string,    __in PCSTR expression,    __in BOOL fCase    );																		
SymMatchString(__in PCSTR string,__in PCSTR expression,__in BOOL fCase);																		
SymMatchStringA(    __in PCSTR string,    __in PCSTR expression,    __in BOOL fCase    );																		
SymMatchStringA(__in PCSTR string,__in PCSTR expression,__in BOOL fCase);																		
SymMatchStringW(    __in PCWSTR string,    __in PCWSTR expression,    __in BOOL fCase    );																		
SymMatchStringW(__in PCWSTR string,__in PCWSTR expression,__in BOOL fCase);																		
SymNext(    __in HANDLE hProcess,    __inout PSYMBOL_INFO si    );																		
SymNext(__in HANDLE hProcess,__inout PSYMBOL_INFO si);																		
SymNextW(    __in HANDLE hProcess,    __inout PSYMBOL_INFOW siw    );																		
SymNextW(__in HANDLE hProcess,__inout PSYMBOL_INFOW siw);																		
SymPrev(    __in HANDLE hProcess,    __inout PSYMBOL_INFO si    );																		
SymPrev(__in HANDLE hProcess,__inout PSYMBOL_INFO si);																		
SymPrevW(    __in HANDLE hProcess,    __inout PSYMBOL_INFOW siw    );																		
SymPrevW(__in HANDLE hProcess,__inout PSYMBOL_INFOW siw);																		
SymRefreshModuleList(    __in HANDLE hProcess    );																		
SymRefreshModuleList(__in HANDLE hProcess);																		
SymRegisterCallback(    __in HANDLE hProcess,    __in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,    __in_opt PVOID UserContext    );																		
SymRegisterCallback(__in HANDLE hProcess,__in PSYMBOL_REGISTERED_CALLBACK CallbackFunction,__in_opt PVOID UserContext);																		
SymRegisterCallback64(    __in HANDLE hProcess,    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,    __in ULONG64 UserContext    );																		
SymRegisterCallback64(__in HANDLE hProcess,__in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,__in ULONG64 UserContext);																		
SymRegisterCallbackW64(    __in HANDLE hProcess,    __in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,    __in ULONG64 UserContext    );																		
SymRegisterCallbackW64(__in HANDLE hProcess,__in PSYMBOL_REGISTERED_CALLBACK64 CallbackFunction,__in ULONG64 UserContext);																		
SymRegisterFunctionEntryCallback(    __in HANDLE hProcess,    __in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,    __in_opt PVOID UserContext    );																		
SymRegisterFunctionEntryCallback(__in HANDLE hProcess,__in PSYMBOL_FUNCENTRY_CALLBACK CallbackFunction,__in_opt PVOID UserContext);																		
SymRegisterFunctionEntryCallback64(    __in HANDLE hProcess,    __in PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction,    __in ULONG64 UserContext    );																		
SymRegisterFunctionEntryCallback64(__in HANDLE hProcess,__in PSYMBOL_FUNCENTRY_CALLBACK64 CallbackFunction,__in ULONG64 UserContext);																		
SymSearch(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt DWORD Index,    __in_opt DWORD SymTag,    __in_opt PCSTR Mask,    __in_opt DWORD64 Address,    __in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,    __in_opt PVOID UserContext,    __in DWORD Options    );																		
SymSearch(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt DWORD Index,__in_opt DWORD SymTag,__in_opt PCSTR Mask,__in_opt DWORD64 Address,__in PSYM_ENUMERATESYMBOLS_CALLBACK EnumSymbolsCallback,__in_opt PVOID UserContext,__in DWORD Options);																		
SymSearchW(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in_opt DWORD Index,    __in_opt DWORD SymTag,    __in_opt PCWSTR Mask,    __in_opt DWORD64 Address,    __in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,    __in_opt PVOID UserContext,    __in DWORD Options    );																		
SymSearchW(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in_opt DWORD Index,__in_opt DWORD SymTag,__in_opt PCWSTR Mask,__in_opt DWORD64 Address,__in PSYM_ENUMERATESYMBOLS_CALLBACKW EnumSymbolsCallback,__in_opt PVOID UserContext,__in DWORD Options);																		
SymSetContext(    __in HANDLE hProcess,    __in PIMAGEHLP_STACK_FRAME StackFrame,    __in_opt PIMAGEHLP_CONTEXT Context    );																		
SymSetContext(__in HANDLE hProcess,__in PIMAGEHLP_STACK_FRAME StackFrame,__in_opt PIMAGEHLP_CONTEXT Context);																		
SymSetHomeDirectory(    __in_opt HANDLE hProcess,    __in_opt PCSTR dir    );																		
SymSetHomeDirectory(__in_opt HANDLE hProcess,__in_opt PCSTR dir);																		
SymSetHomeDirectoryW(    __in_opt HANDLE hProcess,    __in_opt PCWSTR dir    );																		
SymSetHomeDirectoryW(__in_opt HANDLE hProcess,__in_opt PCWSTR dir);																		
SymSetOptions(    __in DWORD   SymOptions    );																		
SymSetOptions(__in DWORD   SymOptions);																		
SymSetParentWindow(    __in HWND hwnd    );																		
SymSetParentWindow(__in HWND hwnd);																		
SymSetScopeFromAddr(    __in HANDLE hProcess,    __in ULONG64 Address    );																		
SymSetScopeFromAddr(__in HANDLE hProcess,__in ULONG64 Address);																		
SymSetScopeFromIndex(    __in HANDLE hProcess,    __in ULONG64 BaseOfDll,    __in DWORD Index    );																		
SymSetScopeFromIndex(__in HANDLE hProcess,__in ULONG64 BaseOfDll,__in DWORD Index);																		
SymSetSearchPath(    __in HANDLE hProcess,    __in_opt PCSTR SearchPath    );																		
SymSetSearchPath(__in HANDLE hProcess,__in_opt PCSTR SearchPath);																		
SymSetSearchPathW(    __in HANDLE hProcess,    __in_opt PCWSTR SearchPath    );																		
SymSetSearchPathW(__in HANDLE hProcess,__in_opt PCWSTR SearchPath);																		
SymSrvDeltaName(    __in HANDLE hProcess,    __in_opt PCSTR SymPath,    __in PCSTR Type,    __in PCSTR File1,    __in PCSTR File2    );																		
SymSrvDeltaName(__in HANDLE hProcess,__in_opt PCSTR SymPath,__in PCSTR Type,__in PCSTR File1,__in PCSTR File2);																		
SymSrvDeltaNameW(    __in HANDLE hProcess,    __in_opt PCWSTR SymPath,    __in PCWSTR Type,    __in PCWSTR File1,    __in PCWSTR File2    );																		
SymSrvDeltaNameW(__in HANDLE hProcess,__in_opt PCWSTR SymPath,__in PCWSTR Type,__in PCWSTR File1,__in PCWSTR File2);																		
SymSrvGetFileIndexes(    __in PCSTR File,    __out GUID *Id,    __out PDWORD Val1,    __out_opt PDWORD Val2,    __in DWORD Flags    );																		
SymSrvGetFileIndexes(__in PCSTR File,__out GUID *Id,__out PDWORD Val1,__out_opt PDWORD Val2,__in DWORD Flags);																		
SymSrvGetFileIndexesW(    __in PCWSTR File,    __out GUID *Id,    __out PDWORD Val1,    __out_opt PDWORD Val2,    __in DWORD Flags    );																		
SymSrvGetFileIndexesW(__in PCWSTR File,__out GUID *Id,__out PDWORD Val1,__out_opt PDWORD Val2,__in DWORD Flags);																		
SymSrvGetFileIndexInfo(    __in PCSTR File,    __out PSYMSRV_INDEX_INFO Info,    __in DWORD Flags    );																		
SymSrvGetFileIndexInfo(__in PCSTR File,__out PSYMSRV_INDEX_INFO Info,__in DWORD Flags);																		
SymSrvGetFileIndexInfoW(    __in PCWSTR File,    __out PSYMSRV_INDEX_INFOW Info,    __in DWORD Flags    );																		
SymSrvGetFileIndexInfoW(__in PCWSTR File,__out PSYMSRV_INDEX_INFOW Info,__in DWORD Flags);																		
SymSrvGetFileIndexString(    __in HANDLE hProcess,    __in_opt PCSTR SrvPath,    __in PCSTR File,    __out_ecount(Size) PSTR Index,    __in size_t Size,    __in DWORD Flags    );																		
SymSrvGetFileIndexString(__in HANDLE hProcess,__in_opt PCSTR SrvPath,__in PCSTR File,__out_ecount(Size) PSTR Index,__in size_t Size,__in DWORD Flags);																		
SymSrvGetFileIndexStringW(    __in HANDLE hProcess,    __in_opt PCWSTR SrvPath,    __in PCWSTR File,    __out_ecount(Size) PWSTR Index,    __in size_t Size,    __in DWORD Flags    );																		
SymSrvGetFileIndexStringW(__in HANDLE hProcess,__in_opt PCWSTR SrvPath,__in PCWSTR File,__out_ecount(Size) PWSTR Index,__in size_t Size,__in DWORD Flags);																		
SymSrvGetSupplement(    __in HANDLE hProcess,    __in_opt PCSTR SymPath,    __in PCSTR Node,    __in PCSTR File    );																		
SymSrvGetSupplement(__in HANDLE hProcess,__in_opt PCSTR SymPath,__in PCSTR Node,__in PCSTR File);																		
SymSrvGetSupplementW(    __in HANDLE hProcess,    __in_opt PCWSTR SymPath,    __in PCWSTR Node,    __in PCWSTR File    );																		
SymSrvGetSupplementW(__in HANDLE hProcess,__in_opt PCWSTR SymPath,__in PCWSTR Node,__in PCWSTR File);																		
SymSrvIsStore(    __in_opt HANDLE hProcess,    __in PCSTR path    );																		
SymSrvIsStore(__in_opt HANDLE hProcess,__in PCSTR path);																		
SymSrvIsStoreW(    __in_opt HANDLE hProcess,    __in PCWSTR path    );																		
SymSrvIsStoreW(__in_opt HANDLE hProcess,__in PCWSTR path);																		
SymSrvStoreFile(    __in HANDLE hProcess,    __in_opt PCSTR SrvPath,    __in PCSTR File,    __in DWORD Flags    );																		
SymSrvStoreFile(__in HANDLE hProcess,__in_opt PCSTR SrvPath,__in PCSTR File,__in DWORD Flags);																		
SymSrvStoreFileW(    __in HANDLE hProcess,    __in_opt PCWSTR SrvPath,    __in PCWSTR File,    __in DWORD Flags    );																		
SymSrvStoreFileW(__in HANDLE hProcess,__in_opt PCWSTR SrvPath,__in PCWSTR File,__in DWORD Flags);																		
SymSrvStoreSupplement(    __in HANDLE hProcess,    __in_opt PCSTR SrvPath,    __in PCSTR Node,    __in PCSTR File,    __in DWORD Flags    );																		
SymSrvStoreSupplement(__in HANDLE hProcess,__in_opt PCSTR SrvPath,__in PCSTR Node,__in PCSTR File,__in DWORD Flags);																		
SymSrvStoreSupplementW(    __in HANDLE hProcess,    __in_opt PCWSTR SymPath,    __in PCWSTR Node,    __in PCWSTR File,    __in DWORD Flags    );																		
SymSrvStoreSupplementW(__in HANDLE hProcess,__in_opt PCWSTR SymPath,__in PCWSTR Node,__in PCWSTR File,__in DWORD Flags);																		
SymUnDName( __in PIMAGEHLP_SYMBOL sym, __out_ecount(UnDecNameLength) PSTR UnDecName, __in DWORD UnDecNameLength );																		
SymUnDName(__in PIMAGEHLP_SYMBOL sym,__out_ecount(UnDecNameLength) PSTR UnDecName,__in DWORD UnDecNameLength);																		
SymUnDName64( __in PIMAGEHLP_SYMBOL64 sym, __out_ecount(UnDecNameLength) PSTR UnDecName, __in DWORD UnDecNameLength );																		
SymUnDName64(__in PIMAGEHLP_SYMBOL64 sym, __out_ecount(UnDecNameLength) PSTR UnDecName,__in DWORD UnDecNameLength);																		
SymUnloadModule( __in HANDLE hProcess, __in DWORD BaseOfDll );																		
SymUnloadModule(__in HANDLE hProcess,__in DWORD BaseOfDll);																		
SymUnloadModule64( __in HANDLE hProcess, __in DWORD64 BaseOfDll );																		
SymUnloadModule64(__in HANDLE hProcess,__in DWORD64 BaseOfDll);																		
SystemParametersInfoA(    __in UINT uiAction,    __in UINT uiParam,    __inout_opt PVOID pvParam,    __in UINT fWinIni);																		
SystemParametersInfoW(    __in UINT uiAction,    __in UINT uiParam,    __inout_opt PVOID pvParam,    __in UINT fWinIni);																		
SystemTimeToFileTime(    __in  CONST SYSTEMTIME *lpSystemTime,    __out LPFILETIME lpFileTime    );																		
SystemTimeToTzSpecificLocalTime(    __in_opt CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation,    __in     CONST SYSTEMTIME *lpUniversalTime,    __out    LPSYSTEMTIME lpLocalTime    );																		
TabbedTextOutA(    __in HDC hdc,    __in int x,    __in int y,    __in_ecount(chCount) LPCSTR lpString,    __in int chCount,    __in int nTabPositions,    __in_ecount_opt(nTabPositions) CONST INT *lpnTabStopPositions,    __in int nTabOrigin);																		
TabbedTextOutW(    __in HDC hdc,    __in int x,    __in int y,    __in_ecount(chCount) LPCWSTR lpString,    __in int chCount,    __in int nTabPositions,    __in_ecount_opt(nTabPositions) CONST INT *lpnTabStopPositions,    __in int nTabOrigin);																		
tapiGetLocationInfo(    __out_ecount(8) LPSTR               lpszCountryCode,    __out_ecount(8) LPSTR               lpszCityCode    );																		
tapiGetLocationInfoA(    __out_ecount(8) LPSTR               lpszCountryCode,    __out_ecount(8) LPSTR               lpszCityCode    );																		
tapiGetLocationInfoW(    __out_ecount(8) LPWSTR               lpszCountryCodeW,    __out_ecount(8) LPWSTR               lpszCityCodeW    );																		
tapiRequestDrop(    HWND                hwnd,    WPARAM              wRequestID    );																		
tapiRequestMakeCall(    LPCSTR              lpszDestAddress,    LPCSTR              lpszAppName,    LPCSTR              lpszCalledParty,    LPCSTR              lpszComment    );																		
tapiRequestMakeCallA(    LPCSTR              lpszDestAddress,    LPCSTR              lpszAppName,    LPCSTR              lpszCalledParty,    LPCSTR              lpszComment    );																		
tapiRequestMakeCallW(    LPCWSTR              lpszDestAddress,    LPCWSTR              lpszAppName,    LPCWSTR              lpszCalledParty,    LPCWSTR              lpszComment    );																		
tapiRequestMediaCall(    HWND                hwnd,    WPARAM              wRequestID,    LPCSTR              lpszDeviceClass,    LPCSTR              lpDeviceID,    DWORD               dwSize,    DWORD               dwSecure,    LPCSTR              lpszDestAddress,    LPCSTR              lpszAppName,    LPCSTR              lpszCalledParty,    LPCSTR              lpszComment    );																		
tapiRequestMediaCallA(    HWND                hwnd,    WPARAM              wRequestID,    LPCSTR              lpszDeviceClass,    LPCSTR              lpDeviceID,    DWORD               dwSize,    DWORD               dwSecure,    LPCSTR              lpszDestAddress,    LPCSTR              lpszAppName,    LPCSTR              lpszCalledParty,    LPCSTR              lpszComment    );																		
tapiRequestMediaCallW(    HWND                hwnd,    WPARAM              wRequestID,    LPCWSTR             lpszDeviceClass,    LPCWSTR             lpDeviceID,    DWORD               dwSize,    DWORD               dwSecure,    LPCWSTR             lpszDestAddress,    LPCWSTR             lpszAppName,    LPCWSTR             lpszCalledParty,    LPCWSTR             lpszComment    );																		
TaskDialog(__in_opt HWND hwndParent, __in_opt HINSTANCE hInstance, __in_opt PCWSTR pszWindowTitle, __in_opt PCWSTR pszMainInstruction, __in_opt PCWSTR pszContent, TASKDIALOG_COMMON_BUTTON_FLAGS dwCommonButtons, __in_opt PCWSTR pszIcon, __out_opt int *pnButton);																		
TaskDialogIndirect(__in const TASKDIALOGCONFIG *pTaskConfig, __out_opt int *pnButton, __out_opt int *pnRadioButton, __out_opt BOOL *pfVerificationFlagChecked);																		
TcAddFilter(    __in  HANDLE          FlowHandle,    __in  PTC_GEN_FILTER  pGenericFilter,    __out PHANDLE         pFilterHandle    );																		
TcAddFlow(    __in  HANDLE          IfcHandle,    __in  HANDLE          ClFlowCtx,    __in  ULONG           Flags,    __in  PTC_GEN_FLOW    pGenericFlow,    __out PHANDLE         pFlowHandle    );																		
TcCloseInterface(    __in HANDLE       IfcHandle    );																		
TcDeleteFilter(    __in HANDLE          FilterHandle    );																		
TcDeleteFlow(    __in HANDLE          FlowHandle    );																		
TcDeregisterClient(    __in HANDLE          ClientHandle    );																		
TcEnumerateFlows(       __in    HANDLE                  IfcHandle,    __inout PHANDLE                 pEnumHandle,    __inout PULONG                  pFlowCount,    __inout PULONG                  pBufSize,    __out   PENUMERATION_BUFFER     Buffer    );																		
TcEnumerateInterfaces(    __in    HANDLE              ClientHandle,    __inout PULONG              pBufferSize,    __out   PTC_IFC_DESCRIPTOR  InterfaceBuffer    );																		
TcGetFlowNameA(    __in                  HANDLE  FlowHandle,    __in                  ULONG   StrSize,    __out_ecount(StrSize) LPSTR   pFlowName    );																		
TcGetFlowNameW(    __in                  HANDLE  FlowHandle,    __in                  ULONG   StrSize,    __out_ecount(StrSize) LPWSTR  pFlowName    );																		
TcModifyFlow(       __in HANDLE          FlowHandle,    __in PTC_GEN_FLOW    pGenericFlow    );																		
TcOpenInterfaceA(    __in  LPSTR           pInterfaceName,    __in  HANDLE          ClientHandle,    __in  HANDLE          ClIfcCtx,    __out PHANDLE         pIfcHandle    );																		
TcOpenInterfaceW(    __in  LPWSTR          pInterfaceName,    __in  HANDLE          ClientHandle,    __in  HANDLE          ClIfcCtx,    __out PHANDLE         pIfcHandle    );																		
TcQueryFlowA(    __in                       LPSTR       pFlowName,    __in                       LPGUID      pGuidParam,    __inout                    PULONG      pBufferSize,    __out_bcount(*pBufferSize) PVOID       Buffer    );																		
TcQueryFlowW(    __in                       LPWSTR      pFlowName,    __in                       LPGUID      pGuidParam,    __inout                    PULONG      pBufferSize,    __out_bcount(*pBufferSize) PVOID       Buffer    );																		
TcQueryInterface(    __in                       HANDLE      IfcHandle,    __in                       LPGUID      pGuidParam,    __in                       BOOLEAN     NotifyChange,    __inout                    PULONG      pBufferSize,    __out_bcount(*pBufferSize) PVOID       Buffer    );																		
TcRegisterClient(    __in  ULONG                   TciVersion,    __in  HANDLE                  ClRegCtx,    __in  PTCI_CLIENT_FUNC_LIST   ClientHandlerList,    __out PHANDLE                 pClientHandle    );																		
TcSetFlowA(    __in                    LPSTR       pFlowName,    __in                    LPGUID      pGuidParam,    __in                    ULONG       BufferSize,    __in_bcount(BufferSize) PVOID       Buffer    );																		
TcSetFlowW(    __in                    LPWSTR      pFlowName,    __in                    LPGUID      pGuidParam,    __in                    ULONG       BufferSize,    __in_bcount(BufferSize) PVOID       Buffer    );																		
TcSetInterface(    __in                    HANDLE      IfcHandle,    __in                    LPGUID      pGuidParam,    __in                    ULONG       BufferSize,    __in_bcount(BufferSize) PVOID       Buffer    );																		
TerminateFilter(    DWORD dwFlags    );																		
TerminateJobObject(    __in HANDLE hJob,    __in UINT uExitCode    );																		
TerminateProcess(    __in HANDLE hProcess,    __in UINT uExitCode    );																		
TerminateThread(    __in HANDLE hThread,    __in DWORD dwExitCode    );																		
TextOutA( __in HDC hdc, __in int x, __in int y, __in_ecount(c) LPCSTR lpString, __in int c);																		
TextOutW( __in HDC hdc, __in int x, __in int y, __in_ecount(c) LPCWSTR lpString, __in int c);																		
Thread32First(    HANDLE hSnapshot,    LPTHREADENTRY32 lpte    );																		
Thread32Next(    HANDLE hSnapshot,    LPTHREADENTRY32 lpte    );																		
TileWindows(    __in_opt HWND hwndParent,    __in UINT wHow,    __in_opt CONST RECT * lpRect,    __in UINT cKids,    __in_ecount_opt(cKids) const HWND FAR * lpKids);																		
TlsAlloc(    VOID    );																		
TlsFree(    __in DWORD dwTlsIndex    );																		
TlsGetValue(    __in DWORD dwTlsIndex    );																		
TlsSetValue(    __in     DWORD dwTlsIndex,    __in_opt LPVOID lpTlsValue    );																		
ToAscii(    __in UINT uVirtKey,    __in UINT uScanCode,    __in_ecount_opt(256) CONST BYTE *lpKeyState,    __out LPWORD lpChar,    __in UINT uFlags);																		
ToAsciiEx(    __in UINT uVirtKey,    __in UINT uScanCode,    __in_ecount_opt(256) CONST BYTE *lpKeyState,    __out LPWORD lpChar,    __in UINT uFlags,    __in_opt HKL dwhkl);																		
Toolhelp32ReadProcessMemory(    DWORD   th32ProcessID,    LPCVOID lpBaseAddress,    LPVOID  lpBuffer,    SIZE_T  cbRead,    SIZE_T *lpNumberOfBytesRead    );																		
TouchFileTimes (__in HANDLE FileHandle,__in_opt PSYSTEMTIME pSystemTime);																		
ToUnicode(    __in UINT wVirtKey,    __in UINT wScanCode,    __in_bcount_opt(256) CONST BYTE *lpKeyState,    __out_ecount(cchBuff) LPWSTR pwszBuff,    __in int cchBuff,    __in UINT wFlags);																		
ToUnicodeEx(    __in UINT wVirtKey,    __in UINT wScanCode,    __in_bcount(256) CONST BYTE *lpKeyState,    __out_ecount(cchBuff) LPWSTR pwszBuff,    __in int cchBuff,    __in UINT wFlags,    __in_opt HKL dwhkl);																		
TraceDeregisterA(    IN  DWORD       dwTraceID    );																		
TraceDeregisterExA(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags    );																		
TraceDeregisterExW(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags    );																		
TraceDeregisterW(    IN  DWORD       dwTraceID    );																		
TraceDumpExA(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags,    IN  LPBYTE      lpbBytes,    IN  DWORD       dwByteCount,    IN  DWORD       dwGroupSize,    IN  BOOL        bAddressPrefix,    IN  LPCSTR      lpszPrefix    );																		
TraceDumpExW(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags,    IN  LPBYTE      lpbBytes,    IN  DWORD       dwByteCount,    IN  DWORD       dwGroupSize,    IN  BOOL        bAddressPrefix,    IN  LPCWSTR     lpszPrefix    );																		
TraceGetConsoleA(    IN  DWORD       dwTraceID,    OUT LPHANDLE    lphConsole    );																		
TraceGetConsoleW(    IN  DWORD       dwTraceID,    OUT LPHANDLE    lphConsole    );																		
TracePutsExA(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags,    IN  LPCSTR      lpszString    );																		
TracePutsExW(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags,    IN  LPCWSTR     lpszString    );																		
TraceRegisterExA(    IN  LPCSTR      lpszCallerName,    IN  DWORD       dwFlags    );																		
TraceRegisterExW(    IN  LPCWSTR     lpszCallerName,    IN  DWORD       dwFlags    );																		
TraceVprintfExA(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags,    IN  LPCSTR      lpszFormat,    IN  va_list     arglist    );																		
TraceVprintfExW(    IN  DWORD       dwTraceID,    IN  DWORD       dwFlags,    IN  LPCWSTR     lpszFormat,    IN  va_list     arglist    );																		
TrackMouseEvent(    __inout LPTRACKMOUSEEVENT lpEventTrack);																		
TrackMouseEvent(__inout LPTRACKMOUSEEVENT lpEventTrack);																		
TrackPopupMenu(    __in HMENU hMenu,    __in UINT uFlags,    __in int x,    __in int y,    __in int nReserved,    __in HWND hWnd,    __in_opt CONST RECT *prcRect);																		
TrackPopupMenuEx(    __in HMENU,    __in UINT,    __in int,    __in int,    __in HWND,    __in_opt LPTPMPARAMS);																		
TransactNamedPipe(    __in        HANDLE hNamedPipe,    __in_bcount_opt(nInBufferSize) LPVOID lpInBuffer,    __in        DWORD nInBufferSize,    __out_bcount_part_opt(nOutBufferSize, *lpBytesRead) LPVOID lpOutBuffer,    __in        DWORD nOutBufferSize,    __out       LPDWORD lpBytesRead,    __inout_opt LPOVERLAPPED lpOverlapped    );																		
TranslateAcceleratorA(    __in HWND hWnd,    __in HACCEL hAccTable,    __in LPMSG lpMsg);																		
TranslateAcceleratorW(    __in HWND hWnd,    __in HACCEL hAccTable,    __in LPMSG lpMsg);																		
TranslateMDISysAccel(    __in HWND hWndClient,    __in LPMSG lpMsg);																		
TranslateMessage(__in CONST MSG *lpMsg);																		
TransmitCommChar(__in HANDLE hFile,__in char cChar);																		
TransparentBlt(__in HDC hdcDest,__in int xoriginDest,__in int yoriginDest,__in int wDest,__in int hDest,__in HDC hdcSrc,__in int xoriginSrc,__in int yoriginSrc,__in int wSrc,__in int hSrc,__in UINT crTransparent);																		
TreeResetNamedSecurityInfoA(    __in     LPSTR               pObjectName,    __in     SE_OBJECT_TYPE       ObjectType,    __in     SECURITY_INFORMATION SecurityInfo,    __in_opt PSID                 pOwner,    __in_opt PSID                 pGroup,    __in_opt PACL                 pDacl,    __in_opt PACL                 pSacl,    __in     BOOL                 KeepExplicit,    __in_opt FN_PROGRESS          fnProgress,    __in     PROG_INVOKE_SETTING  ProgressInvokeSetting,    __in_opt PVOID                Args    );																		
TreeResetNamedSecurityInfoW(    __in     LPWSTR               pObjectName,    __in     SE_OBJECT_TYPE       ObjectType,    __in     SECURITY_INFORMATION SecurityInfo,    __in_opt PSID                 pOwner,    __in_opt PSID                 pGroup,    __in_opt PACL                 pDacl,    __in_opt PACL                 pSacl,    __in     BOOL                 KeepExplicit,    __in_opt FN_PROGRESS          fnProgress,    __in     PROG_INVOKE_SETTING  ProgressInvokeSetting,    __in_opt PVOID                Args    );																		
TreeSetNamedSecurityInfoA(    __in     LPSTR               pObjectName,    __in     SE_OBJECT_TYPE       ObjectType,    __in     SECURITY_INFORMATION SecurityInfo,    __in_opt PSID                 pOwner,    __in_opt PSID                 pGroup,    __in_opt PACL                 pDacl,    __in_opt PACL                 pSacl,    __in     DWORD                dwAction,    __in_opt FN_PROGRESS          fnProgress,    __in     PROG_INVOKE_SETTING  ProgressInvokeSetting,    __in_opt PVOID                Args    );																		
TreeSetNamedSecurityInfoW(    __in     LPWSTR               pObjectName,    __in     SE_OBJECT_TYPE       ObjectType,    __in     SECURITY_INFORMATION SecurityInfo,    __in_opt PSID                 pOwner,    __in_opt PSID                 pGroup,    __in_opt PACL                 pDacl,    __in_opt PACL                 pSacl,    __in     DWORD                dwAction,    __in_opt FN_PROGRESS          fnProgress,    __in     PROG_INVOKE_SETTING  ProgressInvokeSetting,    __in_opt PVOID                Args    );																		
TryAcquireSRWLockExclusive (    __inout PSRWLOCK SRWLock    );																		
TryAcquireSRWLockShared (    __inout PSRWLOCK SRWLock    );																		
TryEnterCriticalSection(    __inout LPCRITICAL_SECTION lpCriticalSection    );																		
TrySubmitThreadpoolCallback(    __in        PTP_SIMPLE_CALLBACK  pfns,    __inout_opt PVOID                pv,    __in_opt    PTP_CALLBACK_ENVIRON pcbe    );																		
TxfGetThreadMiniVersionForCreate (    __out PUSHORT MiniVersion    );																		
TxfLogCreateFileReadContext (    __in LPCWSTR LogPath,    __in CLFS_LSN BeginningLsn,    __in CLFS_LSN EndingLsn,    __in PTXF_ID TxfFileId,    __deref_out PVOID *TxfLogContext    );																		
TxfLogCreateRangeReadContext (    __in LPCWSTR LogPath,    __in CLFS_LSN BeginningLsn,    __in CLFS_LSN EndingLsn,    __in PLARGE_INTEGER BeginningVirtualClock,    __in PLARGE_INTEGER EndingVirtualClock,    __in ULONG RecordTypeMask,    __deref_out PVOID *TxfLogContext    );																		
TxfLogDestroyReadContext (    __in PVOID TxfLogContext    );																		
TxfLogReadRecords (    __in PVOID TxfLogContext,    __in ULONG BufferLength,    __out_bcount_part(BufferLength, *BytesUsed) PVOID Buffer,    __out PULONG BytesUsed,    __out PULONG RecordCount    );																		
TxfLogRecordGetFileName (    __in_bcount(RecordBufferLengthInBytes) PVOID RecordBuffer,    __in ULONG RecordBufferLengthInBytes,    __out_bcount(NameBufferLengthInBytes) PWSTR NameBuffer,    __inout PULONG NameBufferLengthInBytes,    __out_opt PTXF_ID TxfId     );																		
TxfLogRecordGetGenericType (    __in PVOID RecordBuffer,    __in ULONG RecordBufferLengthInBytes,    __out PULONG GenericType,    __out_opt PLARGE_INTEGER VirtualClock     );																		
TxfReadMetadataInfo (    __in HANDLE FileHandle,    __out PTXF_ID TxfFileId,    __out PCLFS_LSN LastLsn,    __out PULONG TransactionState,    __out PGUID LockingTransaction    );																		
TxfSetThreadMiniVersionForCreate (    __in USHORT MiniVersion    );																		
TzSpecificLocalTimeToSystemTime(    __in_opt CONST TIME_ZONE_INFORMATION *lpTimeZoneInformation,    __in     CONST SYSTEMTIME *lpLocalTime,    __out    LPSYSTEMTIME lpUniversalTime    );																		
uaw_CharUpperW(    __inout LPUWSTR String    );																		
uaw_lstrcmpiW(    __in PCUWSTR String1,    __in PCUWSTR String2    );																		
uaw_lstrcmpW(    __in PCUWSTR String1,    __in PCUWSTR String2    );																		
uaw_lstrlenW(    __in LPCUWSTR String    );																		
UmsThreadYield(    __in PVOID SchedulerParam    );																		
UnDecorateSymbolName(    __in PCSTR name,    __out_ecount(maxStringLength) PSTR outputString,    __in DWORD maxStringLength,    __in DWORD flags    );																		
UnDecorateSymbolName(    __in PCSTR name,    __out_ecount(maxStringLength) PSTR outputString,    __in DWORD maxStringLength,    __in DWORD flags    );																		
UnDecorateSymbolName(__in PCSTR name,__out_ecount(maxStringLength) PSTR outputString,__in DWORD maxStringLength,__in DWORD flags);																		
UnDecorateSymbolNameW(    __in PCWSTR name,    __out_ecount(maxStringLength) PWSTR outputString,    __in DWORD maxStringLength,    __in DWORD flags    );																		
UnDecorateSymbolNameW(    __in PCWSTR name,    __out_ecount(maxStringLength) PWSTR outputString,    __in DWORD maxStringLength,    __in DWORD flags    );																		
UnDecorateSymbolNameW(__in PCWSTR name,__out_ecount(maxStringLength) PWSTR outputString,__in DWORD maxStringLength,__in DWORD flags);																		
UnenableRouter(    __in      OVERLAPPED* pOverlapped,    __out_opt LPDWORD lpdwEnableCount    );																		
UnhandledExceptionFilter(    __in struct _EXCEPTION_POINTERS *ExceptionInfo    );																		
UnhookWindowsHook(__in int nCode,__in HOOKPROC pfnFilterProc);																		
UnhookWindowsHookEx(__in HHOOK hhk);																		
UnhookWinEvent(    __in HWINEVENTHOOK hWinEventHook);																		
UninitializeFlatSB(HWND);																		
UnionRect(__out LPRECT lprcDst,__in CONST RECT *lprcSrc1,__in CONST RECT *lprcSrc2);																		
UnloadKeyboardLayout(    __in HKL hkl);																		
UnloadUserProfile(    __in    HANDLE  hToken,    __in    HANDLE  hProfile);																		
UnlockFile(    __in HANDLE hFile,    __in DWORD dwFileOffsetLow,    __in DWORD dwFileOffsetHigh,    __in DWORD nNumberOfBytesToUnlockLow,    __in DWORD nNumberOfBytesToUnlockHigh    );																		
UnlockFileEx(    __in       HANDLE hFile,    __reserved DWORD dwReserved,    __in       DWORD nNumberOfBytesToUnlockLow,    __in       DWORD nNumberOfBytesToUnlockHigh,    __inout    LPOVERLAPPED lpOverlapped    );																		
UnlockServiceDatabase(    __in            SC_LOCK             ScLock    );																		
UnlockUrlCacheEntryFile(    __in LPCSTR lpszUrlName,    __reserved DWORD dwReserved    );																		
UnlockUrlCacheEntryFileA(    __in LPCSTR lpszUrlName,    __reserved DWORD dwReserved    );																		
UnlockUrlCacheEntryFileW(    __in LPCWSTR lpszUrlName,    __reserved DWORD dwReserved    );																		
UnlockUrlCacheEntryStream(    __in HANDLE hUrlCacheStream,    __reserved DWORD Reserved    );																		
UnMapAndLoad(__inout PLOADED_IMAGE LoadedImage);																		
UnmapDebugInformation(    __out_xcount(unknown) PIMAGE_DEBUG_INFORMATION DebugInfo    );																		
UnmapDebugInformation(__out_xcount(unknown) PIMAGE_DEBUG_INFORMATION DebugInfo);																		
UnmapViewOfFile(    __in LPCVOID lpBaseAddress    );																		
UnrealizeObject( __in HGDIOBJ h);																		
UnregisterApplicationRecoveryCallback(void);																		
UnregisterApplicationRestart(void);																		
UnregisterClassA(    __in LPCSTR lpClassName,    __in_opt HINSTANCE hInstance);																		
UnregisterClassW(    __in LPCWSTR lpClassName,    __in_opt HINSTANCE hInstance);																		
UnregisterDeviceNotification(    __in HDEVNOTIFY Handle    );																		
UnRegisterForPrintAsyncNotifications(    __in     HANDLE    );																		
UnregisterGPNotification(    __in        HANDLE  hEvent);																		
UnregisterHotKey(    __in_opt HWND hWnd,    __in int id);																		
UnregisterPowerSettingNotification(    IN HPOWERNOTIFY Handle    );																		
UnregisterTouchWindow(    __in HWND hwnd);																		
UnregisterWait(    __in HANDLE WaitHandle    );																		
UnregisterWaitEx(    __in     HANDLE WaitHandle,    __in_opt HANDLE CompletionEvent    );																		
UpdateColors(__in HDC hdc);																		
UpdateDebugInfoFile(__in PCSTR ImageFileName,__in PCSTR SymbolPath,__out_ecount(MAX_PATH + 1) PSTR DebugFilePath,__in PIMAGE_NT_HEADERS32 NtHeaders);																		
UpdateDebugInfoFileEx(__in PCSTR ImageFileName,__in PCSTR SymbolPath,__out_ecount(MAX_PATH+1) PSTR DebugFilePath,__in PIMAGE_NT_HEADERS32 NtHeaders,__in DWORD OldCheckSum);																		
UpdateDriverForPlugAndPlayDevicesA(    __in_opt  HWND hwndParent,    __in      LPCSTR HardwareId,    __in      LPCSTR FullInfPath,    __in      DWORD InstallFlags,    __out_opt PBOOL bRebootRequired    );																		
UpdateDriverForPlugAndPlayDevicesW(    __in_opt  HWND hwndParent,    __in      LPCWSTR HardwareId,    __in      LPCWSTR FullInfPath,    __in      DWORD InstallFlags,    __out_opt PBOOL bRebootRequired    );																		
UpdateICMRegKeyA( __reserved DWORD reserved, __in LPSTR lpszCMID, __in LPSTR lpszFileName, __in UINT command);																		
UpdateICMRegKeyW( __reserved DWORD reserved, __in LPWSTR lpszCMID, __in LPWSTR lpszFileName, __in UINT command);																		
UpdateLayeredWindow(    __in HWND hWnd,    __in_opt HDC hdcDst,    __in_opt POINT* pptDst,    __in_opt SIZE* psize,    __in_opt HDC hdcSrc,    __in_opt POINT* pptSrc,    __in COLORREF crKey,    __in_opt BLENDFUNCTION* pblend,    __in DWORD dwFlags);																		
UpdateLayeredWindowIndirect(    __in HWND hWnd,    __in const UPDATELAYEREDWINDOWINFO* pULWInfo);																		
UpdateProcThreadAttribute(    __inout LPPROC_THREAD_ATTRIBUTE_LIST lpAttributeList,    __in DWORD dwFlags,    __in DWORD_PTR Attribute,    __in_bcount_opt(cbSize) PVOID lpValue,    __in SIZE_T cbSize,    __out_bcount_opt(cbSize) PVOID lpPreviousValue,    __in_opt PSIZE_T lpReturnSize    );																		
UpdateResourceA(    __in HANDLE hUpdate,    __in LPCSTR lpType,    __in LPCSTR lpName,    __in WORD wLanguage,    __in_bcount_opt(cb) LPVOID lpData,    __in DWORD cb    );																		
UpdateResourceW(    __in HANDLE hUpdate,    __in LPCWSTR lpType,    __in LPCWSTR lpName,    __in WORD wLanguage,    __in_bcount_opt(cb) LPVOID lpData,    __in DWORD cb    );																		
UpdateWindow(    __in HWND hWnd);																		
UserHandleGrantAccess(    __in HANDLE hUserHandle,    __in HANDLE hJob,    __in BOOL   bGrant);																		
ValidateRect(    __in_opt HWND hWnd,    __in_opt CONST RECT *lpRect);																		
ValidateRgn(    __in HWND hWnd,    __in_opt HRGN hRgn);																		
VDMBreakThread(    HANDLE          hProcess,    HANDLE          hThread);																		
VDMDetectWOW(    VOID);																		
VDMEnumProcessWOW(    PROCESSENUMPROC fp,    LPARAM          lparam);																		
VDMEnumTaskWOW(    DWORD           dwProcessId,    TASKENUMPROC    fp,    LPARAM          lparam);																		
VDMEnumTaskWOWEx(    DWORD           dwProcessId,    TASKENUMPROCEX  fp,    LPARAM          lparam);																		
VDMGetAddrExpression(    __in LPSTR  szModule,    __in LPSTR  szSymbol,    PWORD  Selector,    PDWORD Offset,    PWORD  Type    );																		
VDMGetContext(    HANDLE          hProcess,    HANDLE          hThread,    LPVDMCONTEXT    lpVDMContext);																		
VDMGetDbgFlags(    HANDLE          hProcess    );																		
VDMGetModuleSelector(    HANDLE          hProcess,    HANDLE          hThread,    UINT            wSegmentNumber,    __in LPSTR      lpModuleName,    LPWORD          lpSelector);																		
VDMGetPointer(    HANDLE          hProcess,    HANDLE          hThread,    WORD            wSelector,    DWORD           dwOffset,    BOOL            fProtMode    );																		
VDMGetSegmentInfo(    WORD Selector,    ULONG Offset,    BOOL bProtectMode,    VDM_SEGINFO *pSegInfo    );																		
VDMGetSelectorModule(    HANDLE          hProcess,    HANDLE          hThread,    WORD            wSelector,    PUINT           lpSegmentNumber,    __in LPSTR      lpModuleName,    UINT            nNameSize,    __in LPSTR      lpModulePath,    UINT            nPathSize);																		
VDMGetSymbol(    __in LPSTR szModule,    WORD SegNumber,    DWORD Offset,    BOOL bProtectMode,    BOOL bNextSymbol,    __out LPSTR szSymbolName,    PDWORD pDisplacement    );																		
VDMGetThreadSelectorEntry(    HANDLE          hProcess,    HANDLE          hThread,    WORD            wSelector,    LPVDMLDT_ENTRY  lpSelectorEntry    );																		
VDMGlobalFirst(    HANDLE          hProcess,    HANDLE          hThread,    LPGLOBALENTRY   lpGlobalEntry,    WORD            wFlags,    DEBUGEVENTPROC  lpEventProc,    LPVOID          lpData);																		
VDMGlobalNext(    HANDLE          hProcess,    HANDLE          hThread,    LPGLOBALENTRY   lpGlobalEntry,    WORD            wFlags,    DEBUGEVENTPROC  lpEventProc,    LPVOID          lpData);																		
VDMIsModuleLoaded(    __in LPSTR szPath    );																		
VDMKillWOW(    VOID);																		
VDMModuleFirst(    HANDLE          hProcess,    HANDLE          hThread,    LPMODULEENTRY   lpModuleEntry,    DEBUGEVENTPROC  lpEventProc,    LPVOID          lpData);																		
VDMModuleNext(    HANDLE          hProcess,    HANDLE          hThread,    LPMODULEENTRY   lpModuleEntry,    DEBUGEVENTPROC  lpEventProc,    LPVOID          lpData);																		
VDMProcessException(    LPDEBUG_EVENT   lpDebugEvent    );																		
VDMSetContext(    HANDLE          hProcess,    HANDLE          hThread,    LPVDMCONTEXT    lpVDMContext);																		
VDMSetDbgFlags(    HANDLE          hProcess,    DWORD           dwFlags    );																		
VDMStartTaskInWOW(    DWORD           dwProcessId,    __in LPSTR      lpCommandLine,    WORD            wShow);																		
VDMTerminateTaskWOW(    DWORD           dwProcessId,    WORD            htask);																		
VerFindFileA(        __in                         DWORD uFlags,        __in                         LPCSTR szFileName,        __in_opt                     LPCSTR szWinDir,        __in                         LPCSTR szAppDir,        __out_ecount(*lpuCurDirLen)  LPSTR szCurDir,        __inout                      PUINT lpuCurDirLen,        __out_ecount(*lpuDestDirLen) LPSTR szDestDir,        __inout                      PUINT lpuDestDirLen        );																		
VerFindFileW(        __in                         DWORD uFlags,        __in                         LPCWSTR szFileName,        __in_opt                     LPCWSTR szWinDir,        __in                         LPCWSTR szAppDir,        __out_ecount(*lpuCurDirLen)  LPWSTR szCurDir,        __inout                      PUINT lpuCurDirLen,        __out_ecount(*lpuDestDirLen) LPWSTR szDestDir,        __inout                      PUINT lpuDestDirLen        );																		
VerifyVersionInfoA(    __inout LPOSVERSIONINFOEXA lpVersionInformation,    __in    DWORD dwTypeMask,    __in    DWORDLONG dwlConditionMask    );																		
VerifyVersionInfoW(    __inout LPOSVERSIONINFOEXW lpVersionInformation,    __in    DWORD dwTypeMask,    __in    DWORDLONG dwlConditionMask    );																		
VerInstallFileA(        __in                         DWORD uFlags,        __in                         LPCSTR szSrcFileName,        __in                         LPCSTR szDestFileName,        __in                         LPCSTR szSrcDir,        __in                         LPCSTR szDestDir,        __in                         LPCSTR szCurDir,        __out_ecount(*lpuTmpFileLen) LPSTR szTmpFile,        __inout                      PUINT lpuTmpFileLen        );																		
VerInstallFileW(        __in                         DWORD uFlags,        __in                         LPCWSTR szSrcFileName,        __in                         LPCWSTR szDestFileName,        __in                         LPCWSTR szSrcDir,        __in                         LPCWSTR szDestDir,        __in                         LPCWSTR szCurDir,        __out_ecount(*lpuTmpFileLen) LPWSTR szTmpFile,        __inout                      PUINT lpuTmpFileLen        );																		
VerLanguageNameA(        __in                  DWORD wLang,        __out_ecount(cchLang) LPSTR szLang,        __in                  DWORD cchLang        );																		
VerLanguageNameW(        __in                  DWORD wLang,        __out_ecount(cchLang) LPWSTR szLang,        __in                  DWORD cchLang        );																		
VerQueryValueA(        __in LPCVOID pBlock,        __in LPCSTR lpSubBlock,        __deref_out_xcount("buffer can be PWSTR or DWORD*") LPVOID * lplpBuffer,        __out PUINT puLen        );																		
VerQueryValueW(        __in LPCVOID pBlock,        __in LPCWSTR lpSubBlock,        __deref_out_xcount("buffer can be PWSTR or DWORD*") LPVOID * lplpBuffer,        __out PUINT puLen        );																		
VirtualAlloc(    __in_opt LPVOID lpAddress,    __in     SIZE_T dwSize,    __in     DWORD flAllocationType,    __in     DWORD flProtect    );																		
VirtualAllocEx(    __in     HANDLE hProcess,    __in_opt LPVOID lpAddress,    __in     SIZE_T dwSize,    __in     DWORD flAllocationType,    __in     DWORD flProtect    );																		
VirtualAllocExNuma(    __in     HANDLE hProcess,    __in_opt LPVOID lpAddress,    __in     SIZE_T dwSize,    __in     DWORD  flAllocationType,    __in     DWORD  flProtect,    __in     DWORD  nndPreferred    );																		
VirtualFree(    __in LPVOID lpAddress,    __in SIZE_T dwSize,    __in DWORD dwFreeType    );																		
VirtualFreeEx(    __in HANDLE hProcess,    __in LPVOID lpAddress,    __in SIZE_T dwSize,    __in DWORD  dwFreeType    );																		
VirtualLock(    __in LPVOID lpAddress,    __in SIZE_T dwSize    );																		
VirtualProtect(    __in  LPVOID lpAddress,    __in  SIZE_T dwSize,    __in  DWORD flNewProtect,    __out PDWORD lpflOldProtect    );																		
VirtualProtectEx(    __in  HANDLE hProcess,    __in  LPVOID lpAddress,    __in  SIZE_T dwSize,    __in  DWORD flNewProtect,    __out PDWORD lpflOldProtect    );																		
VirtualQuery(    __in_opt LPCVOID lpAddress,    __out_bcount_part(dwLength, return) PMEMORY_BASIC_INFORMATION lpBuffer,    __in     SIZE_T dwLength    );																		
VirtualQueryEx(    __in     HANDLE hProcess,    __in_opt LPCVOID lpAddress,    __out_bcount_part(dwLength, return) PMEMORY_BASIC_INFORMATION lpBuffer,    __in     SIZE_T dwLength    );																		
VirtualUnlock(    __in LPVOID lpAddress,    __in SIZE_T dwSize    );																		
VkKeyScanA(    __in CHAR ch);																		
VkKeyScanExA(    __in CHAR ch,    __in HKL dwhkl);																		
VkKeyScanExW(    __in WCHAR ch,    __in HKL dwhkl);																		
VkKeyScanW(    __in WCHAR ch);																		
WaitCommEvent(    __in        HANDLE hFile,    __inout     LPDWORD lpEvtMask,    __inout_opt LPOVERLAPPED lpOverlapped    );																		
WaitForDebugEvent(    __in LPDEBUG_EVENT lpDebugEvent,    __in DWORD dwMilliseconds    );																		
WaitForInputIdle(    __in HANDLE hProcess,    __in DWORD dwMilliseconds);																		
WaitForMultipleObjects(    __in DWORD nCount,    __in_ecount(nCount) CONST HANDLE *lpHandles,    __in BOOL bWaitAll,    __in DWORD dwMilliseconds    );																		
WaitForMultipleObjectsEx(    __in DWORD nCount,    __in_ecount(nCount) CONST HANDLE *lpHandles,    __in BOOL bWaitAll,    __in DWORD dwMilliseconds,    __in BOOL bAlertable    );																		
WaitForPrinterChange(__in HANDLE  hPrinter,     DWORD   Flags);																		
WaitForSingleObject(    __in HANDLE hHandle,    __in DWORD dwMilliseconds    );																		
WaitForSingleObjectEx(    __in HANDLE hHandle,    __in DWORD dwMilliseconds,    __in BOOL bAlertable    );																		
WaitForThreadpoolIoCallbacks(    __inout PTP_IO pio,    __in    BOOL   fCancelPendingCallbacks    );																		
WaitForThreadpoolTimerCallbacks(    __inout PTP_TIMER pti,    __in    BOOL      fCancelPendingCallbacks    );																		
WaitForThreadpoolWaitCallbacks(    __inout PTP_WAIT pwa,    __in    BOOL     fCancelPendingCallbacks    );																		
WaitForThreadpoolWorkCallbacks(    __inout PTP_WORK pwk,    __in    BOOL     fCancelPendingCallbacks    );																		
WaitMessage(    VOID);																		
WaitNamedPipeA(    __in LPCSTR lpNamedPipeName,    __in DWORD nTimeOut    );																		
WaitNamedPipeW(    __in LPCWSTR lpNamedPipeName,    __in DWORD nTimeOut    );																		
WakeAllConditionVariable (    __inout PCONDITION_VARIABLE ConditionVariable    );																		
WakeConditionVariable (    __inout PCONDITION_VARIABLE ConditionVariable    );																		
WcsAssociateColorProfileWithDevice(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in PCWSTR pProfileName,    __in PCWSTR pDeviceName    );																		
WcsCheckColors(    __in HTRANSFORM hColorTransform,    __in DWORD nColors,    __in DWORD nInputChannels,    __in COLORDATATYPE cdtInput,    __in DWORD cbInput,    __in_bcount(cbInput) PVOID pInputData,    __out_ecount(nColors) PBYTE paResult    );																		
WcsDisassociateColorProfileFromDevice(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in PCWSTR pProfileName,    __in PCWSTR pDeviceName    );																		
WcsEnumColorProfiles(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in PENUMTYPEW pEnumRecord,    __out_bcount(dwSize) PBYTE pBuffer,    __in DWORD dwSize,    __out_opt PDWORD pnProfiles    );																		
WcsEnumColorProfilesSize(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in PENUMTYPEW pEnumRecord,    __out PDWORD pdwSize    );																		
WcsGetDefaultColorProfile(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in_opt PCWSTR pDeviceName,    __in COLORPROFILETYPE cptColorProfileType,    __in COLORPROFILESUBTYPE cpstColorProfileSubType,    __in DWORD dwProfileID,    __in DWORD cbProfileName,    __out_bcount(cbProfileName) LPWSTR pProfileName    );																		
WcsGetDefaultColorProfileSize(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in_opt PCWSTR pDeviceName,    __in COLORPROFILETYPE cptColorProfileType,    __in COLORPROFILESUBTYPE cpstColorProfileSubType,    __in DWORD dwProfileID,    __out PDWORD pcbProfileName    );																		
WcsGetDefaultRenderingIntent(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __out PDWORD pdwRenderingIntent    );																		
WcsGetUsePerUserProfiles(    __in LPCWSTR pDeviceName,    __in DWORD dwDeviceClass,    __out PBOOL pUsePerUserProfiles    );																		
WcsSetDefaultColorProfile(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in_opt PCWSTR pDeviceName,    __in COLORPROFILETYPE cptColorProfileType,    __in COLORPROFILESUBTYPE cpstColorProfileSubType,    __in DWORD dwProfileID,    __in_opt LPCWSTR pProfileName    );																		
WcsSetDefaultRenderingIntent(    __in WCS_PROFILE_MANAGEMENT_SCOPE scope,    __in DWORD dwRenderingIntent    );																		
WcsSetUsePerUserProfiles(    __in LPCWSTR pDeviceName,    __in DWORD dwDeviceClass,    __in BOOL usePerUserProfiles    );																		
WcsTranslateColors(    __in HTRANSFORM hColorTransform,    __in DWORD nColors,    __in DWORD nInputChannels,    __in COLORDATATYPE cdtInput,    __in DWORD cbInput,    __in_bcount(cbInput) PVOID pInputData,    __in DWORD nOutputChannels,    __in COLORDATATYPE cdtOutput,    __in DWORD cbOutput,    __out_bcount(cbOutput) PVOID pOutputData    );																		
WDEnable(__in BOOL  fEnable);																		
WdsBpAddOption(__in HANDLE hHandle,__in ULONG uOption,__in ULONG uValueLen,__in_bcount(uValueLen) PVOID pValue );																		
WdsBpCloseHandle(__in HANDLE hHandle);																		
WdsBpInitialize(__in BYTE bPacketType,__out HANDLE *phHandle);    																		
WdsBpParseInitialize(__in_bcount(uPacketLen) PVOID pPacket,__in ULONG uPacketLen,__out_opt PBYTE pbPacketType,__out HANDLE *phHandle);																		
WdsBpQueryOption(__in HANDLE hHandle,__in ULONG uOption,__in ULONG uValueLen,__out_bcount_part(uValueLen, *puBytes) PVOID pValue,__out PULONG puBytes);																		
WdsCliAuthorizeSession(__inout HANDLE hSession,__in_opt PWDS_CLI_CRED pCred );																		
WdsCliCancelTransfer(__in HANDLE hTransfer );																		
WdsCliClose( __in HANDLE Handle );																		
WdsCliCreateSession(__in PWSTR pwszServer,__in_opt PWDS_CLI_CRED pCred,__out PHANDLE phSession );																		
WdsCliFindFirstImage( __in HANDLE hSession, __out PHANDLE phFindHandle );																		
WdsCliFindNextImage(__in HANDLE Handle );																		
WdsCliFreeStringArray(__inout_ecount_opt(ulCount) PWSTR *ppwszArray,__in ULONG ulCount );																		
WdsCliGetEnumerationFlags(__in HANDLE Handle,__out PDWORD pdwFlags );																		
WdsCliGetImageArchitecture(__in HANDLE hIfh,__out PDWORD pdwValue );																		
WdsCliGetImageDescription(__in HANDLE hIfh, __out PWSTR *ppwszValue );																		
WdsCliGetImageFiles(__in HANDLE hIfh,__deref_out_ecount(*pdwCount) LPWSTR **pppwszFiles,__out PDWORD pdwCount );																		
WdsCliGetImageGroup(__in HANDLE hIfh,__out PWSTR *ppwszValue );																		
WdsCliGetImageHalName(__in HANDLE hIfh,__out PWSTR *ppwszValue );																		
WdsCliGetImageHandleFromFindHandle(__in HANDLE FindHandle,__out PHANDLE phImageHandle );																		
WdsCliGetImageHandleFromTransferHandle(__in HANDLE hTransfer,__out PHANDLE phImageHandle );																		
WdsCliGetImageIndex(__in HANDLE hIfh,__out PDWORD pdwValue );																		
WdsCliGetImageLanguage(__in HANDLE hIfh, __out PWSTR *ppwszValue );																		
WdsCliGetImageLanguages(__in HANDLE hIfh,__out_ecount(*pdwNumValues) PTSTR **pppszValues,__out PDWORD pdwNumValues );																		
WdsCliGetImageLastModifiedTime(__in HANDLE hIfh,__out PSYSTEMTIME *ppSysTimeValue );																		
WdsCliGetImageName(__in HANDLE hIfh,__out PWSTR *ppwszValue );																		
WdsCliGetImageNamespace(__in HANDLE hIfh,__out PWSTR *ppwszValue );																		
WdsCliGetImageParameter(__in HANDLE hIfh,__in WDS_CLI_IMAGE_PARAM_TYPE ParamType,__out_bcount(uResponseLen) PVOID pResponse,__in ULONG uResponseLen );																		
WdsCliGetImagePath(__in HANDLE hIfh,__out PWSTR *ppwszValue );																		
WdsCliGetImageSize(__in HANDLE hIfh,__out PULONGLONG pullValue );																		
WdsCliGetImageType(__in HANDLE hIfh,__out PWDS_CLI_IMAGE_TYPE pImageType );																		
WdsCliGetImageVersion(__in HANDLE hIfh, __out PWSTR *ppwszValue );																		
WdsCliGetTransferSize(__in HANDLE hIfh,__out PULONGLONG pullValue );																		
WdsCliInitializeLog(__in HANDLE hSession,__in ULONG ulClientArchitecture,__in PWSTR pwszClientId,__in PWSTR pwszClientAddress );																		
WdsCliLog(__in HANDLE hSession,__in ULONG ulLogLevel,__in ULONG ulMessageCode,... );																		
WdsCliObtainDriverPackages(__in HANDLE hImage,__deref_out PWSTR *ppwszServerName,__deref_out_ecount(*pulCount) PWSTR **pppwszDriverPackages,__out ULONG *pulCount    );																		
WdsCliRegisterTrace(__in_opt PFN_WdsCliTraceFunction pfn );																		
WdsCliTransferFile(__in PCWSTR pwszServer,__in PCWSTR pwszNamespace,__in PCWSTR pwszRemoteFilePath,__in PCWSTR pwszLocalFilePath,__in DWORD dwFlags,__in DWORD dwReserved,__in_opt PFN_WdsCliCallback pfnWdsCliCallback,__in_opt PVOID pvUserData,__out PHANDLE phTransfer );																		
WdsCliTransferImage(__in HANDLE hImage,__in PWSTR pwszLocalPath,__in DWORD dwFlags,__in DWORD dwReserved,__in_opt PFN_WdsCliCallback pfnWdsCliCallback,__in_opt PVOID pvUserData,__out PHANDLE phTransfer );																		
WdsCliWaitForTransfer(__in HANDLE hTransfer );																		
WDStatus(__out BOOL* pfEnabled);																		
WerAddExcludedApplication(    __in PCWSTR pwzExeName,    __in BOOL bAllUsers    );																		
WerGetFlags(    __in HANDLE hProcess,    __out PDWORD pdwFlags    );																		
WerRegisterFile(    __in PCWSTR pwzFile,     __in WER_REGISTER_FILE_TYPE regFileType,    __in DWORD dwFlags    );																		
WerRegisterMemoryBlock(    __in PVOID pvAddress,    __in DWORD dwSize    );																		
WerRegisterRuntimeExceptionModule(    __in PCWSTR pwszOutOfProcessCallbackDll,    __in PVOID pContext    );																		
WerRemoveExcludedApplication(    __in PCWSTR pwzExeName,    __in BOOL bAllUsers    );																		
WerReportAddDump(    __in HREPORT hReportHandle,     __in HANDLE  hProcess,    __in_opt HANDLE hThread,    __in WER_DUMP_TYPE dumpType,    __in_opt  PWER_EXCEPTION_INFORMATION pExceptionParam,    __in_opt PWER_DUMP_CUSTOM_OPTIONS pDumpCustomOptions,    __in DWORD dwFlags    );																		
WerReportAddFile(    __in HREPORT hReportHandle,     __in PCWSTR pwzPath,     __in WER_FILE_TYPE repFileType,    __in DWORD  dwFileFlags    );																		
WerReportCloseHandle(    __in HREPORT hReportHandle    );																		
WerReportCreate(    __in PCWSTR pwzEventType,     __in WER_REPORT_TYPE repType,    __in_opt PWER_REPORT_INFORMATION pReportInformation,    __out HREPORT *phReportHandle    );																		
WerReportHang(    __in HWND hwndHungApp,    __in_opt PCWSTR pwzHungApplicationName    );																		
WerReportSetParameter(    __in HREPORT hReportHandle,     __in DWORD dwparamID,     __in_opt PCWSTR pwzName,    __in PCWSTR pwzValue    );																		
WerReportSetUIOption(    __in HREPORT hReportHandle,     __in WER_REPORT_UI repUITypeID,     __in PCWSTR pwzValue    );																		
WerReportSubmit(    __in HREPORT hReportHandle,    __in WER_CONSENT consent,    __in DWORD  dwFlags,    __out_opt PWER_SUBMIT_RESULT pSubmitResult    );																		
WerSetFlags(    __in DWORD dwFlags    );																		
WerUnregisterFile(    __in PCWSTR pwzFilePath    );																		
WerUnregisterMemoryBlock(    __in PVOID pvAddress    );																		
WerUnregisterRuntimeExceptionModule(    __in PCWSTR pwszOutOfProcessCallbackDll,    __in PVOID pContext    );																		
wglCopyContext(HGLRC, HGLRC, UINT);																		
wglCreateContext(HDC);																		
wglCreateLayerContext(HDC, int);																		
wglDeleteContext(HGLRC);																		
wglDescribeLayerPlane(HDC, int, int, UINT, LPLAYERPLANEDESCRIPTOR);																		
wglGetCurrentContext(VOID);																		
wglGetCurrentDC(VOID);																		
wglGetLayerPaletteEntries(HDC, int, int, int, COLORREF *);																		
wglGetProcAddress(LPCSTR);																		
wglMakeCurrent(HDC, HGLRC);																		
wglRealizeLayerPalette(HDC, int, BOOL);																		
wglSetLayerPaletteEntries(HDC, int, int, int, CONST COLORREF *);																		
wglShareLists(HGLRC, HGLRC);																		
wglSwapLayerBuffers(HDC, UINT);																		
wglSwapMultipleBuffers(UINT, CONST WGLSWAP *);																		
wglUseFontBitmapsA(HDC, DWORD, DWORD, DWORD);																		
wglUseFontBitmapsW(HDC, DWORD, DWORD, DWORD);																		
wglUseFontOutlinesA(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);																		
wglUseFontOutlinesW(HDC, DWORD, DWORD, DWORD, FLOAT, FLOAT, int, LPGLYPHMETRICSFLOAT);																		
WideCharToMultiByte(    __in UINT     CodePage,    __in DWORD    dwFlags,    __in_ecount(cchWideChar) LPCWSTR  lpWideCharStr,    __in int      cchWideChar,    __out_bcount_opt(cbMultiByte) __transfer(lpWideCharStr) LPSTR   lpMultiByteStr,    __in int      cbMultiByte,    __in_opt LPCSTR   lpDefaultChar,    __out_opt LPBOOL  lpUsedDefaultChar);																		
WidenPath(__in HDC hdc);																		
WsAbandonMessage(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* message,     __in_opt WS_ERROR* error);																		
WsResetChannel(    __in WS_CHANNEL* channel,     __in_opt WS_ERROR* error);																		
WinBioAcquireFocus(void);																		
WinBioCancel(__in WINBIO_SESSION_HANDLE SessionHandle);																		
WinBioCaptureSample(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_BIR_PURPOSE Purpose,__in WINBIO_BIR_DATA_FLAGS Flags,__out WINBIO_UNIT_ID *UnitId,__deref_out_bcount(*SampleSize) PWINBIO_BIR *Sample,__out SIZE_T *SampleSize,__out WINBIO_REJECT_DETAIL *RejectDetail);																		
WinBioCaptureSampleWithCallback(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_BIR_PURPOSE Purpose,__in WINBIO_BIR_DATA_FLAGS Flags,__in PWINBIO_CAPTURE_CALLBACK CaptureCallback,__in_opt PVOID CaptureCallbackContext);																		
WinBioCloseSession(__in WINBIO_SESSION_HANDLE SessionHandle);																		
WinBioControlUnit(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_UNIT_ID UnitId,__in WINBIO_COMPONENT Component,__in ULONG ControlCode,__in PUCHAR SendBuffer,__in SIZE_T SendBufferSize,__in PUCHAR ReceiveBuffer,__in SIZE_T ReceiveBufferSize,__out SIZE_T *ReceiveDataSize,__out ULONG *OperationStatus);																		
WinBioControlUnitPrivileged(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_UNIT_ID UnitId,__in WINBIO_COMPONENT Component,__in ULONG ControlCode,__in PUCHAR SendBuffer,__in SIZE_T SendBufferSize,__in PUCHAR ReceiveBuffer,__in SIZE_T ReceiveBufferSize,__out SIZE_T *ReceiveDataSize,__out ULONG *OperationStatus);																		
WinBioDeleteTemplate(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_UNIT_ID UnitId,__in WINBIO_IDENTITY *Identity,__in WINBIO_BIOMETRIC_SUBTYPE SubFactor);																		
WinBioEnrollBegin(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_BIOMETRIC_SUBTYPE SubFactor,__in WINBIO_UNIT_ID UnitId);																		
WinBioEnrollCapture(__in WINBIO_SESSION_HANDLE SessionHandle,__out WINBIO_REJECT_DETAIL *RejectDetail);																		
WinBioEnrollCaptureWithCallback(__in WINBIO_SESSION_HANDLE SessionHandle,__in PWINBIO_ENROLL_CAPTURE_CALLBACK EnrollCallback,__in_opt PVOID EnrollCallbackContext);																		
WinBioEnrollCommit(__in WINBIO_SESSION_HANDLE SessionHandle,__out WINBIO_IDENTITY *Identity,__out BOOLEAN *IsNewTemplate);																		
WinBioEnrollDiscard(__in WINBIO_SESSION_HANDLE SessionHandle);																		
WinBioEnumBiometricUnits(__in WINBIO_BIOMETRIC_TYPE Factor,__deref_out_ecount(*UnitCount) WINBIO_UNIT_SCHEMA **UnitSchemaArray,__out SIZE_T *UnitCount);																		
WinBioEnumDatabases(__in WINBIO_BIOMETRIC_TYPE Factor,__deref_out_ecount(*StorageCount) WINBIO_STORAGE_SCHEMA **StorageSchemaArray,__out SIZE_T *StorageCount);																		
WinBioEnumEnrollments(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_UNIT_ID UnitId,__in WINBIO_IDENTITY *Identity,__deref_out_ecount(*SubFactorCount) WINBIO_BIOMETRIC_SUBTYPE **SubFactorArray,__out SIZE_T *SubFactorCount);																		
WinBioEnumServiceProviders(__in WINBIO_BIOMETRIC_TYPE Factor,__deref_out_ecount(*BspCount) WINBIO_BSP_SCHEMA **BspSchemaArray,__out SIZE_T *BspCount);																		
WinBioFree(__in PVOID Address);																		
WinBioGetCredentialState(__in WINBIO_IDENTITY Identity,__in WINBIO_CREDENTIAL_TYPE Type,__out WINBIO_CREDENTIAL_STATE *CredentialState);																		
WinBioGetDomainLogonSetting(    __out BOOLEAN* Value,    __out PWINBIO_SETTING_SOURCE_TYPE Source    );																		
WinBioGetEnabledSetting(    __out BOOLEAN* Value,    __out PWINBIO_SETTING_SOURCE_TYPE Source    );																		
WinBioGetLogonSetting(    __out BOOLEAN* Value,    __out PWINBIO_SETTING_SOURCE_TYPE Source    );																		
WinBioGetProperty(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_PROPERTY_TYPE PropertyType,__in WINBIO_PROPERTY_ID PropertyId,__in_opt WINBIO_UNIT_ID UnitId,__in_opt WINBIO_IDENTITY *Identity,__in_opt WINBIO_BIOMETRIC_SUBTYPE SubFactor,__deref_out_bcount(*PropertyBufferSize) PVOID *PropertyBuffer,__out SIZE_T *PropertyBufferSize);																		
WinBioIdentify(__in WINBIO_SESSION_HANDLE SessionHandle,__out WINBIO_UNIT_ID *UnitId,__out WINBIO_IDENTITY *Identity,__out WINBIO_BIOMETRIC_SUBTYPE *SubFactor,__out WINBIO_REJECT_DETAIL *RejectDetail);																		
WinBioIdentifyWithCallback(__in WINBIO_SESSION_HANDLE SessionHandle,__in PWINBIO_IDENTIFY_CALLBACK IdentifyCallback,__in_opt PVOID IdentifyCallbackContext);																		
WinBioLocateSensor(__in WINBIO_SESSION_HANDLE SessionHandle,__out WINBIO_UNIT_ID *UnitId);																		
WinBioLocateSensorWithCallback(__in WINBIO_SESSION_HANDLE SessionHandle,__in PWINBIO_LOCATE_SENSOR_CALLBACK LocateCallback,__in_opt PVOID LocateCallbackContext);																		
WinBioLockUnit(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_UNIT_ID UnitId);																		
WinBioLogonIdentifiedUser(__in WINBIO_SESSION_HANDLE SessionHandle);																		
WinBioOpenSession(__in WINBIO_BIOMETRIC_TYPE Factor,__in WINBIO_POOL_TYPE PoolType,__in WINBIO_SESSION_FLAGS Flags,__in_ecount_opt(UnitCount) WINBIO_UNIT_ID *UnitArray,__in_opt SIZE_T UnitCount,__in_opt GUID *DatabaseId,__out WINBIO_SESSION_HANDLE *SessionHandle);																		
WinBioRegisterEventMonitor(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_EVENT_TYPE EventMask,__in PWINBIO_EVENT_CALLBACK EventCallback,__in_opt PVOID EventCallbackContext);																		
WinBioReleaseFocus(void);																		
WinBioRemoveAllCredentials(void);																		
WinBioRemoveAllDomainCredentials(void);																		
WinBioRemoveCredential(__in WINBIO_IDENTITY Identity,__in WINBIO_CREDENTIAL_TYPE Type);																		
WinBioSetCredential(__in WINBIO_CREDENTIAL_TYPE Type,__in_bcount(CredentialSize) PUCHAR Credential,__in SIZE_T CredentialSize,__in WINBIO_CREDENTIAL_FORMAT Format);																		
WinBioUnlockUnit(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_UNIT_ID UnitId);																		
WinBioUnregisterEventMonitor(__in WINBIO_SESSION_HANDLE SessionHandle);																		
WinBioVerify(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_IDENTITY *Identity,__in WINBIO_BIOMETRIC_SUBTYPE SubFactor,__out WINBIO_UNIT_ID *UnitId,__out BOOLEAN *Match,__out WINBIO_REJECT_DETAIL *RejectDetail);																		
WinBioVerifyWithCallback(__in WINBIO_SESSION_HANDLE SessionHandle,__in WINBIO_IDENTITY *Identity,__in WINBIO_BIOMETRIC_SUBTYPE SubFactor,__in PWINBIO_VERIFY_CALLBACK VerifyCallback,__in_opt PVOID VerifyCallbackContext);																		
WinBioWait(__in WINBIO_SESSION_HANDLE SessionHandle);																		
WindowFromDC(    __in HDC hDC);																		
WindowFromPhysicalPoint(__in POINT Point);																		
WindowFromPoint(__in POINT Point);																		
WinExec(    __in LPCSTR lpCmdLine,    __in UINT uCmdShow    );																		
WinHelpA(    __in_opt HWND hWndMain,    __in_opt LPCSTR lpszHelp,    __in UINT uCommand,    __in ULONG_PTR dwData);																		
WinHelpW(    __in_opt HWND hWndMain,    __in_opt LPCWSTR lpszHelp,    __in UINT uCommand,    __in ULONG_PTR dwData);																		
WinHttpAddRequestHeaders(    IN HINTERNET hRequest,    __in_ecount(dwHeadersLength) LPCWSTR pwszHeaders,    IN DWORD dwHeadersLength,    IN DWORD dwModifiers	);																	
WinHttpCheckPlatform(void);																		
WinHttpCloseHandle(    IN HINTERNET hInternet	);																	
WinHttpConnect(    IN HINTERNET hSession,    IN LPCWSTR pswzServerName,    IN INTERNET_PORT nServerPort,    IN DWORD dwReserved);																		
WinHttpCrackUrl(    __in_ecount(dwUrlLength) LPCWSTR pwszUrl,    __in DWORD dwUrlLength,    __in DWORD dwFlags,    __inout LPURL_COMPONENTS lpUrlComponents	);																	
WinHttpCreateUrl(    __in LPURL_COMPONENTS lpUrlComponents,    __in DWORD dwFlags,    __out_ecount_part_opt(*pdwUrlLength, *pdwUrlLength) LPWSTR pwszUrl,    __inout LPDWORD pdwUrlLength	);																	
WinHttpDetectAutoProxyConfigUrl(    DWORD dwAutoDetectFlags,    __deref_out_opt LPWSTR * ppwstrAutoConfigUrl	);																	
WinHttpGetIEProxyConfigForCurrentUser(    IN OUT WINHTTP_CURRENT_USER_IE_PROXY_CONFIG * pProxyConfig	);																	
WinHttpGetProxyForUrl(    IN  HINTERNET                   hSession,    IN  LPCWSTR                     lpcwszUrl,    IN  WINHTTP_AUTOPROXY_OPTIONS * pAutoProxyOptions,    OUT WINHTTP_PROXY_INFO *        pProxyInfo	);																	
WinHttpIsHostInProxyBypassList(    __in const WINHTTP_PROXY_INFO *pProxyInfo,    __in_z PCWSTR pwszHost,    __in INTERNET_SCHEME tScheme,    __in INTERNET_PORT nPort,    __out BOOL *pfIsInBypassList);																		
WinHttpOpen(    __in_z_opt LPCWSTR pszAgentW,    __in DWORD dwAccessType,    __in_z_opt LPCWSTR pszProxyW,    __in_z_opt LPCWSTR pszProxyBypassW,    __in DWORD dwFlags);																		
WinHttpOpenRequest(    IN HINTERNET hConnect,    IN LPCWSTR pwszVerb,    IN LPCWSTR pwszObjectName,    IN LPCWSTR pwszVersion,    IN LPCWSTR pwszReferrer OPTIONAL,    IN LPCWSTR FAR * ppwszAcceptTypes OPTIONAL,    IN DWORD dwFlags);																		
WinHttpQueryDataAvailable(    IN HINTERNET hRequest,    __out_data_source(NETWORK) LPDWORD lpdwNumberOfBytesAvailable	);																	
WinHttpQueryHeaders(    IN     HINTERNET hRequest,    IN     DWORD     dwInfoLevel,    IN     LPCWSTR   pwszName OPTIONAL,    __out_bcount_part_opt(*lpdwBufferLength, *lpdwBufferLength) __out_data_source(NETWORK) LPVOID lpBuffer,    IN OUT LPDWORD   lpdwBufferLength,    IN OUT LPDWORD   lpdwIndex OPTIONAL	);																	
WinHttpQueryOption(    IN HINTERNET hInternet,    IN DWORD dwOption,    __out_bcount_part_opt(*lpdwBufferLength, *lpdwBufferLength) __out_data_source(NETWORK) LPVOID lpBuffer,    IN OUT LPDWORD lpdwBufferLength	);																	
WinHttpReadData(    IN HINTERNET hRequest,    __out_bcount_part(dwNumberOfBytesToRead, *lpdwNumberOfBytesRead) __out_data_source(NETWORK) LPVOID lpBuffer,    IN DWORD dwNumberOfBytesToRead,    OUT LPDWORD lpdwNumberOfBytesRead	);																	
WinHttpReceiveResponse(    IN HINTERNET hRequest,    IN LPVOID lpReserved);																		
WinHttpSendRequest(    IN HINTERNET hRequest,    __in_ecount_opt(dwHeadersLength) LPCWSTR lpszHeaders,    IN DWORD dwHeadersLength,    __in_bcount_opt(dwOptionalLength) LPVOID lpOptional,    IN DWORD dwOptionalLength,    IN DWORD dwTotalLength,    IN DWORD_PTR dwContext	);																	
WinHttpSetOption(    IN HINTERNET hInternet,    IN DWORD dwOption,    __in_awcount((dwOption != WINHTTP_OPTION_USERNAME &&                  dwOption != WINHTTP_OPTION_PASSWORD &&                  dwOption != WINHTTP_OPTION_PROXY_USERNAME &&                  dwOption != WINHTTP_OPTION_PROXY_PASSWORD &&                  dwOption != WINHTTP_OPTION_USER_AGENT),                 dwBufferLength)    __typefix(LPCWSTR) LPVOID lpBuffer,    IN DWORD dwBufferLength	);																	
WinHttpSetStatusCallback(    IN HINTERNET hInternet,    IN WINHTTP_STATUS_CALLBACK lpfnInternetCallback,    IN DWORD dwNotificationFlags,    IN DWORD_PTR dwReserved);																		
WinHttpSetTimeouts( IN HINTERNET hInternet,  IN int nResolveTimeout, IN int nConnectTimeout, IN int nSendTimeout, IN int nReceiveTimeout);																	
WinHttpTimeFromSystemTime( __in CONST SYSTEMTIME *pst, __out_bcount(WINHTTP_TIME_FORMAT_BUFSIZE) LPWSTR pwszTime );																	
WinHttpTimeToSystemTime( __in_z LPCWSTR pwszTime, __out SYSTEMTIME *pst );																	
WinHttpWriteData( IN HINTERNET hRequest, __in_bcount_opt(dwNumberOfBytesToWrite) LPCVOID lpBuffer, IN DWORD dwNumberOfBytesToWrite, OUT LPDWORD lpdwNumberOfBytesWritten	);																	
WintrustAddActionID(__in GUID *pgActionID, __in DWORD fdwFlags, __in CRYPT_REGISTER_ACTIONID *psProvInfo);																		
WintrustAddDefaultForUsage(__in const char *pszUsageOID, __in CRYPT_PROVIDER_REGDEFUSAGE *psDefUsage);																		
WintrustGetRegPolicyFlags(DWORD *pdwPolicyFlags);																		
WintrustLoadFunctionPointers(GUID *pgActionID, CRYPT_PROVIDER_FUNCTIONS *pPfns);																		
WintrustRemoveActionID(__in GUID *pgActionID);																		
WintrustSetDefaultIncludePEPageHashes( BOOL fIncludePEPageHashes );																		
WintrustSetRegPolicyFlags(DWORD dwPolicyFlags);																		
WlanHostedNetworkForceStart( __in HANDLE hClientHandle, __out_opt PWLAN_HOSTED_NETWORK_REASON pFailReason, __reserved  PVOID pvReserved);																		
WlanHostedNetworkForceStop( __in HANDLE hClientHandle, __out_opt PWLAN_HOSTED_NETWORK_REASON pFailReason, __reserved  PVOID pvReserved);																		
WlanHostedNetworkInitSettings(    __in        HANDLE                          hClientHandle,    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,    __reserved  PVOID                           pvReserved);																		
WlanHostedNetworkQueryProperty(    __in                                HANDLE                      hClientHandle,    __in                                WLAN_HOSTED_NETWORK_OPCODE  OpCode,    __out                               PDWORD                      pdwDataSize,    __deref_out_bcount(*pdwDataSize)    PVOID*                      ppvData,    __out                               PWLAN_OPCODE_VALUE_TYPE     pWlanOpcodeValueType,    __reserved  PVOID                                               pvReserved);																		
WlanHostedNetworkQuerySecondaryKey(    __in        HANDLE                          hClientHandle,    __out       PDWORD                          pdwKeyLength,    __deref_out_ecount(*pdwKeyLength)   PUCHAR  *ppucKeyData,    __out       PBOOL                           pbIsPassPhrase,    __out       PBOOL                           pbPersistent,    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,    __reserved  PVOID                           pvReserved);																		
WlanHostedNetworkQueryStatus(    __in        HANDLE                          hClientHandle,    __deref_out PWLAN_HOSTED_NETWORK_STATUS*    ppWlanHostedNetworkStatus,    __reserved  PVOID                           pvReserved);																		
WlanHostedNetworkRefreshSecuritySettings(    __in        HANDLE                          hClientHandle,    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,    __reserved  PVOID                           pvReserved);																		
WlanHostedNetworkSetProperty(    __in                        HANDLE                          hClientHandle,    __in                        WLAN_HOSTED_NETWORK_OPCODE      OpCode,    __in                        DWORD                           dwDataSize,    __in_bcount(dwDataSize)     PVOID                           pvData,    __out_opt                   PWLAN_HOSTED_NETWORK_REASON     pFailReason,    __reserved                  PVOID                           pvReserved);																		
WlanHostedNetworkSetSecondaryKey(    __in        HANDLE                          hClientHandle,    __in        DWORD                           dwKeyLength,    __in_bcount(dwKeyLength) PUCHAR             pucKeyData,    __in        BOOL                            bIsPassPhrase,    __in        BOOL                            bPersistent,    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,    __reserved  PVOID                           pvReserved);																		
WlanHostedNetworkStartUsing(    __in        HANDLE                          hClientHandle,    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,    __reserved  PVOID                           pvReserved);																		
WlanHostedNetworkStopUsing(    __in        HANDLE                          hClientHandle,    __out_opt   PWLAN_HOSTED_NETWORK_REASON     pFailReason,    __reserved  PVOID                           pvReserved);																		
WlanRegisterVirtualStationNotification(    __in        HANDLE hClientHandle,    __in        BOOL bRegister,    __reserved  PVOID pReserved);																		
WlxActivateUserShell(    PVOID                   pWlxContext,    PWSTR                   pszDesktopName,    PWSTR                   pszMprLogonScript,    PVOID                   pEnvironment    );																		
WlxDisconnectNotify (    PVOID                   pWlxContext    );																		
WlxDisplayLockedNotice(    PVOID                   pWlxContext    );																		
WlxDisplaySASNotice(    PVOID                   pWlxContext    );																		
WlxDisplayStatusMessage(    PVOID                   pWlxContext,    HDESK                   hDesktop,    DWORD                   dwOptions,    PWSTR                   pTitle,    PWSTR                   pMessage    );																		
WlxGetConsoleSwitchCredentials (    PVOID                   pWlxContext,    PVOID                   pCredInfo    );																		
WlxGetStatusMessage(    PVOID                   pWlxContext,    DWORD *                 pdwOptions,    PWSTR                   pMessage,    DWORD                   dwBufferSize    );																		
WlxInitialize(    LPWSTR                  lpWinsta,    HANDLE                  hWlx,    PVOID                   pvReserved,    PVOID                   pWinlogonFunctions,    PVOID *                 pWlxContext    );																		
WlxIsLockOk(    PVOID                   pWlxContext    );																		
WlxIsLogoffOk(    PVOID                   pWlxContext    );																		
WlxLoggedOnSAS(    PVOID                   pWlxContext,    DWORD                   dwSasType,    PVOID                   pReserved    );																		
WlxLoggedOutSAS(    PVOID                   pWlxContext,    DWORD                   dwSasType,    PLUID                   pAuthenticationId,    PSID                    pLogonSid,    PDWORD                  pdwOptions,    PHANDLE                 phToken,    PWLX_MPR_NOTIFY_INFO    pNprNotifyInfo,    PVOID *                 pProfile    );																		
WlxLogoff(    PVOID                   pWlxContext    );																		
WlxNegotiate(    DWORD                   dwWinlogonVersion,    PDWORD                  pdwDllVersion    );																		
WlxNetworkProviderLoad(    PVOID                   pWlxContext,    PWLX_MPR_NOTIFY_INFO    pNprNotifyInfo    );																		
WlxReconnectNotify (    PVOID                   pWlxContext    );																		
WlxRemoveStatusMessage(    PVOID                   pWlxContext    );																		
WlxScreenSaverNotify(    PVOID                   pWlxContext,    BOOL *                  pSecure);																		
WlxShutdown(    PVOID                   pWlxContext,    DWORD                   ShutdownType    );																		
WlxStartApplication(    PVOID                   pWlxContext,    PWSTR                   pszDesktopName,    PVOID                   pEnvironment,    PWSTR                   pszCmdLine    );																		
WlxWkstaLockedSAS(    PVOID                   pWlxContext,    DWORD                   dwSasType    );																		
Wow64DisableWow64FsRedirection (    __out PVOID *OldValue    );																		
Wow64EnableWow64FsRedirection (    __in BOOLEAN Wow64FsEnableRedirection    );																		
Wow64GetThreadContext(    __in    HANDLE hThread,    __inout PWOW64_CONTEXT lpContext    );																		
Wow64GetThreadSelectorEntry(    __in HANDLE hThread,    __in DWORD dwSelector,    __out PWOW64_LDT_ENTRY lpSelectorEntry    );																		
Wow64RevertWow64FsRedirection (    __in PVOID OlValue    );																		
Wow64SetThreadContext(    __in HANDLE hThread,    __in CONST WOW64_CONTEXT *lpContext    );																		
Wow64SuspendThread(    __in HANDLE hThread    );																		
WriteConsoleA(    __in HANDLE hConsoleOutput,    __in_ecount(nNumberOfCharsToWrite) CONST VOID *lpBuffer,    __in DWORD nNumberOfCharsToWrite,    __out_opt LPDWORD lpNumberOfCharsWritten,    __reserved LPVOID lpReserved);																		
WriteConsoleInputA(    __in HANDLE hConsoleInput,    __in_ecount(nLength) CONST INPUT_RECORD *lpBuffer,    __in DWORD nLength,    __out LPDWORD lpNumberOfEventsWritten    );																		
WriteConsoleInputW(    __in HANDLE hConsoleInput,    __in_ecount(nLength) CONST INPUT_RECORD *lpBuffer,    __in DWORD nLength,    __out LPDWORD lpNumberOfEventsWritten    );																		
WriteConsoleOutputA(    __in HANDLE hConsoleOutput,    __in_ecount(dwBufferSize.X * dwBufferSize.Y) CONST CHAR_INFO *lpBuffer,    __in COORD dwBufferSize,    __in COORD dwBufferCoord,    __inout PSMALL_RECT lpWriteRegion    );																		
WriteConsoleOutputAttribute(    __in HANDLE hConsoleOutput,    __in_ecount(nLength) CONST WORD *lpAttribute,    __in DWORD nLength,    __in COORD dwWriteCoord,    __out LPDWORD lpNumberOfAttrsWritten    );																		
WriteConsoleOutputCharacterA(    __in HANDLE hConsoleOutput,    __in_ecount(nLength) LPCSTR lpCharacter,    __in DWORD nLength,    __in COORD dwWriteCoord,    __out LPDWORD lpNumberOfCharsWritten    );																		
WriteConsoleOutputCharacterW(    __in HANDLE hConsoleOutput,    __in_ecount(nLength) LPCWSTR lpCharacter,    __in DWORD nLength,    __in COORD dwWriteCoord,    __out LPDWORD lpNumberOfCharsWritten    );																		
WriteConsoleOutputW(    __in HANDLE hConsoleOutput,    __in_ecount(dwBufferSize.X * dwBufferSize.Y) CONST CHAR_INFO *lpBuffer,    __in COORD dwBufferSize,    __in COORD dwBufferCoord,    __inout PSMALL_RECT lpWriteRegion    );																		
WriteConsoleW(    __in HANDLE hConsoleOutput,    __in_ecount(nNumberOfCharsToWrite) CONST VOID *lpBuffer,    __in DWORD nNumberOfCharsToWrite,    __out_opt LPDWORD lpNumberOfCharsWritten,    __reserved LPVOID lpReserved);																		
WriteEncryptedFileRaw(    __in     PFE_IMPORT_FUNC pfImportCallback,    __in_opt PVOID           pvCallbackContext,    __in     PVOID           pvContext    );																		
WriteFile(    __in        HANDLE hFile,    __in_bcount_opt(nNumberOfBytesToWrite) LPCVOID lpBuffer,    __in        DWORD nNumberOfBytesToWrite,    __out_opt   LPDWORD lpNumberOfBytesWritten,    __inout_opt LPOVERLAPPED lpOverlapped    );																		
WriteFileEx(    __in     HANDLE hFile,    __in_bcount_opt(nNumberOfBytesToWrite) LPCVOID lpBuffer,    __in     DWORD nNumberOfBytesToWrite,    __inout  LPOVERLAPPED lpOverlapped,    __in_opt LPOVERLAPPED_COMPLETION_ROUTINE lpCompletionRoutine    );																		
WriteFileGather(    __in       HANDLE hFile,    __in       FILE_SEGMENT_ELEMENT aSegmentArray[],    __in       DWORD nNumberOfBytesToWrite,    __reserved LPDWORD lpReserved,    __inout    LPOVERLAPPED lpOverlapped    );																		
WritePrinter(__in    HANDLE  hPrinter,__in_bcount(cbBuf)        LPVOID  pBuf,        DWORD   cbBuf,__out   LPDWORD pcWritten);																		
WritePrivateProfileSectionA(    __in_opt LPCSTR lpAppName,    __in_opt LPCSTR lpString,    __in_opt LPCSTR lpFileName    );																		
WritePrivateProfileSectionW(    __in_opt LPCWSTR lpAppName,    __in_opt LPCWSTR lpString,    __in_opt LPCWSTR lpFileName    );																		
WritePrivateProfileStringA(    __in_opt LPCSTR lpAppName,    __in_opt LPCSTR lpKeyName,    __in_opt LPCSTR lpString,    __in_opt LPCSTR lpFileName    );																		
WritePrivateProfileStringW(    __in_opt LPCWSTR lpAppName,    __in_opt LPCWSTR lpKeyName,    __in_opt LPCWSTR lpString,    __in_opt LPCWSTR lpFileName    );																		
WritePrivateProfileStructA(    __in     LPCSTR lpszSection,    __in     LPCSTR lpszKey,    __in_bcount_opt(uSizeStruct) LPVOID lpStruct,    __in     UINT     uSizeStruct,    __in_opt LPCSTR szFile    );																		
WritePrivateProfileStructW(    __in     LPCWSTR lpszSection,    __in     LPCWSTR lpszKey,    __in_bcount_opt(uSizeStruct) LPVOID lpStruct,    __in     UINT     uSizeStruct,    __in_opt LPCWSTR szFile    );																		
WriteProcessMemory(    __in      HANDLE hProcess,    __in      LPVOID lpBaseAddress,    __in_bcount(nSize) LPCVOID lpBuffer,    __in      SIZE_T nSize,    __out_opt SIZE_T * lpNumberOfBytesWritten    );																		
WriteProfileSectionA(    __in LPCSTR lpAppName,    __in LPCSTR lpString    );																		
WriteProfileSectionW(    __in LPCWSTR lpAppName,    __in LPCWSTR lpString    );																		
WriteProfileStringA(    __in_opt LPCSTR lpAppName,    __in_opt LPCSTR lpKeyName,    __in_opt LPCSTR lpString    );																		
WriteProfileStringW(    __in_opt LPCWSTR lpAppName,    __in_opt LPCWSTR lpKeyName,    __in_opt LPCWSTR lpString    );																		
WriteTapemark(    __in HANDLE hDevice,    __in DWORD dwTapemarkType,    __in DWORD dwTapemarkCount,    __in BOOL bImmediate    );																		
WsAbandonCall(    __in WS_SERVICE_PROXY* serviceProxy,     __in ULONG callId,     __in_opt WS_ERROR* error);																		
WsAbortChannel(    __in WS_CHANNEL* channel,     __in_opt WS_ERROR* error);																		
WsAbortListener(    __in WS_LISTENER* listener,     __in_opt WS_ERROR* error);																		
WsAbortServiceHost(    __in WS_SERVICE_HOST* serviceHost,     __in_opt WS_ERROR* error);																		
WsAbortServiceProxy(    __in WS_SERVICE_PROXY* serviceProxy,     __in_opt WS_ERROR* error);																		
WsAcceptChannel(    __in WS_LISTENER* listener,     __in WS_CHANNEL* channel,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsAddCustomHeader(    __in WS_MESSAGE* message,     __in const WS_ELEMENT_DESCRIPTION* headerDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in ULONG headerAttributes,     __in_opt WS_ERROR* error);																		
WsAddErrorString(    __in WS_ERROR* error,     __in const WS_STRING* string);																		
WsAddMappedHeader(    __in WS_MESSAGE* message,     __in const WS_XML_STRING* headerName,     __in WS_TYPE valueType,     __in WS_WRITE_OPTION writeOption,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsAddressMessage(    __in WS_MESSAGE* message,     __in_opt const WS_ENDPOINT_ADDRESS* address,     __in_opt WS_ERROR* error);																		
WsAlloc(    __in WS_HEAP* heap,     __in SIZE_T size,     __deref_out_bcount(size) void** ptr,     __in_opt WS_ERROR* error);																		
WsAsyncExecute(    __in WS_ASYNC_STATE* asyncState,     __in WS_ASYNC_FUNCTION operation,     __in WS_CALLBACK_MODEL callbackModel,     __in void* callbackState,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsCall(    __in WS_SERVICE_PROXY* serviceProxy,     __in const WS_OPERATION_DESCRIPTION* operation,     __in_opt const void** arguments,     __in WS_HEAP* heap,     __in_ecount_opt(callPropertyCount) const WS_CALL_PROPERTY* callProperties,     __in const ULONG callPropertyCount,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsCheckMustUnderstandHeaders(    __in WS_MESSAGE* message,     __in_opt WS_ERROR* error);																		
WsCloseChannel(    __in WS_CHANNEL* channel,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsCloseListener(    __in WS_LISTENER* listener,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsCloseServiceHost(    __in WS_SERVICE_HOST* serviceHost,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsCloseServiceProxy(    __in WS_SERVICE_PROXY* serviceProxy,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsCombineUrl(    __in const WS_STRING* baseUrl,     __in const WS_STRING* referenceUrl,     __in ULONG flags,     __in WS_HEAP* heap,     __out WS_STRING* resultUrl,     __in_opt WS_ERROR* error);																		
WsCopyError(    __in WS_ERROR* source,     __in WS_ERROR* destination);																		
WsCopyNode(    __in WS_XML_WRITER* writer,     __in WS_XML_READER* reader,     __in_opt WS_ERROR* error);																		
WsCreateChannel(    __in WS_CHANNEL_TYPE channelType,     __in WS_CHANNEL_BINDING channelBinding,     __in_ecount_opt(propertyCount) const WS_CHANNEL_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt const WS_SECURITY_DESCRIPTION* securityDescription,     __deref_out WS_CHANNEL** channel,     __in_opt WS_ERROR* error);																		
WsCreateChannelForListener(    __in WS_LISTENER* listener,     __in_ecount_opt(propertyCount) const WS_CHANNEL_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_CHANNEL** channel,     __in_opt WS_ERROR* error);																		
WsCreateError(    __in_ecount_opt(propertyCount) const WS_ERROR_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_ERROR** error);																		
WsCreateFaultFromError(    __in WS_ERROR* error,     __in HRESULT faultErrorCode,     __in WS_FAULT_DISCLOSURE faultDisclosure,     __in WS_HEAP* heap,     __out WS_FAULT* fault);																		
WsCreateHeap(    __in SIZE_T maxSize,     __in SIZE_T trimSize,     __in_opt const WS_HEAP_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_HEAP** heap,     __in_opt WS_ERROR* error);																		
WsCreateListener(    __in WS_CHANNEL_TYPE channelType,     __in WS_CHANNEL_BINDING channelBinding,     __in_ecount_opt(propertyCount) const WS_LISTENER_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt const WS_SECURITY_DESCRIPTION* securityDescription,     __deref_out WS_LISTENER** listener,     __in_opt WS_ERROR* error);																		
WsCreateMessage(    __in WS_ENVELOPE_VERSION envelopeVersion,     __in WS_ADDRESSING_VERSION addressingVersion,     __in_ecount_opt(propertyCount) const WS_MESSAGE_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_MESSAGE** message,     __in_opt WS_ERROR* error);																		
WsCreateMessageForChannel(    __in WS_CHANNEL* channel,     __in_ecount_opt(propertyCount) const WS_MESSAGE_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_MESSAGE** message,     __in_opt WS_ERROR* error);																		
WsCreateMetadata(    __in_ecount_opt(propertyCount) const WS_METADATA_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_METADATA** metadata,     __in_opt WS_ERROR* error);																		
WsCreateReader(    __in_ecount_opt(propertyCount) const WS_XML_READER_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_XML_READER** reader,     __in_opt WS_ERROR* error);																		
WsCreateServiceEndpointFromTemplate(    __in WS_CHANNEL_TYPE channelType,     __in const WS_SERVICE_ENDPOINT_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt const WS_STRING* addressUrl,     __in const WS_SERVICE_CONTRACT* contract,     __in WS_SERVICE_SECURITY_CALLBACK authorizationCallback,     __in WS_HEAP* heap,     __in WS_BINDING_TEMPLATE_TYPE templateType,     __in_bcount_opt(templateSize) void* templateValue,     __in ULONG templateSize,     __in const void* templateDescription,     __in ULONG templateDescriptionSize,     __deref_out WS_SERVICE_ENDPOINT** serviceEndpoint,     __in_opt WS_ERROR* error);																		
WsCreateServiceHost(    __in_ecount_opt(endpointCount) const WS_SERVICE_ENDPOINT** endpoints,     __in const USHORT endpointCount,     __in_ecount_opt(servicePropertyCount) const WS_SERVICE_PROPERTY* serviceProperties,     __in ULONG servicePropertyCount,     __deref_out WS_SERVICE_HOST** serviceHost,     __in_opt WS_ERROR* error);																		
WsCreateServiceProxy(    __in const WS_CHANNEL_TYPE channelType,     __in const WS_CHANNEL_BINDING channelBinding,     __in_opt const WS_SECURITY_DESCRIPTION* securityDescription,     __in_ecount_opt(propertyCount) const WS_PROXY_PROPERTY* properties,     __in const ULONG propertyCount,     __in_ecount_opt(channelPropertyCount) const WS_CHANNEL_PROPERTY* channelProperties,     __in const ULONG channelPropertyCount,     __deref_out WS_SERVICE_PROXY** serviceProxy,     __in_opt WS_ERROR* error);																		
WsCreateServiceProxyFromTemplate(    __in WS_CHANNEL_TYPE channelType,     __in_ecount_opt(propertyCount) const WS_PROXY_PROPERTY* properties,     __in const ULONG propertyCount,     __in WS_BINDING_TEMPLATE_TYPE templateType,     __in_bcount_opt(templateSize) void* templateValue,     __in ULONG templateSize,     __in const void* templateDescription,     __in ULONG templateDescriptionSize,     __deref_out WS_SERVICE_PROXY** serviceProxy,     __in_opt WS_ERROR* error);																		
WsCreateWriter(    __in_ecount_opt(propertyCount) const WS_XML_WRITER_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_XML_WRITER** writer,     __in_opt WS_ERROR* error);																		
WsCreateXmlBuffer(    __in WS_HEAP* heap,     __in_ecount_opt(propertyCount) const WS_XML_BUFFER_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_XML_BUFFER** buffer,     __in_opt WS_ERROR* error);																		
WsCreateXmlSecurityToken(    __in_opt WS_XML_BUFFER* tokenXml,     __in_opt WS_SECURITY_KEY_HANDLE* tokenKey,     __in_ecount_opt(propertyCount) const WS_XML_SECURITY_TOKEN_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_SECURITY_TOKEN** token,     __in_opt WS_ERROR* error);																		
WsDateTimeToFileTime(    __in const WS_DATETIME* dateTime,     __out FILETIME* fileTime,     __in_opt WS_ERROR* error);																		
WSDCreateDeviceHost(__in LPCWSTR pszLocalId,IWSDXMLContext* pContext,__deref_out IWSDDeviceHost** ppDeviceHost);																		
WSDCreateDeviceHost2(__in LPCWSTR pszLocalId,IWSDXMLContext* pContext,__in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,DWORD dwConfigParamCount,__deref_out IWSDDeviceHost** ppDeviceHost);																		
WSDCreateDeviceHostAdvanced(__in LPCWSTR pszLocalId,IWSDXMLContext* pContext,__in_ecount_opt(dwHostAddressCount) IWSDAddress** ppHostAddresses,DWORD dwHostAddressCount,__deref_out IWSDDeviceHost** ppDeviceHost);																		
WSDCreateDeviceProxy(__in LPCWSTR pszDeviceId,__in LPCWSTR pszLocalId,IWSDXMLContext* pContext,__deref_out IWSDDeviceProxy** ppDeviceProxy);																		
WSDCreateDeviceProxy2(__in LPCWSTR pszDeviceId,__in LPCWSTR pszLocalId,IWSDXMLContext* pContext,__in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,DWORD dwConfigParamCount,__deref_out IWSDDeviceProxy** ppDeviceProxy);																		
WSDCreateDeviceProxyAdvanced(__in LPCWSTR pszDeviceId,IWSDAddress* pDeviceAddress,__in LPCWSTR pszLocalId,IWSDXMLContext* pContext,__deref_out IWSDDeviceProxy** ppDeviceProxy);																		
WSDCreateDiscoveryProvider(IWSDXMLContext* pContext,__deref_out IWSDiscoveryProvider** ppProvider);																		
WSDCreateDiscoveryProvider2(IWSDXMLContext* pContext,__in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,DWORD dwConfigParamCount,__deref_out IWSDiscoveryProvider** ppProvider);																		
WSDCreateDiscoveryPublisher(IWSDXMLContext* pContext,__deref_out IWSDiscoveryPublisher** ppPublisher);																		
WSDCreateDiscoveryPublisher2(IWSDXMLContext* pContext,__in_ecount_opt(dwConfigParamCount) WSD_CONFIG_PARAM* pConfigParams,DWORD dwConfigParamCount,__deref_out IWSDiscoveryPublisher** ppPublisher);																		
WSDCreateHttpAddress(__deref_out IWSDHttpAddress** ppAdress);																		
WSDCreateHttpMessageParameters(__deref_out IWSDHttpMessageParameters** ppTxParams);																		
WSDCreateOutboundAttachment(__deref_out IWSDOutboundAttachment** ppAttachment);																		
WSDCreateUdpAddress(__deref_out IWSDUdpAddress** ppAddress);																		
WSDCreateUdpMessageParameters(IWSDUdpMessageParameters** ppTxParams);																		
WsDecodeUrl(    __in const WS_STRING* url,     __in ULONG flags,     __in WS_HEAP* heap,     __deref_out WS_URL** outUrl,     __in_opt WS_ERROR* error);																		
WSDGenerateFault(__in LPCWSTR pszCode,__in_opt LPCWSTR pszSubCode,__in LPCWSTR pszReason,__in_opt LPCWSTR pszDetail,__in IWSDXMLContext* pContext,__deref_out WSD_SOAP_FAULT** ppFault);																		
WSDGenerateFaultEx(__in WSDXML_NAME* pCode, __in_opt WSDXML_NAME* pSubCode, __in WSD_LOCALIZED_STRING_LIST* pReasons, __in_opt LPCWSTR pszDetail, __deref_out WSD_SOAP_FAULT** ppFault);																		
WSDGetConfigurationOption(DWORD dwOption,__out_bcount(cbOutBuffer) LPVOID pVoid,DWORD cbOutBuffer);																		
WSDSetConfigurationOption(DWORD dwOption,__in_bcount(cbInBuffer) LPVOID pVoid,DWORD cbInBuffer);																		
WSDUriDecode(__in_ecount(cchSource) LPCWSTR source,__in DWORD cchSource,__out_ecount(*cchDestOut) LPWSTR *destOut,__out_opt DWORD *cchDestOut);																		
WSDUriEncode(__in_ecount(cchSource) LPCWSTR source,__in DWORD cchSource,__out_ecount(*cchDestOut) LPWSTR *destOut,__out_opt DWORD *cchDestOut);																		
WSDXMLAddChild(WSDXML_ELEMENT* pParent,WSDXML_ELEMENT* pChild);																		
WSDXMLAddSibling(WSDXML_ELEMENT* pFirst,WSDXML_ELEMENT* pSecond);																		
WSDXMLBuildAnyForSingleElement(WSDXML_NAME* pElementName, __in_opt LPCWSTR pszText, WSDXML_ELEMENT** ppAny);																		
WSDXMLCleanupElement(WSDXML_ELEMENT* pAny);    																		
WSDXMLCreateContext(__deref_out IWSDXMLContext** ppContext);																		
WSDXMLGetNameFromBuiltinNamespace(__in LPCWSTR pszNamespace,__in LPCWSTR pszName,__deref_out WSDXML_NAME** ppName);																		
WSDXMLGetValueFromAny(__in LPCWSTR pszNamespace,__in LPCWSTR pszName, WSDXML_ELEMENT* pAny, LPCWSTR* ppszValue);																		
WsEncodeUrl(    __in const WS_URL* url,     __in ULONG flags,     __in WS_HEAP* heap,     __out WS_STRING* outUrl,     __in_opt WS_ERROR* error);																		
WsEndReaderCanonicalization(    __in WS_XML_READER* reader,     __in_opt WS_ERROR* error);																		
WsEndWriterCanonicalization(    __in WS_XML_WRITER* writer,     __in_opt WS_ERROR* error);																		
WsFileTimeToDateTime(    __in const FILETIME* fileTime,     __out WS_DATETIME* dateTime,     __in_opt WS_ERROR* error);																		
WsFillBody(    __in WS_MESSAGE* message,     __in ULONG minSize,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsFillReader(    __in WS_XML_READER* reader,     __in ULONG minSize,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsFindAttribute(    __in WS_XML_READER* reader,     __in const WS_XML_STRING* localName,     __in const WS_XML_STRING* ns,     __in BOOL required,     __out ULONG* attributeIndex,     __in_opt WS_ERROR* error);																		
WsFlushBody(    __in WS_MESSAGE* message,     __in ULONG minSize,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsFlushWriter(    __in WS_XML_WRITER* writer,     __in ULONG minSize,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsFreeChannel(__in WS_CHANNEL* channel);																		
WsFreeHeap(__in WS_HEAP* heap);																		
WsFreeListener(__in WS_LISTENER* listener);																		
WsFreeMessage(__in WS_MESSAGE* message);																		
WsFreeMetadata(__in WS_METADATA* metadata);																		
WsFreeReader(__in WS_XML_READER* reader);																		
WsFreeSecurityToken(__in WS_SECURITY_TOKEN* token);																		
WsFreeServiceHost(__in WS_SERVICE_HOST* serviceHost);																		
WsFreeServiceProxy(__in WS_SERVICE_PROXY* serviceProxy);																		
WsFreeWriter(__in WS_XML_WRITER* writer);																		
WsGetChannelProperty(    __in WS_CHANNEL* channel,     __in WS_CHANNEL_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetCustomHeader(    __in WS_MESSAGE* message,     __in const WS_ELEMENT_DESCRIPTION* customHeaderDescription,     __in WS_REPEATING_HEADER_OPTION repeatingOption,     __in ULONG headerIndex,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __out_opt ULONG* headerAttributes,     __in_opt WS_ERROR* error);																		
WsGetDictionary(    __in WS_ENCODING encoding,     __deref_out_opt WS_XML_DICTIONARY** dictionary,     __in_opt WS_ERROR* error);																		
WsGetErrorProperty(    __in WS_ERROR* error,     __in WS_ERROR_PROPERTY_ID id,     __out_bcount(bufferSize) void* buffer,     __in ULONG bufferSize);																		
WsGetErrorString(    __in WS_ERROR* error,     __in ULONG index,     __out WS_STRING* string);																		
WsGetFaultErrorDetail(    __in WS_ERROR* error,     __in const WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize);																		
WsGetFaultErrorProperty(    __in WS_ERROR* error,     __in WS_FAULT_ERROR_PROPERTY_ID id,     __out_bcount(bufferSize) void* buffer,     __in ULONG bufferSize);																		
WsGetHeader(    __in WS_MESSAGE* message,     __in WS_HEADER_TYPE headerType,     __in WS_TYPE valueType,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetHeaderAttributes(    __in WS_MESSAGE* message,     __in WS_XML_READER* reader,     __out ULONG* headerAttributes,     __in_opt WS_ERROR* error);																		
WsGetHeapProperty(    __in WS_HEAP* heap,     __in WS_HEAP_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetListenerProperty(    __in WS_LISTENER* listener,     __in WS_LISTENER_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetMappedHeader(    __in WS_MESSAGE* message,     __in const WS_XML_STRING* headerName,     __in WS_REPEATING_HEADER_OPTION repeatingOption,     __in ULONG headerIndex,     __in WS_TYPE valueType,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetMessageProperty(    __in WS_MESSAGE* message,     __in WS_MESSAGE_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetMetadataEndpoints(    __in WS_METADATA* metadata,     __out WS_METADATA_ENDPOINTS* endpoints,     __in_opt WS_ERROR* error);																		
WsGetMetadataProperty(    __in WS_METADATA* metadata,     __in WS_METADATA_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetMissingMetadataDocumentAddress(    __in WS_METADATA* metadata,     __deref_out_opt WS_ENDPOINT_ADDRESS** address,     __in_opt WS_ERROR* error);																		
WsGetNamespaceFromPrefix(    __in WS_XML_READER* reader,     __in const WS_XML_STRING* prefix,     __in BOOL required,     __deref_out const WS_XML_STRING** ns,     __in_opt WS_ERROR* error);																		
WsGetOperationContextProperty(    __in const WS_OPERATION_CONTEXT* context,     __in const WS_OPERATION_CONTEXT_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetPolicyAlternativeCount(    __in WS_POLICY* policy,     __out ULONG* count,     __in_opt WS_ERROR* error);																		
WsGetPolicyProperty(    __in WS_POLICY* policy,     __in WS_POLICY_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetPrefixFromNamespace(    __in WS_XML_WRITER* writer,     __in const WS_XML_STRING* ns,     __in BOOL required,     __deref_out const WS_XML_STRING** prefix,     __in_opt WS_ERROR* error);																		
WsGetReaderNode(    __in WS_XML_READER* xmlReader,     __deref_out const WS_XML_NODE** node,     __in_opt WS_ERROR* error);																		
WsGetReaderPosition(    __in WS_XML_READER* reader,     __out WS_XML_NODE_POSITION* nodePosition,     __in_opt WS_ERROR* error);																		
WsGetReaderProperty(    __in WS_XML_READER* reader,     __in WS_XML_READER_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetSecurityContextProperty(    __in WS_SECURITY_CONTEXT* securityContext,     __in WS_SECURITY_CONTEXT_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetSecurityTokenProperty(    __in WS_SECURITY_TOKEN* securityToken,     __in WS_SECURITY_TOKEN_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_HEAP* heap,     __in_opt WS_ERROR* error);																		
WsGetServiceHostProperty(    __in WS_SERVICE_HOST* serviceHost,     __in const WS_SERVICE_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetServiceProxyProperty(    __in WS_SERVICE_PROXY* serviceProxy,     __in const WS_PROXY_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetWriterPosition(    __in WS_XML_WRITER* writer,     __out WS_XML_NODE_POSITION* nodePosition,     __in_opt WS_ERROR* error);																		
WsGetWriterProperty(    __in WS_XML_WRITER* writer,     __in WS_XML_WRITER_PROPERTY_ID id,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsGetXmlAttribute(    __in WS_XML_READER* reader,     __in const WS_XML_STRING* localName,     __in WS_HEAP* heap,     __deref_out_ecount_opt(*valueCharCount) WCHAR** valueChars,     __out ULONG* valueCharCount,     __in_opt WS_ERROR* error);																		
WsInitializeMessage(    __in WS_MESSAGE* message,     __in WS_MESSAGE_INITIALIZATION initialization,     __in_opt WS_MESSAGE* sourceMessage,     __in_opt WS_ERROR* error);																		
WsMarkHeaderAsUnderstood(    __in WS_MESSAGE* message,     __in const WS_XML_NODE_POSITION* headerPosition,     __in_opt WS_ERROR* error);																		
WsMatchPolicyAlternative(    __in WS_POLICY* policy,     __in ULONG alternativeIndex,     __in WS_POLICY_CONSTRAINTS* policyConstraints,     __in BOOL matchRequired,     __in WS_HEAP* heap,     __in_opt WS_ERROR* error);																		
WsMoveReader(    __in WS_XML_READER* reader,     __in WS_MOVE_TO moveTo,     __out_opt BOOL* found,     __in_opt WS_ERROR* error);																		
WsMoveWriter(    __in WS_XML_WRITER* writer,     __in WS_MOVE_TO moveTo,     __out_opt BOOL* found,     __in_opt WS_ERROR* error);																		
WsOpenChannel(    __in WS_CHANNEL* channel,     __in const WS_ENDPOINT_ADDRESS* endpointAddress,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsOpenListener(    __in WS_LISTENER* listener,     __in const WS_STRING* url,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsOpenServiceHost(    __in WS_SERVICE_HOST* serviceHost,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsOpenServiceProxy(    __in WS_SERVICE_PROXY* serviceProxy,     __in const WS_ENDPOINT_ADDRESS* address,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WspiapiClone (__in  WORD wPort,__in  struct addrinfo *ptResult);																		
WspiapiFreeAddrInfo (__in  struct addrinfo *ai);																		
WspiapiGetAddrInfo(__in_opt const char *nodename,__in_opt const char *servname,__in_opt const struct addrinfo *hints,__deref_out struct addrinfo **res);																		
WspiapiGetNameInfo (__in_bcount(salen) const struct sockaddr *sa,__in  socklen_t  salen,__out_bcount(hostlen) char  *host,__in  size_t   hostlen,__out_bcount(servlen) char  *serv,__in  size_t servlen,__in  int  flags);																		
WspiapiLegacyFreeAddrInfo(__in  struct addrinfo *ptHead);																		
WspiapiLegacyGetAddrInfo(__in const char *pszNodeName,__in const char *pszServiceName,__in const struct addrinfo *ptHints,__deref_out struct addrinfo **pptResult);																		
WspiapiLegacyGetNameInfo(__in_bcount(tSocketLength) const struct sockaddr *ptSocketAddress,__in socklen_t tSocketLength,__out_bcount(tNodeLength) char *pszNodeName,__in  size_t  tNodeLength,__out_bcount(tServiceLength) char *pszServiceName,__in size_t tServiceLength,__in int iFlags);																		
WspiapiLookupNode(__in  const char *pszNodeName,__in  int iSocketType,__in  int iProtocol,__in  WORD wPort,__in  BOOL bAI_CANONNAME,__deref_out struct addrinfo **pptResult);																		
WspiapiNewAddrInfo (__in  int iSocketType,__in  int  iProtocol,__in  WORD wPort,__in  DWORD  dwAddress);																		
WspiapiParseV4Address (__in  const char * pszAddress,__out PDWORD pdwAddress);																		
WspiapiQueryDNS(__in  const char  *pszNodeName,__in  int  iSocketType,__in  int iProtocol,__in  WORD wPort,__out char pszAlias[NI_MAXHOST],__deref_out struct addrinfo **pptResult);																		
WspiapiStrdup (__in  const char * pszString);																		
WsPullBytes(    __in WS_XML_WRITER* writer,     __in WS_PULL_BYTES_CALLBACK callback,     __in_opt void* callbackState,     __in_opt WS_ERROR* error);																		
WsPushBytes(    __in WS_XML_WRITER* writer,     __in WS_PUSH_BYTES_CALLBACK callback,     __in_opt void* callbackState,     __in_opt WS_ERROR* error);																		
WsReadArray(    __in WS_XML_READER* reader,     __in const WS_XML_STRING* localName,     __in const WS_XML_STRING* ns,     __in WS_VALUE_TYPE valueType,     __out_bcount_opt(arraySize) void* array,     __in ULONG arraySize,     __in ULONG itemOffset,     __in ULONG itemCount,     __out ULONG* actualItemCount,     __in_opt WS_ERROR* error);																		
WsReadAttribute(    __in WS_XML_READER* reader,     __in const WS_ATTRIBUTE_DESCRIPTION* attributeDescription,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsReadBody(    __in WS_MESSAGE* message,     __in const WS_ELEMENT_DESCRIPTION* bodyDescription,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsReadBytes(    __in WS_XML_READER* reader,     __out_bcount_part(maxByteCount, *actualByteCount) void* bytes,     __in ULONG maxByteCount,     __out ULONG* actualByteCount,     __in_opt WS_ERROR* error);																		
WsReadChars(    __in WS_XML_READER* reader,     __out_ecount_part(maxCharCount, *actualCharCount) WCHAR* chars,     __in ULONG maxCharCount,     __out ULONG* actualCharCount,     __in_opt WS_ERROR* error);																		
WsReadCharsUtf8(    __in WS_XML_READER* reader,     __out_ecount_part(maxByteCount, *actualByteCount) BYTE* bytes,     __in ULONG maxByteCount,     __out ULONG* actualByteCount,     __in_opt WS_ERROR* error);																		
WsReadElement(    __in WS_XML_READER* reader,     __in const WS_ELEMENT_DESCRIPTION* elementDescription,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsReadEndAttribute(    __in WS_XML_READER* reader,     __in_opt WS_ERROR* error);																		
WsReadEndElement(    __in WS_XML_READER* reader,     __in_opt WS_ERROR* error);																		
WsReadEndpointAddressExtension(    __in WS_XML_READER* reader,     __in WS_ENDPOINT_ADDRESS* endpointAddress,     __in WS_ENDPOINT_ADDRESS_EXTENSION_TYPE extensionType,     __in WS_READ_OPTION readOption,     __in WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsReadEnvelopeEnd(    __in WS_MESSAGE* message,     __in_opt WS_ERROR* error);																		
WsReadEnvelopeStart(    __in WS_MESSAGE* message,     __in WS_XML_READER* reader,     __in_opt WS_MESSAGE_DONE_CALLBACK doneCallback,     __in_opt void* doneCallbackState,     __in_opt WS_ERROR* error);																		
WsReadMessageEnd(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* message,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsReadMessageStart(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* message,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsReadMetadata(    __in WS_METADATA* metadata,     __in WS_XML_READER* reader,     __in const WS_STRING* url,     __in_opt WS_ERROR* error);																		
WsReadNode(    __in WS_XML_READER* reader,     __in_opt WS_ERROR* error);																		
WsReadQualifiedName(    __in WS_XML_READER* reader,     __in WS_HEAP* heap,     __out_opt WS_XML_STRING* prefix,     __out WS_XML_STRING* localName,     __out_opt WS_XML_STRING* ns,     __in_opt WS_ERROR* error);																		
WsReadStartAttribute(    __in WS_XML_READER* reader,     __in ULONG attributeIndex,     __in_opt WS_ERROR* error);																		
WsReadStartElement(    __in WS_XML_READER* reader,     __in_opt WS_ERROR* error);																		
WsReadToStartElement(    __in WS_XML_READER* reader,     __in_opt const WS_XML_STRING* localName,     __in_opt const WS_XML_STRING* ns,     __out_opt BOOL* found,     __in_opt WS_ERROR* error);																		
WsReadType(    __in WS_XML_READER* reader,     __in WS_TYPE_MAPPING typeMapping,     __in WS_TYPE type,     __in_opt const void* typeDescription,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsReadValue(    __in WS_XML_READER* reader,     __in WS_VALUE_TYPE valueType,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsReadXmlBuffer(    __in WS_XML_READER* reader,     __in WS_HEAP* heap,     __deref_out WS_XML_BUFFER** xmlBuffer,     __in_opt WS_ERROR* error);																		
WsReadXmlBufferFromBytes(    __in WS_XML_READER* reader,     __in_opt const WS_XML_READER_ENCODING* encoding,     __in_ecount_opt(propertyCount) const WS_XML_READER_PROPERTY* properties,     __in ULONG propertyCount,     __in_bcount(byteCount) const void* bytes,     __in ULONG byteCount,     __in WS_HEAP* heap,     __deref_out WS_XML_BUFFER** xmlBuffer,     __in_opt WS_ERROR* error);																		
WsReceiveMessage(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* message,     __in_ecount(messageDescriptionCount) const WS_MESSAGE_DESCRIPTION** messageDescriptions,     __in ULONG messageDescriptionCount,     __in WS_RECEIVE_OPTION receiveOption,     __in WS_READ_OPTION readBodyOption,     __in_opt WS_HEAP* heap,     __out_bcount(valueSize) void* value,     __in ULONG valueSize,     __out_opt ULONG* index,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsRegisterOperationForCancel(    __in const WS_OPERATION_CONTEXT* context,     __in WS_OPERATION_CANCEL_CALLBACK cancelCallback,     __in_opt WS_OPERATION_FREE_STATE_CALLBACK freestateCallback,     __in_opt void* userState,     __in_opt WS_ERROR* error);																		
WsRemoveCustomHeader(    __in WS_MESSAGE* message,     __in const WS_XML_STRING* headerName,     __in const WS_XML_STRING* headerNs,     __in_opt WS_ERROR* error);																		
WsRemoveHeader(    __in WS_MESSAGE* message,     __in WS_HEADER_TYPE headerType,     __in_opt WS_ERROR* error);																		
WsRemoveMappedHeader(    __in WS_MESSAGE* message,     __in const WS_XML_STRING* headerName,     __in_opt WS_ERROR* error);																		
WsRemoveNode(    __in const WS_XML_NODE_POSITION* nodePosition,     __in_opt WS_ERROR* error);																		
WsRequestReply(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* requestMessage,     __in const WS_MESSAGE_DESCRIPTION* requestMessageDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount_opt(requestBodyValueSize) const void* requestBodyValue,     __in ULONG requestBodyValueSize,     __in WS_MESSAGE* replyMessage,     __in const WS_MESSAGE_DESCRIPTION* replyMessageDescription,     __in WS_READ_OPTION readOption,     __in_opt WS_HEAP* heap,     __out_bcount_opt(valueSize) void* value,     __in ULONG valueSize,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsRequestSecurityToken(    __in WS_CHANNEL* channel,     __in_ecount_opt(propertyCount) const WS_REQUEST_SECURITY_TOKEN_PROPERTY* properties,     __in ULONG propertyCount,     __deref_out WS_SECURITY_TOKEN** token,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsResetError(__in WS_ERROR* error);																		
WsResetHeap(    __in WS_HEAP* heap,     __in_opt WS_ERROR* error);																		
WsResetListener(    __in WS_LISTENER* listener,     __in_opt WS_ERROR* error);																		
WsResetMessage(    __in WS_MESSAGE* message,     __in_opt WS_ERROR* error);																		
WsResetMetadata(    __in WS_METADATA* metadata,     __in_opt WS_ERROR* error);																		
WsResetServiceHost(    __in WS_SERVICE_HOST* serviceHost,     __in_opt WS_ERROR* error);																		
WsResetServiceProxy(    __in WS_SERVICE_PROXY* serviceProxy,     __in_opt WS_ERROR* error);																		
WsRevokeSecurityContext(    __in WS_SECURITY_CONTEXT* securityContext,     __in_opt WS_ERROR* error);																		
WsSendFaultMessageForError(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* replyMessage,     __in WS_ERROR* faultError,     __in HRESULT faultErrorCode,     __in WS_FAULT_DISCLOSURE faultDisclosure,     __in WS_MESSAGE* requestMessage,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsSendMessage(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* message,     __in const WS_MESSAGE_DESCRIPTION* messageDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount_opt(bodyValueSize) const void* bodyValue,     __in ULONG bodyValueSize,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsSendReplyMessage(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* replyMessage,     __in const WS_MESSAGE_DESCRIPTION* replyMessageDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount_opt(replyBodyValueSize) const void* replyBodyValue,     __in ULONG replyBodyValueSize,     __in WS_MESSAGE* requestMessage,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsSetChannelProperty(    __in WS_CHANNEL* channel,     __in WS_CHANNEL_PROPERTY_ID id,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsSetErrorProperty(    __in WS_ERROR* error,     __in WS_ERROR_PROPERTY_ID id,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize);																		
WsSetFaultErrorDetail(    __in WS_ERROR* error,     __in const WS_FAULT_DETAIL_DESCRIPTION* faultDetailDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount_opt(valueSize) const void* value,     __in ULONG valueSize);																		
WsSetFaultErrorProperty(    __in WS_ERROR* error,     __in WS_FAULT_ERROR_PROPERTY_ID id,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize);																		
WsSetHeader(    __in WS_MESSAGE* message,     __in WS_HEADER_TYPE headerType,     __in WS_TYPE valueType,     __in WS_WRITE_OPTION writeOption,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsSetInput(    __in WS_XML_READER* reader,     __in_opt const WS_XML_READER_ENCODING* encoding,     __in_opt const WS_XML_READER_INPUT* input,     __in_ecount_opt(propertyCount) const WS_XML_READER_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt WS_ERROR* error);																		
WsSetInputToBuffer(    __in WS_XML_READER* reader,     __in WS_XML_BUFFER* buffer,     __in_ecount_opt(propertyCount) const WS_XML_READER_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt WS_ERROR* error);																		
WsSetListenerProperty(    __in WS_LISTENER* listener,     __in WS_LISTENER_PROPERTY_ID id,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsSetMessageProperty(    __in WS_MESSAGE* message,     __in WS_MESSAGE_PROPERTY_ID id,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsSetOutput(    __in WS_XML_WRITER* writer,     __in_opt const WS_XML_WRITER_ENCODING* encoding,     __in_opt const WS_XML_WRITER_OUTPUT* output,     __in_ecount_opt(propertyCount) const WS_XML_WRITER_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt WS_ERROR* error);																		
WsSetOutputToBuffer(    __in WS_XML_WRITER* writer,     __in WS_XML_BUFFER* buffer,     __in_ecount_opt(propertyCount) const WS_XML_WRITER_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt WS_ERROR* error);																		
WsSetReaderPosition(    __in WS_XML_READER* reader,     __in const WS_XML_NODE_POSITION* nodePosition,     __in_opt WS_ERROR* error);																		
WsSetWriterPosition(    __in WS_XML_WRITER* writer,     __in const WS_XML_NODE_POSITION* nodePosition,     __in_opt WS_ERROR* error);																		
WsShutdownSessionChannel(    __in WS_CHANNEL* channel,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsSkipNode(    __in WS_XML_READER* reader,     __in_opt WS_ERROR* error);																		
WsStartReaderCanonicalization(    __in WS_XML_READER* reader,     __in WS_WRITE_CALLBACK writeCallback,     __in void* writeCallbackState,     __in_ecount_opt(propertyCount) const WS_XML_CANONICALIZATION_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt WS_ERROR* error);																		
WsStartWriterCanonicalization(    __in WS_XML_WRITER* writer,     __in WS_WRITE_CALLBACK writeCallback,     __in void* writeCallbackState,     __in_ecount_opt(propertyCount) const WS_XML_CANONICALIZATION_PROPERTY* properties,     __in ULONG propertyCount,     __in_opt WS_ERROR* error);																		
WsTrimXmlWhitespace(    __in_ecount(charCount) WCHAR* chars,     __in ULONG charCount,     __deref_out_ecount(*trimmedCount) WCHAR** trimmedChars,     __out ULONG* trimmedCount,     __in_opt WS_ERROR* error);																		
WsVerifyXmlNCName(    __in_ecount(ncNameCharCount) const WCHAR* ncNameChars,     __in ULONG ncNameCharCount,     __in_opt WS_ERROR* error);																		
WsWriteArray(    __in WS_XML_WRITER* writer,     __in const WS_XML_STRING* localName,     __in const WS_XML_STRING* ns,     __in WS_VALUE_TYPE valueType,     __in_bcount_opt(arraySize) const void* array,     __in ULONG arraySize,     __in ULONG itemOffset,     __in ULONG itemCount,     __in_opt WS_ERROR* error);																		
WsWriteAttribute(    __in WS_XML_WRITER* writer,     __in const WS_ATTRIBUTE_DESCRIPTION* attributeDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount_opt(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsWriteBody(    __in WS_MESSAGE* message,     __in const WS_ELEMENT_DESCRIPTION* bodyDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsWriteBytes(    __in WS_XML_WRITER* writer,     __in_bcount(byteCount) const void* bytes,     __in ULONG byteCount,     __in_opt WS_ERROR* error);																		
WsWriteChars(    __in WS_XML_WRITER* writer,     __in_ecount(charCount) const WCHAR* chars,     __in ULONG charCount,     __in_opt WS_ERROR* error);																		
WsWriteCharsUtf8(    __in WS_XML_WRITER* writer,     __in_ecount(byteCount) const BYTE* bytes,     __in ULONG byteCount,     __in_opt WS_ERROR* error);																		
WsWriteElement(    __in WS_XML_WRITER* writer,     __in const WS_ELEMENT_DESCRIPTION* elementDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount_opt(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsWriteEndAttribute(    __in WS_XML_WRITER* writer,     __in_opt WS_ERROR* error);																		
WsWriteEndCData(    __in WS_XML_WRITER* writer,     __in_opt WS_ERROR* error);																		
WsWriteEndElement(    __in WS_XML_WRITER* writer,     __in_opt WS_ERROR* error);																		
WsWriteEndStartElement(    __in WS_XML_WRITER* writer,     __in_opt WS_ERROR* error);																		
WsWriteEnvelopeEnd(    __in WS_MESSAGE* message,     __in_opt WS_ERROR* error);																		
WsWriteEnvelopeStart(    __in WS_MESSAGE* message,     __in WS_XML_WRITER* writer,     __in_opt WS_MESSAGE_DONE_CALLBACK doneCallback,     __in_opt void* doneCallbackState,     __in_opt WS_ERROR* error);																		
WsWriteMessageEnd(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* message,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsWriteMessageStart(    __in WS_CHANNEL* channel,     __in WS_MESSAGE* message,     __in_opt const WS_ASYNC_CONTEXT* asyncContext,     __in_opt WS_ERROR* error);																		
WsWriteNode(    __in WS_XML_WRITER* writer,     __in const WS_XML_NODE* node,     __in_opt WS_ERROR* error);																		
WsWriteQualifiedName(    __in WS_XML_WRITER* writer,     __in_opt const WS_XML_STRING* prefix,     __in const WS_XML_STRING* localName,     __in_opt const WS_XML_STRING* ns,     __in_opt WS_ERROR* error);																		
WsWriteStartAttribute(    __in WS_XML_WRITER* writer,     __in_opt const WS_XML_STRING* prefix,     __in const WS_XML_STRING* localName,     __in const WS_XML_STRING* ns,     __in BOOL singleQuote,     __in_opt WS_ERROR* error);																		
WsWriteStartCData(    __in WS_XML_WRITER* writer,     __in_opt WS_ERROR* error);																		
WsWriteStartElement(    __in WS_XML_WRITER* writer,     __in_opt const WS_XML_STRING* prefix,     __in const WS_XML_STRING* localName,     __in const WS_XML_STRING* ns,     __in_opt WS_ERROR* error);																		
WsWriteText(    __in WS_XML_WRITER* writer,     __in const WS_XML_TEXT* text,     __in_opt WS_ERROR* error);																		
WsWriteType(    __in WS_XML_WRITER* writer,     __in WS_TYPE_MAPPING typeMapping,     __in WS_TYPE type,     __in_opt const void* typeDescription,     __in WS_WRITE_OPTION writeOption,     __in_bcount_opt(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsWriteValue(    __in WS_XML_WRITER* writer,     __in WS_VALUE_TYPE valueType,     __in_bcount(valueSize) const void* value,     __in ULONG valueSize,     __in_opt WS_ERROR* error);																		
WsWriteXmlBuffer(    __in WS_XML_WRITER* writer,     __in WS_XML_BUFFER* xmlBuffer,     __in_opt WS_ERROR* error);																		
WsWriteXmlBufferToBytes(    __in WS_XML_WRITER* writer,     __in WS_XML_BUFFER* xmlBuffer,     __in_opt const WS_XML_WRITER_ENCODING* encoding,     __in_ecount_opt(propertyCount) const WS_XML_WRITER_PROPERTY* properties,     __in ULONG propertyCount,     __in WS_HEAP* heap,     __deref_out_bcount(*byteCount) void** bytes,     __out ULONG* byteCount,     __in_opt WS_ERROR* error);																		
WsWriteXmlnsAttribute(    __in WS_XML_WRITER* writer,     __in_opt const WS_XML_STRING* prefix,     __in const WS_XML_STRING* ns,     __in BOOL singleQuote,     __in_opt WS_ERROR* error);																		
WsXmlStringEquals(    __in const WS_XML_STRING* string1,     __in const WS_XML_STRING* string2,     __in_opt WS_ERROR* error);																		
WTSCloseServer(IN HANDLE hServer);																		
WTSConnectSessionA(IN ULONG LogonId,IN ULONG TargetLogonId,__in PSTR pPassword,IN BOOL bWait);																		
WTSConnectSessionW(IN ULONG LogonId,IN ULONG TargetLogonId,__in PWSTR pPassword,IN BOOL bWait);																		
WTSDisconnectSession(IN HANDLE hServer,IN DWORD SessionId,IN BOOL bWait);																		
WTSEnumerateProcessesA(IN HANDLE hServer,IN DWORD Reserved,IN DWORD Version,OUT PWTS_PROCESS_INFOA * ppProcessInfo,OUT DWORD * pCount);																		
WTSEnumerateProcessesW(IN HANDLE hServer,IN DWORD Reserved,IN DWORD Version,OUT PWTS_PROCESS_INFOW * ppProcessInfo,OUT DWORD * pCount);																		
WTSEnumerateServersA(__in LPSTR pDomainName,IN DWORD Reserved,IN DWORD Version,__deref_out_ecount(*pCount)  PWTS_SERVER_INFOA * ppServerInfo,__out DWORD * pCount);																		
WTSEnumerateServersW(__in LPWSTR pDomainName,IN DWORD Reserved,IN DWORD Version,__deref_out_ecount(*pCount) PWTS_SERVER_INFOW * ppServerInfo,__out DWORD * pCount);																		
WTSEnumerateSessionsA(IN HANDLE hServer,IN DWORD Reserved,IN DWORD Version,__deref_out_ecount(*pCount)  PWTS_SESSION_INFOA * ppSessionInfo,__out DWORD * pCount);																		
WTSEnumerateSessionsExA(__in HANDLE hServer,__inout DWORD *pLevel,__in DWORD Filter,__deref_out_ecount(*pCount) PWTS_SESSION_INFO_1A * ppSessionInfo,__out DWORD * pCount );																		
WTSEnumerateSessionsExW(__in HANDLE hServer,__inout DWORD *pLevel,__in DWORD Filter,__deref_out_ecount(*pCount) PWTS_SESSION_INFO_1W * ppSessionInfo,__out DWORD * pCount );																		
WTSEnumerateSessionsW(IN HANDLE hServer,IN DWORD Reserved,IN DWORD Version,__deref_out_ecount(*pCount) PWTS_SESSION_INFOW * ppSessionInfo,__out DWORD * pCount);																		
WTSFreeMemory(IN PVOID pMemory);																		
WTSGetActiveConsoleSessionId(    VOID    );																		
WTSLogoffSession(IN HANDLE hServer,IN DWORD SessionId,IN BOOL bWait);																		
WTSOpenServerA(__in LPSTR pServerName);																		
WTSOpenServerExA(__in LPSTR pServerName);																		
WTSOpenServerExW(__in LPWSTR pServerName);																		
WTSOpenServerW(__in LPWSTR pServerName);																		
WTSQuerySessionInformationA(IN HANDLE hServer,IN DWORD SessionId,IN WTS_INFO_CLASS WTSInfoClass,__deref_out_bcount(*pBytesReturned) LPSTR * ppBuffer,__out DWORD * pBytesReturned);																		
WTSQuerySessionInformationW(IN HANDLE hServer,IN DWORD SessionId,IN WTS_INFO_CLASS WTSInfoClass,__deref_out_bcount(*pBytesReturned) LPWSTR * ppBuffer,__out DWORD * pBytesReturned);																		
WTSQueryUserConfigA(__in LPSTR pServerName,__in LPSTR pUserName,IN WTS_CONFIG_CLASS WTSConfigClass,__deref_out_bcount(*pBytesReturned) LPSTR * ppBuffer,__out DWORD * pBytesReturned);																		
WTSQueryUserConfigW(__in LPWSTR pServerName,__in LPWSTR pUserName,IN WTS_CONFIG_CLASS WTSConfigClass,__deref_out_bcount(*pBytesReturned) LPWSTR * ppBuffer,__out DWORD * pBytesReturned);																		
WTSQueryUserToken(ULONG SessionId,PHANDLE phToken);																		
WTSRegisterSessionNotification(HWND hWnd,DWORD dwFlags);																		
WTSRegisterSessionNotificationEx(IN HANDLE hServer,IN HWND hWnd,IN DWORD dwFlags);																		
WTSSendMessageA(IN HANDLE hServer,IN DWORD SessionId,__in_bcount(TitleLength) LPSTR pTitle,IN DWORD TitleLength,__in_bcount(MessageLength) LPSTR pMessage,IN DWORD MessageLength,IN DWORD Style,IN DWORD Timeout,__out DWORD * pResponse,IN BOOL bWait);																		
WTSSendMessageW(IN HANDLE hServer,IN DWORD SessionId,__in_bcount(TitleLength) LPWSTR pTitle,IN DWORD TitleLength,__in_bcount(MessageLength) LPWSTR pMessage,IN DWORD MessageLength,IN DWORD Style,IN DWORD Timeout,__out DWORD * pResponse,IN BOOL bWait);																		
WTSSetUserConfigA(__in LPSTR pServerName,__in LPSTR pUserName,IN WTS_CONFIG_CLASS WTSConfigClass,__in_bcount(DataLength) LPSTR pBuffer,IN DWORD DataLength);																		
WTSSetUserConfigW(__in LPWSTR pServerName,__in LPWSTR pUserName,IN WTS_CONFIG_CLASS WTSConfigClass,__in_bcount(DataLength) LPWSTR pBuffer,IN DWORD DataLength);																		
WTSShutdownSystem(IN HANDLE hServer,IN DWORD ShutdownFlag);																		
WTSTerminateProcess(IN HANDLE hServer,IN DWORD ProcessId,IN DWORD ExitCode);																		
WTSUnRegisterSessionNotification(HWND hWnd);																		
WTSUnRegisterSessionNotificationEx(IN HANDLE hServer,IN HWND hWnd);																		
WTSVirtualChannelClose(IN HANDLE hChannelHandle);																		
WTSVirtualChannelOpen(IN HANDLE hServer,IN DWORD SessionId,__in LPSTR pVirtualName);																		
WTSVirtualChannelOpenEx(IN DWORD SessionId,__in LPSTR pVirtualName,IN DWORD flags);																		
WTSVirtualChannelPurgeInput(IN HANDLE hChannelHandle);																		
WTSVirtualChannelPurgeOutput(IN HANDLE hChannelHandle);																		
WTSVirtualChannelQuery(IN HANDLE hChannelHandle,IN WTS_VIRTUAL_CLASS,OUT PVOID *ppBuffer,OUT DWORD *pBytesReturned);																		
WTSVirtualChannelRead(IN HANDLE hChannelHandle,IN ULONG TimeOut,__out_bcount_part(BufferSize, *pBytesRead) PCHAR Buffer,IN ULONG BufferSize,__out PULONG pBytesRead);																		
WTSVirtualChannelWrite(IN HANDLE hChannelHandle,__in_bcount(Length) PCHAR Buffer,IN ULONG Length,__out PULONG pBytesWritten);																		
WTSWaitSystemEvent(IN HANDLE hServer,IN DWORD EventMask,OUT DWORD * pEventFlags);																		
wvsprintfA(    __out LPSTR,    __in __format_string LPCSTR,    __in va_list arglist);																		
wvsprintfW(    __out LPWSTR,    __in __format_string LPCWSTR,    __in va_list arglist);																		
XcvDataW(__in        HANDLE  hXcv,__in        PCWSTR  pszDataName,__in_bcount_opt(cbInputData)            PBYTE   pInputData,            DWORD   cbInputData,__out_bcount_opt(cbOutputData)            PBYTE   pOutputData,            DWORD   cbOutputData,__out       PDWORD  pcbOutputNeeded,__out_opt   PDWORD  pdwStatus);																		
ZombifyActCtx(    __inout HANDLE hActCtx    );																		